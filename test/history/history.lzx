<canvas>
    <simplelayout/>
    <text text="${lz.History.offset}"/>
    <attribute name="foo" value="null"/>
    <attribute name="bar" value="null"/>
    <handler name="onfoo" args="f">
        Debug.write('external call', f); 
    </handler>
    <handler name="oninit">
        lz.History.setPersist(true);
    </handler>

    <class name="histinputtext" extends="inputtext">
        <handler name="onblur">
            lz.History.save(this.id, 'text', this.getText())
        </handler>
    </class>
    <histinputtext id="hist1">A value</histinputtext>
    <histinputtext id="hist2">Another value</histinputtext>
    <text text="${canvas.foo}"/>
    <text text="${canvas.bar}"/>
    
    <view layout="axis: x">
        <button onclick="lz.History.prev()">Prev</button>
        <button onclick="lz.History.next()">Next</button>
        <button onclick="lz.History.commit()">Save</button>
        <button onclick="lz.History.clear()">Clear all</button>
    </view>

    <button onclick="lz.Browser.loadJS('alert(\'hi folks!\');')">Call javaScript alert in browser</button>

    <!--view id="history">
        <attribute name="persist" value="false"/>
        <attribute name="offset" value="0" type="number"/>
        <attribute name="__lzdirty" value="false"/>
        <attribute name="__lzhistq" value="[]"/>
        <attribute name="__lzcurrstate" value="{}"/>
        <handler name="oninit">
            if (this.persist) {
                if (! this._persistso) {
                    var lu = LZBrowser.getLoadUrlAsLzUrl();
                    lu.query = null;
                    this._persistso = lz.Browser.getPersist('historystate');
                }
                //this.__lzhistq = this._persistso.data;
            }
        </handler>
        <handler name="onhistory" args="o" reference="lz.Browser">
            //Debug.write('onhistory ', o); 
            o *= 1;
            if (! o) o = 0;
            if (o > this.__lzhistq.length - 1) o = this.__lzhistq.length;
            this.setAttribute('offset', o);

            var h = this.__lzhistq[o];
            for (u in h) {
                var o = h[u];
                //Debug.write('restoring state ', o); 
                o.c.setAttribute(o.n, o.v);
            }
        </handler>
        <method name="register" args="who, prop, val">
            // strip off __ so keys can be listed
            var u = who.getUID().substr(2);
            if (val == null) val = who[prop];
            this.__lzcurrstate[u] = {c: who, n: prop, v: val};
            this.__lzdirty = true;
            //Debug.write('set state ',this.__lzcurrstate); 
        </method>
        <method name="save">
            if (! this.__lzdirty) return;
            this.__lzhistq[this.offset] = this.__lzcurrstate;
            //Debug.write('Stored state ', this.__lzcurrstate); 
            this.__lzhistq.length = this.offset + 1;

            if (this.persist) {
                if (! this._persistso) {
                    var lu = LZBrowser.getLoadUrlAsLzUrl();
                    lu.query = null;
                    this._persistso = lz.Browser.getPersist('historystate');
                }
                //Debug.write('_persistso: ', this._persistso); 
                //this._persistso.data = this.__lzhistq;
            }
            
            this.__lzcurrstate = {};
            this.__lzdirty = false;
        </method>
        <method name="move" args="by">
            this.save();
            if (! by) by = 1;
            var o = this.offset + by;
            if (0 >= o) o = 0;
            //Debug.write('Move to: ', o); 
            if (this.__lzhistq.length >= o) lz.Browser.setHistory(o);
        </method>
        <method name="next">
            this.move(1);
        </method>
        <method name="prev">
            this.move(-1);
        </method>
    </view-->
</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
