<library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004, 2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
    <include href="lzunit/lzunit.lzx" />

    <class name="ViewTest" extends="TestCase">
        <view name="tester" bgcolor="yellow" visible="false"/>
        <method name="testSettersOnView">
            <!-- do all the sets -->
            // tester.setAttribute("clip",1);
            tester.setAttribute("x",1);
            tester.setAttribute("y",1);
            // tester.setAttribute("width",1);
            // tester.setAttribute("height",1);
            tester.setAttribute("rotation",1);
            tester.setAttribute("opacity",1);
            // tester.setAttribute("alpha",1);
            tester.setAttribute("visible",1);
            // tester.setAttribute("align",1);
            // tester.setAttribute("valign",1);
            //tester.setAttribute("source",1);
            tester.setAttribute("bgcolor",1);
            // tester.setAttribute("resource",1);
            // tester.setAttribute("clickable",true);
            // tester.setAttribute("pixellock",1);
            // tester.setAttribute("cursor",1);
            // tester.setAttribute("fgcolor",1);
            // tester.setAttribute("font",1);
            // tester.setAttribute("stretches",true);
            // tester.setAttribute("play",1);
            // tester.setAttribute("selected",1);
            // tester.setAttribute("xscale",1);
            // tester.setAttribute("yscale",1);

            <!-- do all the tests -->
            //assertEquals(tester["clip"], tester.clip);
            assertEquals(tester["x"], tester.x);
            assertEquals(tester["y"], tester.y);
            //assertEquals(tester["width"], tester.width);
            //assertEquals(tester["height"], tester.height);
            assertEquals(tester["rotation"], tester.rotation);
            assertEquals(tester["opacity"], tester.opacity);
            //assertEquals(tester["alpha"], tester.alpha);
            assertEquals(tester["visible"], tester.visible);
            //assertEquals(tester["align"], tester.align);
            //assertEquals(tester["valign"], tester.valign);
            //assertEquals(tester["source"], tester.source);
            assertEquals(tester["bgcolor"], tester.bgcolor);
            //assertEquals(tester["resource"], tester.resource);
            //assertEquals(tester["clickable"], tester.clickable);
            //assertEquals(tester["pixellock"], tester.pixellock);
            //assertEquals(tester["cursor"], tester.cursor);
            //assertEquals(tester["fgcolor"], tester.fgcolor);
            //assertEquals(tester["font"], tester.font);
            //assertEquals(tester["stretches"], tester.stretches);
            assertEquals(tester["play"], tester.play);
            //assertEquals(tester["selected"], tester.selected); 

            <!-- do it again with hardcoding -->

            //assertEquals(1, tester["clip"],"clip");
            assertEquals(1, tester["x"],"x");
            assertEquals(1, tester["y"],"y");
            // assertEquals(1, tester["width"],"width");
            // assertEquals(1, tester["height"],"height");
            assertEquals(1, tester["rotation"],"rotation");
            assertEquals(1, tester["opacity"],"opacity");
            // assertEquals(1, tester["alpha"],"alpha");
            assertEquals(1, tester["visible"],"visible");
            // assertEquals(1, tester["align"],"align");
            // assertEquals(1, tester["valign"],"valign");
            // assertEquals(1, tester["source"],"source");
            assertEquals(1, tester["bgcolor"],"bgcolor");
            // assertEquals(1, tester["resource"],"resource");
            // assertEquals(true, tester["clickable"],"clickable");
            // assertEquals(1, tester["pixellock"],"pixellock");
            // assertEquals(1, tester["cursor"],"cursor");
            // assertEquals(1, tester["fgcolor"],"fgcolor");
            // assertEquals(1, tester["font"],"font");
            // assertEquals(true, tester["stretches"],"stretches");
            // assertEquals(1, tester["play"],"play");
            // assertEquals(1, tester["selected"],"selected");
            // assertEquals(1, tester["xscale"],"xscale");
            // assertEquals(1, tester["yscale"],"yscale");

        </method>
    </class>

    <class name="ATextTest" extends="TestCase">
        <text name="tester" bgcolor="yellow">Some Text</text>
          <method name="testSettersOnText">
            // tester.setAttribute("label",1);
            // tester.setAttribute("text","newText");
            // tester.setAttribute("fgcolor",1);
            // tester.setAttribute("font",1);
            // tester.setAttribute("fontsize",1);
            // tester.setAttribute("fontstyle","bold");
            // tester.setAttribute("resize",1);
            // tester.setAttribute("yscroll",1);
            // tester.setAttribute("xscroll",1);
            // tester.setAttribute("selectable",1);
            tester.setAttribute("bgcolor",1);

            //assertEquals(tester["label"],tester.label);
            assertEquals(tester["text"],tester.text);
            //assertEquals(tester["fgcolor"],tester.fgcolor);
            //assertEquals(tester["font"],tester.font);
            assertEquals(tester["fontsize"],tester.fontsize);
            assertEquals(tester["fontstyle"],tester.fontstyle);
            assertEquals(tester["resize"],tester.resize);
            assertEquals(tester["yscroll"],tester.yscroll);
            assertEquals(tester["xscroll"],tester.xscroll);
            //assertEquals(tester["selectable"],tester.selectable);
            assertEquals(tester["bgcolor"],tester.bgcolor);

            // assertEquals(1, tester["label"],"label");
            // assertEquals("newText", mdtester["text"],"text");
            // assertEquals(1, tester["fgcolor"],"fgcolor");
            // assertEquals(1, tester["font"],"font");
            // assertEquals(1, tester["fontsize"],"fontsize");
            // assertEquals("bold", tester["fontstyle"],"fontstyle");
            // assertEquals(1, tester["resize"],"resize");
            // assertEquals(1, tester["yscroll"],"yscroll");
            // assertEquals(1, tester["xscroll"],"xscroll");
            // assertEquals(1, tester["selectable"],"selectable");
            assertEquals(1, tester["bgcolor"],"bgcolor");
    </method>
    </class>
</library>


<!-- 
lfc/controllers/LaszloAnimation.as:LzAnimator.prototype.setters.motion = "setMotion";
lfc/controllers/LaszloAnimation.as:LzAnimator.prototype.setters.to = "setTo";
lfc/controllers/LzAnimatorGroup.as:LzAnimatorGroup.prototype.setters.ease = "setEase";
lfc/controllers/LzAnimatorGroup.as:LzAnimatorGroup.prototype.setters.start = "setStart";

lfc/data/LzDatapointer.as:LzDatapointer.prototype.setters.xpath = "setXPath";
lfc/data/LzDatapointer.as:LzDatapointer.prototype.setters.pointer = "setPointer";
lfc/data/LzDataset.as:LzDataset.prototype.setters.name = -1;
lfc/data/LzDataset.as:LzLocalDataset.prototype.setters.data = -1;
lfc/data/LzDataset.as:LzHTTPDataset.prototype.setters.src = "setURL";
lfc/data/LzDataset.as:LzHTTPDataset.prototype.setters.autorequest = -1;
lfc/data/LzDataset.as:LzHTTPDataset.prototype.setters.requesttype = -1;
lfc/data/LzDataset.as:LzSOAPDataset.prototype.setters.endpoint = "setEndpoint";
lfc/data/LzDataset.as:LzSOAPDataset.prototype.setters.namespace = "setNamespace";
lfc/data/LzDataset.as:LzSOAPDataset.prototype.setters.method = "setMethod";
lfc/data/LzCloneDatapath.as:LzCloneDatapath.prototype.setters.xpath = null;
lfc/data/LzReplicationManager.as:LzReplicationManager.prototype.setters.sortpath = "setOrder";
lfc/data/LzReplicationManager.as:LzReplicationManager.prototype.setters.sortorder = "setComparator";
lfc/data/LzReplicationManager.as:LzReplicationManager.prototype.setters.datapath = "setXPath";
lfc/helpers/LzCommand.as:LzCommand.prototype.setters.key = "setKeys";
lfc/helpers/LzState.as:LzState.prototype.setters.apply = "applyInitial";
lfc/helpers/LzState.as:LzState.prototype.setters.$delegates = "storeDelegates";
lfc/helpers/LzState.as:LzState.prototype.setters.refs = "checkRefs";

lfc/views/LzNewText.as:LzText.prototype.setters.selectable = "setSelectable";
-->
