<!--
  $Id$

  LZUnit Tests

  This is a set of tests that test that LZUnit works as expected.  It
  verifies that things that should be true are true, and that things
  that should signal an error signal an error (it does this by
  intercepting the error and signalling and error if no error or the
  wrong error is signalled).
-->
<library>

  <!--
    Test cases that depend on JavaScript semantics
  -->
  <class name="JavaScriptSemantics" extends="TestCase" semantics="'javascript'">
    <attribute name="foo" value="{zot: 'qux'}" />
    <attribute name="nullvar" value="null" />

    <method name="testJavaScriptSemantics">
      <![CDATA[
      assertTrue("non-empty", "'non-empty' is true");
      assertTrue('0', "'0' is true");

      if (canvas.runtime.indexOf("swf") == -1 ||
          (canvas.runtime.indexOf("swf") == 0 && canvas.runtime >= "swf7")) {
          assertEquals('undefined', String(undefined),
                       "String(undefined) == 'undefined'");
          assertSame(true, isNaN(Number(undefined)),
                     "isNaN(Number(undefined))");
      }

      /* Lot's o' float math corner cases */

      /* NaN */
      assertSame(true, isNaN(0.0 / 0.0),
                   "isNaN(0.0 / 0.0)");
      assertSame(true, isNaN(Math.sqrt(-2.0)),
                   "isNaN(Math.sqrt(-2.0))");
      assertSame(true, isNaN(NaN + NaN),
                   "isNaN(NaN + NaN)");
      assertSame(true, isNaN(NaN + 2.0),
                   "isNaN(NaN + 2.0)");
      assertSame(true, isNaN(NaN * 3.0),
                   "isNaN(NaN * 3.0)");
      assertSame(true, isNaN((0.0 / 0.0) * Infinity),
                   "isNaN((0.0 / 0.0) * Infinity)");
      assertSame(true, isNaN(Math.abs(0.0 / 0.0)),
                   "isNaN(Math.abs(0.0 / 0.0))");
      assertSame(false, NaN > -1.0, "NaN > -1.0");
      assertSame(false, NaN < -1.0, "NaN < -1.0");
      assertSame(false, NaN >= -1.0, "NaN >= -1.0");
      assertSame(false, NaN <= -1.0, "NaN <= -1.0");
      assertSame(false, NaN == -1.0, "NaN == -1.0");
      assertSame(true, NaN != -1.0, "NaN != -1.0");
      assertSame(false, NaN > 0.0, "NaN > 0.0");
      assertSame(false, NaN < 0.0, "NaN < 0.0");
      assertSame(false, NaN >= 0.0, "NaN >= 0.0");
      assertSame(false, NaN <= 0.0, "NaN <= 0.0");
      assertSame(false, NaN == 0.0, "NaN == 0.0");
      assertSame(true, NaN != 0.0, "NaN != 0.0");
      assertSame(false, NaN > 1.0, "NaN > 1.0");
      assertSame(false, NaN < 1.0, "NaN < 1.0");
      assertSame(false, NaN >= 1.0, "NaN >= 1.0");
      assertSame(false, NaN <= 1.0, "NaN <= 1.0");
      assertSame(false, NaN == 1.0, "NaN == 1.0");
      assertSame(true, NaN != 1.0, "NaN != 1.0");
      assertTrue(NaN != 1.0, "NaN != 1.0");


      /* Infinity */
      assertSame(false, NaN > Infinity,
                  "NaN > Infinity");
      assertSame(false, NaN < Infinity,
                  "NaN < Infinity");
      assertSame(false, (0.0 / 0.0) == (0.0 / 0.0),
                  "(0.0 / 0.0) == (0.0 / 0.0)");
      assertEquals(1.0 / 0.0, Infinity, "1.0 / 0.0 == Infinity");
      assertEquals(Infinity, Infinity, "Infinity == Infinity");
      assertEquals((1.0 / 0.0) + 2.0, Infinity, "(1.0 / 0.0) + 2.0 == Infinity");
      assertEquals((1.0 / 0.0) * 0.5, Infinity, "(1.0 / 0.0) * 0.5 == Infinity");
      assertEquals((1.0 / 0.0) + (1.0 / 0.0), Infinity,
                   "(1.0 / 0.0) + (1.0 / 0.0) == Infinity");
      assertEquals((1.0 / 0.0) * (1.0 / 0.0), Infinity,
                   "(1.0 / 0.0) * (1.0 / 0.0) == Infinity");

      assertSame(true, isNaN((1.0 / 0.0) * 0.0),
                 "isNaN((1.0 / 0.0) * 0.0)");
      assertSame(true, isNaN((1.0 / 0.0) - (1.0 / 0.0)),
                 "isNaN((1.0 / 0.0) - (1.0 / 0.0))");
      assertSame(true, isNaN((1.0 / 0.0) / (1.0 / 0.0)),
                 "isNaN((1.0 / 0.0) / (1.0 / 0.0))");

      /* Negative Infinity */
      assertSame(false, NaN > -Infinity,
                  "NaN > -Infinity");
      assertSame(false, NaN < -Infinity,
                  "NaN < -Infinity");
      assertEquals(-1.0 / 0.0, -Infinity, "-1.0 / 0.0 == -Infinity");
      assertEquals(-Infinity, -Infinity, "-Infinity == -Infinity");
      assertEquals((-1.0 / 0.0) + 2.0, -Infinity, "(-1.0 / 0.0) + 2.0 == -Infinity");
      assertEquals((-1.0 / 0.0) * 0.5, -Infinity, "(-1.0 / 0.0) * 0.5 == -Infinity");
      assertEquals((-1.0 / 0.0) + (-1.0 / 0.0), -Infinity,
                   "(-1.0 / 0.0) + (-1.0 / 0.0) == -Infinity");
      assertEquals((-1.0 / 0.0) * (-1.0 / 0.0), Infinity,
                   "(-1.0 / 0.0) * (-1.0 / 0.0) == Infinity");
      assertEquals((-1.0 / 0.0) * (1.0 / 0.0), -Infinity,
                   "(-1.0 / 0.0) * (1.0 / 0.0) == -Infinity");

      assertSame(true, isNaN((-1.0 / 0.0) * 0.0),
                 "isNaN((-1.0 / 0.0) * 0.0)");
      assertSame(true, isNaN((-1.0 / 0.0) - (-1.0 / 0.0)),
                 "isNaN((-1.0 / 0.0) - (-1.0 / 0.0))");
      assertSame(true, isNaN((-1.0 / 0.0) / (-1.0 / 0.0)),
                 "isNaN((-1.0 / 0.0) / (-1.0 / 0.0))");

      /* Negative 0 */
      var negative0 = (-2/Infinity);
      assertEquals(0, negative0, "0 == -0");
      assertEquals(Infinity, 2 / 0, "Infinity == 2 / 0");
      assertEquals(-Infinity, -2 / 0, "-Infinity == -2 / 0");
      assertEquals(0, negative0 * negative0, "-0 * -0 == 0");
      assertEquals(3, 3 + negative0, "3 + -0 == 3");
      assertEquals(negative0, 4 * negative0, "4 * -0 == -0");
      assertEquals(0, 0 - 0, "0 - 0 == 0");
      assertEquals(0, negative0 - negative0, "-0 - -0 == 0");
      assertEquals(negative0, negative0 + negative0, "-0 + -0 == -0");
      assertEquals(0, negative0 + 0, "-0 + 0 == 0");
      assertEquals(0, 0 + negative0, "0 + -0 == 0");
      assertEquals(negative0, negative0 - 0, "-0 - 0 == -0");
      assertEquals(0, -(negative0), "-(-0) == 0");
      assertEquals(0, -(0), "-(0) == 0");
      assertSame(true, isNaN(0 / negative0), "isNaN(0 / -0)");

      /* Henry's checks */
      if (canvas.runtime.indexOf("swf") == -1 ||
          (canvas.runtime.indexOf("swf") == 0 && canvas.runtime >= "swf7")) {
          assertSame(false, undefined < 1, "undefined < 1");
          assertSame(false, undefined > -1, "undefined > -1");
          assertSame(true, isNaN(Math.min(undefined, 1)), "isNaN(Math.min(undefined, 1))");
          assertSame(true, isNaN(Math.max(undefined, 1)), "isNaN(Math.max(undefined, 1))");
          assertSame(true, isNaN(Math.min(undefined, -1)), "isNaN(Math.min(undefined, -1))");
          assertSame(true, isNaN(Math.max(undefined, -1)), "isNaN(Math.max(undefined, -1))");
      }
      else {
          /* 6 skipped here, 2 skipped earlier */
          Debug.write('JavaScriptSemantics: 8 tests skipped for runtime %s', canvas.runtime);
      }

      assertSame(true, isNaN(Infinity * 0), "Infinity * 0 isNaN");
      /* FIXME: [2002-11-16 ptw] (coercion string) broken in Flash? */
//       assertEquals("foo", {toString: function() {return "foo"}},
//           "coercion to string");

      assertSame(foo, foo, "object === itself");

      assertNotSame(null, undefined, "null !== undefined");

      assertNotNull(0, "0 is not null");
      assertNotNull(false, "false is not null");
      assertNotNull(undefined, "undefined is not null");

      assertNotUndefined(0, "0 is not undefined");
      assertNotUndefined(false, "false is not undefined");
      assertNotUndefined(null, "null is not undefined");
      assertNotUndefined(nullvar, "variable initialized to null is not undefined");
      ]]>
    </method>
    <method name="addTests"> 
        this.addTest("testJavaScriptSemantics");
    </method> 
  </class>

  <!--
    Positive test cases that should hold true in either ActionScript
    or JavaScript
  -->
  <class name="Tautologies" extends="TestCase">
    <attribute name="foo" value="{zot: 'qux'}" />
    <attribute name="nullvar" value="null" />

    <method name="testSuccess">
    <![CDATA[
      assertTrue(true, "true is true");
      assertTrue(1, "1 is true");
      assertTrue('1', "'1' is true");
      assertTrue('1492', "'1492' is true");
      assertTrue([], "[] is true");
      assertTrue({}, "{} is true");
      assertSame(true, isNaN(0/0), "0/0 isNaN");
      assertSame(true, isNaN(Infinity - Infinity),
          "Infinity - Infinity isNaN");
      assertSame(true, isNaN(Infinity / Infinity),
          "Infinity / Infinity isNaN");
      assertSame(true, isNaN(Number('random string')), "Number('random string') isNaN");

      assertFalse(false, "false is false");
      assertFalse(null, "null is false");
      assertFalse(0, "0 is false");
      assertFalse('', "'' is false");
      assertFalse(undefined, "undefined is false");
      assertFalse(NaN, "NaN is false");

      assertEquals(null, undefined, "null == undefined");
      assertEquals('foo', 'foo', "'foo' == 'foo'");
      assertEquals(foo, foo, "object == itself");
      assertEquals(1, '1', "1 == '1'");
      assertEquals(1, true, "1 == true");
      assertEquals(true, '1', "true == '1'");
      assertEquals(0, false, "0 == false");
      assertEquals('0', false, "'0' == false");
      assertEquals(42, {valueOf: function() {return 42}},
          "coercion to value");

      assertWithin(0, .001, .01, ".001 within .01 of 0");
      assertWithin(0, Number.MAX_VALUE, Infinity,
          "MAX_VALUE within Infinity of 0");
      assertWithin(0, 0.0, Number.MIN_VALUE, "0.0 within MIN_VALUE of 0");

      assertSame(undefined, undefined, "undefined === undefined");
      assertSame(null, null, "null === null");
      assertSame(1, 1.000000000, "1 === 1.0");
      assertSame(Infinity, 1/0, "Infinity === 1/0");
      assertSame(1/Infinity, 0, "1/Infinity === 0");
      assertSame(Infinity * Infinity, Infinity,
          "Infinity * Infinity === Infinity");
      assertSame(Infinity + Infinity, Infinity,
          "Infinity + Infinity === Infinity");

      assertSame(true, true, "true === true");

      // TODO: [2005-11-02 ptw] (Flash 8) Fails in Flash 8.24
      var flashVersion = lz.Browser.getVersion();
      if ((! flashVersion) || flashVersion < 8 || flashVersion > 10) {
          assertNotSame(NaN, NaN, "NaN !== NaN");
      }

      assertNotSame(NaN, Infinity, "NaN !== Infinity");
      assertNotSame(Infinity, NaN, "Infinity !== NaN");
      assertNotSame('', ' ', "'' !== ' '");
      assertNotSame(true, false, "true !== false");
      assertNotSame(foo, {zot: "qux"}, "object !== similar object");

      assertNull(null, "null is null");
      assertNull(nullvar, "variable initialized to null is null");

      assertNotNull('', "'' is not null");
      assertNotNull([], "[] is not null");
      assertNotNull({}, "{} is not null");

      assertUndefined(undefined, "undefined is undefined");

      assertNotUndefined('', "'' is not undefined");
      assertNotUndefined([], "[] is not undefined");
      assertNotUndefined({}, "{} is not undefined");

      /* is */
      var cases = [
        {test: 'Array Literal', instance: [], constructor: Array},
        {test: 'new Boolean', instance: new Boolean(false), constructor: Boolean},
        {test: 'new Date', instance: new Date(), constructor: Date},
        {test: 'new Number', instance: new Number(1), constructor: Number},
        {test: 'Object Literal', instance: {}, constructor: Object},
        {test: 'new String', instance: new String(""), constructor: String},
        {test: 'boolean Literal', instance: true, constructor: $swf9?Boolean:null },
        {test: 'number Literal', instance: 0, constructor: $swf9?Number:null},
        {test: 'string Literal', instance: "test", constructor: $swf9?String:null},
        {test: 'new lz.node', instance: new lz.node(), constructor: LzNode}
      ];
      var types = [Array, Boolean, Date, Number, String];

      for (var k = 0; k < cases.length; k++) {
        var n = cases[k].test;
        var i = cases[k].instance;
        var c = cases[k].constructor;
        for (var t = 0; t < types.length; t++) {
          if (c) {
            // All objects are is Object
            assertSame(true, i is Object, n + ': ' + Debug.__String(i) + ' is ' + Debug.__String(Object));
          }
          // Check constructor
          if (c && types[t].prototype == c.prototype) {
            assertSame(true, i is types[t], n + ': ' + Debug.__String(i) + ' is ' + Debug.__String(types[t]));
          } else {
            assertSame(false, i is types[t], n + ': ' + Debug.__String(i) + ' is ' + Debug.__String(types[t]));
          }
        }
      }
      /* comparisons that are problematic in swf */
      assertSame(true, -1 < 0, "-1 < 0");
      assertSame(false, 0 < 0, "0 < 0");
      assertSame(false, 1 < 0, "1 < 0");
      assertSame(true, -1 <= 0, "-1 <= 0");
      assertSame(true, 0 <= 0, "0 <= 0");
      assertSame(false, 1 <= 0, "1 <= 0");
      assertSame(false, -1 == 0, "-1 == 0");
      assertSame(true, 0 == 0, "0 == 0");
      assertSame(false, 1 == 0, "1 == 0");
      assertSame(true, -1 != 0, "-1 != 0");
      assertSame(false, 0 != 0, "0 != 0");
      assertSame(true, 1 != 0, "1 != 0");
      assertSame(false, -1 > 0, "-1 > 0");
      assertSame(false, 0 > 0, "0 > 0");
      assertSame(true, 1 > 0, "1 > 0");
      assertSame(false, -1 >= 0, "-1 >= 0");
      assertSame(true, 0 >= 0, "0 >= 0");
      assertSame(true, 1 >= 0, "1 >= 0");
     ]]>
    </method>

    <method name="addTests"> 
        this.addTest("testSuccess");
    </method> 
  </class>

  <!--
    Negative test cases for failure

    Verify that things we expect to fail actually fail

    [Future: generalize and make available to any unit test]
  -->
  <class name="IntentionalFailures" extends="TestCase">

    <attribute name="foo" value="{zot: 'qux'}" />
    <attribute name="expectedFailure" />
    <attribute name="expectedFailures" />

    <method name="construct" args="parent, args">
      this.expectedFailure = null;
      this.expectedFailures = 0;
      super.construct(parent, args);
    </method>

    <!-- Override fail for testing purposes.  We intercept the fail
         call before it outputs an error to the debugger, so we don't
         have to output any info message saying that an error output
         was expected. -->
    <method name="fail" args="message">
      <![CDATA[
        if (typeof(expectedFailure) == "null") {
            return super.fail(message);
        } else if (expectedFailure is Function) {
            if (expectedFailure(message)) {
                expectedFailures++;
                return;
            }
        } else if (expectedFailure == message) {
            expectedFailures++;
            return;
        }
        super.fail(tformat("Wrong failure", expectedFailure,
                   message));
      ]]>
    </method>

    <method name="setUp">
      expectedFailure = null;
      expectedFailures = 0;
    </method>

    <method name="tearDown">
      expectedFailure = null;
    </method>

    <!-- NOTE: [2008-02-11 ptw] Since we do _not_ intercept a
         successful test, we have to test that the expected number of
         errors have occured to determine if one of the intentional
         failures is not occuring. -->
    <method name="testFailure">
      expectedFailure = "This is an intentional failure"
      fail(expectedFailure);
      assertEquals(expectedFailures, 1, "Total number of expected failures");
    </method>

    <method name="testFailures">
    <![CDATA[
      var ef = function(m) {
          return m.indexOf("Expected") == 0;
      }
      expectedFailure = ef;
      assertFalse(true, "Expected");
      assertFalse(1, "Expected");
      assertFalse('1', "Expected");
      assertFalse('1492', "Expected");
      assertFalse([], "Expected");
      assertFalse({}, "Expected");
      expectedFailure = null;
      assertEquals(6, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      assertTrue(false, "Expected");
      assertTrue(null, "Expected");
      assertTrue(0, "Expected");
      assertTrue('', "Expected");
      assertTrue(undefined, "Expected");
      assertTrue(NaN, "Expected");
      expectedFailure = null;
      assertEquals(12, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      assertEquals(null, 'null', "Expected");
      assertEquals('undefined', undefined, "Expected");
      assertEquals(NaN, 0, "Expected");
      assertEquals(1, 'one', "Expected");
      assertEquals(1, 'true', "Expected");
      assertEquals('true', '1', "Expected");
      expectedFailure = null;
      assertEquals(18, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      assertWithin(0, .1, .01, "Expected");
      assertWithin(0, Infinity, Number.MAX_VALUE,
          "Expected");
//       assertWithin(0, Number.MIN_VALUE, 0.0, "Expected");
      /* TODO: [2002-11-17 ptw] Above broken, try a similar small
        number */
      assertWithin(0, 1e-307, 0.0, "Expected");
      expectedFailure = null;
      assertEquals(21, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      assertNotSame(undefined, undefined, "Expected");
      assertNotSame(null, null, "Expected");
      assertNotSame(1, 1.000000000, "Expected");
      assertNotSame(Infinity, 1/0, "Expected");
      assertNotSame(1/Infinity, 0, "Expected");
      expectedFailure = null;
      assertEquals(26, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      assertNotSame(true, true, "Expected");
      expectedFailure = null;
      assertEquals(27, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      // TODO: [2005-11-02 ptw] (Flash 8) Fails in Flash 8.24
      var flashVersion = lz.Browser.getVersion();
      var nexp = 27;


      if ((! flashVersion) || flashVersion < 8 || flashVersion > 10) {
          nexp++;
          assertSame(NaN, NaN, "Expected");
      }
      nexp++;
      assertSame(NaN, Infinity, "Expected");
      nexp++;
      assertSame(Infinity, NaN, "Expected");
      nexp++;
      assertSame('', ' ', "Expected");
      nexp++;
      assertSame(true, false, "Expected");
      nexp++;
      assertSame(foo, {zot: "qux"}, "Expected");
      expectedFailure = null;
      assertEquals(nexp, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      nexp++;
      assertNotNull(null, "Expected");
      expectedFailure = null;
      assertEquals(nexp, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      nexp++;
      assertNull('', "Expected");
      nexp++;
      assertNull([], "Expected");
      nexp++;
      assertNull({}, "Expected");
      expectedFailure = null;
      assertEquals(nexp, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      nexp++;
      assertNotUndefined(undefined, "Expected");
      expectedFailure = null;
      assertEquals(nexp, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;

      nexp++;
      assertUndefined('', "Expected");
      nexp++;
      assertUndefined([], "Expected");
      nexp++;
      assertUndefined({}, "Expected");
      expectedFailure = null;
      assertEquals(nexp, expectedFailures, "Total number of expected failures");
      expectedFailure = ef;
    ]]>
    </method>

    <method name="addTests"> 
        this.addTest("testFailure");
        this.addTest("testFailures");
    </method> 
  </class>

  <!--
    Negative test cases for errors
  -->
  <class name="IntentionalErrors" extends="TestCase" semantics="'javascript'">

    <attribute name="expectedError" />
    <attribute name="expectedErrors" />

    <method name="construct" args="parent, args">
      this.expectedError = null;
      this.expectedErrors = 0;
      super.construct(parent, args);
    </method>

    <!-- Override error for testing purposes -->
    <method name="error" args="message=''">
      <![CDATA[
        if (typeof(expectedError) == "null") {
            return super.error(message);
        } else if (typeof(expectedError) == "function") {
            if (expectedError(message)) {
                expectedErrors++;
                Debug.info("Testing error system: '%0.24s' (above) is expected as part of this test", message);
                return;
            }
        } else if (expectedError == message) {
            expectedErrors++;
            Debug.info("Testing error system: '%0.24s' (above) is expected as part of this test", message);
            return;
        }
        super.error(format("Wrong error", expectedError, message));
      ]]>
    </method>

    <attribute name="nonFunction" value="{ nonMethod: 3 }" />

    <method name="setUp">
      expectedError = null
      expectedErrors = 0;
    </method>

    <method name="tearDown">
      expectedError = null;
    </method>

    <method name="testError">
      expectedError = "This is an intentional error";
      Debug.debug("Testing error system: '%0.24s' will NOT be output as an error (even though you will get a message saying it is expected)", expectedError);
      error(expectedError);
      assertEquals(1, expectedErrors, "Total number of expected errors");
    </method>

    <method name="testUndefinedErrors">
    <![CDATA[
      expectedError = function(m) {
          return m.indexOf(arguments.callee.expectedMatch) != -1;
      }
      expectedError.toString = function () {
          return '/.*' + this.expectedMatch + '.*/';
      }

      expectedError.expectedMatch = "testing";
      var msg = "testing: 1, 2, 3";
      Debug.debug("Testing error system: '%0.24s' will NOT be output as an error (even though you will get a message saying it is expected)", msg);
      error(msg);
      assertEquals(1, expectedErrors, "Total number of expected errors");

      if ($swf9) {
        // not yet
      } else {
        expectedError.expectedMatch = "This is a";
        $reportSourceWarning(0, 0, "This is a test", true);
        assertEquals(2, expectedErrors, "Total number of expected errors");
      }

      // Only test errors that are caught by the debug compiler for each runtime
      if ($dhtml) {
        // There are none for the dhtml compiler at present
      } else if ($swf9) {
        // There are none for the swf9 compiler
      } else {
          expectedError.expectedMatch = "flooglesnort";
          // TODO: [2002-11-16 ptw] below currently signals two errors
          undefined.flooglesnort;
          assertEquals(4, expectedErrors, "Total number of expected errors");

          nonFunction.flooglesnort;
          assertEquals(5, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "call to undefined function";
          flooglesnort();
          assertEquals(6, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "call to non-function";
          nonFunction();
          assertEquals(7, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "call to undefined method";
          nonFunction.flooglesnort();
          assertEquals(8, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "call to non-method";
          nonFunction.nonMethod();
          assertEquals(9, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "undefined variable";
          this.devnull = flooglesnort;
          assertEquals(10, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "undefined object";
          undefined['flooglesnort'];
          assertEquals(11, expectedErrors, "Total number of expected errors");

          expectedError.expectedMatch = "undefined property";
          nonFunction[undefined] = 'this is an error';
          assertEquals(12, expectedErrors, "Total number of expected errors");
      }
      ]]>
    </method>
    <method name="addTests"> 
        this.addTest("testError");
        this.addTest("testUndefinedErrors");
    </method> 
  </class>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

