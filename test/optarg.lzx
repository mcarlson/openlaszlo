<!-- Simple compiler test for default function initializers, and ...rest notation -->
<canvas debug="true">
  <simplelayout />
  <text name="t" bgcolor="#ccffcc">Hello OpenLaszlo!</text>
  <text name="stats" bgcolor="#88ffff">status bar</text>
<script>
var npass = 0;
var nfail = 0;
var ntotal = 0;

function check(x, y) {
   Debug.write(x);
   ntotal++;
   if (x != y) {
      Debug.write('Got: ' + x + ', expected: ' + y);
      t.setText("ERRORS: see debug console");
      nfail++;
   } else {
      npass++;
   }
   stats.setText("" + npass + "/" + ntotal + " tests passed");
}

function runrest(arr) {
  var xx = new String("");
  for (var i=0; i&lt;arr.length; i++) {
     if (xx.length != 0) {
       xx += ',';
     }
     xx += arr[i];
  }
  return xx;
}

function f0() {
  return 'f0()';
}
function f00(...rest) {
  return 'f00(' + runrest(rest) + ')';
}

function f000(x=null) {
  return 'f000(' + x + ')';
}

function f0000(x=null, ...rest) {
  var restcomma = rest.length > 0 ? ',' : '';
  return 'f0000(' + x + restcomma + runrest(rest) + ')';
}

function f1(x) {
  return 'f1(' + x + ')';
}

function f11(x, ...rest) {
  var restcomma = rest.length > 0 ? ',' : '';
  return 'f11(' + x + restcomma + runrest(rest) + ')';
}

function f2(x=null, y=null) {
  return 'f2(' + x + ',' + y + ')';
}

function f22(x, y=null) {
  return 'f22(' + x + ',' + y + ')';
}

function f4(w, x, y=null, z=null) {
  return 'f4(' + w + ',' + x + ',' + y + ',' + z + ')';
}

function f5(w, x, y=null, z=null, ...rest) {
  var restcomma = rest.length > 0 ? ',' : '';
  return 'f5(' + w + ',' + x + ',' + y + ',' + z + restcomma + runrest(rest) + ')';
}

function f6(x=1,y=2) {
  return x+y;
}

// These can be uncommented to check error cases.
//function xx1(...x, y) { }
//function xx2(...x, ...y) { }
//function xx3(...x, y = null) { }
//function xx4(x = null, ...y, z) { }
//function xx5(x = null, z) { }
// function xx6(x = null, z, w = null) { }

function testit() {

check("hello there", "hello there");
check("expect a mismatch", "ignore this error");
t.setText("Run this test in debug mode to see output");
npass = 0;
nfail = 0;
ntotal = 0;

check(f0(), 'f0()')
check(f00(), 'f00()')
check(f00(0), 'f00(0)')
check(f00(2,3,4), 'f00(2,3,4)')
check(f000(), 'f000(null)')
check(f000(3), 'f000(3)')
check(f0000(), 'f0000(null)')
check(f0000(7), 'f0000(7)')
check(f0000(7,11), 'f0000(7,11)')
check(f1(1), 'f1(1)')
check(f11(11), 'f11(11)')
check(f11(11,12), 'f11(11,12)')
check(f2(), 'f2(null,null)')
check(f2(2), 'f2(2,null)')
check(f2(2,3), 'f2(2,3)')
check(f22(2), 'f22(2,null)')
check(f22(2,3), 'f22(2,3)')
check(f4(4,5), 'f4(4,5,null,null)')
check(f4(4,5,6), 'f4(4,5,6,null)')
check(f4(4,5,6,7), 'f4(4,5,6,7)')
check(f5(5,6), 'f5(5,6,null,null)')
check(f5(5,6,7), 'f5(5,6,7,null)')
check(f5(5,6,7,8), 'f5(5,6,7,8)')
check(f5(5,6,7,8,9), 'f5(5,6,7,8,9)')
check(f6(), 3)
check(f6(2), 4)
check(f6(2,3), 5)
check(f6(2,3,4), 5)
}

testit()

</script>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2007-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
</canvas>
