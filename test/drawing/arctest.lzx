<canvas>


<?ignore
    <script><![CDATA[

        LzDrawView.prototype.arc = function(x, y, radius, startAngle, endAngle, clockwise) {

            var sx = x + radius*Math.cos(startAngle);
            var sy = y + radius*Math.sin(2 * Math.PI - startAngle);

            startAngle *= 180/Math.PI;
            endAngle *= 180/Math.PI;
            var arc = clockwise == true ? startAngle - endAngle : endAngle - startAngle;

            this.moveTo(sx, sy);

            return this._drawArc(x, y, radius, arc, startAngle);
        }

        LzDrawView.prototype._drawArc = function(x, y, radius, arc, startAngle, yRadius){
            if (arguments.length<5) {
                return;
            }
            // if yRadius is undefined, yRadius = radius
            if (yRadius == undefined) {
                yRadius = radius;
            }
            // Init vars
            var segAngle, theta, angle, angleMid, segs,bx, by, cx, cy;
            // no sense in drawing more than is needed :)
            if (Math.abs(arc)>360) {
                arc = 360;
            }
            // Flash uses 8 segments per circle, to match that, we draw in a maximum
            // of 45 degree segments. First we calculate how many segments are needed
            // for our arc.
            segs = Math.ceil(Math.abs(arc)/45);
            // Now calculate the sweep of each segment
            segAngle = arc/segs;
            // The math requires radians rather than degrees. To convert from degrees
            // use the formula (degrees/180)*Math.PI to get radians. 
            theta = -(segAngle/180)*Math.PI;
            // convert angle startAngle to radians
            angle = -(startAngle/180)*Math.PI;

            // if our arc is larger than 45 degrees, draw as 45 degree segments
            // so that we match Flash's native circle routines.
            if (segs>0) {
                // Loop for drawing arc segments
                for (var i = 0; i<segs; i++) {
                    // increment our angle
                    angle += theta;
                    // find the angle halfway between the last angle and the new
                    angleMid = angle-(theta/2);
                    // calculate our end point
                    bx = x+Math.cos(angle)*radius;
                    by = y+Math.sin(angle)*yRadius;
                    // calculate our control point
                    cx = x+Math.cos(angleMid)*(radius/Math.cos(theta/2));
                    cy = y+Math.sin(angleMid)*(yRadius/Math.cos(theta/2));
                    // draw the arc segment
                    this.quadraticCurveTo(cx, cy, bx, by);
                }
            }
            // In the native draw methods the user must specify the end point
            // which means that they always know where they are ending at, but
            // here the endpoint is unknown unless the user calculates it on their 
            // own. Lets be nice and let save them the hassle by passing it back. 
            return {x:bx, y:by};

        }
    ]]></script>
?>

    <constantlayout axis="x" value="200"/>

    <simplelayout axis="y" spacing="20" inset="200"/>

    <drawview name="dv" height="200" width="200" bgcolor="0xDDDDDD">

        <method name="drawTestArc">
            var start = canvas.start.slider.value;
            var end = canvas.end.slider.value;
            var cw = canvas.cw.cb.value;
            var dtor = Math.PI/180; 


            this.clear();

            //---
            //draw the circle that is contains in our bounds 
            //---
            this.beginPath();
            this.arc(this.width/2, this.height/2, this.width/2, 
                  0 * dtor, 360, cw);

            this.strokeStyle = 0xAAAAAA;
            this.lineWidth = 1;

            this.stroke();


            //---
            //draw the circle for which the arc function is drawing a 
            //a segment of
            //---            
            this.beginPath();
            this.arc(this.width/2, this.height/2, this.width/2, 
                 start * dtor, 360, cw);

            this.strokeStyle = 0x000000;
            this.lineWidth = 1;

            this.stroke();


            //---
            // draw the segment itself
            //---            
            this.beginPath();
            this.arc(this.width/2, this.height/2, this.width/2, 
                 start * dtor, end * dtor, cw);
                     
            this.strokeStyle = 0xFF0000;
            this.lineWidth = 3;
            this.stroke();

        </method>

    </drawview>


    <view name="start">
        <text>Start Angle</text>
        <slider name="slider" x="80" minvalue="-360" maxvalue="360">
            <method event="onvalue">
                canvas.dv.drawTestArc();
            </method>
        </slider>
    </view>
    <view name="end">
        <text>End Angle</text>
        <slider name="slider" x="80" minvalue="-360" maxvalue="360">                
            <method event="onvalue">
                canvas.dv.drawTestArc();
            </method>
        </slider>
    </view>
    <view name="cw">
        <text>Clockwise</text>
        <checkbox name="cb" x="80">
            <method event="onvalue">
                canvas.dv.drawTestArc();
            </method>
        </checkbox>
    </view>

</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2007 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
