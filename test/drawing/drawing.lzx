<canvas>
    <resource name="alphapng" src="../resources/png/alphagrad.png"/>
    <wrappinglayout axis="x"/>

    <drawview width="205" height="230" onmousedown="this.dragger.apply()" onmouseup="this.dragger.remove()" bgcolor="green">
        <dragstate name="dragger"/>
        <handler name="oncontext">
            this.moveTo(100, 100);
            this.lineTo(100, 200);
            this.quadraticCurveTo(150, 250, 200, 200);
            this.closePath();

            this.fillStyle = '#0000ff';
            this.globalAlpha = .5;
            this.fill();
            
            this.strokeStyle = '#ffff00';
            this.lineWidth = 5;
            this.stroke();
            
            var g = this.createRadialGradient(100, 100, .7, 200, 200, 100);
            this.globalAlpha = 0;
            g.addColorStop(0, '#000000');
            this.globalAlpha = 1;
            g.addColorStop(1, '#ffffff');
            this.fillStyle = g;
            this.fill();

            this.strokeStyle = 0x000000;
            this.lineWidth = 0;
            this.stroke();

            this.beginPath();
            this.lineTo(75, 0);
            this.lineTo(75, 75);
            this.lineTo(0, 75);
            this.lineTo(0, 0);
            this.closePath();
            
            var g = this.createLinearGradient(0,0,75,75)
            this.globalAlpha = 0;
            g.addColorStop(0, '#000000');
            this.globalAlpha = 1;
            g.addColorStop(1, '#ffffff');
            this.fillStyle = g;
            this.fill();
        </handler>
    </drawview>

<!-- test new arc, rect and oval methods -->
    <drawview width="200" height="200">
        <handler name="oncontext">
            this.beginPath();
            this.arc(100, 100, 50, 0, Math.PI * .5, true);

            this.oval(20, 120, 10);
            this.oval(75, 120, 10, 40);

            this.rect(10, 30, 30, 50);
            this.rect(10, 150, 50, 40, 10);

            this.stroke();

            // Character 1
            this.beginPath();
            this.arc(100,37,13,Math.PI/7,-Math.PI/7,false);
            this.lineTo(97,37);
            this.fill();
        </handler>
    </drawview>

<!-- test new bezierCurveTo method  - from http://developer.mozilla.org/samples/canvas-tutorial/2_6_canvas_beziercurveto.html -->
    <drawview width="200" height="200">
        <handler name="oncontext">
            this.beginPath();
            this.moveTo(75,40);
            this.bezierCurveTo(75,37,70,25,50,25);
            this.bezierCurveTo(20,25,20,62.5,20,62.5);
            this.bezierCurveTo(20,80,40,102,75,120);
            this.bezierCurveTo(110,102,130,80,130,62.5);
            this.bezierCurveTo(130,62.5,130,25,100,25);
            this.bezierCurveTo(85,25,75,37,75,40);
            this.fill();
        </handler>
    </drawview>

    <class name="resizedrawview" extends="drawview" onmousedown="this.resizer.apply()" onmouseup="this.resizer.remove()">
        <resizestate name="resizer"/>
        <handler name="oncontext" method="redraw"/>
        <handler name="onwidth" method="redraw"/>
        <handler name="onheight" method="redraw"/>
        <!-- Override redraw() -->
        <method name="redraw" args="ignore=null">
            if (! this.context) return;
        </method>
    </class>
    
    <resizedrawview width="200" height="200">
        <method name="redraw" args="ignore=null">
            if (! this.context) return;
            var width = this.width;
            var height = this.height;

            this.clear();
            this.beginPath();
            this.rect(0,0,width,height, null);
            this.fillStyle = 0xff0000;
            this.fill();

            this.beginPath();
            this.moveTo(0,0);
            this.lineTo(width, height * .5);
            this.lineTo(0, height);
            this.lineTo(0, 0);
            this.fillStyle = 0;
            this.fill();
            this.clipButton();
        </method>
    </resizedrawview>

    <resizedrawview clip="true">
        <text>clip="true" must be set on the class for mouse events to work in swf9/10...</text>
        <method name="redraw" args="ignore=null">
            if (! this.context) return;
            var width = this.width;
            var height = this.height;

            this.clear();
            this.beginPath();
            this.moveTo(0,0);
            this.lineTo(width, height * .5);
            this.lineTo(0, height);
            this.lineTo(0, 0);
            this.clipPath();

            this.beginPath();
            this.rect(0,0,width,height, null);
            this.fillStyle = 0xff0000;
            this.fill();
        </method>
    </resizedrawview>

    <drawview width="200" height="200" onmousedown="this.dragger.apply()" onmouseup="this.dragger.remove()">
        <dragstate name="dragger"/>
        <attribute name="angle" value="45" type="number"/>
        <handler name="onangle" method="redraw"/>
        <handler name="oncontext" method="redraw"/>
        <method name="redraw" args="ignore">
            if (! this.context) return;
            this.clear();
            this.drawImage('alphapng', 100, 100, 100, 20, this.angle * (Math.PI / 180));    
        </method>
        <handler name="onclick">
            this.animate('angle', 180, 2000, true);
        </handler>
    </drawview>

    <!-- this snippet demonstrates LPP-4001. It gives an error in dhtml, 
         this.context has no properties. -->
    <drawview width="200" height="200">
        <handler name="onwidth">
            <![CDATA[
            this.drawStructure();
            ]]>
        </handler>        
        <method name="drawStructure">
            if (this.isinited) this.clear();
        </method>
    </drawview>

    <view name="lpp4128">
        <view width="100" height="100" x="5" y="5">
        <drawview name="dv1" width="${parent.width}" height="${parent.height}">
            <handler name="oncontext">
            Debug.write('constrained', this.width, this.height);
            this.strokeStyle = '#FF0000';
            this.fillStyle = '#00FFFF';
            this.beginPath();
            this.moveTo(0,0);
            this.lineTo(this.width, 0);
            this.lineTo(this.width, this.height);
            this.lineTo(0, this.height);
            this.closePath();
            this.fill();
            this.stroke();
            </handler>
        </drawview>
        </view>

        <drawview name="dv2" width="100" height="100" x="110" y="5">
            <handler name="oncontext">
            Debug.write('explicit size', this.width, this.height);
            this.fillStyle = '#00FF00';
            this.strokeStyle = '#0000FF';
            this.beginPath();
            this.moveTo(0,0);
            this.lineTo(this.width, 0);
            this.lineTo(this.width, this.height);
            this.lineTo(0, this.height);
            this.closePath();
            this.fill();
            this.stroke();
            </handler>
        </drawview>
    </view>

    <drawview name="lpp8780" width="60" height="60" crisplines="true">
        <handler name="oncontext" method="redraw"/>
        <method name="redraw" args="context">
            this.beginPath();
            this.rect(10,10,40,40);
            this.stroke();
        </method>
    </drawview>

    <drawview name="lpp8779" width="150" height="150">
        <handler name="oncontext" method="redraw"/>
        <method name="redraw" args="context">
            // this also tests LPP-8778 - Drawview.fillRect() doesn't work properly in swf when alpha is applied

            // from https://developer.mozilla.org/en/Canvas_tutorial/Transformations#A_save_and_restore_canvas_state_example
            this.fillRect(0,0,150,150);   // Draw a rectangle with default settings  
            this.save();                  // Save the default state  
            
            this.fillStyle = '#09F'       // Make changes to the settings  
            this.fillRect(15,15,120,120); // Draw a rectangle with new settings  
            
            this.save();                  // Save the current state  
            this.fillStyle = '#FFF'       // Make changes to the settings  
            this.globalAlpha = 0.5;      
            this.fillRect(30,30,90,90);   // Draw a rectangle with new settings  
            this.restore();               // Restore previous state  
            this.fillRect(45,45,60,60);   // Draw a rectangle with restored settings  
            
            this.restore();               // Restore original state  
            this.fillRect(60,60,30,30);   // Draw a rectangle with restored settings  
        </method>
    </drawview>
    
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
</canvas>
