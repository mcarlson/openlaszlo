<canvas debug="true">
    <view name="stateview" width="300" height="200" >
        <attribute name="myapply" value="true" />
        <state >
            <attribute name="applied" value="parent.myapply" when="once" />
            <attribute name="bgcolor" value="green" type="color" />
            <text name="title">This is a view with states</text>
        </state>
        <state name="state1"
               onapplied="Debug.debug('%w: %s', this, this.applied?'applied':'removed')" >
            <animator start="true" attribute="y" to="200" duration="1500" />
            <animator start="true" attribute="width" to="50" duration="1500" relative="true"/>
            <text y="${parent.title.height}">I'm animating!</text>
        </state>
        <state name="state2" pooling="true"
               onapplied="Debug.debug('%w: %s', this, this.applied?'applied':'removed')" >
            <view name="redContainer" width="${parent.width}" y="50">
                <view name="redOne"   bgcolor="red" height="22" options="releasetolayout;"/>
                <view name="redTwo"   bgcolor="red" height="22" options="releasetolayout;"/>
                <view name="redThree" bgcolor="red" height="22" options="releasetolayout;"/>
                <resizelayout axis="x" spacing="10"/>
            </view>
            <!--This doesn't get compiled as a reference at the moment-->
            <attribute name="x" value="${this.y}"/>
            <attribute name="width" value="250"/>
        </state>
        <state name="state3" onapply="this.parent.doMyApply()"
               onapplied="Debug.debug('%w: %s', this, this.applied?'applied':'removed')" >
            <text text="This is the mean state that kills others" y="22" />
            <attribute name="y" value="0" />
            <method name="doMyApply" >
                this.state1.remove();
                this.state2.remove();
                this.state3.remove();
            </method>
        </state>
    </view>
    <view x="${stateview.width}" width="100%" oninit="Debug.debug('got inited' )">
        <button text="state1" onclick="stateview.state1.apply()"/>
        <button text="state2" onclick="stateview.state2.apply()"/>
        <button text="state3" onclick="stateview.state3.apply()" />
        <text multiline="true" width="100%">
           These last two buttons need some explanation.<br/>
           lookForViews attempts to locate a view that is not created until state2 is applied.<br/>
           + should return errors and undefined if clicked before state2<br/>
           + should return true if cleicked after state2<br/>
           + should return false if clicked after state2 and state3<br/>
           + Should return errors and undefined if clicked after "destroy state2"<br/>
           These were added to verify that pooled states and their views are fully destroyed after LzState.destroy();
        </text>
        <button text="lookForViews">
          <handler name="onclick">
            Debug.debug("Should be %s: %s",
              stateview.state2.applied,
              stateview.redContainer.visible)
          </handler>
        </button>
        <button text="destroy state2" onclick="stateview.state2.destroy();" />
        <simplelayout axis="y" spacing ="4" />
    </view>
</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2006, 2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
