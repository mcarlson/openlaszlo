<!-- 
/* X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.          *
* Use is subject to license terms.                                        *
* X_LZ_COPYRIGHT_END ******************************************************/
-->
<canvas>
    <include href="eventtester.lzx"/>

    <simplelayout axis="x" spacing="4"/>

    <view name="mousetester" clickable="true">
        <simplelayout/>
        <text text="mouse events turn green"/> 
        <eventtester eventname="onmousedown"/>
        <eventtester eventname="onmouseup"/>
        <eventtester eventname="onmouseover"/>
        <eventtester eventname="onmouseout"/>
        <eventtester eventname="onclick"/>
        <eventtester eventname="ondblclick"/>
        <eventtester eventname="onmousedragin"/>
        <eventtester eventname="onmousedragout"/>
        <eventtester eventname="onmouseupoutside"/>
    </view>
    <view>
        <simplelayout/>
        <text text="global mouse events turn green"/> 
        <eventtester eventname="onmousedown" reference="lz.GlobalMouse" label="global onmousedown"/>
        <eventtester eventname="onmouseup" reference="lz.GlobalMouse" label="global onmouseup"/>
        <eventtester eventname="onmouseover" reference="lz.GlobalMouse" label="global onmouseover"/>
        <eventtester eventname="onmouseout" reference="lz.GlobalMouse" label="global onmouseout"/>
        <eventtester eventname="onclick" reference="lz.GlobalMouse" label="global onclick"/>
        <eventtester eventname="ondblclick" reference="lz.GlobalMouse" label="global ondblclick"/>
        <eventtester eventname="onmousedragin" reference="lz.GlobalMouse" label="global onmousedragin"/>
        <eventtester eventname="onmousedragout" reference="lz.GlobalMouse" label="global onmousedragout"/>
        <eventtester eventname="onmouseupoutside" reference="lz.GlobalMouse" label="global onmouseupoutside"/>
        <eventtester eventname="onmousemove" reference="lz.GlobalMouse" verbose="false" label="global onmousemove"/>
    </view>
    <view>
        <simplelayout/>
        <text text="keyboard events turn green"/> 
        <eventtester eventname="onkeydown" reference="lz.Keys"/>
        <eventtester eventname="onkeyup" reference="lz.Keys"/>
        <eventtester eventname="onkeydown" reference="lz.Keys" label="Shift key down" test="function (k) { if (k == 16) return true; }"/>
        <eventtester eventname="onkeydown" reference="lz.Keys" label="Control key down" test="function (k) { if (k == 17) return true; }"/>
        <eventtester eventname="onmousewheeldelta" reference="lz.Keys">
            <handler name="onvalue" args="v">
                if (v == null) return;
                this.setAttribute('x', this.x + v);
            </handler>
        </eventtester>
    </view>
    <view>
        <simplelayout/>
        <text text="inputtext events turn green"/> 
        <inputtext id="input" bgcolor="yellow" clickable="true" width="100" height="30"/>
        <eventtester eventname="onkeydown" reference="input"/>
        <eventtester eventname="onkeyup" reference="input"/>
        <eventtester eventname="onfocus" reference="input"/>
        <eventtester eventname="onblur" reference="input"/>
        <eventtester eventname="onmousedown" reference="input"/>
        <eventtester eventname="onmouseup" reference="input"/>
        <eventtester eventname="onmouseover" reference="input"/>
        <eventtester eventname="onmouseout" reference="input"/>
        <eventtester eventname="onclick" reference="input"/>
        <eventtester eventname="ondblclick" reference="input"/>
        <eventtester eventname="onmouseupoutside" reference="input"/>
    </view>


</canvas>
