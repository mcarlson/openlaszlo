<library>

  <include href="lzunit" />

  <class name="TestXmlParser" extends="TestCase" >
    <method name="addTests" >
        // test LzDataElement.stringToLzData
        this.addTest("testXmlParser");
        // test native xml-parser
        this.addTest("testValidXml");
        this.addTest("testInvalidXml");
        // test whitespace handling in parser
        this.addTest("testWhitespace");
    </method>
    <method name="testXmlParser" ><![CDATA[
        Debug.info("BEGIN :: debug-warnings are intended for this test");
        assertNull(LzDataElement.stringToLzData(null));
        assertNull(LzDataElement.stringToLzData(""));
        assertNull(LzDataElement.stringToLzData("a"));
        assertNull(LzDataElement.stringToLzData("<a"));
        assertNull(LzDataElement.stringToLzData("a>"));
        assertNull(LzDataElement.stringToLzData("<a>"));
        assertNull(LzDataElement.stringToLzData("<a></b>"));
        assertNull(LzDataElement.stringToLzData("<>"));
        assertNull(LzDataElement.stringToLzData("</>"));
        assertNull(LzDataElement.stringToLzData("<>/>"));
        assertNull(LzDataElement.stringToLzData("<a x=/>"));
        assertNull(LzDataElement.stringToLzData("<a x='<'/>"));
        assertNull(LzDataElement.stringToLzData("<a><![CDATA[</a>"));
        assertNull(LzDataElement.stringToLzData("<a><!" + "--</a>"));
        assertNull(LzDataElement.stringToLzData("<?xml version=\"1.0\" >"));
        assertNull(LzDataElement.stringToLzData("<a><b:c xmlns:b=\"abc\"></c></a>"));
        assertNull(LzDataElement.stringToLzData("<a><b:c xmlns:b=\"abc\"></d:c></a>"));
        if ($as2) {
            // invalid xml, but parsed by flash
        } else if ($as3) {
            // invalid xml, but parsed by flash
        } else {
            assertNull(LzDataElement.stringToLzData("<0a />"));
            assertNull(LzDataElement.stringToLzData("<a>&foo;</a>"));
        }
        if ($as2) {
            // invalid xml, but parsed by flash
        } else {
            assertNull(LzDataElement.stringToLzData("<a/><a/>"));
            assertNull(LzDataElement.stringToLzData("<//>"));
            assertNull(LzDataElement.stringToLzData("<a:b></a:b>"));
            if ($dhtml) {
                var isSafari = lz.embed.browser.isSafari;
            } else {
                var isSafari = false;
            }
            if (! isSafari) {
                // invalid xml, but parsed by Safari
                assertNull(LzDataElement.stringToLzData("<a><b:c xmlns:b=\"\"/></a>"));
            }
            assertNull(LzDataElement.stringToLzData("<?xml version=\"1.0\" ?>"));
            assertNull(LzDataElement.stringToLzData("<?xml version=\"1.0\" ?><?xml version=\"1.0\" ?>"));
        }
        Debug.info("END :: debug-warnings are intended for this test");
    ]]></method>
    <method name="testValidXml" ><![CDATA[
        var valid:Array = ["<a/>"];
        for (var i:int = 0; i < valid.length; ++i) {
            var s:String = valid[i];
            try {
                var parsed:* = LzXMLParser.parseXML(s, true, true);
                assertNotNull(parsed);
            } catch (e) {
                // some runtimes throw exceptions
                Debug.warn("runtime error %w for '%s'", e, s);
                assertTrue(false);
            }
        }
    ]]></method>
    <method name="testInvalidXml"><![CDATA[
        Debug.info("BEGIN :: debug-infos are intended for this test");
        var invalid:Array = [null, "", "simple string", "<a/><a/>"];
        for (var i:int = 0; i < invalid.length; ++i) {
            var s:String = invalid[i];
            try {
                var parsed:* = LzXMLParser.parseXML(s, true, true);
                assertNull(parsed);
            } catch (e) {
                // some runtimes throw exceptions
                Debug.info("runtime error %w for '%s'", e, s);
                assertTrue(true);
            }
        }
        Debug.info("END :: debug-infos are intended for this test");
    ]]></method>
    <method name="testWhitespace"><![CDATA[
        for (var i:int = 0; i < 2; ++i) {
            var s:String = "<a> content </a>";
            var trimwhite:Boolean = (i != 0);
            var node:LzDataElement = lz.DataElement.stringToLzData(s, trimwhite);
            assertNotNull(node);
            var text:LzDataText = node.getFirstChild() cast LzDataText;
            assertNotNull(text);
            assertEquals([" content ", "content"][i], text.data);
        }

        for (var i:int = 0; i < 2; ++i) {
            var s:String = "<a>  </a>";
            var trimwhite:Boolean = (i != 0);
            var node:LzDataElement = lz.DataElement.stringToLzData(s, trimwhite);
            assertNotNull(node);
            // full whitespace text nodes are always ignored
            assertEquals(0, node.childNodes.length);
        }
    ]]></method>
  </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2009 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
