<library>
  <!-- test DOM 3 UserData API -->
    <include href="lzunit/lzunit.lzx" />

    <class name="TestUserData" extends="TestCase">
        <method name="getTestData">
            return new lz.DataElement("root", null, lz.DataElement.makeNodeList(3, "element"));
        </method>
        <method name="testUserDataSimple">
            // Set and retrieve user data

            var node1 = this.getTestData();
            var node2 = node1.getFirstChild();

            var val1 = [1,2,3,4,5];
            assertNull(node1.getUserData('key1'), 'getUserData key1 - not set');
            node1.setUserData('key1', val1);
            assertSame(val1, node1.getUserData('key1'), 'getUserData key1 - set');

            assertNull(node1.getUserData('badkey'), 'getUserData badkey');

            var val2 = {a: 259};
            var prev = node2.setUserData('key2', val2);
            assertNull(prev, 'first setUserData returns prev value null');

            var val3 = {b: 17};
            prev = node2.setUserData('key2', val3);
            assertSame(val2, prev, 'second setUserData returns prev value');

            assertSame(val3, node2.getUserData('key2'), 'node2 getUserData key2');

            node2.setUserData('key2', null);
            assertNull(node2.getUserData('key2'), 'node2 getUserData after remove');
        </method>
        <method name="testUserDataHandler">
            // to collect data from handler callbacks
            var callbacks = {};
            var myhandler = {
                handle: function (op, key, data, src, dst) {
                    // record that this handler has been called, and with what args
                    callbacks[op] = [key, data, src, dst];
                }
            };

            var node1 = this.getTestData();
            var node2 = node1.getFirstChild();

            var val1 = [1,2,3,4,5];
            var val2 = {a: 259};

            node1.setUserData('key1', val1, myhandler);
            node2.setUserData('key2', val2, myhandler);

            // test callback handler on cloneNode()
            var clone = node1.cloneNode();
            var dataClone = this.callbacks[LzDataElement.NODE_CLONED];
            assertEquals('key1', dataClone[0], 'data on cloned node - key');
            assertSame(val1, dataClone[1], 'data on cloned node - data');
            assertSame(node1, dataClone[2], 'data on cloned node - src');
            assertSame(clone, dataClone[3], 'data on cloned node - dst');

            // UserData must not be copied to clone
            assertNull(clone.getUserData('key1'), 'user data copied to clone');

            // test callback handler for 'set nodeName' (equivalent to Document.renameNode())
            node2.setAttribute('nodeName', 'foobar');
            var dataRename = this.callbacks[LzDataElement.NODE_RENAMED];
            assertEquals('key2', dataRename[0], 'data on renamed node - key');
            assertSame(val2, dataRename[1], 'data on renamed node - data');
            assertSame(node2, dataRename[2], 'data on renamed node - src');
            assertNull(dataRename[3], 'data on renamed node - dst');

            // UserData must not be changed for rename
            assertSame(val2, node2.getUserData('key2'), 'user data changed when renamed');

            // Other UserDataHandler operations:
            // NODE_IMPORTED ==> untestable, we don't support Document.importNode()
            // NODE_DELETED ==> untestable, we don't know when a node is deleted from memory
            // NODE_ADOPTED ==> untestable, we don't support Document.adoptNode()
        </method>
        <method name="addTests"> 
            this.addTest("testUserDataSimple");
            // TODO: [20090826 anba] enable when LPP-8425 is finished
            // this.addTest("testUserDataHandler");
        </method> 
    </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
