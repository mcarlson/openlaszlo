<canvas height="420" width="620">
  <include href="timing-support.lzx" />

  <script>
  <![CDATA[
    function singleFunction (){
        var x = 1;
        x += 1;
        x += 1;
        return x;
    }
    function addOne ( x ){ return x +1; }

    function oneFunctionCall (){
        var x = 1;
        x += 1;
        x = addOne( x );
        return x;
    }

    function twoFunctionCalls (){
        var x = 1;
        x = addOne( x );
        x = addOne( x );
        return x;
    }

    globobj= {};
    globobj.x = 0;
    globobj.aMethod = function (){
        if ( ++this.x == 10 ) this.x = 0;
    }

    globobj.bMethod = function (){
        this.x++;
        this.cMethod();
    }
    globobj.cMethod = function (){
        if ( ++this.x == 10 ) this.x = 0;
    }

    function callSingleMethod(){
        globobj.aMethod();
    }
    function callTwoMethods(){
        globobj.bMethod();
    }

    global.anObj = {
        aaa : 1,
        bbb : 2,
        ccc : 3,
        ddd : 4,
        eee : 5,
        fff : 6,
        ggg : 7, 
        hhh : 8 };

    function functionWith(){
        with( anObj ){
            return aaa + bbb + ccc;
        }
    }
    function functionWithout(){
        return this.aaa + this.bbb + this.ccc;
    }
    global.anObj2 = { xxx: 14 };
    global.anObj3 = { yyy: 15 };
    global.anObj4 = { zzz: 16 };

    function functionDeepWith(){
        with( anObj ){
            with( anObj2 ){
                with( anObj3 ){
                    with( anObj4 ){
                        return aaa + bbb + ccc;
                    }
                }
            }
        }
    }

    function noArgs(){
        1,2,3,4,5;
        takesNoArgs();
    }
    function manyArgs(){
        takesManyArgs( 1, 2, 3, 4, 5 );
    }
    function takesManyArgs( a, b, c, d , e){
        var x =1;
        return x + x + x + x + x + x;
    }
    function takesNoArgs(){
        var x =1;
        return x + x + x + x + x + x;
    }

    var looprecurnum = 100;
    function doLoop(){
        x = 1;
        for ( var i = 0; i < looprecurnum; i++ ){
            x = loopF( x );
        }
    }
    function doRecur(){
        x = recurF( looprecurnum );
    }

    function loopF( x ){
        return x+1;
    }

    function recurF( n ){
        if ( n == 0 ) return 0;
        return 1 + recurF( n - 1 );
    }

    addTest("singleFunction" , 1000);
    addTest("oneFunctionCall", 1000 );
    addTest("twoFunctionCalls", 1000 );
    addTest("callSingleMethod", 1000 );
    addTest("callTwoMethods", 1000 );
    addTest("functionWith", 1000 );
    addTest("functionWithout", 1000 );
    addTest("functionDeepWith", 1000 );
    addTest("noArgs", 1000 );
    addTest("manyArgs", 1000 );
    addTest("doLoop", 100 );
    addTest("doRecur", 100 );
   
    //short vs. long identifiers
    //global vs. local variable vs. object property
    //inherited property vs. direct
    //{} vs new
    //comparisons
    //number of keys effect on lookup speed

    
    runTests( 'Functions' , 25 );

  ]]>
  </script>

</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
