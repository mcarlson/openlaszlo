<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2006 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<library>

<class name="rtmpconnection" extends="node">

    <!--- string to indicate connection status -->
    <attribute name="status" value="disconnected" type="string"/>

    <!--- number to indicate what stage of connection we're on
        0: disconnected, 1: connecting, 2: connected-->
    <attribute name="stage" value="0" type="number"/>
    
    <!--- application url
        for example : rtmp:/appname or rtmp://myserver.com/myapp/  -->
    <attribute name="src" value="" type="string"/>

    <method name="construct" args="p,a">
        this._nc = new NetConnection();
        super.construct(p,a);
    </method>

    <method name="connect">
        Debug.write('connect');
        if (this.src == "") {
            Debug.write('no src url defined for ',this);
            return;
        }
        this._nc.connect(src);
        this.setAttribute('status', "connecting");
        this.setAttribute('stage', 1);
        var t = this;
        this._nc.onStatus = function(info) {
            _root.Debug.write('onStatus ', info);
            _root.Debug.write('this (t) ', t);
            var msg = ""
            var s = t.stage;
            switch (info.code) {
                case "NetConnection.Connect.AppShutdown":
                    // The application has been shut down 
                    // (for example, if the application is out of memory 
                    // resources and must be shut down to prevent the 
                    // server from crashing) or the server has been shut down.
                    msg = "disconnected (error)";
                    s = 0;
                    break;
                    
                case "NetConnection.Connect.Closed":
                    // The connection was successfully closed.
                    msg = "disconnected";
                    s = 0;
                    break;

                
                case "NetConnection.Connect.Failed":
                    // The connection attempt failed; 
                    // for example, the server is not running.
                    msg = "connection failed";
                    s = 0;
                    break;	

                case "NetConnection.Connect.Rejected":
                    // The client does not have permission to connect 
                    // to the application, or the application expected 
                    // different parameters from those that were passed, 
                    // or the application specifically rejected the client.
                    msg = "connection rejected";
                    s = 0;
                    break;

                case "NetConnection.Connect.Success":
                    // The connection attempt succeeded.
                    msg = "connected";
                    s = 2;
                    break;

                default:
                    msg = info.code;
                
            }
            t.setAttribute('status', msg);
            t.setAttribute('stage', s);
            
        }
    </method>
</class>

</library>
