<!-- Copyright 2001-2007 Laszlo Systems, Inc.  All Rights Reserved. -->
<library>
    <!-- [2007.05.25] These tests are failing and are probably ROTTEN
    because the way rules are exported as javascript by the compiler 
    has changed, but these data structures have not been updated 
    to match. -->
<!-- Instead of these stylesheet rules, we include directly the 
compiler output for these rules. 
    <stylesheet> 
    person { favoritecolor: "0x0000AA"}
    #gEasyStreet person person { favoritecolor: "0x00AA00"}
    #gStreet person { favoritecolor: "0xAA0000"}
    #gStreet person person { favoritecolor: "0xAA00AA"}    
    #gStreet person person person { favoritecolor: "0x441a0a"}    
    #gStreet cat { meowsound: "gstreetcat"}   
    #gKennedyHouse cat { meowsound: "kennedycat"}       
    
    </stylesheet>
-->
<include href="../neighborhood/neighborhoodclasses.lzx" />
<include href="../neighborhood/kennedyfamily.lzx" />
<include href="../neighborhood/thestreet.lzx" />    

    <script>       
    
        var testcssRule0 = new LzCSSStyleRule(); 
        testcssRule0.selector = "person";
        testcssRule0.properties = {favoritecolor: 0x0000AA};
        LzCSSStyle._addRule( testcssRule0 ); 
        var testcssRule1 = new LzCSSStyleRule();       
        testcssRule1.selector = [ "#gEasyStreet", "person" , "person"];
        testcssRule1.properties = {favoritecolor: 0x00AA00};
        LzCSSStyle._addRule( testcssRule1 ); 
        var testcssRule2 = new LzCSSStyleRule(); 
        testcssRule2.selector = ["#gStreet", "person"];
        testcssRule2.properties = {favoritecolor: 0xAA0000};
        LzCSSStyle._addRule( testcssRule2 ); 
        var testcssRule3 = new LzCSSStyleRule(); 
        testcssRule3.selector = [ "#gStreet", "person" , "person"];
        testcssRule3.properties = {favoritecolor: 0xAA00AA};
        LzCSSStyle._addRule( testcssRule3 ); 

        var testcssRule5 = new LzCSSStyleRule(); 
        testcssRule5.selector = ["#gStreet", "cat"];
        testcssRule5.properties = {meowsound: "gstreetcat"};
        LzCSSStyle._addRule( testcssRule5 );             
        var testcssRule6 = new LzCSSStyleRule(); 
        testcssRule6.selector = ["#gKennedyHouse", "cat"];
        testcssRule6.properties = {meowsound: "kennedycat"};
        LzCSSStyle._addRule( testcssRule6 );

        // To demonstrate that lexical order doesn't matter, we're putting this
        // highly specific selector last; it should still win over less specific
        // but also matching selectors, for Indio's favorite color. '

        var testcssRule4 = new LzCSSStyleRule(); 
        testcssRule4.selector = [  "#gStreet", "person" , "person" , "person"];
        testcssRule4.properties = {favoritecolor: 0x441a0a};
        LzCSSStyle._addRule( testcssRule4 );     

    </script>              
     


    <class name="MoreSpecificityTestCase" extends="TestCase">

        <method name="testLessThan"><![CDATA[
            assertTrue( 3 < 4, "three less than four");   
            assertFalse( 5 < 4, "five less than four"); 
        ]]></method>
        
        <method name="testSpecificityPeople"><![CDATA[
            // Check the specificity of the rules 
            var r0spec = testcssRule0.getSpecificity(); // "person";
            var r1spec = testcssRule1.getSpecificity(); //  [ "#gEasyStreet", "person" , "person"];
            var r2spec = testcssRule2.getSpecificity(); //  ["#gStreet", "person"];           
            var r3spec = testcssRule3.getSpecificity(); //  [ "#gStreet", "person" , "person"];
            var r4spec = testcssRule4.getSpecificity(); //  [  "#gStreet", "person" , "person" , "person"];
            var r5spec = testcssRule5.getSpecificity(); //  ["#gStreet", "cat"];         
            var r6spec = testcssRule6.getSpecificity(); //  ["#gKennedyHouse", "cat"];
            
           assertTrue( r0spec < r1spec, "r0 less than r1"); 
           assertTrue( r0spec < r2spec, "r0 less than r2");
           assertTrue( r2spec < r3spec, "more elements in selector");
           assertTrue( r3spec < r4spec, "more elements in selector");
           assertEquals(r5spec, r6spec, "Same specificity for cats");
            
        ]]></method>
        
        <method name="testLittleBoys">
            assertEquals( 0xAA00AA, gLittleGeorge.getAttribute("favoritecolor"));
            this.assertEquals( 0xAA00AA, gRobertJr.getAttribute("favoritecolor"));            
            this.assertEquals( 0x441a0a, gIndio.getAttribute("favoritecolor"));               
        </method>
        <method name="addTests"> 
            this.addTest("testLessThan");
            this.addTest("testSpecificityPeople");
            this.addTest("testLittleBoys");
        </method> 
    </class>    
</library>
