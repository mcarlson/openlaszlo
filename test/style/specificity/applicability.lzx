<!-- Copyright 2006 Laszlo Systems -->
<canvas debug="true">
    <include href="../test"/>
    <stylesheet>
        /*IMPORTANT: This test is only testing properly if the definitions
          are not in class-hierarchy order. */

        superclass {
            testme: 1;
        }

        subsubclass {
            testme: 3;
        }

        subclass {
            testme: 2;
        }
        

        supercontainer superclass {
            testme: 4;
        }

        supercontainer subsubclass {
            testme: 6;
        }

        supercontainer subclass {
            testme: 5;
        }

        superclass subclass{
            testme :7;
        }

        superclass superclass{
            testme :8;
        }

        superclass superclass{
            testme :9;
        }

        subclass subsubclass{
            testme :11;
        }

        superclass subsubclass{
            testme :10;
        }

        #multimatch{
            testme : 10;
        }

        #multimatch{
            testme : 100;
        }

    </stylesheet> 
    
    <class name="superclass">
        <attribute name="cprop" value="$style{ 'testme' }"/>
    </class>

    <class name="subclass" extends="superclass"/>
    <class name="subsubclass" extends="subclass"/>

    <superclass  id="supi"/>
    <subclass    id="subi"/>
    <subsubclass id="subsubi"/>

    <class name="supercontainer"/>
    <class name="subcontainer" extends="supercontainer"/>

    <supercontainer>
        <superclass  id="sp_supi"/>
        <subclass    id="sp_subi"/>
        <subsubclass id="sp_subsubi"/>
    </supercontainer>

    <subclass>
        <superclass  id="sb_supi"/>
        <subclass    id="sb_subi"/>
        <subsubclass id="sb_subsubi"/>
    </subclass>

    <view id="multimatch">
        <attribute name="cprop" value="$style{ 'testme' }"/>
    </view>


    <testsuite name="applicability" loglevel="log">
        <handler name="oninit">
            this.addTest( "testClasses");
            this.addTest( "testCompound");
            this.addTest( "testComplexFunky");
            this.addTest( "testRuleOrder");
            this.run();
        </handler>

        <method name="testClasses">
            this.assertEquals( 1, supi.cprop );
            this.assertEquals( 2, subi.cprop );
            this.assertEquals( 3, subsubi.cprop );
            this.finishedTest("testClasses");
        </method>
        
        <method name="testCompound">
            this.assertEquals( 4, sp_supi.cprop );
            this.assertEquals( 5, sp_subi.cprop );
            this.assertEquals( 6, sp_subsubi.cprop );
            this.finishedTest("testCompound");
        </method>

        <method name="testComplexFunky">
            //you hit a closer 
            //if the selectors match, lexical order should win
            this.assertEquals( 9, sb_supi.cprop );

            //should grab the more specific subclass selector
            this.assertEquals( 7, sb_subi.cprop );

            //should walk up and grab the more specifc previous descendant
            //selector
            this.assertEquals( 11, sb_subsubi.cprop );
            this.finishedTest("testComplexFunky");
        </method>

        <method name="testRuleOrder">
            this.assertEquals( 100, multimatch.cprop );
            this.finishedTest("testRuleOrder");
        </method>

    </testsuite>

</canvas>

