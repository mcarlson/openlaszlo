<!-- Copyright 2007 Laszlo Systems -->
<library> 
    <stylesheet>
        /*IMPORTANT: This test is only testing properly if the definitions
          are not in class-hierarchy order. */

        superclass {
            testme: 1;
        }

        subAPLsubclass {
            testme: 3;
        }

        APLsubclass {
            testme: 2;
        }
        

        supercontainer superclass {
            testme: 4;
        }

        supercontainer subAPLsubclass {
            testme: 6;
        }

        supercontainer APLsubclass {
            testme: 5;
        }

        superclass APLsubclass{
            testme :7;
        }

        superclass superclass{
            testme :8;
        }

        superclass superclass{
            testme :9;
        }

        APLsubclass subAPLsubclass{
            testme :11;
        }

        superclass subAPLsubclass{
            testme :10;
        }

        #multimatch{
            testme : 10;
        }

        #multimatch{
            testme : 100;
        }

    </stylesheet> 
    
    <class name="superclass">
        <attribute name="cprop" value="$style{ 'testme' }"/>
    </class>

    <class name="APLsubclass" extends="superclass"/>
    <class name="subAPLsubclass" extends="APLsubclass"/>

    <superclass  id="supi"/>
    <APLsubclass    id="subi"/>
    <subAPLsubclass id="subsubi"/>

    <class name="supercontainer"/>
    <class name="subcontainer" extends="supercontainer"/>

    <supercontainer>
        <superclass  id="sp_supi"/>
        <APLsubclass    id="sp_subi"/>
        <subAPLsubclass id="sp_subsubi"/>
    </supercontainer>

    <APLsubclass>
        <superclass  id="sb_supi"/>
        <APLsubclass    id="sb_subi"/>
        <subAPLsubclass id="sb_subsubi"/>
    </APLsubclass>

    <view id="multimatch">
        <attribute name="cprop" value="$style{ 'testme' }"/>
    </view>


    <class name="ApplicabilityTestCase" extends="TestCase">

        <method name="testClasses">
            assertEquals( 1, supi.cprop );
            assertEquals( 2, subi.cprop );
            assertEquals( 3, subsubi.cprop );
        </method>
        
        <method name="testCompound">
            assertEquals( 4, sp_supi.cprop );
            assertEquals( 5, sp_subi.cprop );
            assertEquals( 6, sp_subsubi.cprop );
        </method>

        <method name="testComplexFunky">
            //you hit a closer 
            //if the selectors match, lexical order should win
            assertEquals( 9, sb_supi.cprop );

            //should grab the more specific APLsubclass selector
            assertEquals( 7, sb_subi.cprop );

            //should walk up and grab the more specifc previous descendant
            //selector
            assertEquals( 11, sb_subsubi.cprop );
        </method>

        <method name="testRuleOrder">
            assertEquals( 100, multimatch.cprop );
        </method>
        <method name="addTests"> 
            this.addTest("testClasses");
            this.addTest("testCompound");
            this.addTest("testComplexFunky");
            this.addTest("testRuleOrder");
        </method> 
    </class>
</library>
