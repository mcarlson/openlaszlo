<!-- Copyright 2007, 2008 Laszlo Systems -->
<library>

    <!-- [bshine 10.06.2006] This test validates (LPP-2894) The
         expected behavior is: if a class explicitly sets the value of
         an attribute to a constant, instances of that class have the
         attribute value specified by that constant, regardless of
         what the class's superclasses do. -->

    <stylesheet>
        happystyledbox {
            stylebgcolor : purple;
            stylewidth : 999;
            styleinnercolor : attr(myInnerColor);
        }
    </stylesheet>

    <!-- This class has a bgcolor defined by a style and an inner view
         whose bgcolor is defined by a style that references an
         attribute of the view that is constrained to an attribute of
         the parent.  This was the most complex dependency I could
         think of to test. [2007-01-04 ptw] -->
    <class name="happystyledbox" width="70" height="70" bgcolor="$style{'stylebgcolor'}" >
        <attribute name="innerColor" type="color" value="fuchsia" />
        <view name="inner" bgcolor="$style{'styleinnercolor'}" x="5" y="5" width="10" height="10">
          <attribute name="myInnerColor" type="color" value="${parent.innerColor}" />
        </view>
    </class>

    <!-- Instances of this class should be navy, overriding the parent's bgcolor style constraint -->
    <!-- Instances of this class should also have width=150,
         overriding the parent's width attribute. -->
    <!-- And finally, their inner view should be blue -->
    <class name="subclassbox" extends="happystyledbox">
        <attribute name="bgcolor" value="navy" />
        <attribute name="width" value="150" />
        <attribute name="innerColor" value="blue" />
        <view name="specialview" width="10" height="10" bgcolor="black" />
    </class>

    <!-- This box should be green with an inner view of lime. -->
    <class name="otherlassbox" extends="happystyledbox" bgcolor="green" width="88">
        <attribute name="innerColor" value="lime" />
    </class>

    <class name="lpp_4451" extends="happystyledbox" width="${parent.width/2}" />
    <class name="lpp_4451_inverse" extends="happystyledbox" width="$style{'stylewidth'}" />

    <view id="testing" width="400" layout="axis: y; spacing: 5">

      <happystyledbox id="sb0" />

      <!-- This box is maroon with an inner view of red -->
      <happystyledbox id="sb1" bgcolor="maroon" innerColor="red" />

      <subclassbox id="sb2" />
      <otherlassbox id="sb3" width="$style{'stylewidth'}"/>

      <subclassbox id="sb4" />

      <lpp_4451 id="sb5" width="$style{'stylewidth'}"/>
      <lpp_4451_inverse id="sb6" width="${parent.width/2}"/>
    </view>
    <class name="CSSSubclassingTestCase" extends="TestCase" >

         <method name="testClassConstraint">
             this.assertEquals(purple, sb0.getAttribute("bgcolor"), "Class CSS value");
             this.assertEquals(fuchsia, sb0.inner.getAttribute("bgcolor"), "Class CSS attr");
         </method>

         <method name="testInstanceOverrideConstraint">
             this.assertEquals(maroon, sb1.getAttribute("bgcolor"), "Instance override CSS value");
             this.assertEquals(red, sb1.inner.getAttribute("bgcolor"), "Instance override CSS attr");
         </method>

         <method name="testSubclassOverrideConstraint">
             <![CDATA[
             this.assertEquals("150", sb2.getAttribute("width"), "Subclass override attribute");
             this.assertEquals(navy, sb2.getAttribute("bgcolor"), "Subclass override CSS value");
             this.assertEquals(blue, sb2.inner.getAttribute("bgcolor"), "Subclass override CSS attr");
             this.assertEquals(green, sb3.getAttribute("bgcolor"), "Subclass override CSS value");
             this.assertEquals(999, sb3.getAttribute("width"), "Subclass CSS value override");
             this.assertEquals(lime, sb3.inner.getAttribute("bgcolor"), "Subclass override CSS attr attribute");
             this.assertEquals(999, sb5.width, "LPP-4451");
             this.assertEquals(testing.width/2, sb6.width, "LPP-4451-inverse");
             ]]>
         </method>
         <method name="addTests"> 
             this.addTest("testClassConstraint");
             this.addTest("testInstanceOverrideConstraint");
             this.addTest("testSubclassOverrideConstraint");
         </method> 
     </class>
</library>
