<!-- Copyright 2001-2008, 2010 Laszlo Systems, Inc.  All Rights Reserved. -->
<library>
    <!-- Remember: attribute selectors win over element selectors. --> 
    
    <stylesheet>
        /* rule 1, specificity 10 */ 
        [name="thename"] {
            testdata: "i am thename";
        }
        
        /* rule 2, specificity 1 */ 
        testclass {
            testdata: "i am testclass";
        }
        
        /* rule 3, specificity 1 */ 
        view {
            testdata: "i am view";
        }
        
        text {
            x:3;
        }
        text[name="mytitle"] {
            x:100;
        }
        
        
    </stylesheet>
    
    <text name="mytitle" id="mytitle" y="10" text="the title is here" resize="true"
        x="$style{'x'}"/>
        
    <view name="thename" id="joseph">
        <attribute name="testdata" value="$style{'testdata'}" />
    </view>
    
    <class name="testclass" />
    
    <view> <!-- this view just makes a new scope for name="thename" -->
        <view name="thename"> 
            <testclass id="edgar">
                <attribute name="testdata" value="$style{'testdata'}" />
            </testclass>    
            <view id="cheever">
                <attribute name="testdata" value="$style{'testdata'}" />
            </view>
        </view>
    </view> 
    
    <view id="snoopy">
        <attribute name="testdata" value="$style{'testdata'}" />
    </view> 

    <testclass id="jackie">
            <view id="alice">
                <!-- Should alice get her style from rule 2 or rule 3? 
                I think she should get her style from rule 3.
                --> 
                <attribute name="testdata" value="$style{'testdata'}" />
            </view>
    </testclass>

    <view> <!-- another scope for name="thename" --> 
        <testclass id="doug" name="thename">
                <attribute name="testdata" value="$style{'testdata'}" />
                <view id="randy">
                    <attribute name="testdata" value="$style{'testdata'}" />
                </view>
        </testclass>
    </view> 

<class name="AttrNameTestCase" extends="TestCase">
        <method name="testthename">
            assertEquals( "i am thename", joseph["testdata"] );
            assertEquals( "i am view", snoopy["testdata"] );                                    
        </method>

        <!-- This is known to fail in swf6, but works in swf7 and swf8. Filed as 
            LPP-4090, CSS specificity in swf6 for name selectors .
            [2007.06.04 bshine] 
            This also fails in dhtml [2007.06.07 bshine] -->
        <method name="testNamedAncestor">
            /* 
                Should edgar take his style from rule 1, which his
                ancestor matches but he does not, or from rule 2, which
                he matches, but has lower specificity than rule 1?
                If edgar takes his style from rule 2, which feels like the
                right behavior, the next assertion will pass.
            */ 
            assertEquals( "i am testclass", edgar["testdata"] );             
            /* 
                The situation is the same for cheever, but with selecting for
                element type of view rather than a user class. 
                
                If our implementation is consistent, then both of these assertions
                should have the same success, because they only differ by whether
                the class is a user class or built-in class.                 
            */            
            assertEquals( "i am view", cheever["testdata"] );                                   
        </method>

        <method name="testNameVsElement">
            assertEquals( "i am view", alice["testdata"] );            
            /* randy is the reverse of the edgar test case */ 
            assertEquals( "i am view", randy["testdata"] );                        
            assertEquals( "i am thename", doug["testdata"] );            
        </method>
        
        <method name="testBigParty">
            // This tests LPP-4063, CSS name attribute selector doesn't work in Flash 6
            assertEquals(100, mytitle["x"] );
        </method>


        <method name="addTests">
          for (var t in {testthename: true, testNamedAncestor: true, testNameVsElement: true, testBigParty: true}) {
            this.addTest(t);
          }
        </method>
</class>

</library>
