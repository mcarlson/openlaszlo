<!-- Copyright 2001-2006 Laszlo Systems, Inc.  All Rights Reserved. -->
<library>
    <simplelayout />
    <script src="descendantselectors_css.js"/>

    <!-- A bunch of silly classes for testing only. The general idea
    is that a house is a child of street, people are children of houses, 
    children are children of their their parents, and pets are children
    of their owners. 
    Animals can be cat, kitten, or duck.
    --> 
    <class name="house">
        <attribute name="paintcolor" value="0xFFFFFF" />
        <attribute name="streetaddress" value="123" />
    </class>
    
    <class name="street">
        <attribute name="streetname" value="Main" type="string" />
        <attribute name="streettype" value="Street" type="string" />
    </class>
    
    <class name="duck" extends="animal" >
        <attribute name="feathercolor" value="white"/>
    </class>
    
    <class name="person">
        <attribute name="fullname" type="string" value="Unnamed Person" />
        <attribute name="shortname" type="string" value="Peep" />
        <attribute name="occupation" value="none" type="string"/>
        <!-- List the attributes which will be styled by CSS --> 
        <attribute name="propsFromCSS" 
            value="['occupation']" />
        <handler name="onconstruct" method="_applyCSS" />        
        <method name="_applyCSS">
              // Look up the style
              var mystyle = LzCSSStyle.getComputedStyle( this );
              if (mystyle != null) {
                  for (var i in this.propsFromCSS) {
                      var propertyName = this.propsFromCSS[i];
                      var v = mystyle.getPropertyValue( propertyName ); 
                      if (v != null) 
                          this.setAttribute(propertyName, v);
                  }
              }
          </method>
        
    </class>
    
    <!-- Test data. This represents the Kennedy dynasty, or at least, some of it. 
        This tree is mostly for testing parent/child/descendant/ancestor selectors. -->
    <house id="gKennedyHouse">
        <person id="gJoeSr" fullname="Joe P. Kennedy, Sr" shortname="Irish Joe">
            <person id="gJFK" fullname="John Fitzgerald Kennedy" shortname="JFK">
                <person id="gCBK" fullname="Caroline Bouvier Kennedy" shortname="Caroline">
                    <!-- Apparently, Caroline Kennedy had pet ducks when her father was president. 
                    See http://www.whitehouse.gov/president/holiday/historicalpets3/02-js.html --> 
                    <duck id="gDuck1" />
                    <duck id="gDuck2" />                    
                    <duck id="gDuck3" />                    
                    <duck id="gDuck4" />                    
                </person>
                <person id="gJFKJr" fullname="John F. Kennedy, Jr." shortname="JFKJr" />
                <person id="gPatrick" fullname="Patrick Bouvier Kennedy" shortname="Patrick" />
            </person>
            <person id="gJoeJr" fullname="Joseph Patrick Kennedy Sr" shortname="Joe Jr" />
            <person id="gRosemary" fullname="Rosemary Kennedy" shortname="Rose" />
            <person id="gKathleen" fullname="Kathleen Kennedy" shortname="Kathy" />
            <person id="gTed" fullname="Edward Moore Kennedy" shortname="Ted">
            </person>
        </person>
    </house>
    

    <!-- More test data, with various tag types as nodes in the tree. -->
    <street id="gStreet">
        <house id="gSmithHouse" >
            <person id="gGeorgeSmith">
                <person id="gLittleGeorge" >
                    <!-- Little George Smith has a cat named Blackie --> 
                    <cat id="gBlackie" />
                </person>
                <person id="gBabySmithy" />
            </person>
        </house>
        <house id="gDowneyHouse" >
            <person id="gRobertSr" fullname="Robert Downey, Sr" occupation="director">
                <person id="gRobertJr" fullname="Robert Downey, Jr" occupation="actor" >
                    <person id="gIndio" fullname="Indio the Child" occupation="student" />
                </person>
            </person>
        </house>
        <!-- Note that Mr. Bo Jangles lives on the street, not in a house --> 
        <person id="gBo" fullname="Mr. Bo Jangles" shortname="BoJangles" occupation="destitute"/>
        <!-- Note that the kittycat lives on a street, not in a house --> 
        <cat id="gKittycat" />        
    </street>
    
    <duck id="gWildDuck" />

    <testsuite name="descendantselectors" loglevel="log">
        <handler name="oninit">
            this.addTest( "testSingleTag");
            this.addTest( "testTagDescendantTagSelector" );
            this.addTest( "testMixedTagTypesSelector" );
            this.addTest( "testTripleSelector" );
            this.addTest( "testAttrTagSelector" );
            this.addTest( "testAttrStarSelector" );
            this.addTest( "testJoesKids" );
            this.addTest( "testJoesGrandkids" );                        
            this.run();
        </handler>

        <method name="testSingleTag">
            this.assertNotUndefined(gJoeSr);
            this.assertEquals("politician", gJoeSr.getAttribute("occupation"));
            this.finishedTest("testSingleTag");
        </method>

        <method name="testTagDescendantTagSelector">

            // This should select for any person who has a person as a parent or ancestor
            // (Of course Joe Kennedy has a parent, just his parent is not represented in this 
            // scene graph )
            var somebodysChildSelector = [ "person", "person"]; 
            Debug.write("gJoeSr");
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( somebodysChildSelector, gJoeSr, "occupation" ) );
            Debug.write("gJFK");
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( somebodysChildSelector, gJFK, "occupation" ) );   
            Debug.write("gRobertSr");
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( somebodysChildSelector, gRobertSr, "occupation" ) );                     
            Debug.write("gRobertJr");
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( somebodysChildSelector, gRobertJr, "occupation" ) );                        
            Debug.write("gIndio");
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( somebodysChildSelector, gIndio, "occupation" ) );                                    

            this.finishedTest("testTagDescendantTagSelector");
        </method>
        
        <method name="testMixedTagTypesSelector">
            // Now let's match people who live in houses
            var peopleInHousesSelector = ["house", "person"];
            Debug.write("robert sr");
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( peopleInHousesSelector, gRobertSr, "occupation" ) );   
            Debug.write("robert jr");
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( peopleInHousesSelector, gRobertJr, "occupation" ) );   
            Debug.write("indio");
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( peopleInHousesSelector, gIndio, "occupation" ) );               
            Debug.write("bo");
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( peopleInHousesSelector, gBo, "occupation" ) );                           
            Debug.write("kitty");
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( peopleInHousesSelector, gKittycat, "occupation" ) );                                       
        
            // Make sure we don't match houses inside people, because that wouldn't make any sense
            var nonsenseRule1 = ["person", "house"];
            Debug.write("all the nonsense tests");
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( nonsenseRule1, gRobertSr, "occupation" ) );   
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( nonsenseRule1, gRobertJr, "occupation" ) );   
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( nonsenseRule1, gIndio, "occupation" ) );               
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( nonsenseRule1, gBo, "occupation" ) );                           
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( nonsenseRule1, gKittycat, "occupation" ) );                                       
        
            var deepRule1 = ["house", "cat"];
            Debug.write("cat in house"); 
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( deepRule1, gRobertJr, "occupation" ) );   
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( deepRule1, gBlackie, "occupation" ) );   
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( deepRule1, gKittycat, "occupation" ) );   

            this.finishedTest("testMixedTagTypesSelector");
        </method>
        
        <method name="testTripleSelector">        
            // This should select for any person who is a child of a person who is a child of a person
            // in other words, someone who is a grandchild of someone in the tree
            Debug.write("testing grandchild");
            var grandchildSelector = [ "person", "person", "person"]; 
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gJoeSr, "occupation" ) );
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gJFK, "occupation" ) );   
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gRobertSr, "occupation" ) ); 
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gRobertJr, "occupation" ) ); 
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gIndio, "occupation" ) );
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gCBK, "occupation" ) );  
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gJFKJr, "occupation" ) );
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( grandchildSelector, gPatrick, "occupation" ) );

            Debug.write("testing duck in family");
            var duckinfamilySelector = [ "house", "person", "duck"];            
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( duckinfamilySelector, gKittycat, "occupation" ) );
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( duckinfamilySelector, gJFK, "occupation" ) ); 
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( duckinfamilySelector, gWildDuck, "occupation" ) ); 
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( duckinfamilySelector, gDuck3, "occupation" ) ); 
            
            Debug.write("testing cat in person in house in street");
            var kittyinhouseSelector = ["street", "house", "person", "cat"];
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( kittyinhouseSelector, gBlackie, "occupation" ) );
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( kittyinhouseSelector, gJFK, "occupation" ) ); 
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( kittyinhouseSelector, gKittycat, "occupation" ) );
            this.finishedTest("testTripleSelector");            
        </method>
            
        <!-- Test selectors that look like '[id="gJoeSr"] person' -->
        <method name="testAttrTagSelector">
            // This should select for children of Joe Kennedy, ie, a selector of '[id="gJoeSr"] person'
            var joesDescendantsSelector = [
                { attrname: "id", attrvalue: "gJoeSr" }, 
                "person" ];
            _root.Debug.format("selector %w", joesDescendantsSelector);
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( joesDescendantsSelector, gJoeSr, "occupation" ) );
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( joesDescendantsSelector, gJFK, "occupation" ) );   
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( joesDescendantsSelector, gKittycat, "occupation" ) );                     
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( joesDescendantsSelector, gCBK, "occupation" ) );               
        
            // Now let's match just people who are in the kennedy house
            var inKennedyHouseSelector = [ {attrname: "id", attrvalue: "gKennedyHouse"}, "person"];
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gJoeSr, "occupation" ) );
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gJFK, "occupation" ) );   
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gRobertSr, "occupation" ) );                     
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gRobertJr, "occupation" ) );                        
            this.assertFalse( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gIndio, "occupation" ) );                                    
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gCBK, "occupation" ) );                                    
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gJFKJr, "occupation" ) );                                    
            this.assertTrue( LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gPatrick, "occupation" ) );                          
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( inKennedyHouseSelector, gBo, "occupation" ) );

            this.finishedTest("testAttrTagSelector");
        </method>
                        
        <method name="testAttrStarSelector">                        
            // Let's match anyone (including animals) in the Kennedy house
            var anythingInKennedyHouseSelector = [ {attrname: "id", attrvalue: "gKennedyHouse"}, "*"];
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( anythingInKennedyHouseSelector, gBo, "occupation" ) );
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( anythingInKennedyHouseSelector, gWildDuck, "feathercolor" ) );
            this.assertFalse(LzCSSStyle._compoundSelectorApplies( anythingInKennedyHouseSelector, gIndio, "occupation" ) );
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( anythingInKennedyHouseSelector, gDuck1, "feathercolor" ) );            
            this.assertTrue(LzCSSStyle._compoundSelectorApplies( anythingInKennedyHouseSelector, gDuck4, "feathercolor" ) );                        
            this.finishedTest("testAttrStarSelector");
        </method>

        <method name="testJoesKids">
            this.assertEquals("politician", gJFK.getAttribute("occupation"));
            this.assertEquals("politician", gJoeJr.getAttribute("occupation"));            
            this.assertEquals("politician", gRosemary.getAttribute("occupation"));            
            this.assertEquals("politician", gKathleen.getAttribute("occupation"));            
            this.assertEquals("politician", gTed.getAttribute("occupation"));                                                
            this.finishedTest("testJoesKids");
        </method>

        <method name="testJoesGrandkids">
            this.assertEquals("politician", gCBK.getAttribute("occupation"));
            this.assertEquals("politician", gJFKJr.getAttribute("occupation"));            
            this.assertEquals("politician", gPatrick.getAttribute("occupation"));            
            this.finishedTest("testJoesGrandkids");
        </method>

        
    </testsuite>
</library>
