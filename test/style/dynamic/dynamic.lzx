<!-- Copyright 2010 Laszlo Systems, Inc.  All Rights Reserved. -->
<library>

  <!-- Note [2010-05-17 ptw] We use the color 'lime' for the green
       swatch because that is the HTML color name for rgb(0,255,0).
       See http://en.wikipedia.org/wiki/Lime_(color) -->

  <stylesheet>
    /* Static for buttons */
    dynamicbutton[color=red] {background-color: red }
    /* `lime` is the HTML name for rgb(0,255,0) */
    dynamicbutton[color=green] {background-color: lime }
    dynamicbutton[color=blue] {background-color: blue }

    /* dynamic single selectors that apply to individual swatches */
    [red=off] dynamicswatch[color=red] { background-color: cyan; opacity: 0.2 }
    [green=off] dynamicswatch[color=lime] { background-color: magenta; opacity: 0.2 }
    [blue=off] dynamicswatch[color=blue] { background-color: yellow; opacity: 0.2 }

    /* dynamic compound selectors that apply to dynamicmixer dynamicswatch */
    [red=off] [green=off] [blue=off] [name=dynamicmixer] dynamicswatch { background-color: black; opacity: 1 }
    [red=off] [green=off] [blue=on] [name=dynamicmixer] dynamicswatch { background-color: blue; opacity: 1 }
    [red=off] [green=on] [blue=off] [name=dynamicmixer] dynamicswatch { background-color: lime; opacity: 1 }
    [red=off] [green=on] [blue=on] [name=dynamicmixer] dynamicswatch { background-color: cyan; opacity: 1 }
    [red=on] [green=off] [blue=off] [name=dynamicmixer] dynamicswatch { background-color: red; opacity: 1 }
    [red=on] [green=off] [blue=on] [name=dynamicmixer] dynamicswatch { background-color: magenta; opacity: 1 }
    [red=on] [green=on] [blue=off] [name=dynamicmixer] dynamicswatch { background-color: yellow; opacity: 1 }
    [red=on] [green=on] [blue=on] [name=dynamicmixer] dynamicswatch { background-color: white; opacity: 1 }
  </stylesheet>

  <!-- button to toggle an attribute which should trigger style change -->
  <class name="dynamicbutton" width="40" height="20" align="center">
    <attribute name="bgcolor" style="background-color" />
    <attribute name="color" type="string" />
    <text fgcolor="white" text="${this.parent.on}" align="center" />
    <attribute name="on" type="string" value="off" />
    <handler name="onclick">
      this.setAttribute('on', this.on === 'on' ? 'off' : 'on' );
    </handler>
  </class>

  <!-- color swatch that is styled by background-color and opacity -->
  <class name="dynamicswatch" height="60" width="60" bgcolor="gray" align="center">
    <attribute name="color" type="string" />
    <attribute name="swatchcolor" style="background-color" type='color' value="$once{this.color}"/>
    <attribute name="swatchopacity" style="opacity" value="1" />
    <handler name="onclick">
      Debug.clear();
      Debug.explainStyleBindings(this);
    </handler>
    <view name="swatch" x="5" y="5" height="50" width="50">
      <attribute name="bgcolor" value="${parent.swatchcolor}" />
      <attribute name="opacity" value="${parent.swatchopacity}" />
    </view>
  </class>

  <!-- nested views with red, green, blue attributes that dynamically change
       to demonstrate the applicability of compound dynamic selectors  -->
  <view x="5%" y="5%" width="20%" height="80%" layout="axis: y; spacing: 5">
    <text width="100%" multiline="true">
      Toggle the red, green, and blue buttons on and off to
      dynamically update the applicable CSS selectors.  Click on a color
      swatch to explain the applicability of the CSS selectors.
    </text>
    <attribute name="red" value="${this.toggle.on}" type="string" />
    <dynamicbutton id="reddynamicbutton" name="toggle" color="red" />
    <dynamicswatch id="reddynamicswatch" color="red" />
    <view width="100%" layout="axis: y; spacing: 5">
      <attribute name="green" value="${this.toggle.on}" type="string" />
      <dynamicbutton id="greendynamicbutton" name="toggle" color="green" />
      <dynamicswatch id="greendynamicswatch" color="lime"/>
      <view width="100%" layout="axis: y; spacing: 5">
        <attribute name="blue" value="${this.toggle.on}" type="string" />
        <dynamicbutton id="bluedynamicbutton" name="toggle" color="blue" />
        <dynamicswatch id="bluedynamicswatch" color="blue"/>
        <view width="100%" name="dynamicmixer" layout="axis: y; spacing: 5">
          <text align="center">Mixer</text>
          <dynamicswatch id="dynamicmixer"/>
        </view>
      </view>
    </view>
  </view>

  <class name="DynamicSelectorTestCase" extends="TestCase">
    <method name="testDynamic"><![CDATA[
        var values = { on: true, off: false };
        for (var redon in values) {
          var red = values[redon];
          for (var greenon in values) {
            var green = values[greenon];
              for (var blueon in values) {
                  var blue = values[blueon];
                  reddynamicbutton.setAttribute('on', redon);
                  greendynamicbutton.setAttribute('on', greenon);
                  bluedynamicbutton.setAttribute('on', blueon);

                  assertEquals((red ? 0xff0000 : 0x00ffff), reddynamicswatch.swatch.bgcolor, "Red swatch color");
                  assertEquals((green ? 0x00ff00 : 0xff00ff), greendynamicswatch.swatch.bgcolor, "Green swatch color");
                  assertEquals((blue ? 0x0000ff : 0xffff00), bluedynamicswatch.swatch.bgcolor, "Blue swatch color");

                  var mix = (red ? 0xff0000 : 0) + (green ? 0x00ff00 : 0) + (blue ? 0x0000ff : 0);

                  assertEquals(mix, dynamicmixer.swatch.bgcolor, "Dynamic mixer color");
              }
          }
        }
    ]]></method>

    <method name="addTests">
      this.addTest('testDynamic');
    </method>
  </class>

  <DynamicSelectorTestCase />
</library>

