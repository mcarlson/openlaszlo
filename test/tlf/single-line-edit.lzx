<canvas width="100%" height="80%" debug="true">
  <debug  fontsize="12"/>

<script when="immediate">
<![CDATA[


      public class MyEditManager extends EditManager
       {

           #passthrough (toplevel:true) {
               import flash.display.Sprite;
               import flash.events.TextEvent;
               import flash.events.KeyboardEvent;
               import flash.geom.Rectangle;

               import flashx.textLayout.container.ContainerController;
               import flashx.textLayout.elements.TextFlow;
               import flashx.textLayout.conversion.TextConverter;
               import flashx.textLayout.conversion.ConversionType;
               import flashx.textLayout.edit.EditManager;
               import flashx.undo.UndoManager;
               import flashx.undo.IUndoManager;
               import flash.events.MouseEvent;

           }#

               #passthrough {
               public function MyEditManager(undoManager:IUndoManager  = null)
               {
                   super(undoManager);
               }

               override public function mouseOverHandler(event:MouseEvent):void {
                   super.mouseOverHandler(event);
                   Debug.info("mouseOverHandler", event);
               }


               override public function mouseOutHandler(event:MouseEvent):void {
                   super.mouseOutHandler(event);
                   Debug.info("mouseOutHandler", event);
               }




               override public function textInputHandler(event:TextEvent):void
               {    
                   super.textInputHandler(event);
                   Debug.info("textInputHandler", event);

               }
           }#
      }



    public class EditManager_example extends Sprite
    {

    #passthrough (toplevel:true) {
    import flash.display.Sprite;
    import flash.display.Sprite;
    import flash.ui.Mouse; 
    import flash.events.MouseEvent;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.Event;
    import flashx.textLayout.events.*;
    import flashx.textLayout.operations.*;
    
    import flashx.textLayout.container.ContainerController;
    import flashx.textLayout.edit.EditManager;
    import flashx.textLayout.elements.ParagraphElement;
    import flashx.textLayout.elements.SpanElement;
    import flashx.textLayout.elements.TextFlow;
    import flashx.undo.UndoManager;
    }#

    #passthrough {



        public  var tf:TextFlow;
        public  var em:MyEditManager;
        public var um:UndoManager;
        
        public function EditManager_example()
        {
            //define TextFlow
            tf = new TextFlow();
            
            //define elements to contain text
            var p:ParagraphElement = new ParagraphElement();
            var s:SpanElement = new SpanElement();
            s.text ="This is sample text for the EditManager example.";
            
            //add these elements to the TextFlow
            p.addChild(s);
            tf.addChild(p);    
            
            //compose TextFlow to display
            var tfController:ContainerController = new ContainerController(this,600,100);
            tfController.container.y = 10
            tf.flowComposer.addController(tfController);
            tf.flowComposer.updateAllControllers();
            


            //define TextFlow manager objects
            um = new UndoManager();
            em = new MyEditManager(um);

            tf.interactionManager = null;
            addListeners(tf);
        }
        
        
        var multiline:Boolean = false;
        

        private function mouseOverHandler(event:MouseEvent):void 
        { 
            Debug.info("mouseOverHandler", event);
           Mouse.cursor = "button"; 
        } 
 

        private function addListeners(textFlow:TextFlow):void
        {
            



            textFlow.addEventListener(
                FlowOperationEvent.FLOW_OPERATION_BEGIN,
                textFlow_flowOperationBeginHandler);


        }


        private function null_handler(event:Event):void {
            // do nothing
        }



    private function textFlow_flowOperationBeginHandler(
                        event:FlowOperationEvent):void
    {
        //trace("operationBegin");
        
        var op:FlowOperation = event.operation;

        // If the user presses the Enter key in a single-line TextView,
        // we cancel the paragraph-splitting operation and instead
        // simply dispatch an 'enter' event.
        if (op is SplitParagraphOperation && !multiline)
        {
            Debug.info("got SplitParagraphOperation");
            event.preventDefault();
        }
        
    }
        public  function setEditable(val:Boolean):void{
            Debug.info('setEditable', val);
            if (val)  {
                tf.interactionManager = em;
            } else {
                tf.interactionManager = null;
            }
        }
    }#
    }


]]>
</script>

<attribute name="k" value="null"/>
<handler name="oninit" args="w">
     k = new  EditManager_example();
     canvas.sprite.addChild(k);      
</handler>

<view y="120" layout="axis:y;spacing:4">
 <button text="Make Editable"
         onclick="canvas.k.setEditable(canvas.k.tf.interactionManager == null); lz.Focus.setFocus(null);
             setAttribute('text', canvas.k.tf.interactionManager == null ? 'Make Editable' : 'Make Read-Only')"
         />
 <button text="Make Multiline"
         onclick="canvas.k.multiline = !canvas.k.multiline; lz.Focus.setFocus(null);
            setAttribute('text', canvas.k.multiline ? 'Make Single-Line' : 'Make Multiline')"/>

</view>



</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
