<canvas>
    <include href="lztest/lztestmanager.lzx" /> 

    <!--
  covers-tags: class smoketest
    -->



<switch>
     <when runtime="swf10">
     <script><![CDATA[
             // SWF10 has its own class implementation, which these tests don't properly cover.
             // TODO [hqm 2009-12] write more portable class implementation test suite, that
             // will work for as3.
             var suiteSubclasses = new LzTestSuite("Subclasses");
             suiteSubclasses.testPass = function() {
                 LzTestManager.assertTrue( true );
             }
             suiteSubclasses.addTest(suiteSubclasses.testPass); 

             ]]>
     </script>
     </when>
     <otherwise>
<script when="immediate"><![CDATA[
  // Test basic classes
  class LzSub {
    var testAttr;
    var accum;

    function LzSub () {
      super();
      this.testAttr = true;
      this.accum = "";
    };

    function testMethod (a) {
      this.accum += a;
    }
  }

  class LzSubSub extends LzSub {
    function LzSubSub () {
      super();
    };

    function testMethod (a) {
      super.testMethod(a);
    }
  }

  // Test subclassing node
  class LzNodeSub extends LzNode {};

  // Test mixin overrides and super calls.
  class Vanilla {
    var initorder = "";
    function Vanilla () {
      super();
      this.initorder += "/vanilla";
    }
    function test () {
      return 'vanilla';
    }
  }

  mixin Banana {
    function Banana () {
      super();
      this.initorder += "/banana";
    }
    function test() {
      return 'banana' + ' ' + super.test.apply(this, arguments);
    }
  }

  class Sundae extends Vanilla with Banana {
    function Sundae () {
      super();
      this.initorder += "/sundae"
    }
    function test() {
      return 'sundae' + ' ' + super.test.apply(this, arguments);
    }
  }
]]>
</script>


<script><![CDATA[

var suiteSubclasses = new LzTestSuite("Subclasses"); 
suiteSubclasses.testSub = function() {

    // We can't easily support this in swf9, do we need to?
    LzSub.addProperty('testAttr2', "foo");

    LzTestManager.assertEquals("LzSub", LzSub.classname);

    var subInst = new LzSub();

    LzTestManager.assertTrue( subInst instanceof LzSub );
    LzTestManager.assertTrue( subInst is LzSub );
    LzTestManager.assertFalse( subInst is Number );
    LzTestManager.assertFalse( subInst is Banana );
    LzTestManager.assertEquals( true, subInst.testAttr );
    LzTestManager.assertEquals( "foo", subInst.testAttr2 );

    LzTestManager.assertEquals( "", subInst.accum );
    subInst.testMethod("bar");
    LzTestManager.assertEquals( "bar", subInst.accum );
    subInst.testMethod("baz");
    LzTestManager.assertEquals( "barbaz", subInst.accum );

    LzTestManager.assertEquals("LzSubSub", LzSubSub.classname);

    var sub2Inst = new LzSubSub();

    LzTestManager.assertTrue( sub2Inst instanceof LzSub);
    LzTestManager.assertTrue( sub2Inst is LzSub);
    LzTestManager.assertFalse( sub2Inst is Number );
    LzTestManager.assertFalse( sub2Inst is Banana );
    LzTestManager.assertTrue( sub2Inst instanceof LzSubSub);
    LzTestManager.assertTrue( sub2Inst is LzSubSub);

    LzTestManager.assertEquals( true, sub2Inst.testAttr );

    LzTestManager.assertEquals( "foo", sub2Inst.testAttr2 );
    LzTestManager.assertEquals( "", sub2Inst.accum );
    sub2Inst.testMethod("bar");

    LzTestManager.assertEquals( "bar", sub2Inst.accum );
    sub2Inst.testMethod("baz");
    LzTestManager.assertEquals( "barbaz", sub2Inst.accum );

}

suiteSubclasses.testClassNodeSub = function () {
    LzTestManager.assertEquals("LzNodeSub", LzNodeSub.classname);

    var nodeSubInst = new LzNodeSub();
    LzTestManager.assertTrue( nodeSubInst instanceof LzNodeSub );
    LzTestManager.assertTrue( nodeSubInst is LzNodeSub );
    LzTestManager.assertFalse( nodeSubInst is Number );
    LzTestManager.assertFalse( nodeSubInst is Banana );
}

suiteSubclasses.testUserClass = function () {
    new LzUserClass(canvas, 
                    {parent: "node", 
                     initobj: {attrs: {"extends": "node",
                                       foocalls: 0,
                                       foo: function () { 
                                         #pragma "methodName=foo"
                                         this.foocalls++; 
                                            }}, 
                               name: "suba"}}, 
                    [], false);
                    
    var suba = _root["suba"];
    
    var insta = new suba(canvas, { name: "insta" }, [], false);
    LzTestManager.assertTrue( insta instanceof suba );
    LzTestManager.assertTrue( insta is suba );
    LzTestManager.assertFalse( insta is Number );
    LzTestManager.assertFalse( insta is Banana );
    
    LzTestManager.assertEquals(0, insta.foocalls);
    insta.foo();
    LzTestManager.assertEquals(1, insta.foocalls);

    new LzUserClass(canvas, 
                    {parent: "suba", 
                     initobj: {attrs: {"extends": "suba",
                                       foooverrides: 0,
                                       foo: function() { 
                                         #pragma "methodName=foo"
                                         super.foo(); 
                                         this.foooverrides++; 
                                            }}, 
                               name: "subb"}}, 
                    [], false);

    var subb = _root["subb"];

    var instb = new subb(canvas, { name: "instb" }, [], false);
    LzTestManager.assertTrue( instb instanceof subb );
    LzTestManager.assertTrue( instb is subb );
    LzTestManager.assertFalse( instb is Number );
    LzTestManager.assertFalse( instb is Banana );
    LzTestManager.assertTrue( instb instanceof suba );
    LzTestManager.assertTrue( instb is suba );
    
    LzTestManager.assertEquals(0, instb.foocalls);
    LzTestManager.assertEquals(0, instb.foooverrides);
    instb.foo();
    LzTestManager.assertEquals(1, instb.foocalls);
    LzTestManager.assertEquals(1, instb.foooverrides);
}

suiteSubclasses.testMixinSuper = function() {
  var treat = new Sundae();
    
  LzTestManager.assertTrue( treat is Sundae, "treat is Sundae" );
  LzTestManager.assertTrue( treat is Vanilla, "treat is Vanilla" );
  LzTestManager.assertFalse( treat is Number );
  // Debug.debug(Testing is on mixins: "%w is %w", treat, Banana)
  LzTestManager.assertTrue( treat is Banana, "treat is Banana" );
  LzTestManager.assertEquals("/vanilla/banana/sundae", treat.initorder);
  LzTestManager.assertEquals("sundae banana vanilla", treat.test());

  // Additional tests to verify `is` optimizations
  LzTestManager.assertFalse( (new Sundae()) instanceof Number );
  LzTestManager.assertTrue( (new Number()) instanceof Number );
  LzTestManager.assertFalse( (new Sundae()) is Number );
  LzTestManager.assertTrue( (new Number()) is Number );

  // Additional tests to verify `cast`
  LzTestManager.assertFalse( (new Sundae()) cast Vanilla instanceof Number );
  LzTestManager.assertTrue( (new Number()) cast Object instanceof Number );
  LzTestManager.assertFalse( (new Sundae()) cast Vanilla is Number );
  LzTestManager.assertTrue( (new Number()) cast Object is Number );

}


suiteSubclasses.addTest(suiteSubclasses.testSub); 
//suiteSubclasses.addTest(suiteSubclasses.testClassNodeSub); 
//suiteSubclasses.addTest(suiteSubclasses.testUserClass); 
suiteSubclasses.addTest(suiteSubclasses.testMixinSuper);

]]>
</script>
</otherwise>
</switch>

</canvas>
<!-- 
/* X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006-2009 Laszlo Systems, Inc.  All Rights Reserved.          *
* Use is subject to license terms.                                        *
* X_LZ_COPYRIGHT_END ******************************************************/
-->
