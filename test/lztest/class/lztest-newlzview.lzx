<canvas>
    <include href="../lztest/lztestmanager.lzx" /> 

<script><![CDATA[

var suiteTestNode = new LzTestSuite("LFC LzView"); 


/*  <view name="view1">
    <view name="a"/>
    <view name="b"/>
  </view>

*/

var ncanvas = NewLzView.make(null, {name: 'fake canvas'}, []);

var view1 = ncanvas.makeChild({
                      attrs: {clickable: true, 
  $events: {
                                    oninit: function $hello$2Elzx_12_50_oninit_event () {
#pragma 'withThis'
{
#beginAttributeStatements
Debug.write('foobar!');
#endAttributeStatements
}},

onclick: function $hello$2Elzx_12_50_onclick_event () {
#pragma 'withThis'
{
#beginAttributeStatements
Debug.write('clicked!');
#endAttributeStatements
}}


},
name: "view1", id: 'v1', width: 300, height: 100, bgcolor: 0xcccccc},
                      children: [{attrs: {name: "a", x: 20, y: 4, width: 200, height: 20, bgcolor: 0xff0000},
                                  name: "NewLzView"},
                                 {attrs: {name: "b", x: 20, y: 30, width: 200, height: 20, bgcolor: 0x00ff00},
                                  name: "NewLzView"}], 
  name: "NewLzView"});


suiteTestNode.testBasicAttributes = function() {
    LzTestManager.assertEquals("view1", view1.name);
    LzTestManager.assertEquals("v1", view1.id);
}

suiteTestNode.testSubNodes = function() {
    var sn = view1.subnodes;
    LzTestManager.assertEquals(2, sn.length);
    LzTestManager.assertEquals("a", sn[0].name);
    LzTestManager.assertEquals("b", sn[1].name);
}

suiteTestNode.testSubviews = function() {
    var sn = view1.subviews;
    LzTestManager.assertEquals(2, sn.length);
    LzTestManager.assertEquals("a", sn[0].name);
    LzTestManager.assertEquals("b", sn[1].name);
}

suiteTestNode.testParent = function() {
    var sn = view1.subnodes;
    LzTestManager.assertEquals(view1, sn[0].parent);
    LzTestManager.assertEquals(view1, sn[1].parent);
}      

suiteTestNode.testChildOf = function() {
    var sn = view1.subnodes;
    LzTestManager.assertTrue(sn[0].childOf(view1));
    LzTestManager.assertTrue(sn[1].childOf(view1));
}
      
suiteTestNode.testImmediateParent = function() {
    var sn = view1.subnodes;
    LzTestManager.assertEquals(view1, sn[0].immediateparent);
    LzTestManager.assertEquals(view1, sn[1].immediateparent);
}
      
suiteTestNode.testNodeLevel = function() {
    var sn = view1.subnodes;
    LzTestManager.assertEquals(view1.nodeLevel + 1, sn[0].nodeLevel);
    LzTestManager.assertEquals(view1.nodeLevel + 1, sn[1].nodeLevel);
}


suiteTestNode.addTest(suiteTestNode.testBasicAttributes); 
suiteTestNode.addTest(suiteTestNode.testSubNodes); 
suiteTestNode.addTest(suiteTestNode.testSubviews); 
suiteTestNode.addTest(suiteTestNode.testParent); 
suiteTestNode.addTest(suiteTestNode.testChildOf); 
suiteTestNode.addTest(suiteTestNode.testImmediateParent); 
suiteTestNode.addTest(suiteTestNode.testNodeLevel); 

]]>
</script>


</canvas>
<!-- 
/* X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006 Laszlo Systems, Inc.  All Rights Reserved.          *
* Use is subject to license terms.                                        *
* X_LZ_COPYRIGHT_END ******************************************************/
-->
