<canvas>
<!--
  covers-tags : lztext
-->
    <font src="helmetr.ttf"               name="Helvetica" />

    <include href="lztest/lztestmanager.lzx" /> 
    <simplelayout axis="y" spacing="2" />
    <text id="t1" />
    <text fontstyle="bold" id="t2" fgcolor="0xffccff" />    
    <text id="t3" font="Helvetica" />        
    <text id="t4" font="Helvetica" fontsize="24" antiAliasType="advanced" >susurrate</text>
    <text id="t5" font="Helvetica" fontsize="24" antiAliasType="advanced" >mimsy borogroves</text>    
    <text id="t6" font="Helvetica" fontsize="24" antiAliasType="normal" sharpness="27" thickness="-8">hello</text>
    <text id="t7" font="Helvetica" fontsize="24" antiAliasType="advanced" sharpness="400" gridFit="none">i should look bad</text>    
    <text id="t8" font="Helvetica" fontsize="24" antiAliasType="advanced" sharpness="400" gridFit="pixel">pixel gridfit</text>        

<script><![CDATA[

var textStyleSuite = new LzTestSuite("Text Style Test Suite"); 


textStyleSuite.testJustText = function () {
    t1.setText("project runway");
    LzTestManager.assertEquals( "project runway", t1.getText());
}

textStyleSuite.testColor = function () {  
   
    // color set at compile time 
    LzTestManager.assertEquals(0xffccff, t2.getAttribute("fgcolor"), "fgcolor set at compile time");
    LzTestManager.assertEquals('bold', t2.getAttribute("fontstyle"), "fontstyle set at compile time");
    
    // color changed at runtime  
    t3.setAttribute("bgcolor", 0x000088); 
    LzTestManager.assertEquals(0x000088, t3.getAttribute("bgcolor")), "bgcolor set at run time";    
    t3.setAttribute("fgcolor", 0xFF0000)
    LzTestManager.assertEquals( 0xFF0000, t3.getAttribute("fgcolor"), "fgcolor set at runtime");
}
   
textStyleSuite.testRenderingHints = function () {
    if (t2.sprite.capabilities.advancedfonts) {
        LzTestManager.assertEquals( 0, t3.getSharpness() ); // should be 0 by default
        LzTestManager.assertEquals( 0, t3.getThickness() ); // should be 0 by default
        t4.setSharpness(377);
        LzTestManager.assertEquals( 377, t4.getSharpness() );
        t4.setThickness(112);
        LzTestManager.assertEquals( 112, t4.getThickness() );
        t4.setSharpness(-212);
        LzTestManager.assertEquals( -212, t4.getSharpness() );
    
        LzTestManager.assertEquals( 27, t6.getSharpness() );
        LzTestManager.assertEquals( -8, t6.getThickness() );
    
        LzTestManager.assertEquals( "subpixel", t2.getGridFit() );
        LzTestManager.assertEquals( "subpixel", t3.getGridFit() );    
        LzTestManager.assertEquals( "none", t7.getGridFit() );    
        LzTestManager.assertEquals( "pixel", t8.getGridFit() );        
    }
}

textStyleSuite.testRenderingDefaults = function () {    
    if (t2.sprite.capabilities.advancedfonts) {
        LzTestManager.assertEquals("advanced", t4.getAntiAliasType()); // should be "advanced" by default
        LzTestManager.assertEquals("advanced", t5.getAntiAliasType()); // should be "advanced" by default
        t5.setAntiAliasType("normal");
        LzTestManager.assertEquals("normal", t5.getAntiAliasType()); 
        t5.setAntiAliasType("weirdo"); // should have no effect, not a legal value
        LzTestManager.assertEquals("normal", t5.getAntiAliasType());     
    }
}

textStyleSuite.testHintsLimits = function () {
    if (t2.sprite.capabilities.advancedfonts) {
        t4.setSharpness(-212);
        t4.setSharpness(515); // should be out of range, shouldn't change value
        LzTestManager.assertEquals( -212, t4.getSharpness() );
        t4.setSharpness(-2378); // should be out of range, shouldn't change value
        LzTestManager.assertEquals( -212, t4.getSharpness() );
        t4.setThickness(315); // should be out of range, shouldn't change value
        LzTestManager.assertEquals( 112, t4.getThickness() );
        t4.setThickness(-2378); // should be out of range, shouldn't change value
        LzTestManager.assertEquals( 112, t4.getThickness() );
    }
}




textStyleSuite.addTest(textStyleSuite.testJustText); 
textStyleSuite.addTest(textStyleSuite.testColor);   
textStyleSuite.addTest(textStyleSuite.testRenderingHints); 
textStyleSuite.addTest(textStyleSuite.testHintsLimits); 
textStyleSuite.addTest(textStyleSuite.testRenderingDefaults);

]]>
</script>


</canvas>
<!-- 
/* X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006-2007 Laszlo Systems, Inc.  All Rights Reserved.          *
* Use is subject to license terms.                                        *
* X_LZ_COPYRIGHT_END ******************************************************/
-->
