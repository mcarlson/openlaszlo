<canvas height="800">
<!--
  covers-tags : lztext

  check that text height is being set properly based on font size
-->

    <include href="lztest/lztestmanager.lzx" /> 
    <class name="post" bgcolor="yellow">
        <attribute name="posttext" value="" type="string"/>
        <text name="thetext" multiline="true" width="110" text="${parent.posttext}"/>
    </class>
  
    <dataset name="testds">
        <text><![CDATA[What was this guy thinking?  I mean to each their own, but I can't figure out someone would think this would look good.  You've got to view the <a href="http://www.flickr.com/photo_zoom.gne?id=174062027&size=l">Large Version</a> of this photo to take it all in...

I'm sure he paid a good bit for the airbrush work, wow...  and on a tan car at that... one 1977 Corvette that needs repainted.

<b>NOTE:</b> This photo made it into Flickr's '<a href="http://flickr.com/explore/">Explore</a>" as one of the top five hundred most interesting photos on a particular day.  You can see all of my photo's that have made it into the Flickr Explore pages <a href="http://www.flickr.com/photos/fensterbme/tags/interestingness/">here</a>.]]></text>
    </dataset>

    <dataset name="dstext" >
        <text>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nunc ac ante sed ante imperdiet auctor.</text>
        <text>Lorem ipsum dolor sit amet</text>
    </dataset>

    <simplelayout axis="x" spacing="2" />
    <view name="texts">
        <simplelayout axis="y" spacing="2" />
        <view width="17" height="17" bgcolor="red"/>
        <text resize="true" id="t1">A</text>
        <text fontsize="28" id="t2">B</text>
        <text fontsize="36" id="t3" >C</text>
        <text multiline="true" width="100" id="t4" oninit="setText('oneline\ntwolines');"/>
        <text text="Username:" id="t5"/>
        <text multiline="true" id="t6">Oneline<br/>Two lines<br/>Three</text>
        <text multiline="true" id="t7" width="350">The text that appears in the combobox may be different from the
            value represented by the list item.  In the examples below the value is
            displayed using a constraint tied to the value attribute of the combobox</text>
        <text text="" resize="false" width="100" fgcolor="0x1b1191" fontsize="10" id="t8" oninit="this.setText('foo bar bar foo')"/>
        <text text="" width="100" fgcolor="0x1b1191" fontsize="10" id="t9" oninit="this.setText('foo bar bar foo')"/>
        <text text="" resize="true" width="100" fgcolor="0x1b1191" fontsize="10" id="t10" oninit="this.setText('foo bar bar foo')"/>
        <text multiline="true" id="t11" width="350" oninit="this.setText('The text that appears in the combobox may be different from the
            value represented by the list item.  In the examples below the value is
            displayed using a constraint tied to the value attribute of the combobox')"/>

        <post posttext="Type some text here please" id="thepost"/>
        <text id="tempty"/>
        <view width="230">   
            <text id="t12" datapath="testds:/text/text()" 
                    fgcolor="0x5c5c5c" bgcolor="yellow"
                    multiline="true"
                    width="${parent.width}" />
        </view>
    </view>

    <view name="texts2">
        <simplelayout axis="y" spacing="2" />

        <!-- from a.bargull -->
        <text id="a" datapath="dstext:/text[1]/text()" multiline="true" resize="false" width="120" height="40" bgcolor="#eaeaea" />
        <text id="b" datapath="dstext:/text[1]/text()" multiline="true" resize="true" width="120" bgcolor="#eaeaea" />
        <text id="e" datapath="dstext:/text[2]/text()" multiline="false" resize="false" width="120" height="40" bgcolor="#eaeaea" />
        <text id="f" datapath="dstext:/text[2]/text()" multiline="false" resize="true" bgcolor="#eaeaea" />
    </view>

    <view name="inputtexts">
        <simplelayout axis="y" spacing="2" />
        <inputtext  width="200" id="it1" fgcolor="red">A</inputtext>
        <inputtext  width="200" fontsize="28" fgcolor="red" id="it2">B</inputtext>
        <inputtext  width="200" fontsize="36" fgcolor="red" id="it3" >C</inputtext>
        <inputtext  fontsize="28" resize="false" fgcolor="red" id="it4">D</inputtext>
        <inputtext  fontsize="20" fgcolor="red" id="it5" multiline="true">E<br/>F</inputtext>
        <inputtext  fontsize="28" fgcolor="red" id="it6">D</inputtext>
        <inputtext multiline="true" id="it7" width="350"/>

        <!-- from a.bargull -->
        <inputtext id="c" datapath="dstext:/text[1]/text()" multiline="true" resize="false" width="120" height="40" bgcolor="#eaeaea" />
        <inputtext id="d" datapath="dstext:/text[1]/text()" multiline="true" resize="true" width="120" bgcolor="#eaeaea" />
        <inputtext id="g" datapath="dstext:/text[2]/text()" multiline="false" resize="false" width="120" height="40" bgcolor="#eaeaea" />
        <inputtext id="h" datapath="dstext:/text[2]/text()" multiline="false" resize="true" bgcolor="#eaeaea" />
    </view>    

<script><![CDATA[

var textSizeSuite = new LzTestSuite("Text Size Test Suite"); 


textSizeSuite.testJustText = function () {
    t1.setText("Heebee Jeebee");
    LzTestManager.assertEquals( "Heebee Jeebee", t1.getText());
    it4.setText("DDD");
    LzTestManager.assertEquals( "DDD", it4.getText());
    it6.setText("DDD");
    LzTestManager.assertEquals( "DDD", it6.getText());
    it7.setText('The text that appears in the combobox may be different from the value represented by the list item.  In the examples below the value is displayed using a constraint tied to the value attribute of the combobox');
    LzTestManager.assertEquals( 'The text that appears in the combobox may be different from the value represented by the list item.  In the examples below the value is displayed using a constraint tied to the value attribute of the combobox', it7.getText());
}

textSizeSuite.testHeight = function () {
    LzTestManager.assertEquals(17, t1.height, "text1 height");
    LzTestManager.assertEquals(38, t2.height, "text2 height");
    LzTestManager.assertEquals(48, t3.height, "text3 height");
    LzTestManager.assertEquals(30, t4.height, "multiline4 text height");
    LzTestManager.assertEquals(17, t5.height, "text5 height");
    LzTestManager.assertEquals(43, t6.height, "multiline6 text height");
    LzTestManager.assertEquals(43, t6.height, "multiline6 text.height");
    LzTestManager.assertEquals(56, t7.height, "multiline7 text height");
    LzTestManager.assertEquals(16, t8.height, "text8 height");
    LzTestManager.assertEquals(16, t9.height, "text9 height");
    LzTestManager.assertEquals(16, t10.height, "text10 height");
    LzTestManager.assertEquals(56, t11.height, "multiline11 text height");
    LzTestManager.assertEquals(277, t12.height, "text12 height");
    LzTestManager.assertEquals(17, it1.height, "inputtext1 height");
    LzTestManager.assertEquals(38, it2.height, "inputtext2 height");
    LzTestManager.assertEquals(48, it3.height, "inputtext3 height");
    LzTestManager.assertEquals(38, it4.height, "inputtext4 height");
    LzTestManager.assertEquals(52, it5.height, "multiline inputtext5 height");
    LzTestManager.assertEquals(38, it6.height, "inputtext6 height");
    LzTestManager.assertEquals(56, it7.height, "multiline7 inputtext height");
    
    LzTestManager.assertEquals(17, tempty.height, "tempty.height");
    LzTestManager.assertEquals(30, thepost.height, "thepost height");

    LzTestManager.assertEquals(40, a.sprite.getTextfieldHeight(), "a height");
    LzTestManager.assertEquals(13, a.sprite.getTextHeight(), "a height");
    LzTestManager.assertEquals(82, b.sprite.getTextfieldHeight(), "b height");
    LzTestManager.assertEquals(13, b.sprite.getTextHeight(), "b height");
    LzTestManager.assertEquals(40, e.sprite.getTextfieldHeight(), "e height");
    LzTestManager.assertEquals(13, e.sprite.getTextHeight(), "e height");
    LzTestManager.assertEquals(17, f.sprite.getTextfieldHeight(), "f height");
    LzTestManager.assertEquals(13, f.sprite.getTextHeight(), "f height");
    LzTestManager.assertEquals(40, c.sprite.getTextfieldHeight(), "c height");
    LzTestManager.assertEquals(13, c.sprite.getTextHeight(), "c height");
    LzTestManager.assertEquals(82, d.sprite.getTextfieldHeight(), "d height");
    LzTestManager.assertEquals(13, d.sprite.getTextHeight(), "d height");
    LzTestManager.assertEquals(40, g.sprite.getTextfieldHeight(), "g height");
    LzTestManager.assertEquals(13, g.sprite.getTextHeight(), "g height");
    LzTestManager.assertEquals(17, h.sprite.getTextfieldHeight(), "h height");
    LzTestManager.assertEquals(13, h.sprite.getTextHeight(), "h height");
}

textSizeSuite.testWidth = function () {
    // color set at compile time 
    LzTestManager.assertEquals(91, t1.width, "text1 width");
    LzTestManager.assertEquals(23, t2.width, "text2 width");
    LzTestManager.assertEquals(29, t3.width, "text3 width");
    LzTestManager.assertEquals(100, t4.width, "multiline4 text width");
    LzTestManager.assertEquals(67, t5.width, "text5 width");
    LzTestManager.assertEquals(t6.parent.width, t6.width, "multiline6 text.width");
    LzTestManager.assertEquals(350, t7.width, "multiline7 text.width");
    LzTestManager.assertEquals(100, t8.width, "text8 width");
    LzTestManager.assertEquals(100, t9.width, "text9 width");
    LzTestManager.assertEquals(88, t10.width, "text10 width");
    LzTestManager.assertEquals(350, t11.width, "multiline7 text.width");
    LzTestManager.assertEquals(230, t12.width, "text12.width");
    LzTestManager.assertEquals(200, it1.width, "inputtext1 width");
    LzTestManager.assertEquals(200, it2.width, "inputtext2 width");
    LzTestManager.assertEquals(200, it3.width, "inputtext3 width");
    LzTestManager.assertEquals(26, it4.width, "inputtext4 width");
    LzTestManager.assertEquals(it5.parent.width, it5.width, "multiline inputtext5 width");
    LzTestManager.assertEquals(26, it6.width, "inputtext6 width");

    LzTestManager.assertEquals(350, it7.width, "multiline7 inputtext width");
    LzTestManager.assertEquals(0, tempty.width, "tempty.width");
    LzTestManager.assertEquals(110, thepost.width, "thepost.width");
}

textSizeSuite.addTest(textSizeSuite.testJustText); 
textSizeSuite.addTest(textSizeSuite.testHeight); 
textSizeSuite.addTest(textSizeSuite.testWidth); 
]]>
</script>


</canvas>
<!-- 
/* X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2007-2008 Laszlo Systems, Inc.  All Rights Reserved.          *
* Use is subject to license terms.                                        *
* X_LZ_COPYRIGHT_END ******************************************************/
-->
