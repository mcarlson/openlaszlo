<canvas>
  <include href="lztest/lztestmanager.lzx" /> 
  <include href="utils/layouts/simpleboundslayout.lzx" /> 

<!--
  covers-tags : lzview
-->


  <simplelayout axis="x" spacing="5"/>

<!-- view1: simple view -->
  <view name="view1" x="10" y="20" width="50" height="30" clip="true" bgcolor="yellow" fgcolor="blue" opacity="0.5">
  </view>

<!-- view2: simple, nested views -->
  <view name="view2" bgcolor="yellow" resource="1x1.gif">
    <view name="v1" bgcolor="green" width="10" height="30"/>
    <view name="v2" bgcolor="red" x="90" y="100" width="10" height="20"/>
  </view>

<!-- view3: stretch -->
  <view name="view3" width="50" height="80" bgcolor="yellow">
    <view name="v1" bgcolor="green" width="10" height="20" resource="1x1.gif" stretches="both"/>
  </view>

<!-- view4: rotation -->
  <view name="view4" bgcolor="yellow">
    <view name="v1" bgcolor="green" width="20" height="10" rotation="0"/>
    <view name="v2" bgcolor="green" width="20" height="10" rotation="45"/>
    <view name="v3" bgcolor="green" width="20" height="10" rotation="90"/>
    <simpleboundslayout name="thelayout" axis="x"/>
  </view>

<!-- view5: z-order -->
  <view name="view5" bgcolor="yellow">
    <view name="v1" bgcolor="green" x="0" y="0" width="20" height="10"/>
    <view name="v2" bgcolor="red" x="5" y="5" width="20" height="10"/>
    <view name="v3" bgcolor="blue" x="10" y="10" width="20" height="10"/>
  </view>

<!-- view6: sizing -->
  <view name="view6" bgcolor="yellow">
    <view name="v1" bgcolor="green" x="5" y="10" width="35" height="25"/>
    <view name="v2" bgcolor="blue" width="35" height="25"/>
  </view>

<!-- view7: constraints -->
  <view name="view7" bgcolor="yellow">
    <attribute name="height" value="${width+1}"/>
    <attribute name="rotation" value="${height+1}"/>

    <view name="v1" bgcolor="green" x="5" y="10" width="35" height="25"/>
  </view>

<!-- view8: clip -->
  <view name="view8" bgcolor="yellow" width="20" height="30" clip="true">
    <view name="v1" bgcolor="green" x="5" y="10" width="35" height="25"/>
  </view>

<!-- view9: align -->
  <view name="view9" bgcolor="yellow" width="20" height="30">
    <view name="v1" bgcolor="green" width="10" height="15"/>
  </view>

<!-- view10: resource -->
  <view name="view10" bgcolor="yellow">
    <handler name="onload"> 
      var expwidth  = view10resources[view10index][0];
      var expheight = view10resources[view10index][1];

      LzTestManager.assertEquals (expwidth, view10.width, "view10.onload width failure");
      LzTestManager.assertEquals (expheight, view10.height, "view10.onload height failure");
      LzTestManager.assertEquals (expwidth, view10.resourcewidth, "view10.onload resourcewidth failure");
      LzTestManager.assertEquals (expheight, view10.resourceheight, "view10.onload resourceheight failure");

      if (view10index &lt; view10resources.length-1) {
        // Setup the next resource to load. It gets setup in an idle loop
        // to avoid a race condition
        view10index = view10index + 1;
        view10changed = true;
      }
    </handler>

    <!-- Idle handler that will setup the next resource to load -->
    <handler name="onidle" reference="lz.Idle">
      if (view10changed) {
        view10changed = false;
        view10.setSource (view10resources[view10index][2]);        
      }
    </handler>
  </view>

<!-- view11: invisible -->
  <view name="view11" bgcolor="yellow">
    <view name="v1" bgcolor="green" width="10" height="20"/>
    <view name="v2" bgcolor="blue" x="90" y="80" width="10" height="20"/>
  </view>

<!-- view12: stretching view using animation -->
  <view name="view12" bgcolor="yellow">
    <view name="v1" bgcolor="green" width="10" height="20">

      <animator name="a1" attribute="x" from="0" to="100" duration="500" start="false">
        <handler name="onstop">
        <![CDATA[
          LzTestManager.assertEquals (110, view12.width, "view12.width failure (onstop)");
          LzTestManager.assertEquals (20, view12.height, "view12.height failure (onstop)");
          loctest ('view12.v1 (onstop)', view12.v1, [100,0,10,20]);
        ]]>
        </handler>

      </animator>

    </view>

  </view>

<!-- view13: Stretch/Clipping using a resource -->
  <view name="view13" bgcolor="yellow">
    <handler name="onload">
      LzTestManager.assertEquals (30, view13.width, "view13.width failure");
      LzTestManager.assertEquals (40, view13.height, "view13.height failure");
    </handler>
    <view name="v1" width="30" height="40" clip="true">
      <handler name="oninit">
        this.setSource( "pict5.jpg" );
      </handler>
      <handler name="onload">
        LzTestManager.assertEquals (30, view13.v1.width, "view13.v1.width failure");
        LzTestManager.assertEquals (40, view13.v1.height, "view13.v1.height failure");
      </handler>
    </view>
    <view name="v2" width="30" height="40" stretches="both">
      <handler name="oninit">
        this.setSource( "pict5.jpg" );
      </handler>
      <handler name="onload">
        LzTestManager.assertEquals (30, view13.v2.width, "view13.v2.width failure");
        LzTestManager.assertEquals (40, view13.v2.height, "view13.v2.height failure");
      </handler>
    </view>
  </view>


<!-- view14: rotations, around the center -->
  <view name="view14" bgcolor="yellow">
    <simplelayout/>
    <view name="v1" bgcolor="green" width="20" height="10" xoffset="10" yoffset="5" rotation="45"/>
    <view name="v2" bgcolor="red" width="20" height="10" xoffset="10" yoffset="5"/>
  </view>



<script><![CDATA[

var suite = new LzTestSuite("LzView Test Suite"); 

// NOTE:
//
// Future enhancements to LzView unit test:
//   - Test event generation



//
// Helper functions
//

// z-order (for test5)
function ztest(msg,exp,act)
{
  LzTestManager.assertEquals (exp.length, act.length, msg + ": ztest length");
  for (var i=0; i<exp.length; i++) {
    LzTestManager.assertEquals (exp[i].name, act[i].name, msg + ": index " + i);
  }
}

// Inspect [x,y,width,height] and compare with the specified view
function loctest(msg,view,exp)
{
  LzTestManager.assertWithin (exp[0], view.sprite.x, .1, msg + ": x failure");  
  LzTestManager.assertWithin (exp[1], view.sprite.y, .1, msg + ": y failure");  
  LzTestManager.assertWithin (exp[2], view.sprite.width, .1, msg + ": width failure");  
  LzTestManager.assertWithin (exp[3], view.sprite.height, .1, msg + ": height failure");  
}

// 
// LzView
// 

// test1:  simple. Also tests some getters and setters
suite.test1 = function() {
  // This will report an error until lps 3.3.1 is merged to legals
  loctest("view1", view1, [0,20,50,30]);
  LzTestManager.assertEquals (0xffff00, view1.bgcolor, "view1.bgcolor failure");
  LzTestManager.assertEquals (0x0000ff, view1.fgcolor, "view1.fgcolor failure");
  LzTestManager.assertEquals (0.5, view1.opacity, "view1.opacity failure");  
  LzTestManager.assertEquals (true, view1.hassetwidth, "view1.hassetwidth failure");  
  LzTestManager.assertEquals (true, view1.hassetheight, "view1.hassetheight failure");  


  // setAttributes
  view1.setAttribute ('x', 10); // Won't stick since layout controls x
  view1.setAttribute ('y', 30);
  view1.setAttribute ('width', 60);
  view1.setAttribute ('height', 40);
  view1.setAttribute ('bgcolor', 0xff0000);
  view1.setAttribute ('fgcolor', 0xffff00);

  // This will report an error until lps 3.3.1 is merged to legals
  loctest("view1 (2)", view1, [0,30,60,40]);
  LzTestManager.assertEquals (0xff0000, view1.bgcolor, "view1.bgcolor failure (2)");
  LzTestManager.assertEquals (0xffff00, view1.fgcolor, "view1.fgcolor failure (2)");


  // Direct calls
  view1.setAttribute('x', 20);
  view1.setAttribute('y', 40);
  view1.setAttribute('width', 70);
  view1.setAttribute('height', 50);
  view1.setAttribute('bgcolor', 0x00ff00);
  view1.setAttribute('fgcolor', 0x0000ff);


  // This will report an error until lps 3.3.1 is merged to legals
  loctest("view1 (3)", view1, [0,40,70,50]);
  LzTestManager.assertEquals (0x00ff00, view1.bgcolor, "view1.bgcolor failure (3)");
  LzTestManager.assertEquals (0x0000ff, view1.fgcolor, "view1.fgcolor failure (3)");
}

// test2: simple, nested views
suite.test2 = function() {
  loctest("view2", view2, [75,0,100,120]);
  loctest("view2.v1", view2.v1, [0,0,10,30]);
  loctest("view2.v2", view2.v2, [90,100,10,20]);

  LzTestManager.assertEquals (false, view2.hassetwidth, "view2.hassetwidth failure");  
  LzTestManager.assertEquals (false, view2.hassetheight, "view2.hassetheight failure");  

  // There is an image associated with this view
  LzTestManager.assertEquals (1,  view2.frame, 'view2.frame failure');
  LzTestManager.assertEquals (1,  view2.totalframes, 'view2.totalframes failure');

  // Turn off the v1
  view2.v1.setAttribute('visible', false);

  loctest("view2 (2)", view2, [75,0,100,120]);
  loctest("view2.v2 (2)", view2.v2, [90,100,10,20]);

  // Now do v2 (all that is left is the embedded image)
  view2.v2.setAttribute('visible', false);
  loctest("view2 (3)", view2, [75,0,1,1]);

  // Turn on v1
  view2.v1.setAttribute('visible', true);
  loctest("view2 (4)", view2, [75,0,10,30]);
  loctest("view2.v1 (2)", view2.v1, [0,0,10,30]);
}

// test3: stretch
suite.test3 = function() {
  loctest("view3", view3, [90,0,50,80]);
  LzTestManager.assertEquals (0, view3.unstretchedwidth, "view3.unstretchedwidth failure");
  LzTestManager.assertEquals (0, view3.unstretchedheight, "view3.unstretchedheight failure");

  LzTestManager.assertEquals (1, view3.v1.resourcewidth, "view3.v1.resourcewidth failure");
  LzTestManager.assertEquals (1, view3.v1.resourceheight, "view3.v1.resourceheight failure");

  loctest("view3.v1", view3.v1, [0,0,10,20]);
  LzTestManager.assertEquals (1, view3.v1.unstretchedwidth, "view3.v1.unstretchedwidth failure");
  LzTestManager.assertEquals (1, view3.v1.unstretchedheight, "view3.v1.unstretchedheight failure");

  view3.v1.setAttribute('stretches', 'width');
  loctest("view3.v1 (2)", view3.v1, [0,0,10,20]);
  LzTestManager.assertEquals (1, view3.v1.unstretchedwidth, "view3.v1.unstretchedwidth failure (2)");
  LzTestManager.assertEquals (0, view3.v1.unstretchedheight, "(BUG: LPP-2161) view3.v1.unstretchedheight failure (2)");

  view3.v1.setAttribute('stretches', 'height');
  loctest("view3.v1 (3)", view3.v1, [0,0,10,20]);
  LzTestManager.assertEquals (0, view3.v1.unstretchedwidth, "(BUG: LPP-2161) view3.v1.unstretchedwidth failure (3)");
  LzTestManager.assertEquals (1, view3.v1.unstretchedheight, "view3.v1.unstretchedheight failure (3)");
}

// test4: Rotation and bounding box
suite.test4 = function() {
  loctest("view4.v1", view4.v1, [0,0,20,10]);

  LzTestManager.assertEquals (0.0, view4.v1.rotation, "view4.v1.rotation failure");  
  LzTestManager.assertEquals (45.0, view4.v2.rotation, "view4.v2.rotation failure");  
  LzTestManager.assertEquals (90.0, view4.v3.rotation, "view4.v3.rotation failure");  

  // The width and height can be computed exactly
  var expw = 20 + 10 + 30.0 / Math.sqrt(2.0);
  var exph = 30.0 / Math.sqrt(2.0);
  LzTestManager.assertWithin (expw, view4.width, 1.0e-10, "view4.width failure");
  LzTestManager.assertWithin (exph, view4.height, 1.0e-10, "view4.height failure");
}


suite.test5 = function() {
  LzTestManager.assertEquals (0, (view1.getDepthList()).length, "view1.getDepthList() should have a length of 0");
  
  LzTestManager.assertEquals (1, (view3.getDepthList()).length, "view3.getDepthList() should have a length of 1");

  ztest ("ztest initial", view5.getDepthList(), [view5.v1, view5.v2, view5.v3]);

  LzTestManager.assertEquals(view5.v2.isInFrontOf(view5.v1), true, "view5.v2.isInFrontOf(view5.v1)");
  LzTestManager.assertEquals(view5.v2.isInFrontOf(view5.v2), false, "view5.v2.isInFrontOf(view5.v2)");
  LzTestManager.assertEquals(view5.v2.isInFrontOf(view5.v3), false, "view5.v2.isInFrontOf(view5.v3)");

  LzTestManager.assertEquals(view5.v2.isBehind(view5.v3), true, "view5.v2.isBehind(view5.v3)");
  LzTestManager.assertEquals(view5.v2.isBehind(view5.v2), false, "view5.v2.isBehind(view5.v2)");
  LzTestManager.assertEquals(view5.v2.isBehind(view5.v1), false, "view5.v2.isBehind(view5.v1)");

  view5.v2.bringToFront();
  ztest ("ztest v2 to front", [view5.v1, view5.v3, view5.v2], view5.getDepthList());

  LzTestManager.assertEquals(view5.v2.isInFrontOf(view5.v1), true, "view5.v2.isInFrontOf(view5.v1)");
  LzTestManager.assertEquals(view5.v2.isInFrontOf(view5.v3), true, "view5.v2.isInFrontOf(view5.v3)");

  LzTestManager.assertEquals(view5.v2.isBehind(view5.v3), false, "view5.v2.isBehind(view5.v3)");
  LzTestManager.assertEquals(view5.v2.isBehind(view5.v1), false, "view5.v2.isBehind(view5.v1)");
 
  view5.v2.sendToBack();
  ztest ("ztest v2 to back", [view5.v2, view5.v1, view5.v3], view5.getDepthList());

  view5.v3.sendBehind(view5.v1);
  ztest ("ztest v3 behind v1", [view5.v2, view5.v3, view5.v1], view5.getDepthList());

  view5.v2.sendInFrontOf(view5.v3);
  ztest ("ztest v2 front of v3", [view5.v3, view5.v2, view5.v1], view5.getDepthList());

  view5.v3.sendBehind(view5.v3);  // nop
  ztest ("ztest v3 send behind v3 nop", [view5.v3, view5.v2, view5.v1], view5.getDepthList());

  view5.v1.sendInFrontOf(view5.v1); // nop
  ztest ("ztest v1 front of v1 nop", [view5.v3, view5.v2, view5.v1], view5.getDepthList());

  view5.v3.sendToBack(); // nop
  ztest ("ztest v3 to back nop", [view5.v3, view5.v2, view5.v1], view5.getDepthList());

  view5.v1.bringToFront(); // nop
  ztest ("ztest v1 to front nop", [view5.v3, view5.v2, view5.v1], view5.getDepthList());
}

// sizing
suite.test6 = function() {
  LzTestManager.assertEquals (view6.measureWidth(), view6.width, "view6.width failure");  
  LzTestManager.assertEquals (view6.measureHeight(), view6.height, "view6.height failure");  

  LzTestManager.assertEquals (Math.max(view6.v1.x+view6.v1.width, view6.v2.x+view6.v1.height), view6.width, "view6.width failure (2)");  
  LzTestManager.assertEquals (Math.max(view6.v1.y+view6.v1.height, view6.v2.y+view6.v1.height), view6.height, "view6.height failure (2)");  
}

// constraints
suite.test7 = function() {
  LzTestManager.assertEquals (view7.v1.x + view7.v1.width, view7.width, "view7.width failure");  
  LzTestManager.assertEquals (view7.width+1, view7.height, "view7.height failure");  
  LzTestManager.assertEquals (view7.height+1, view7.rotation, "view7.rotation failure");  

  // Alter the subview width
  view7.v1.setAttribute('width', 40);
  LzTestManager.assertEquals (view7.v1.x + view7.v1.width, view7.width, "view7.width failure (2)");
  LzTestManager.assertEquals (view7.width+1, view7.height, "view7.height failure (2)");
  LzTestManager.assertEquals (view7.height+1, view7.rotation, "view7.rotation failure (2)");

  // Alter the view width
  view7.setAttribute('width', 42);
  LzTestManager.assertEquals (42, view7.width, "view7.width failure (3)");
  LzTestManager.assertEquals (view7.width+1, view7.height, "view7.height failure (3)");
  LzTestManager.assertEquals (view7.height+1, view7.rotation, "view7.rotation failure (3)");

  // Change the constraint
  var c1 = function (height) {
    this.setAttribute('height', this.width+2);
  }
  var ref = [view7, 'height'];
  view7.applyConstraint('height', c1, ref);
  LzTestManager.assertEquals (42, view7.width, "view7.width failure (3)");
  LzTestManager.assertEquals (view7.width+2, view7.height, "view7.height failure (3)");
  LzTestManager.assertEquals (view7.height+1, view7.rotation, "view7.rotation failure (3)");

}

// clip (not much can be tested)
suite.test8 = function() {
  LzTestManager.assertEquals (20, view8.width, "view8.width failure");  
  LzTestManager.assertEquals (30, view8.height, "view8.height failure");  

  LzTestManager.assertEquals (view8.v1.x + view8.v1.width, view8.measureWidth(), "view8.measureWidth() failure");  
  LzTestManager.assertEquals (view8.v1.y + view8.v1.height, view8.measureHeight(), "view8.measureHeight() failure");  
}

// align
suite.test9 = function() {
  loctest ('view9', view9.v1, [0,0,10,15]);

  view9.v1.setAttribute('align', 'center');
  loctest ('view9 (center)', view9.v1, [5,0,10,15]);

  view9.v1.setAttribute('align', 'right');
  loctest ('view9 (right)', view9.v1, [10,0,10,15]);

  view9.v1.setAttribute('align', 'left');
  loctest ('view9 (left)', view9.v1, [0,0,10,15]);

  view9.v1.setAttribute('valign', 'middle');
  loctest ('view9 (middle)', view9.v1, [0,7.5,10,15]);

  view9.v1.setAttribute('valign', 'bottom');
  loctest ('view9 (bottom)', view9.v1, [0,15,10,15]);

  view9.v1.setAttribute('valign', 'top');
  loctest ('view9 (top)', view9.v1, [0,0,10,15]);
}

// resource. Define the width, height, resources to load
var view10index = 0;
var view10changed = false;
var view10resources=[
[1, 1, '1x1.gif'],
[10, 10, '10x10.gif'],
[7, 7, 'spacer.gif']
];

suite.test10 = function() {
  LzTestManager.assertEquals (0, view10.width, "view10.width failure");
  LzTestManager.assertEquals (0, view10.height, "view10.height failure");

  // Set view10changed to true and the next resource (ie. the first) will be set
  view10index = 0;
  view10changed = true;
}

suite.test11 = function() {
  LzTestManager.assertEquals (100, view11.width, "view11.width failure");
  LzTestManager.assertEquals (100, view11.height, "view11.height failure");
  LzTestManager.assertTrue (view11.v2.visible, "view11.v2.visible");
  loctest ('view11.v1', view11.v1, [0,0,10,20]);
  loctest ('view11.v2', view11.v2, [90,80,10,20]);

  view11.v2.setAttribute('visible', false);

  LzTestManager.assertEquals (10, view11.width, "view11.width failure (2)");
  LzTestManager.assertEquals (20, view11.height, "view11.height failure (2)");
  LzTestManager.assertFalse (view11.v2.visible, "view11.v2.visible (2)");
  loctest ('view11.v1 (2)', view11.v1, [0,0,10,20]);
  loctest ('view11.v2 (2)', view11.v2, [90,80,10,20]);
}

suite.test12 = function() {
  LzTestManager.assertEquals (10, view12.width, "view12.width failure");
  LzTestManager.assertEquals (20, view12.height, "view12.height failure");
  loctest ('view12.v1', view12.v1, [0,0,10,20]);

  view12.v1.a1.doStart();
}


suite.test13 = function() {
  // Built-into object view14
}

suite.test14 = function() {
  if (view14.capabilities.rotation) loctest ('view14', view14.v1, [-3.53553390593274,-10.6066017177982,20,10]);
  loctest ('view14', view14.v2, [-10,5,20,10]);
}
/* Leave for last
suite.testN = function() {
  var b = view5.v1.getBounds();
  Debug.write (b.x + "," + b.y + "  " + b.width + "x" + b.height + " (" + b.xoffset + "," + b.yoffset + ")");
}
*/

// Run the tests in order (test1,test2,...)
suite.addTest(suite.test1);
suite.addTest(suite.test2);
suite.addTest(suite.test3);
suite.addTest(suite.test4);
suite.addTest(suite.test5);
suite.addTest(suite.test6);
suite.addTest(suite.test7);
suite.addTest(suite.test8);
suite.addTest(suite.test9);
suite.addTest(suite.test10);
suite.addTest(suite.test11);
suite.addTest(suite.test12);
suite.addTest(suite.test13);
suite.addTest(suite.test14);





]]>
</script>


</canvas>
<!-- 
/* X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2007-2009 Laszlo Systems, Inc.  All Rights Reserved.          *
* Use is subject to license terms.                                        *
* X_LZ_COPYRIGHT_END ******************************************************/
-->
