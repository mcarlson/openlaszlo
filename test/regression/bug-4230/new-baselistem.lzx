<library>
    <include href="base/basevaluecomponent.lzx" />

    <!--- A group of items that typically is used within a baselist. -->
        <class name="newbaselistitem" extends="basevaluecomponent" clickable="true" focusable="false">

        <!--- Whether this item is selected. Our containing list will adopt the value
              of this component when it is selected. -->
        <attribute name="selected" value="false" setter="this._setselected(selected)"/>

        <!--- Event sent when this item is selected. -->
        <attribute name="onselected" value="null" />

        <!--- Event sent when the user makes a selection. -->
        <attribute name="onselect" value="null" />

        <!--- This is the event that sets this item as selected with its
              _parentcomponent( an extension of baselist ).
              The default is onclick, but it can be set to anything like
              onmousetrackup as in the combobox component.
              @keywords private -->
        <attribute name="_selectonevent" value="onclick" type="string" setter="this.setSelectOnEvent(_selectonevent)" />

        <!--- @keywords private -->
        <method name="setdatapath" args="dp">
            if (null != this.datapath) {
                this.datapath.setXPath(dp);
            } else {
                var data_args = { xpath : dp }
                if (_parentcomponent.dataoption == "lazy" ||
                    _parentcomponent.dataoption == "resize") {
                    data_args.replication = _parentcomponent.dataoption;
                    data_args.spacing = _parentcomponent['spacing'];
                    data_args.asyncnew = false;
                } else if (_parentcomponent.dataoption == "pooling") {
                   data_args.pooling = true;
                }
                new LzDatapath ( this, data_args );
            }
        </method>

        <!--- @keywords private -->
        <attribute name="_valuedatapath" value="null"/>
        <!--- @keywords private -->
        <attribute name="_textdatapath" value="null"/>
        <!--- @keywords private -->
        <method name="dataBindAttribute" args="attr, path">
            if (_parentcomponent.dataoption == "lazy") {
                if (attr == 'text') this._textdatapath = path;
                else if (attr == 'value') this._valuedatapath = path;
            }
            super.dataBindAttribute(attr, path);
        </method>

        <!--- @keywords private -->
        <method name="setSelectOnEvent" args="es">
                this._selectDL = new LzDelegate(this,'doClick',this,es);
        </method>

        <!--- @keywords private -->
        <method name="doClick">
            _parentcomponent.select(this);
        </method>

        <!--- when the user clicks on an item, the
              parent component needs to get the focus, so that the user may start
              navigating with the arrow keys after a click
              @keywords private -->
        <method name="_doMousedown">  <![CDATA[
            super._doMousedown();
            if (!this.focusable && _parentcomponent &&
                 _parentcomponent.focusable) {
               LzFocus.setFocus(_parentcomponent, false); // false => focus from mouse
            }
        ]]> </method>

        <!--- sets the selected attribute, called by the selection manager
              if this is within a baselist, this method is guaranteed
              to be called after all subviews are initialized
              @keywords private -->
        <method name="setSelected" args="s">
            <![CDATA[
                this.selected = s;
                if (this.onselect) this.onselect.sendEvent(this);
                if (this.onselected) this.onselected.sendEvent(this);
            ]]>
        </method>

        <!--- this is a setter for the selected attribute
              it simply calls the _parentcomponent's select method, which is
              responsible for calling setSelected
              If you want to set whether this view is selected, use
              setAttribute('selected', true)
              @keywords protected -->
        <method name="_setSelected" args="s">
            <![CDATA[
                if (s) {
                    _parentcomponent.select(this);
                }
                // set the value of the 'selected' attribute here
                // since this may be called before the selection manager is
                // created
                this.selected = s;
            ]]>
        </method>

        </class>
</library>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
