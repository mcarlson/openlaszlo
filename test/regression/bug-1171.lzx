<!--
  Coverage test for the new 'when' attribute of attributes:

  Verify that attributes of type 'string' are quoted by default
  (when="immediately")

  Verify that each of the when cases, "immediately", "once", and
  "always" behave as expected.
-->
<canvas debug="true" width="1024" height="768">
  <debug height="400" width="600" x="0" y="200" />
  <include href="lzunit" />

  <script>
    var foobar = "global value of foobar";
  </script>

  <class name="BaseClass" extends="TestCase">
    <attribute name="foobar" value="'value of foobar'" />

    <method name="changeFoobar" args="arg">
      <![CDATA[
        this.setAttribute('foobar', arg);
      ]]>
    </method>
  </class>
  
  <class name="TestAttribute" extends="BaseClass">
    <attribute name="litAttr" type="string" />
    <attribute name="valAttr" when="immediately" />
    <attribute name="initAttr" when="once" />
    <attribute name="constAttr" when="always" />
  </class>

  <class name="TestAttributeInherited" extends="TestAttribute">
    <attribute name="foobar" value="'overridden value of foobar'" />
  </class>

  <TestSuite>
    <!-- Fully-specified cases -->
    <TestAttribute>
      <attribute name="litAttr" value="frobozz" type="string" />
      <attribute name="valAttr" value="'constant value'" when="immediately" />
      <attribute name="initAttr" value="foobar" when="once" />
      <attribute name="constAttr" value="foobar" when="always" />
      <method name="testAttributes">
        <![CDATA[
          changeFoobar("new value of foobar");
          assertEquals("frobozz", litAttr, "Literal attribute");
          assertEquals("constant value", valAttr, "Immediate attribute");
          assertEquals("value of foobar", initAttr, "Once attribute");
          assertEquals("new value of foobar", constAttr, "Always attribute");
        ]]>
      </method>
    </TestAttribute>

    <!-- Test inheritance of "when" attribute -->   
    <TestAttribute>
      <attribute name="litAttr" value="frobozz" />
      <attribute name="valAttr" value="'constant value'" />
      <attribute name="initAttr" value="foobar" />
      <attribute name="constAttr" value="foobar" />
      <method name="testAttributesInheritedWith">
        <![CDATA[
          changeFoobar("new value of foobar");
          assertEquals("frobozz", litAttr, "Literal attribute");
          assertEquals("constant value", valAttr, "Immediate attribute");
          assertEquals("value of foobar", initAttr, "Once attribute");
          assertEquals("new value of foobar", constAttr, "Always attribute");
        ]]>
      </method>
    </TestAttribute>

    <!-- 
      Test inheritance of "when" when attributes are specified in
      the header
    -->
    <TestAttribute 
      litAttr="frobozz" 
      valAttr="'constant value'"
      initAttr="foobar"
      constAttr="foobar">
      <method name="testAttributesInheritedHeader">
        <![CDATA[
          changeFoobar("new value of foobar");
          assertEquals("frobozz", litAttr, "Literal attribute");
          assertEquals("constant value", valAttr, "Immediate attribute");
          assertEquals("value of foobar", initAttr, "Once attribute");
          assertEquals("new value of foobar", constAttr, "Always attribute");
        ]]>
      </method>
    </TestAttribute>
    
    <!-- Test with inherited from super.super -->
    <TestAttributeInherited>
      <attribute name="litAttr" value="frobozz" />
      <attribute name="valAttr" value="'constant value'" />
      <attribute name="initAttr" value="foobar" />
      <attribute name="constAttr" value="foobar" />
      <method name="testAttributesInheritedWithOverride">
        <![CDATA[
          changeFoobar("new overridden value of foobar");
          assertEquals("frobozz", litAttr, "Literal attribute");
          assertEquals("constant value", valAttr, "Immediate attribute");
          assertEquals("overridden value of foobar", initAttr, "Once attribute");
          assertEquals("new overridden value of foobar", constAttr, "Always attribute");
        ]]>
      </method>
    </TestAttributeInherited>
    
    <!-- Test that ${} can override any when case -->
    <TestAttribute 
      litAttr="${foobar}" 
      valAttr="${'constant value'}"
      initAttr="${foobar}"
      constAttr="${foobar}">
      <method name="testAttributesExpression">
        <![CDATA[
          changeFoobar("new value of foobar");
          assertEquals("new value of foobar", litAttr, "Literal attribute");
          assertEquals("constant value", valAttr, "Immediate attribute");
          assertEquals("new value of foobar", initAttr, "Once attribute");
          assertEquals("new value of foobar", constAttr, "Always attribute");
        ]]>
      </method>
    </TestAttribute>

    <TestAttribute 
      litAttr="$always{foobar}" 
      valAttr="$once{foobar}"
      initAttr="$immediately{'foobar'}"
      constAttr="${foobar}">
      <method name="testAttributesComplexExpression">
        <![CDATA[
          changeFoobar("new value of foobar");
          assertEquals("new value of foobar", litAttr, "Literal attribute");
          assertEquals("value of foobar", valAttr, "Immediate attribute");
// This fails for some reason, perhaps a bug in instantiation when the
// parent has an attribute with no value?
//          assertEquals("foobar", initAttr, "Once attribute");
          assertEquals("new value of foobar", constAttr, "Always attribute");
        ]]>
      </method>
    </TestAttribute>
  </TestSuite>
</canvas>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
