<!--
==============
 * Copyright (c) 2001, 2002 Laszlo Systems, Inc.
 * All Rights Reserved.
 *
 * This software is the proprietary information of Laszlo Systems, Inc.
 * Use is subject to license terms.
==============
-->
<library>
<class name="gridzoomselectlayout" extends="layout" >
    <attribute name="axis" value="y" setter="this.setAxis( axis )"
               type="string" />
    <attribute name="columns" value="3"/>
    <attribute name="smallsize" value="100"/>
    <attribute name="selectedsize" value="200"/>
    <attribute name="minsize" value="50"/>
    <attribute name="selectedview"     value="0"/>
    <attribute name="animated"     value="0"/>

    <method name="setAxis" args="a" >
        <!-- CURRENTLY THIS METHOD IS NOT USED -->
        this.axis = a;
        this.sizeAxis = a == "x" ? "width" : "height"
    </method>

    <method name="addSubview" args="newsub">
        this.updateDelegate.register( this.immediateparent,  'onwidth');
        super.addSubview( newsub );
   </method>

    <!-- METHOD: setselectedview -->
    <!-- Sets the selected view-->
    <method name="setselectedview" args="v"> <![CDATA[
        this.selectedview = v;
        this.selectedcol = v.layoutcol;
        debug.write("setselectedview col="+col);
        update();
    ]]> </method>

   <method name="setbounds" args="v, x, y, w, h, animate">
       if (!animate) {
           v.setAttribute( 'x' , x);
           v.setAttribute( 'y' , y);
           v.setAttribute( 'width' , w);
           v.setAttribute( 'height' , h);
       } else {
           v.animate( 'x' , x, 1500, false);
           v.animate( 'y' , y, 1500, false);
           v.animate( 'width' , w, 1500, false);
           v.animate( 'height' , h, 1500, false);
       }
   </method>

   <method name="update">
        <![CDATA[

        if ( this.locked ) return;
        var len = this.subviews.length;
        var x = 0;
        var y = 0;
        var rowh = 0;
        var w = this.immediateparent.width;

        if (!this.selectedview) {   // simple wrapping layout
            this.xspacing = (w / columns) - smallsize;
            col = 0;
            for(var i=0; i < len; i++) {
                var s = this.subviews[i];
                s.layoutcol = col;  // store the which collumn with the view
                this.setbounds(s, x, y, smallsize, smallsize, animated);
                if ( i < (len - 1)) {
                    x += this.xspacing + smallsize;
                    col++;
                    if (col == columns) {
                        col=0;  x=0;
                        y += smallsize+xspacing;
                    }
                }
            }
        } else {
            totalviewsize = (this.columns - 1) * this.minsize + this.selectedsize;
            xspacing = (w - totalviewsize) / this.columns;

            x = this.selectedcol * (this.minsize + xspacing);
            this.setbounds(selectedview, x, 0, selectedsize, selectedsize, animated);

            col = 0; x=0; y=0;
            for(var i=0; i < len; i++) {
                if (col == this.selectedcol) {
                    col++;
                    x += this.selectedsize + xspacing;
                    if (col == this.columns) {
                        col=0;  x=0;
                        y += this.minsize+xspacing;
                    }
                }

                var s = this.subviews[i];
                if (s == this.selectedview) {
                    i++;
                    s = this.subviews[i];
                }
                s.layoutcol = col;  // store the which collumn with the view
                if (s != this.selectedview) {
                    this.setbounds(s, x, y, this.minsize, this.minsize, animated);
                }
                if ( i < (len - 1)) {
                    x += this.xspacing + this.minsize;
                    col++;
                    if (col == this.columns) {
                        col=0;  x=0;
                        y += this.minsize+xspacing;
                    }
                }
            }

       }
        ]]>
    </method>

</class>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
