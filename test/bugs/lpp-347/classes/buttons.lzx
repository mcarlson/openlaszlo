<library>

   <include href="resources.lzx" />

   <!--- The basecustombutton class is the base class to both the large and small buttons -->
   <class name="basecustombutton" extends="basebutton" focusable="true"
          resourceviewcount="3" doesenter="true">
           
        <!-- text attributes are used in both subclasses so they are defined here to reduce consistency -->
        <attribute name="showname"  value="true" />
       <!--- text to display in the button -->
        <attribute name="text"      type="html" />

       <!--- use to fine-tune text y position -->
        <attribute name="texty"     value="0"  />
       <!--- use to fine-tune text x position -->
        <attribute name="textinset" value="0"  />

        <attribute name="inset"     value="5"  />
        
        <stableborderlayout axis="x"/>
                
        <method name="doEnterDown">
            <![CDATA[
            if ( this._enabled) {
                this.showDown();
            }
            ]]>
        </method>

        <!-- pressing an enter key should act the same as a mouse click -->
        <method name="doEnterUp">
            <![CDATA[
            if ( this._enabled) {
                this.onclick.sendEvent();
                this.showUp();
            }
            ]]>
        </method>
        
        <!--- @keywords private -->
        <method name="getFocusRect"  >
           var fx = this.getAttributeRelative('x',canvas);
           var fy = this.getAttributeRelative('y',canvas);
           var fw = this.getAttributeRelative('width',canvas) + 2;
           var fh = this.getAttributeRelative('height',canvas) + 2;
           return [fx,fy,fw,fh];
        </method>


       <!-- TODO: this will be needed for hiliting buttons with keyboard events 
        <method event="onfocus" >
            this.setAttribute( '_msin' , true );
            this._callShow();
        </method>

        <method event="onblur" >
            this.setAttribute( '_msin' , false );
            this._callShow();
        </method>
        -->
        
   </class>


    <!--- the textbutton class is a button with only text
        @START_CODE
        <textbutton text="Hit Me"/>
        @END_CODE
    -->
   <class name="textbutton" extends="basecustombutton" >
   
        <!-- use small button assets -->
        <view name="left"   resource="button_small_left_rsc"   />
        <view name="middle" resource="button_small_middle_rsc" stretches="width"/>
        <view name="right"  resource="button_small_right_rsc"  />
        
        <text name="txt" resize="true" font="futura" fontsize="10" 
              text="${classroot.text}" 
              fgcolor="${ parent.enabled ? 0x52529b : 0x808080 }" 
              y="${classroot.texty}" 
              x="${(parent.width - this.getTextWidth())/2}" height="18"/>        
    </class>

   <class name="texttogglebutton" extends="textbutton" >
        <attribute name="depressed" value="false" />
   
       <!--- @keywords private -->
        <method name="showOver">
            if (!depressed) super.showOver();
        </method>
        
        <!--- @keywords private -->
        <method name="showOut">
            if (!depressed) super.showOut();
        </method>
 
         <!--- @keywords private -->
        <method name="showDown">
            this.setAttribute('depressed', !depressed );
            super.showDown();
        </method>

        <!--- @keywords private -->
        <method name="showUp">
            if ( !depressed )  super.showUp();
        </method>

        <method event="ondepressed" args="s" >
            if ( !s ) this.showUp();
        </method>
        
        
    </class>


    <!--- the smallbutton class is a button with text and the option for rounded
          of flushed sides. teh default si a rounded pill button shape 
        @START_CODE
        <smallbutton text="Hit Me" flushleft="true" />
        @END_CODE
    -->
   <class name="smallbutton" extends="basebutton" >
        <attribute name="height"      value="13" />
        <attribute name="texty"       value="-2"  />
        <attribute name="flushleft"   value="false"  />
        <attribute name="flushright"  value="false"  />
        <attribute name="fontsize"    value="9" />
        <simplelayout axis="x" />
        
        <!-- use small button assets -->
        <view name="lft" width="${ classroot.flushleft ? 1:this.left.width}" height="100%" >
            <view name="left"   
                  resource="button_small_left_rsc"   
                  stretches="height" 
                  height="100%"
                  visible="${!classroot.flushleft}" />
            <view bgcolor="white" width="1" height="${classroot.height}" 
                  visible="${classroot.flushleft}" />
        </view>
              
        <view name="middle" 
              width="${parent.width - parent.rgt.width - parent.lft.width}"
              resource="button_small_middle_rsc"
              stretches="both"
              height="100%" /> 

        <view name="rgt" width="${ classroot.flushright ? 1:this.right.width}" height="100%" >
            <view name="right"   
                  resource="button_small_right_rsc"   
                  stretches="height" 
                  height="100%"
                  visible="${!classroot.flushright}" />
            <view bgcolor="black" width="1" height="${classroot.height}" 
                  visible="${classroot.flushright}" />
                  
        </view>
        
        <text name="txt" resize="true" 
              text="${classroot.text}" 
              fgcolor="${ parent.enabled ? 0x52529b : 0x808080}" 
              y="${classroot.fontsize == 9 ? -1:-2}" 
              x="${(parent.width - this.getTextWidth())/2}" height="18"/>

       <!--- @keywords private -->
        <method event="onmouseover">            
            //this.txt.setAttribute('fgcolor',0xFFFFFF );
            this.lft.left.setAttribute('frame',2);
            this.middle.setAttribute('frame',2);
            this.rgt.right.setAttribute('frame',2);
        </method>
        
        <!--- @keywords private -->
        <method event="onmouseout">
            //this.txt.setAttribute('fgcolor',0x52529B );
            this.lft.left.setAttribute('frame',1);
            this.middle.setAttribute('frame',1);
            this.rgt.right.setAttribute('frame',1);
        </method>
        
        <!--- @keywords private -->
        <method event="onmousedown">
            //this.txt.setAttribute('fgcolor',0xFF6600 );
            this.lft.left.setAttribute('frame',3);
            this.middle.setAttribute('frame',3);
            this.rgt.right.setAttribute('frame',3);
        </method>

        <!--- @keywords private -->
        <method event="onmouseup">
            //this.txt.setAttribute('fgcolor',0xFF6600 );
            this.lft.left.setAttribute('frame',1);
            this.middle.setAttribute('frame',1);
            this.rgt.right.setAttribute('frame',3);
        </method>

        <!--- @keywords private -->
        <method name="getFocusRect"  >
           var fx = this.getAttributeRelative('x',canvas);
           var fy = this.getAttributeRelative('y',canvas);
           var fw = this.getAttributeRelative('width',canvas) + 2;
           var fh = this.getAttributeRelative('height',canvas) + 4;
           return [fx,fy,fw,fh];
        </method>

   </class>

    <!--- the iconbutton may contain both text and an icon
        @START_CODE
        <iconbutton iconname="target.jpg" text="Hit Me"/>
        @END_CODE
    -->
    <class name="iconbutton" extends="basecustombutton" >

        <!--- set an alternate path to the icon directory -->
        <attribute name="fpath"          value="$once{config.appdir+ 'resources/icons/'}" type="string" />
        <!--- icon filename -->
        <attribute name="iconname"       value=""  type="string" />
        <!--- fine-tune the vertical position of icon -->
        <attribute name="icony"          value="null"/>
        <!--- fine-tune the horizontal spacing of icon to text -->
        <attribute name="iconspace"      value="1" />
        <!--- controls which dimension the icon stretches (none|both) -->
        <attribute name="iconstretches"  value="both" type="string" />
        <!--- max width of button -->
        <attribute name="expandedwidth"  value="$once{this.width}"/>
        <!--- min width of button -->
        <attribute name="collapsedwidth" value="30"/>
        <!--- fine-tune the vertical position of text -->
        <attribute name="texty"          value="3"  />
        <!--- set to true for icon to play -->
        <attribute name="iconplay"       value="false" type="boolean" />

        <!-- use big button assets by default -->
        <view name="left"   resource="button_big_left_rsc"   />
        <view name="middle" resource="button_big_middle_rsc" stretches="width"/>
        <view name="right"  resource="button_big_right_rsc"  />
        
        <view name="content" x="${Math.round((parent.width - width)/2)}" >

            <!-- FIXME [date? developer?]: this view includes general code to
                 shrink the icon to the appropriate size. This code could be be
                 altered if and when the assets are redone. -->
            <view name="icon" height="${classroot.height-7}" 
                  y="${classroot.icony != null ? classroot.icony:Math.round((classroot.height - height )/2) }"
                  play="${classroot.iconplay}">
                <method event="onload" >
                    if (classroot.iconstretches != "none")
                    {
                        this.setAttribute("stretches", classroot.iconstretches);
                        
                        // scale the resource proportionally to the view height
                        this.setWidth(Math.round(resourcewidth * height * 1.0 /resourceheight));
                    }
                </method>
            </view>
            <text name="txt" resize="true" font="futura" fontsize="10"
                  text="${classroot.text}" fgcolor="${ classroot.enabled ? 0x52529b : 0x808080 }"
                  y="${classroot.texty}"
                  x="${parent.icon.x + parent.icon.width + classroot.iconspace}" height="18"/>
        </view>

        <animator name="expandAnimator" attribute="width"
            to="${parent.expandedwidth}"  duration="400"
            onstop="classroot.content.txt.setVisible(true)"
            start="false"/>
            
        <animator name="collapseAnimator" attribute="width"
            to="${parent.collapsedwidth}" duration="400"
            onstart="classroot.content.txt.setVisible(false)"
            start="false"/>

        <!-- load resources -->
        <!--- @keywords private -->
        <method name="init" >
            <![CDATA[
            super.init();
            
            if ( iconname != "") {
                var lk= fpath + iconname;
                this.content.icon.setSource(lk);
            }
            if (this.height < 21)
            {
                // switch to small button assets if view size less than 21px
                this.left.setResource("button_small_left_rsc"); 
                this.middle.setResource("button_small_middle_rsc"); 
                this.right.setResource("button_small_right_rsc"); 
                this.middle.updateResourceSize();
            }
            ]]>
        </method>

        <!--- @keywords private -->
        <method name="doMouseOver">
            this.content.txt.setAttribute('fgcolor',0xFFFFFF );
        </method>

        <!--- @keywords private -->
        <method name="doMouseOut">
            this.content.txt.setAttribute('fgcolor',0x52529B );
        </method>

        <!--- @keywords private -->
        <method name="doMouseDown">
            this.content.txt.setAttribute('fgcolor',0xFF6600 );
        </method>

        <!--- toggle the expanded/collapsed state of the button
            @param Boolean isExpanded: true to expand button -->
        <method name="expand" args="isExpanded">
            <![CDATA[
            if (isExpanded) {
              this.expandAnimator.doStart();
            } else {
              this.collapseAnimator.doStart();
            }
            ]]>
        </method>

        <method name="setIconFrame" args="num">
            this.content.icon.setAttribute('frame', num);
        </method>

    </class>

    <!--- the icontogglebutton class is a icon button with two states, no text. the resource passed in should
          have two frames, one for each state.
        @START_CODE
        <icontogglebutton iconresource="resourcename"/>
        @END_CODE
    -->
   <class name="icontogglebutton" extends="basecustombutton" >
   
        <!--- icon resource name -->
        <attribute name="iconresource"   value=""  type="string" />
        <!--- fine-tune the vertical position of icon -->
        <attribute name="icony"          value="null"/>
        <!--- button state (either 0 or 1)  -->
        <attribute name="statenum"       value="0" setter="setStatenum(s)" />

        <!-- use small button assets -->
        <view name="left"   resource="button_small_left_rsc"   />
        <view name="middle" resource="button_small_middle_rsc" stretches="width"/>
        <view name="right"  resource="button_small_right_rsc"  />
        
        <view name="icon" resource="${classroot.iconresource}" 
            x="${(parent.width - width)/2}" 
            y="${classroot.icony != null ? classroot.icony : (parent.height - height)/2}" />

        <!---  @keywords private -->
        <method name="showOver">
            super.showOver();
            this.setFrame(2);
        </method>
        <!---  @keywords private -->
        <method name="showUp">
            super.showUp();
            this.setFrame(1);
        </method>
        <!---  @keywords private -->
        <method name="showDown">
            super.showDown();
            this.setFrame(3);
        </method>

         <!---  @keywords private -->
        <method event="onclick">
            this.setStatenum(this.statenum ? 0 : 1);
        </method>

        <!---  @keywords private -->
        <method name="setStatenum" args="s">
            this.statenum = s;
            if (!this.isinited) {                                          
                //catch the case where this.statenum is being initialized during object instantiation
                return;
            }            
            this.icon.setAttribute('frame', s+1);
        </method>

        <!---  @keywords private -->
        <method name="setFrame" args="f">
            this.left.setAttribute('frame', f);
            this.middle.setAttribute('frame', f);
            this.right.setAttribute('frame', f);
        </method>
    </class>


    <!--- the iconradioitem class is a radio button with only an icon
        @START_CODE
        <iconradioitem iconname="target.jpg" />
        @END_CODE
    -->
   <class name="iconradioitem" extends="baselistitem">
   
        <!--- set an alternate path to the icon directory -->
        <attribute name="fpath"          value="$once{config.appdir+ 'resources/icons/'}" type="string" />
        <!--- icon filename -->
        <attribute name="iconname"       value=""  type="string" />

        <!-- use small button assets -->
        <stableborderlayout axis="x"/>
        <view name="left"   resource="button_small_left_rsc"   />
        <view name="middle" resource="button_small_middle_rsc" stretches="width"/>
        <view name="right"  resource="button_small_right_rsc"  />
        
        <!-- *** this view includes general code to shrink the icon to the appropriate size. This code could be
                    be altered if and when the assets are redone. -->
        <view name="icon" x="5" y="4" width="${parent.width - 10}" stretches="both">
            <method event="onload" >
                // scale the resource proportionally to the view width
                this.setHeight( Math.round(resourceheight*width*1.0/resourcewidth) );
            </method>
        </view>

        <!-- load resource -->
        <!--- @keywords private -->
        <method name="init" >
            super.init();
            if ( iconname != "") {
                var lk= fpath + iconname;
                this.icon.setSource(lk);
            }
        </method>

        <!---  @keywords private -->
        <attribute name="_down" value="false" type="boolean"/>
        <!---  @keywords private -->
        <method event="onmouseover">
            this.setFrame((this.selected || this._down) ? 3 : 2);
        </method>
        <!---  @keywords private -->
        <method event="onmouseout">
            this.setFrame(this.selected ? 3 : 1);
        </method>
        <!---  @keywords private -->
        <method event="onmouseup">
            this.setFrame(this.selected ? 3 : 1);
            this._down = false;
        </method>
        <!---  @keywords private -->
        <method event="onmousedown">
            this.setFrame(3);
            this._down = true;
        </method>
        <!--- Display hilite (handles key navigation) -->
        <!---  @keywords private -->
        <method name="setHilite" args="v" >
            this.setFrame((this.selected || this._down) ? 3 : (v ? 2 : 1));
        </method>

        <!---  @keywords private -->
       <method name="setSelected" args="s">
            <![CDATA[
                this.selected = s;
                if (this.onselect) this.onselect.sendEvent(this);
                if (this.onselected) this.onselected.sendEvent(this);
                this.setFrame(s ? 3 : 1);
                this.icon.setAttribute('frame', s ? 2 : 1 );
            ]]>
        </method>
        
        <!---  @keywords private -->
        <method name="setFrame" args="f">
            this.left.setAttribute('frame', f);
            this.middle.setAttribute('frame', f);
            this.right.setAttribute('frame', f);
        </method>
    </class>

</library>