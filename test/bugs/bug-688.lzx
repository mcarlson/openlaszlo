<canvas width="1024" height="768" bgcolor="#DDDDDD">
    <debug y="150" height="500" />

    <class name="shadowBox" extends="view" onclick="this.handleClick()">
        <!--
          FIXME: [2003-06-20 ptw] Am I confused about opacity?  This
          animates poorly.  The class has two superimposed views,
          white (at 100% opacity) over black (at 50% opacity).  When I
          animate the class's opacity, I expect it to animate the
          composite view, but it seems to compose with the view's
          opacity instead, resulting in the black showing through the
          white.
        -->
        <animator name="hide" attribute="opacity" to="0"
            duration="2000" motion="linear" start="false" />
        <animator name="show" attribute="opacity" to="1"
            duration="2000" motion="linear" start="false" />

        <view width="100%" height="100%" name="composite">
            <view x="2" y="2" width="100%" height="100%" name="black" bgcolor="black" opacity='.5' />
            <view name="white" width="100%" height="100%" bgcolor="white" opacity='1' />
        </view>

        <!-- IWBNI there were a simpler way to say pass certain init
        args to your children -->
        <method name="init" args="args">
          super.init(args);
          for (a in args) {
            switch (a) {
              case 'name': 
              case 'x':
              case 'y':
              case 'opacity':
                break;
              default:
                this.white.setAttribute(a, args[a]);
                this.black.setAttribute(a, args[a]);
            }
          }
        </method>

        <method name="handleClick">
           Debug.write("click");
           if (this.opacity == 0)
               this.show.doStart();
           else
               this.hide.doStart();
        </method>
    </class>

    <class name="shadowBoxWorkaround" extends="view" onclick="this.handleClick()">
        <!--
          Work around the opacity composition issue manually.  Only
          fade the shadow opacity, animate the foreground to the
          canvas color.
        -->
        <attribute name="fade" value="1" />
            <view x="2" y="2" width="100%" height="100%" name="black"
            bgcolor="black" opacity='${parent.fade * .5}' />
            <view name="white" width="100%" height="100%"
          bgcolor='${0xDDDDDD + (parent.fade * (0xFF-0xDD)) +
          (parent.fade * (0xFF00 - 0xDD00)) + (parent.fade * (0xFF0000
          - 0xDD0000))}' />

        <!-- IWBNI there were a simpler way to say pass certain init
        args to your children -->
        <method name="init" args="args">
          super.init(args);
          for (a in args) {
            switch (a) {
              case 'name': 
              case 'x':
              case 'y':
              case 'opacity':
                break;
              default:
                this.white.setAttribute(a, args[a]);
                this.black.setAttribute(a, args[a]);
            }
          }
        </method>

        <method name="handleClick">
           Debug.write("workaround click");
           if (this.fade == 0)
               this.show.doStart();
           else
               this.hide.doStart();
        </method>
    </class>

    <shadowBox x="20" y="20" width="200" height="50">
      <text>
        Broken
      </text>
    </shadowBox>

    <shadowBoxWorkaround x="240" y="20" width="200" height="50">
        <animator name="hide" attribute="fade" to="0"
            duration="2000" motion="linear" start="false" />
        <animator name="show" attribute="fade" to="1"
            duration="2000" motion="linear" start="false" />

      <text>
        Workaround
      </text>
    </shadowBoxWorkaround>

</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
