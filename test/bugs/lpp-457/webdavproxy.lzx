<library>
    <class name="webdavcontrol">
        <attribute name="wsdl" type="string" />
        <method event="oninit">
            Debug.write("OnInit!!!!!!!!!!!!!!!!!!!!!!!11");
            var del = new LzDelegate( this, "" );
            del.register( this , "onLsDataUpdate" );
            var del = new LzDelegate( this, "" );
            del.register( this , "onLsError" );
            del = new LzDelegate( this, "" );
            del.register( this , "onGetDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onPutDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onDeleteDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onCopyDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onLocksDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onLockDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onUnlockDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onMkwsDataUpdate" );
            del = new LzDelegate( this, "" );
            del.register( this , "onVersioncontrolDataUpdate" );
            Debug.write(this);
        </method>

        <soap name="webdavproxy" wsdl="${parent.wsdl}">
            <attribute name="param1"/>
            <attribute name="param2"/>
            <attribute name="param3"/>
            <attribute name="param4"/>
            <attribute name="param5"/>
            <attribute name="param6"/>
            <attribute name="param7"/>

            <method name="init">
                super.init();
                Debug.write('soap service loading...');
            </method>

            <method event="onload">
                Debug.write("onLoad execute");
                Debug.inspect(this.proxy);
            </method>

            <method event="onunload">
                Debug.write("onUnLoad execute");
            </method>

            <remotecall funcname="ls">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- Password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("print param", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- Print parameters -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("path", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- Path -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata ls !!!!!!!!!!!!!!! "+value);
 //                     if(!value.equals(""))
                            if (parent.parent.onLsDataUpdate) parent.parent.onLsDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="get">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- Password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- Source url -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- Dest path-->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata get "+value);
                      if (parent.parent.onGetDataUpdate) parent.parent.onGetDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="put">

                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- Password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- Dest path-->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- Source url -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata put "+value);
                      if (parent.parent.onPutDataUpdate) parent.parent.onPutDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="del">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- Password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata delate "+value);
                    if (parent.parent.onDelDataUpdate) parent.parent.onDelDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="copy">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- Password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- Src -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- Dst -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata copy "+value);
                      if (parent.parent.onCopyDataUpdate) parent.parent.onCopyDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="locks">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- Password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata locks "+value);
                      if (parent.parent.onLocksDataUpdate) parent.parent.onLocksDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="lock">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- timeout -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param6'));
                        return parent.parent.getAttribute('param6');  <!-- scope -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param7'));
                        return parent.parent.getAttribute('param7');  <!-- owener -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata lock "+value);
                      if (parent.parent.onLockDataUpdate) parent.parent.onLockDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="unlock">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("dest path", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- owener -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata unlock "+value);
                      if (parent.parent.onUnlockDataUpdate) parent.parent.onUnlockDataUpdate.sendEvent();
                </method>

            </remotecall>

            <remotecall funcname="mkcol">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata mkcol "+value);
                      if (parent.parent.onMkcolDataUpdate) parent.parent.onMkcolDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="move">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- src -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param5'));
                        return parent.parent.getAttribute('param5');  <!-- dst -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata move "+value);
                      if (parent.parent.onMoveDataUpdate) parent.parent.onMoveDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="mkws">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata mkws "+value);
                      if (parent.parent.onMkwsDataUpdate) parent.parent.onMkwsDataUpdate.sendEvent();
                </method>
            </remotecall>

            <remotecall funcname="versioncontrol">
                <param>
                    <method name="getValue">
                        Debug.write("server url", parent.parent.getAttribute('param1'));
                        return parent.parent.getAttribute('param1');  <!-- URL  -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("username", parent.parent.getAttribute('param2'));
                        return parent.parent.getAttribute('param2');  <!-- Name -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("password", parent.parent.getAttribute('param3'));
                        return parent.parent.getAttribute('param3');  <!-- password -->
                    </method>
                </param>

                <param>
                    <method name="getValue">
                        Debug.write("src url", parent.parent.getAttribute('param4'));
                        return parent.parent.getAttribute('param4');  <!-- path -->
                    </method>
                </param>

                <method event="ondata" args="value">
                      Debug.write("ondata versioncontrol "+value);
                      if (parent.parent.onVersioncontrolDataUpdate) parent.parent.onVersioncontrolDataUpdate.sendEvent();
                </method>
            </remotecall>
        </soap>
        <!-- ******************************************************************************************************************************************************-->
        <method name="_ls" args="server_url, user_name, password, print_param, path">
            Debug.write("webdavproxy ls");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', print_param);
            this.webdavproxy.setAttribute('param5', path);
            this.webdavproxy.ls.invoke();
        </method>

        <method name="_get" args="server_url, user_name, password, src, dest">
            Debug.write("webdavproxy get");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', src);
            this.webdavproxy.setAttribute('param5', dest);
            this.webdavproxy.get.invoke();
        </method>

        <method name="_put" args="server_url, user_name, password, dest, src">
            Debug.write("webdavproxy put");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', dest);
            this.webdavproxy.setAttribute('param5', src);
            this.webdavproxy.get.invoke();
        </method>

        <method name="_delete" args="server_url, user_name, password, path">
            Debug.write("webdavproxy delete");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.del.invoke();
        </method>

        <method name="_copy" args="server_url, user_name, password, src, dest">
            Debug.write("webdavproxy copy");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', src);
            this.webdavproxy.setAttribute('param5', dest);
            this.webdavproxy.copy.invoke();
        </method>

        <method name="_locks" args="server_url, user_name, password, path">
            Debug.write("webdavproxy locks");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.locks.invoke();
        </method>

        <method name="_lock" args="server_url, user_name, password, path, timeout, scope, owener">
            Debug.write("webdavproxy lock");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.setAttribute('param5', timeout);
            this.webdavproxy.setAttribute('param6', scope);
            this.webdavproxy.setAttribute('param7', owener);
            this.webdavproxy.lock.invoke();
        </method>

        <method name="_unlock" args="server_url, user_name, password, path, owener">
            Debug.write("webdavproxy unlock");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.setAttribute('param5', owener);
            this.webdavproxy.unlock.invoke();
        </method>

        <method name="_mkcol" args="server_url, user_name, password, path">
            Debug.write("webdavproxy mkcol");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.mkcol.invoke();
        </method>

        <method name="_move" args="server_url, user_name, password, src, dest">
            Debug.write("webdavproxy move");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', src);
            this.webdavproxy.setAttribute('param4', dest);
            this.webdavproxy.move.invoke();
        </method>

        <method name="_mkws" args="server_url, user_name, password, path">
            Debug.write("webdavproxy mkws");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.mkws.invoke();
        </method>

        <method name="_versioncontrol" args="server_url, user_name, password, path">
            Debug.write("webdavproxy versioncontrol");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', path);
            this.webdavproxy.versioncontrol.invoke();
        </method>

        <method name="_versioncontrol1" args="server_url, user_name, password, target, path">
            Debug.write("webdavproxy versioncontrol");
            this.webdavproxy.setAttribute('param1', server_url);
            this.webdavproxy.setAttribute('param2', user_name);
            this.webdavproxy.setAttribute('param3', password);
            this.webdavproxy.setAttribute('param4', target);
            this.webdavproxy.setAttribute('param5', path);
            this.webdavproxy.versioncontrol.invoke();
        </method>

    </class>
</library>