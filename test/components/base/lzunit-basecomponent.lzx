<canvas debug="true" >
  <include href="lzunit" />
  <include href="lz/checkbox.lzx"/>

<!--
  covers-tags: basecomponent smoketest
-->

    <!-- set testPrivateAttributes to false to test only public/protected attributes -->
  <attribute name="testPrivateAttributes" value="true"/>

  <class name="testcheckbox" extends="checkbox">
    <attribute name="c0" value="0"/>
    <handler name="on_enabled" args="v">
      this.c0++;
    </handler>
    
    <attribute name="c1" value="0"/>
    <handler name="onfocusable">
      this.c1++;
    </handler>
    
    <attribute name="c2" value="0"/>
    <handler name="onisdefault">
      this.c2++;
    </handler>

    <method name="checkConsistency" args="tc">
        if (enabled == false) {
          tc.assertEquals(false, focusable);
        }
    </method>
    
    <method name="resetState">
        setAttribute('enabled', true);
        setAttribute('focusable', true);
        setAttribute('doesenter', true);
        setAttribute('isdefault', false);
    </method>
      
  </class>
  
  <class name="MyTestCase" extends="TestCase">
      <testcheckbox name="tb"/>
      <method name="setUp">
        tb.resetState();
        tb.checkConsistency(this);
      </method>
      
      <method name="tearDown">
        tb.checkConsistency(this);
      </method>
  </class>
  
  <TestSuite>

    <MyTestCase>
    
      <!-- test whether setting enabled works -->
      <method name="testSetEnabled">
        assertEquals(true, tb.enabled);
        tb.setAttribute('enabled', false);
        assertEquals(false, tb.enabled);
        tb.setAttribute('enabled', true);
        assertEquals(true, tb.enabled);
      </method>

      <method name="addTests"> 
          this.addTest("testSetEnabled");
      </method> 
      
    </MyTestCase>
    
    <MyTestCase>
    
      <!-- test whether on_enabled event is called when enabled attr changes -->
      <method name="testOnEnabled">
        if (canvas.testPrivateAttributes) {
          var c = tb.c0;
          tb.setAttribute('enabled', ! tb.enabled);
          assertEquals(c + 1, tb.c0, "onenabled called");
        }
      </method>


      <method name="addTests"> 
          this.addTest("testOnEnabled");
      </method> 
    </MyTestCase>
    
    <MyTestCase>
    
      <!-- test whether setting focusable works -->
      <method name="testSetFocusable">
        <!-- tb is enabled now -->
        assertEquals(true, tb.enabled);
        assertEquals(true, tb.focusable);
        tb.setAttribute('focusable', false);
        assertEquals(true, tb.enabled);
        assertEquals(false, tb.focusable);
      </method>
      
      <method name="addTests"> 
          this.addTest("testSetFocusable");
      </method> 

    </MyTestCase>
    
    <MyTestCase>
    
      <!-- test whether onfocusable event is called when focusable attr changes -->
      <method name="testOnFocusable">
        var c = tb.c1;
        tb.setAttribute('focusable', false);
        assertEquals(c + 1, tb.c1, "onfocusable called");
      </method>

      <method name="addTests"> 
          this.addTest("testOnFocusable");
      </method> 

    </MyTestCase>
    
    <MyTestCase>
    
      <!-- test whether component is (de)focusable when it is enabled -->
      <method name="testFocusableWhenEnabled">
        assertEquals(true, tb.focusable);
        assertEquals(true, tb.enabled);
        tb.setAttribute('focusable', false);
        assertEquals(false, tb.focusable);
        tb.setAttribute('focusable', true);
        assertEquals(true, tb.focusable);
      </method>

      <method name="addTests">
        this.addTest("testFocusableWhenEnabled");
      </method>



    </MyTestCase>
    
    <MyTestCase>
    
      <!-- test whether component is no longer focusable when it isn't enabled -->
      <method name="testNotFocusableWhenDisabled">
        assertEquals(true, tb.focusable);
        tb.setAttribute('enabled', false);
        assertEquals(false, tb.enabled);
        assertEquals(false, tb.focusable);
      </method>

      <method name="addTests">
        this.addTest("testNotFocusableWhenDisabled");
      </method>

    </MyTestCase>
    
    <MyTestCase>
    
      <!-- test whether text can be set and retrieved -->
      <method name="testSetText">
        var tx = "this is some text.";
        tb.setAttribute('text', tx);
        assertEquals(tx, tb.text, "text changed");
      </method>

      <method name="addTests">
        this.addTest("testSetText");
      </method>
      
    </MyTestCase>
    
    <MyTestCase>
    
      <method name="testDoesEnter">
        assertEquals(true, tb.doesenter);
        tb.setAttribute('doesenter', false);
        assertEquals(false, tb.doesenter);
        tb.setAttribute('doesenter', true);
        assertEquals(true, tb.doesenter, "doesenter true");
      </method>

      <method name="addTests">
        this.addTest("testDoesEnter");
      </method>
      
    </MyTestCase>
    
    <MyTestCase>
    
      <method name="testSetIsDefault">
        assertEquals(false, tb.isdefault);
        tb.setAttribute('isdefault', true);
        assertEquals(true, tb.isdefault, "isdefault true");
      </method>

      <method name="addTests">
        this.addTest("testSetIsDefault");
      </method>
      
    </MyTestCase>
    
    <MyTestCase>
    
      <method name="testOnIsDefault">
        if (canvas.testPrivateAttributes) {
          var c = tb.c2;
          tb.setAttribute('isdefault', true);
          assertEquals(c + 1, tb.c2, "onisdefault called");
        }
      </method>

      <method name="addTests">
        this.addTest("testOnIsDefault");
      </method>
      
    </MyTestCase>
    
  </TestSuite>
  
</canvas>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005-2006, 2008, 2009 Laszlo Systems, Inc. All Rights Reserved.               *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                          -->
