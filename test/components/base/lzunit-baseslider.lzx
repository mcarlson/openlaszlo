<canvas debug="true" >
  <debug x="100" y="200" height="500"/>

  <include href="lzunit" />
  <include href="lz/slider.lzx" />

<!--
  covers-tags: basecomponent baseslider smoketest
-->

  <class name="testslider" extends="slider">

    <attribute name="c1" type="number" value="0"/>
    <handler name="onvalue">
        this.c1++;
    </handler>
    
    <attribute name="c2" type="number" value="0"/>
    <handler name="onminvalue">
        this.c2++;
    </handler>
    
    <attribute name="c3" type="number" value="0"/>
    <handler name="onmaxvalue">
        this.c3++;
    </handler>
    
    <attribute name="c4" type="number" value="0"/>
    <method name="setMinValue" args="v">
        super.setMinValue(v);
        this.c4++;
    </method>
    
    <attribute name="c5" type="number" value="0"/>
    <method name="setMaxValue" args="v">
        super.setMaxValue(v);
        this.c5++;
    </method>
    
    <attribute name="c6" type="number" value="0"/>
    <method name="setValue" args="v">
        super.setValue(v);
        this.c6++;
    </method>
      
    <method name="checkConsistency" args="tc"><![CDATA[
      tc.assertEquals(this.value, this.track.thumb._valueFromThumb(), "value-to-thumb mapping");
      tc.assertEquals(this.track.thumb.x, this.track.thumb._thumbFromValue(), "thumb-to-value mapping");
      tc.assertTrue(this.minvalue <= this.maxvalue, "minvalue <= maxvalue");
      tc.assertTrue(this.value >= this.minvalue, "value >= minvalue");
      tc.assertTrue(this.value <= this.maxvalue, "value <= maxvalue");
    ]]></method>
    
    <method name="resetState" args="t=null"><![CDATA[
      // use different values here than in slider initialization
      // so we can count calls to onvalue, etc.
      //if (this.c1 < 3) Debug.format("c1: %w\n", this.c1);
      this.setMinValue(0);
      this.setMaxValue(100);
      this.setValue(35);
    ]]></method>
    
  </class>

  <class name="MyTestCase" extends="TestCase">
    <testslider name="t" value="45" minvalue="10" maxvalue="110" width="200" y="20" />
    
    <method name="setUp">
      t.resetState();
      t.checkConsistency(this);
    </method>
    
    <method name="tearDown">
      t.checkConsistency(this);
    </method>
      
  </class>
  
  <TestSuite>

    <MyTestCase>
    
        <!-- test whether initial setters were called -->
        <method name="testinitalsetters">
          // these should all be 2 because of 1) default value setup and 2) resetState
          // called implicitly at the start of this test. Requires default values
          // and resetState values to be different, and assumes this is the first test to
          // be run.
          assertEquals(2, t.c1, "onvalue count");
          assertEquals(2, t.c2, "onminvalue count");
          assertEquals(2, t.c3, "onmaxvalue count");
          assertEquals(2, t.c4, "setMinValue count");
          assertEquals(2, t.c5, "setMaxValue count");
          assertEquals(2, t.c6, "setValue count");
        </method>

        <method name="addTests">
          this.addTest("testinitalsetters");
        </method>

    </MyTestCase>

    <MyTestCase>
 
        <!-- first check initial value -->
        <method name="testreset">
          assertEquals(35, t.value);
          assertEquals(0, t.minvalue);
          assertEquals(100, t.maxvalue);
        </method>

        <method name="addTests">
          this.addTest("testreset");
        </method>
        
    </MyTestCase>

    <TestCase>

        <!-- test slider with min == max -->
        <testslider name="t0" value="35" minvalue="35" maxvalue="35"/>
        <method name="testzerorange">
          assertEquals(35, t0.value);
          assertEquals(35, t0.minvalue);
          assertEquals(35, t0.maxvalue);
        </method>
        
        <method name="addTests"> 
            this.addTest("testzerorange");
        </method> 
    </TestCase>

    <TestCase>

        <!-- test correct handling of out-of-bounds initial value -->
        <testslider name="t2" value="35" minvalue="40" maxvalue="50"/>
        <method name="testoutofbounds">
          assertEquals(40, t2.value);
          assertEquals(40, t2.minvalue);
          assertEquals(50, t2.maxvalue);
        </method>
        
        <method name="addTests"> 
            this.addTest("testoutofbounds");
        </method> 
    </TestCase>

    <TestCase>

        <!-- test correct handling of inverted bounds -->
        <slider name="t3" value="35" minvalue="50" maxvalue="30"/>
        <method name="testinvertedbounds">
          assertEquals(50, t3.value);
          assertEquals(50, t3.minvalue);
          assertEquals(50, t3.maxvalue);
        </method>
        
        <method name="addTests"> 
            this.addTest("testinvertedbounds");
        </method> 
    </TestCase>

    <MyTestCase>

        <!-- check that setValue is getting called -->
        <method name="testsetval1">
          var newval = t.value + 5;
          t.setValue(newval);
          assertEquals(newval, t.value);
        </method>

        <method name="addTests">
          this.addTest("testsetval1");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <!-- check that setAttribute works -->
        <method name="testsetval2">
          var newval = t.value + 5;
          t.setAttribute("value", newval);
          assertEquals(newval, t.value);
        </method>

        <method name="addTests">
          this.addTest("testsetval2");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <!-- check that onvalue event is getting dispatched -->
        <method name="testonvalue">
          var c0 = t.c1;
          t.setAttribute("value", t.value + 1);
          assertEquals(c0 + 1, t.c1);
        </method>

        <method name="addTests">
          this.addTest("testonvalue");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testunderval">
          t.setAttribute("minvalue", 10);
          t.setAttribute("value", 5);
          assertEquals(t.value, t.minvalue);
        </method>

        <method name="addTests">
          this.addTest("testunderval");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testoverval">
          t.setAttribute("value", t.maxvalue + 5);
          assertEquals(t.value, t.maxvalue);
        </method>

        <method name="addTests">
          this.addTest("testoverval");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testsetmin1">
          var oldval = t.value;
          var newmin = t.value - 5;
          t.setMinValue(newmin);
          assertEquals(newmin, t.minvalue);
          assertEquals(oldval, t.value);
        </method>

        <method name="addTests">
          this.addTest("testsetmin1");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testsetmin2">
          var oldval = t.value;
          var newmin = t.value - 5;
          t.setAttribute("minvalue", newmin);
          assertEquals(newmin, t.minvalue);
          assertEquals(oldval, t.value);
        </method>

        <method name="addTests">
          this.addTest("testsetmin2");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testonminvalue">
          var c0 = t.c2;
          t.setAttribute("minvalue", t.minvalue + 1);
          assertEquals(c0 + 1, t.c2);
        </method>

        <method name="addTests">
          this.addTest("testonminvalue");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testsetmax1">
          var oldval = t.value;
          var newmax = t.value + 5;
          t.setMaxValue(newmax);
          assertEquals(newmax, t.maxvalue);
          assertEquals(oldval, t.value);
        </method>

        <method name="addTests">
          this.addTest("testsetmax1");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testsetmax2">
          var oldval = t.value;
          var newmax = t.value + 5;
          t.setAttribute("maxvalue", newmax);
          assertEquals(newmax, t.maxvalue);
          assertEquals(oldval, t.value);
        </method>

        <method name="addTests">
          this.addTest("testsetmax2");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="testonmaxvalue">
          var c0 = t.c3;
          t.setAttribute("maxvalue", t.maxvalue + 1);
          assertEquals(c0 + 1, t.c3);
        </method>

        <method name="addTests">
          this.addTest("testonmaxvalue");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <!-- test whether setting minvalue higher than maxvalue does the right thing -->
        <method name="testovermin">
          var newmin = t.maxvalue + 5;
          t.setMinValue(newmin);
          assertEquals(t.value, t.minvalue);
          assertEquals(t.minvalue, t.maxvalue);
        </method>

        <method name="addTests">
          this.addTest("testovermin");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <!-- test whether setting maxvalue lower than minvalue does the right thing -->
        <method name="testundermax">
          t.setMinValue(0);
          var newmax = t.minvalue - 5;
          t.setMaxValue(newmax);
          assertEquals(t.value, t.minvalue);
          assertEquals(t.minvalue, t.maxvalue);
        </method>

        <method name="addTests">
          this.addTest("testundermax");
        </method>
        
    </MyTestCase>

    <MyTestCase>

        <method name="verifyrange"><![CDATA[
          var oldval = t.value;
          var lo = t.minvalue;
          var hi = t.maxvalue;
          for (var i=lo; i<=hi; i++)
          {
            t.setValue(i);
            t.checkConsistency(this);
          }
          t.setValue(oldval);
        ]]></method>

  
        <method name="verifythumbrange" args="t"><![CDATA[
          var oldval = t.track.thumb.x;
          var lo = 0;
          var hi = t.width - t.track.thumb.width;
          var delta = (hi - lo) / 10;
          for (var i=lo; i<=hi; i+=delta)
          {
            t.track.thumb.setAttribute('x', i);
            t.checkConsistency(this);
          }
          t.track.thumb.setAttribute('x', oldval);
        ]]></method>

        <method name="testlittlerange">
          t.setMinValue(0);
          t.setMaxValue(10);
          t.checkConsistency(this);
          verifyrange();
          verifythumbrange(t);
        </method>

        <method name="addTests">
          this.addTest("testlittlerange");
        </method>
        
    </MyTestCase>
  </TestSuite>
  
</canvas>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005-2009 Laszlo Systems, Inc. All Rights Reserved.               *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
