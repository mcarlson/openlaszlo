<canvas debug="true" >
  <debug x="100" y="200" height="500"/>

  <include href="lzunit" />
  <include href="lz/slider.lzx" />

  <script>
    asynchronousTests = false;
  </script>

  <TestSuite>

    <TestCase>
    
        <slider name="t" width="200" y="20" value="45" minvalue="10" maxvalue="110">
          <attribute name="c1" type="number" value="0"/>
          <method event="onvalue">
            c1++;
            //if (c1 &lt; 3) Debug.format("onvalue: %w\n", c1);
          </method>
          <attribute name="c2" type="number" value="0"/>
          <method event="onminvalue">
            c2++;
          </method>
          <attribute name="c3" type="number" value="0"/>
          <method event="onmaxvalue">
            c3++;
          </method>
          <attribute name="c4" type="number" value="0"/>
          <method name="setMinValue" args="v">
            super.setMinValue(v);
            c4++;
          </method>
          <attribute name="c5" type="number" value="0"/>
          <method name="setMaxValue" args="v">
            super.setMaxValue(v);
            c5++;
          </method>
          <attribute name="c6" type="number" value="0"/>
          <method name="setValue" args="v">
            super.setValue(v);
            c6++;
          </method>
        </slider>
      
        <method name="checkConsistency" args="t"><![CDATA[
          assertEquals(t.value, t.track.thumb._valueFromThumb());
          assertEquals(t.track.thumb.x, t.track.thumb._thumbFromValue());
          assertTrue(t.minvalue <= t.maxvalue);
          assertTrue(t.value >= t.minvalue);
          assertTrue(t.value <= t.maxvalue);
        ]]></method>
        
        <method name="resetState" args="t"><![CDATA[
          // use different values here than in slider initialization
          // so we can count calls to onvalue, etc.
          //if (t.c1 < 3) Debug.format("c1: %w\n", t.c1);
          t.setMinValue(0);
          t.setMaxValue(100);
          t.setValue(35);
        ]]></method>
        
        <method name="setUp">
          resetState(t);
          checkConsistency(t);
        </method>
        
        <method name="tearDown">
          checkConsistency(t);
        </method>
      
        <!-- test whether initial setters were called -->
        <method name="testinitalsetters">
          // these should all be 2 because of 1) default value setup and 2) resetState
          // called implicitly at the start of this test. Requires default values
          // and resetState values to be different, and assumes this is the first test to
          // be run.
          assertEquals(2, t.c1);
          assertEquals(2, t.c2);
          assertEquals(2, t.c3);
          assertEquals(2, t.c4);
          assertEquals(2, t.c5);
          assertEquals(2, t.c6);
        </method>
        
        <!-- first check initial value -->
        <method name="testreset">
          assertEquals(35, t.value);
          assertEquals(0, t.minvalue);
          assertEquals(100, t.maxvalue);
        </method>
        
        <!-- test slider with min == max -->
        <slider name="t0" value="35" minvalue="35" maxvalue="35"/>
        <method name="testzerorange">
          assertEquals(35, t0.value);
          assertEquals(35, t0.minvalue);
          assertEquals(35, t0.maxvalue);
        </method>
        
        <!-- test correct handling of out-of-bounds initial value -->
        <slider name="t2" value="35" minvalue="40" maxvalue="50"/>
        <method name="testoutofbounds">
          assertEquals(40, t2.value);
          assertEquals(40, t2.minvalue);
          assertEquals(50, t2.maxvalue);
        </method>
        
        <!-- test correct handling of inverted bounds -->
        <slider name="t3" value="35" minvalue="50" maxvalue="30"/>
        <method name="testinvertedbounds">
          assertEquals(50, t3.value);
          assertEquals(50, t3.minvalue);
          assertEquals(50, t3.maxvalue);
        </method>
        
        <!-- check that setValue is getting called -->
        <method name="testsetval1">
          var newval = t.value + 5;
          t.setValue(newval);
          assertEquals(newval, t.value);
        </method>
        
        <!-- check that setAttribute works -->
        <method name="testsetval2">
          var newval = t.value + 5;
          t.setAttribute("value", newval);
          assertEquals(newval, t.value);
        </method>
        
        <!-- check that onvalue event is getting dispatched -->
        <method name="testonvalue">
          var c0 = t.c1;
          t.setAttribute("value", t.value + 1);
          assertEquals(c0 + 1, t.c1);
        </method>
        
        <method name="testunderval">
          t.setAttribute("minvalue", 10);
          t.setAttribute("value", 5);
          assertEquals(t.value, t.minvalue);
        </method>
        
        <method name="testoverval">
          t.setAttribute("value", t.maxvalue + 5);
          assertEquals(t.value, t.maxvalue);
        </method>
        
        <method name="testsetmin1">
          var oldval = t.value;
          var newmin = t.value - 5;
          t.setMinValue(newmin);
          assertEquals(newmin, t.minvalue);
          assertEquals(oldval, t.value);
        </method>
        
        <method name="testsetmin2">
          var oldval = t.value;
          var newmin = t.value - 5;
          t.setAttribute("minvalue", newmin);
          assertEquals(newmin, t.minvalue);
          assertEquals(oldval, t.value);
        </method>
        
        <method name="testonminvalue">
          var c0 = t.c2;
          t.setAttribute("minvalue", t.minvalue + 1);
          assertEquals(c0 + 1, t.c2);
        </method>
        
        <method name="testsetmax1">
          var oldval = t.value;
          var newmax = t.value + 5;
          t.setMaxValue(newmax);
          assertEquals(newmax, t.maxvalue);
          assertEquals(oldval, t.value);
        </method>
        
        <method name="testsetmax2">
          var oldval = t.value;
          var newmax = t.value + 5;
          t.setAttribute("maxvalue", newmax);
          assertEquals(newmax, t.maxvalue);
          assertEquals(oldval, t.value);
        </method>
        
        <method name="testonmaxvalue">
          var c0 = t.c3;
          t.setAttribute("maxvalue", t.maxvalue + 1);
          assertEquals(c0 + 1, t.c3);
        </method>
        
        <!-- test whether setting minvalue higher than maxvalue does the right thing -->
        <method name="testovermin">
          var newmin = t.maxvalue + 5;
          t.setMinValue(newmin);
          assertEquals(t.value, t.minvalue);
          assertEquals(t.minvalue, t.maxvalue);
        </method>
        
        <!-- test whether setting maxvalue lower than minvalue does the right thing -->
        <method name="testundermax">
          t.setMinValue(0);
          var newmax = t.minvalue - 5;
          t.setMaxValue(newmax);
          assertEquals(t.value, t.minvalue);
          assertEquals(t.minvalue, t.maxvalue);
        </method>
        
        <method name="verifyrange"><![CDATA[
          var oldval = t.value;
          var lo = t.minvalue;
          var hi = t.maxvalue;
          for (var i=lo; i<=hi; i++)
          {
            t.setValue(i);
            checkConsistency(t);
          }
          t.setValue(oldval);
        ]]></method>
  
        <method name="verifythumbrange" args="t"><![CDATA[
          var oldval = t.track.thumb.x;
          var lo = 0;
          var hi = t.width - t.track.thumb.width;
          var delta = (hi - lo) / 10;
          for (var i=lo; i<=hi; i+=delta)
          {
            t.track.thumb.setX(i);
            checkConsistency(t);
          }
          t.track.thumb.setX(oldval);
        ]]></method>
  
        <method name="testlittlerange">
          t.setMinValue(0);
          t.setMaxValue(10);
          checkConsistency(t);
          verifyrange(t);
          verifythumbrange(t);
        </method>
        
    </TestCase>
  </TestSuite>
  
</canvas>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005 Laszlo Systems, Inc. All Rights Reserved.                    *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
