<library>
    <!-- LIBRARY: INFO PANEL ============================================== -->
    <!-- Here is where I will use states to fill out the various panels     -->
    <!-- start and end date.                                                -->
    <!-- ================================================================== -->
    <!-- more comments on use -->
    <!-- get rid of debug.code -->

    <include href="lz/simpletext.lzx"/>
    <include href="base/basetabslider.lzx"/>


    <!-- CLASS: infoTab ================================================== -->
    <!-- ================================================================= -->
    <class name="infoTab" extends="basetabelement" clickable="false" bgcolor="0xEEF0EB" >

        <!-- ATTRIBUTES -->
        <attribute name="minheight" value="17"/>
        <attribute name="label" type="string" />
        <attribute name="defaultplacement" value="interior" type="string"/>

        <!-- VIEWS -->
        <view name="top" bgcolor="0xEEF0EB"
            width="${immediateparent.width}" height="${parent.minheight}"
            onclick="classroot.parent.openTab(classroot,true)">
            <view name="tline" height="1" width="${parent.width}"
                bgcolor="0xFDFFFF" y="0"/>
            <view name="bline" height="1" width="${parent.width}"
                bgcolor="0xC6C7C4" y="${parent.height - 1}"  />
            <text name="ttl" width="150" x="5" y="1"
                font="eventTimefont" fgcolor="#898B86" pixellock="true"  >
                <attribute name="text" value="${classroot.label}"/>
            </text>
            <view name="arrowref" resource="tabarrow"
                x="${parent.width - 15}" y="${Math.floor(parent.height/2)}">
                <animator name="rotateDown" attribute="x" to="90"
                    duration="333"  start="false"/>
                <animator name="rotateUp"   attribute="rotation" to="-90"
                    duration="333" start="false"/>
            </view>
        </view>
        <view name="interior" clip="true" width="${immediateparent.width}"
            options="releasetolayout" />
        <resizelayout axis="y"/>

        <!-- METHODS -->
        <method event="onopenstart" >
            // tab is about to open
            this.interior.setVisible(true);
            this.top.setBGColor(0xE2E4DF);
            this.top.tline.setBGColor(0xB8B9B5)
            this.top.bline.setBGColor(0xFDFFFF)
            this.top.arrowref.animate("rotation",90,333,true);
        </method>

        <method event="onclosestart" >
            //tab is about to close
            this.top.setBGColor(0xEEF0EB);
            this.top.tline.setBGColor(0xFDFFFF)
            this.top.bline.setBGColor(0xC6C7C4)
            this.top.arrowref.animate("rotation",-90,333,true);
        </method>

        <method event="onclosestop" >
            //tab is closed
            this.interior.setVisible(false);
        </method>

        <method name="toggle">
            // ugh - tabslider doesn't support closing tabs yet
            this.parent.openTab(this.parent,true);
        </method>

        <!-- attribute name="defaultplacement" value="interior" type="string" /-->
    </class>

    <!-- CLASS: textbox ================================================== -->
    <!-- ================================================================= -->
    <class name="textbox" height="14">
        <attribute name="bordercolor" value="0x000000" />
        <view name="v_border" height="1" bgcolor="${parent.bordercolor}" width="${parent.width}" />
        <view name="h_border" width="1"  y="1" bgcolor="${parent.bordercolor}" height="${parent.height -1}" />
        <view y="${parent.height}" width="${parent.width}" bgcolor="white" height="1"/>
        <view x="${parent.width}" y="${parent.height}" bgcolor="white" width="1"/>
        <text name="txt" x="2" width="${parent.width-4}" opacity=".7" font="eventTimefont" /> <!-- fgcolor="#535353" -->
        <method name="setText" args="t">
            txt.setText(t);
        </method>

        <method name="changeDataset" args="DP,path">
           var tempDP = dupePointer.DP;
        </method>
    </class>
    
    <!-- CLASS: inputtextbox ============================================= -->
    <!-- ================================================================= -->
    <class name="inputtextbox" extends="inputtext" bgcolor="white"
        resizable="true" 
        font="eventTimefont" opacity=".7" > <!-- fgcolor="#535353"-->
        <view name="v_border" height="1"       bgcolor="black" width="${parent.width}" />
        <view name="h_border" width="1"  y="1" bgcolor="black" height="${parent.height -1}" />

        <command name="myenter" onselect="parent.datapath.updateData();"  
                 key="['Enter']"
                 active="false"/>
        
        <method event="onfocus">
            myenter.setAttribute( "active" ,true );
        </method>

        <method event="onblur">
            this.datapath.updateData();
            myenter.setAttribute( "active" ,false );
        </method>
    </class>

    <!-- CLASS: info_Panel =============================================== -->
    <!-- ================================================================= -->
    <class name="info_Panel" extends="basepanel" clip="true">

        <attribute name="opened" value="false"/>

        <!-- VIEWS -->
        <view name="summary" width="198" height="${this.content.height + 20}" bgcolor="0xEEF0EB">
            <view y="10" name="content" x="10" width="${parent.width - 20}" >
                <inputtextbox name="title"
                    width="${immediateparent.width}" height="15"
                    datapath="summary/@value"/>

                <view name="day" y="29" >
                   <!-- <basebutton resource="info_minical" width="15" x="-2"
                         onclick="classroot.selectmonth();" -->
                    <!-- height="13" -->
                    <textbox name="day"  x="0" y="1" width="150"  
                             bgcolor="0xEEF0EB" bordercolor="0x333333"
                             datapath="start[1]/@*" >
                        <method name="applyData" args="attrs">
                            <![CDATA[
                            var s = ""
                            if ( attrs && attrs.month != "" ){
                                s = canvas.calMonths[ attrs.month-1 ] + " " +
                                                      attrs.day + ", " +
                                                      attrs.year;
                            }
                            this.setText( s );
                            ]]>
                        </method>
                    </textbox>
                    <basebutton x="149" width="14" resource="info_larrow"
                        onclick="eventDataMgr.changeDay(-1);"/>
                    <basebutton x="163" width="14" resource="info_rarrow"
                        onclick="eventDataMgr.changeDay(+1);"/>
                </view>

                <view name="times" x="0" y="50">
                    <method name="getLongTime" args="attrs">
                        if (!attrs) return;
                        if (!attrs.hour) return;
                        var h = attrs.hour;
                        if (h=="") return;
                        var m = attrs[ 'minute' ];

                        if (Number(m)==0 || m==null) m='0';
                        if (Number(m)&lt;10) m='0'+m;

                        var ap='a';

                        if (h &gt; 11) ap='p';
                        if (h &gt; 12) h-=12;

                        return h+':'+m+ap;
                    </method>
                    <textbox name="stime" x="0" y="1" width="42" 
                             bgcolor="0xEEF0EB" bordercolor="0x333333"
                             datapath="start[1]/@*" >
                        <method name="applyData" args="attrs">
                            this.setText( parent.getLongTime( attrs ));
                        </method>
                    </textbox>
                    <basebutton x="$immediately{60-11}" width="14" 
                                resource="info_larrow"
                                datapath="start[1]" 
                                onclick="eventDataMgr.changetime('start',-1);"/>
                    <basebutton x="$immediately{74-11}" width="14" 
                                resource="info_rarrow"
                                datapath="start[1]"
                                onclick="eventDataMgr.changetime('start',+1);"/>

                    <text x="$immediately{92-11}" y="2" width="20" height="13">
                        to</text>

                    <textbox name="etime" x="100" y="1" width="42" 
                             bgcolor="0xEEF0EB" bordercolor="0x333333"
                             datapath="end[1]/@*" >
                        <method name="applyData" args="attrs">
                            this.setText( parent.getLongTime( attrs ));
                        </method>
                    </textbox>
                    <basebutton x="149" width="14" resource="info_larrow"
                        datapath="end[1]" 
                        onclick="eventDataMgr.changetime('end',-1);"/>
                    <basebutton x="163" width="14" resource="info_rarrow"
                        datapath="end[1]" 
                        onclick="eventDataMgr.changetime('end',+1);"/>
                </view>
                <view bgcolor="0xEEF0EB" height="1" width="${parent.width - 10}" x="5" />
               <!--
                <view>
                    <text x="20" text="Label" />
                    <view bgcolor="0x333333" x="70" width="${this.colors.width + 2}" height="${this.colors.height + 2}" >
                        <view name="colors" x="1" y="1">
                            <view bgcolor="red"       width="16" height="16"/>
                            <view bgcolor="0xFF7F00"  width="16" height="16"/>
                            <view bgcolor="yellow"    width="16" height="16"/>
                            <view bgcolor="green"     width="16" height="16"/>
                            <view bgcolor="blue"      width="16" height="16"/>
                            <view bgcolor="purple"    width="16" height="16"/>
                            <simplelayout axis="x" spacing="1"/>
                        </view>
                    </view>
                </view>             -->
                <simplelayout axis="y" spacing="5"/>
            </view>
        </view>


        <view name="gutter1" bgcolor="0xEEF0EB" y="${parent.summary.height}"
            width="${immediateparent.width}" height="50">
            <view name="tline" height="1" width="${parent.width}"
                bgcolor="0xB8B9B5"/>
            <view name="bline" height="1" y="3" width="${parent.width}"
                bgcolor="0xFDFFFF"/>
        </view>

        <basetabslider name="tabs" height="360" bgcolor="0xEEF0EB" width="100%" y="${parent.summary.height + 4}" pixellock="true"
            slideduration="200" mintabheight="20" oninit="this.openTab(this.notes,true)" >
            <infoTab name="notes" label="Notes" pixellock="true">
                <!-- fixed size input text is best for large multiline text,
                 so it is good to declare with values for width/height -->
                <inputtextbox name="txt" x="10" y="10" multiline="true" pixellock="true"
                              width="${immediateparent.width - 20}" height="289" />
            </infoTab>
            
            <infoTab label="Location" pixellock="true">
                <inputtextbox name="txt" x="10" y="10" multiline="true" pixellock="true"
                              width="${immediateparent.width - 20}" height="289" />
            </infoTab>
            <infoTab label="Attendees" pixellock="true">
                <inputtextbox name="txt" x="10" y="10" multiline="true" pixellock="true"
                              width="${immediateparent.width - 20}" height="289" />
            </infoTab>
        </basetabslider>

        <view name="gutter2"  bgcolor="0xEEF0EB" 
              y="${parent.tabs.y + parent.tabs.height}" height="3" 
              width="${immediateparent.width}" > <!-- bgcolor="0xEEF0EB"  47-->
            <view name="tline" height="1" width="${parent.width}"
                bgcolor="0xB8B9B5"/>
            <view name="bline" height="1" y="3" width="${parent.width}"
                bgcolor="0xFDFFFF"/>
                
            <calButton label="Delete" x="${parent.width - width - 15}" y="13"
                       onclick="eventDataMgr.deleteEvent()"/>
        </view>


        <!-- ANIMATORS -->
        <animator start="false" name="slideopen1old" attribute="width" to="204"
            duration="500" relative="false"/>
        <animator start="false" name="slideopen1" attribute="x" to="602" from="830"
            duration="500"/>
        <animator start="false" name="slideopen2" attribute="opacity" to="1" from="0"
            duration="500" relative="false"/>
            
        <animator start="false" name="slideclose1" attribute="x" from="602" to="830"
            duration="500" onstop="parent.close_done()"/>
        <animator start="false" name="slideclose2" attribute="opacity" to="0"
            duration="400" relative="false"/>
            <!--
        <animator start="false" name="slideclose1old" attribute="width" to="0"
            duration="500" relative="false" onstop="parent.close_done()"/>
            -->

        <!-- METHODS -->

        <method event="oninit">
            this.setWindowTitle( "Event Info" );
            this.closeDel = new LzDelegate( this , "close" );
        </method>
        
        <method name="open">
            this.completeInstantiation();
            
            if ( this['awaitingClose'] ){
                this.awaitingClose = false;
                LzTimer.removeTimer( this.closeDel );
            }

            if (this.opened) {
                LzFocus.setFocus(summary.content.title);
                return;
            }

            calgrid.contract();

            this.setVisible(true);
            this.setOpacity(1);
            this.slideopen1.doStart();
            this.slideopen2.doStart();
            LzFocus.setFocus(summary.content.title);
            this.opened = true;

        </method>

        <method name="close">
            if (! this.opened) { return; }
            this.awaitingClose = false;
            slideclose1.doStart();
            slideclose2.doStart(); //remove
            this.opened = false;
        </method>

        <method name="close_done" >
            //debug.write("close_done");
            calgrid.expand();
            this.setVisible(false);
        </method>

        <method name="unselectEvent" >
            if ( !this.opened ){ return; }
            this.awaitingClose = true;
            LzTimer.resetTimer( this.closeDel , 500 );
        </method>

    </class>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2006 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
