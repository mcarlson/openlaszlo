<!-- Copyright 2001-2006 Laszlo Systems, Inc.  All Rights Reserved. -->
<library>

    <class name="photo" width="77" height="77">
        <attribute name="defaultplacement" value="interior" type="text" />
        <attribute name="text" value="title" type="text" />   

        <attribute name="clipfactor" value="0"
                   setter="this.setClipFactor( clipfactor )"/>


        <attribute name="loaded" value="false"/>
        <attribute name="aspect" value="1"/>

        <attribute name="_wmult" value="0"/>
        <attribute name="_hmult" value="0"/>
        <attribute name="_iwmult" value="0"/>
        <attribute name="_ihmult" value="0"/>
        <attribute name="_diwmult" value="0"/>
        <attribute name="_dihmult" value="0"/>

        <attribute name="intwidth" value="${ this._wmult * this.width }"/>
        <attribute name="intheight" value="${ this._hmult * this.height }"/>

        <attribute name="border" value="2"/>
        
         <method event="ondata" args="d" > <![CDATA[
            if ( !d ) return;
            var dp = this.datapath;
            // var txt = dp.xpathQuery('@title');
            this.txt.setText( dp.xpathQuery('@title') );
            //this.setAttribute('text',txt);
            this.setImage(this.getImageURL('t'));
        
        ]]></method>
      
        <method name="getImageURL" args="suffix" >
            <![CDATA[
                var id=datapath.p.getAttr("id");
                var suf = (suffix != '') ? "_"+suffix: "";

            // Connect to the server OR load the image from a local path            
            if (gGlobals.SHOULDCONNECT) {
                // build URL to image
                var server=datapath.p.getAttr("server");
                var secret=datapath.p.getAttr("secret");
                var s="http://static.flickr.com/"+server+"/"+id+"_"+secret + suf + ".jpg";
                // Debug.write(s); 
                return s;
            } else {               
                // Load images from local disk
                // need to fix offline images because of "medium" images have no "_suffix"
                var s = "data/offline/photos/photo_" + id + suf + ".jpg";
                return s;
            }
            
            ]]>
        </method>
        
        <method name="setImage" args="s">
             //Debug.write("set source s=",s);
             // TODO: [mc 7-31-2006] Reversing these two lines causes IE image loading bugs - see lps/includes/lfc/test/resourceload.lzx.  Fix here for now. 
             this.intparent.setVisible(false);
             this.intparent.interior.setSource(s);
        </method>
   
        <attribute name="_lastw" value="null"/>
        <method name="updateX" args="force" event="onwidth">
            <![CDATA[
            if ( !this.isinited ) return;
            if ( height != width ) this.setHeight( width );
            if ( _lastw == width && force != true ) {
                return;
            } 
            this._lastw = width;
            var wm = _wmult + clipfactor * ( _diwmult );
            var iwidth = wm * ( this.width - 2*this.border );
            var ix = this.width/2 - iwidth/2;

            var ipwidth = iwidth + clipfactor * ( width - iwidth - 2*border);
            var ipx = this.width/2 - ipwidth/2;
            intparent.setX( ipx);
            intparent.setWidth( ipwidth);
            borderbg.setX( ipx  - this.border );
            borderbg.setWidth( ipwidth  + 2*this.border );
            intparent.interior.setX( ix - ipx );
            intparent.interior.setWidth( iwidth );
            shadow.setX( border + ipx );
            shadow.setWidth( ipwidth + this.border );
            ]]>
        </method>

        <attribute name="_lasth" value="null"/>
        <method name="updateY" args="force" event="onheight">
            <![CDATA[
            if ( !this.isinited ) return;
            if ( width != height ) this.setWidth( height );
            if ( _lasth == height && force != true ) {
                return;
            } 
            this._lasth = height;
            var hm = _hmult + clipfactor * ( _dihmult );
            var iheight = hm * ( this.height - 2*this.border );
            var iy = this.height/2 - iheight/2;

            var ipheight = iheight + clipfactor * ( height - iheight - 2*border);
            var ipy = this.height/2 - ipheight/2;

            intparent.setY( ipy);
            intparent.setHeight( ipheight );
            borderbg.setY( ipy  - this.border );
            borderbg.setHeight( ipheight  + 2*this.border );
            intparent.interior.setHeight( iheight );
            intparent.interior.setY( iy - ipy );
            shadow.setY( border + ipy );
            shadow.setHeight( ipheight + this.border );
            ]]>
        </method>

        <method event="onload" reference="intparent.interior">
            var irw = intparent.interior.resourcewidth;
            var irh = intparent.interior.resourceheight;
            if ( irw > irh ){
                this.setAttribute( "_wmult" , 1 );
                this.setAttribute( "_hmult" , irh/ irw );
                this.setAttribute( "_iwmult" , irw/irh);
                this.setAttribute( "_ihmult" , 1);
            } else {
                this.setAttribute( "_wmult" , irw/ irh );
                this.setAttribute( "_hmult" , 1 );
                this.setAttribute( "_iwmult" , 1);
                this.setAttribute( "_ihmult" , irh/irw);
            }
            this.setAttribute( "_diwmult" , _iwmult - _wmult );
            this.setAttribute( "_dihmult" , _ihmult - _hmult );
            this.updateX( true );
            this.updateY( true );
            this.setAttribute( "loaded", true );
            intparent.interior.setAttribute("opacity", 0);
            this.intparent.setVisible(true);
            intparent.interior.animate('opacity', 1, 200);
        </method>

        
        <!-- use this event to figure out if the view just got clicked 
             (and not dragged -->
        <attribute name="onplainclick" value="null"/>
        
        <!-- shadow -->
        <view name="shadow" bgcolor="black" opacity=".5" />
             
        <!-- border -->
        <view name="borderbg" bgcolor="white" />
        
        <!-- interior -->
        <view name="intparent" clip="true" x="$once{ classroot.border }" 
              y="$once{ classroot.border }">
            <view name="interior" bgcolor="0xd9d9d9" stretches="both">
                <state apply="${classroot.doesdrag}">
                    <method event="onmousedown">
                        classroot.onmousedown.sendEvent();
                    </method>
                    <method event="onmouseup">
                        classroot.onmouseup.sendEvent();
                    </method>
                </state>
            </view>
        </view>
        <method event="onmousedown">
            if ( this.doesdrag ) this.startDragCheck();
        </method>
        <method event="onmouseup">
            if ( this.draginitiator ){
                this.stopDrag();
            } else {
                this.ddcdel.unregisterAll();
                if ( this.onplainclick ) this.onplainclick.sendEvent( this );
            }
        </method>
        
        <!-- title -->
        <text text="" width="100" fgcolor="0x1b1191" fontsize="10" 
              name="txt">
            <method event="ontext"  >
                this.adjustDimensions()
            </method>
            <method event="onvisible" >
                this.adjustDimensions();
            </method>
            <method name="adjustDimensions" >
               this.setWidth(classroot.width + 20);
               var tw = Math.min(this.getTextWidth(),width);
               var tx = (classroot.width - tw)/2;
               this.setX(tx);
               this.setY(classroot.height + 3);
             </method>
        </text>

        <attribute name="doesdrag" value="false"/>
        
        <method event="onwidth" >
           if ( this['txt'] ) {
                if ( this.txt.visible ) this.txt.adjustDimensions();
           }
        </method>

        <method name="startDragCheck">
            //info('startDragCheck');
            _mdtime = new Date();
            this.ddcdel.register( LzIdle, "onidle" );
            this._ddcxp = this.getMouse( "x" );
            this._ddcyp = this.getMouse( "y" );
        </method>

        <attribute name="draginitiator" value="false"/>

        <attribute name="ddcdel"
                   value="$once{ new LzDelegate( this, 'doDragCheck' ) }"/>

        <method name="doDragCheck">
            <![CDATA[
            var dx = this.getMouse( "x" ) - _ddcxp;
            var dy =  this.getMouse( "y" ) - _ddcyp;
            if ( ( ( new Date() ) - _mdtime > mousedownBeforeDrag ) ||
                 ( 5 < ( Math.abs( dx ) + Math.abs( dy ) ) ) ){
                this.startDrag( dx, dy );
            }
            ]]>
        </method>

        <attribute name="mousedownBeforeDrag" value="300"/>
        <method name="startDrag">
            this.ddcdel.unregisterAll();
            this.setAttribute ( "draginitiator" , true );
        </method>

        <method name="stopDrag">
            this.setAttribute ( "draginitiator" , false );
        </method>

        <method name="setClipFactor" args="cf">
            this.clipfactor = cf;
            this.updateX( true );
            this.updateY( true );
        </method>

     
    </class>

</library>
