<project name="options" basedir="." default="build-opt">

  <target name="get-env" unless="done.get-env">
    <property environment="env"/>
    <property environment="env" />
    <!-- make sure we have a working LPS_HOME -->
    <property name="LPS_HOME" value="${env.LPS_HOME}" />
    <fail unless="LPS_HOME" message="LPS_HOME is not set."/>
    <property name="done.get-env" value="true" />
  </target>

  <!--===============  Target [get-svn-info]  ==================-->
  <target name="get-svn-info" depends="get-env" unless="done.get-svn-info"
          description="Get the current repository information">
    <sequential>
      <exec executable="svn" output="repository-info.xml">
        <arg value="info" />
        <arg value="--xml" />
        <arg value="${LPS_HOME}" />
      </exec>
      <property name="done.get-svn-info" value="true" />
    </sequential>
  </target>

  <!--===============  Target [read-svn-info]  ==================-->
  <target name="read-svn-info" depends="get-env,get-svn-info" unless="build.id"
    description="Load repository information into properties">
      <xmlproperty file="${LPS_HOME}/repository-info.xml" keeproot="false" prefix="svninfo" />
  </target>

  <!--===============  Target [build-opt]  ==================-->
  <target name="build-opt" depends="get-env,read-svn-info" unless="done.build-opt">

      <!-- make sure we have a build.id -->
      <condition property="build.id" value="${svninfo.entry.commit(revision)} ${svninfo.entry(path)}">
        <and>
          <not>
            <isset property="build.id" />
          </not>
          <isset property="svninfo.entry.commit(revision)" />
          <isset property="svninfo.entry(path)" />
        </and>
      </condition>
      <fail unless="build.id" message="build.id is not set" />

      <!-- make sure we have a build.date -->
      <tstamp><format property="timestamp.now" pattern="yyyy-MM-dd'T'HH:mm:ss'Z'" timezone="GMT" locale="en"/></tstamp>
      <condition property="build.date" value="${timestamp.now}">
        <not>
          <isset property="build.date" />
        </not>
      </condition>
      <fail unless="build.date" message="build.date is not set" />

      <basename property="lps.branch" file="${LPS_HOME}"/>

      <!-- make sure we have a working LZ_VENDOR_ROOT -->
      <available property="have_LZ_VENDOR_ROOT" file="${env.LZ_VENDOR_ROOT}" />
      <fail unless="have_LZ_VENDOR_ROOT" message="LZ_VENDOR_ROOT is not available (${env.LZ_VENDOR_ROOT})"/>
      <property name="LZ_VENDOR_ROOT" value="${env.LZ_VENDOR_ROOT}" />

      <available property="have_LZ_TOOLS_ROOT" file="${env.LZ_TOOLS_ROOT}" />
      <fail unless="have_LZ_TOOLS_ROOT" message="LZ_TOOLS_ROOT is not set"/> 

      <property name="build.tools" value="" />
      <property name="build.qa" value="" />

      <condition property="isautomatedbuild">
           <equals arg1="${user.name}" arg2="laszlo" />
      </condition>

      <!-- Determine value of platform -->
      <condition property="build.platform" value="windows" >
          <os family="windows" />
      </condition>
      <condition property="build.platform" value="macosx" >
           <os name="Mac OS X" />
      </condition>
      <condition property="build.platform" value="unix" >
          <os family="unix" />
      </condition>

      <!-- Determine value of filesystem casesensitivity -->
      <condition property="filesystem.casesensitive" value="false" >
          <os family="windows" />
      </condition>
      <condition property="filesystem.casesensitive" value="false" >
           <os name="Mac OS X" />
      </condition>
      <condition property="filesystem.casesensitive" value="true" >
          <os family="unix" />
      </condition>

      <!-- Set script extension for platform -->
      <condition property="sh" value="bat" >
           <os family="windows" />
      </condition>
      <condition property="sh" value="sh" >
           <os name="Mac OS X" />
      </condition>
      <condition property="sh" value="sh" >
           <os family="unix" />
      </condition>

      <!-- Remove these property definitions if you want the associated
          ant target to run. [bshine 8.25.06] -->     
      <property name="skip.prefetch" value="true" />
      <!-- property name="skip.wrappertest" value="true" -->
      <!-- <property name="skip.runlzunit" value="true" -->

      <!-- currently unable to generate the reference on Windows -->
      <condition property="skip.doc.reference" value="true">
          <os family="windows"/>
      </condition>
      <!-- property name="skip.doc.reference" value="true" / -->

          <property name="build.doc.index" value="1" />

      <property name="done.build-opt" value="true" />
  </target>

  <!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
  * Copyright 2001-2007, 2009 Laszlo Systems, Inc.  All Rights Reserved.              *
  * Use is subject to license terms.                                            *
  * X_LZ_COPYRIGHT_END ****************************************************** -->

</project>
