<project name="options" basedir="." default="build-opt">

  <target name="get-env" unless="done.get-env">
    <property environment="env"/>
    <property environment="env" />
    <!-- make sure we have a working LPS_HOME -->
    <dirname property="lps.basedir" file="${ant.file.options}/.."/>
    <property name="LPS_HOME" value="${lps.basedir}" />
    <fail unless="LPS_HOME" message="LPS_HOME is not set."/>
    <property name="done.get-env" value="true" />
  </target>

  <!-- The nightly build script passes in these values -->
  <condition property="build.url" value="http://svn.openlaszlo.org/${build.project}/${build.branch}">
    <and>
      <isset property="build.project" />
      <isset property="build.branch" />
    </and>
  </condition>

  <echo message="build.url is ${build.url}" />

  <!-- The nightly build script passes in these values -->
  <condition property="dont-need-svn-info">
    <and>
      <isset property="build.url" />
      <isset property="build.revision" />
      <isset property="build.name" />
    </and>
  </condition>

  <echo message="dont-need-svn-info is ${dont-need-svn-info}" />

  <!--===============  Target [get-svn-info]  ==================-->
  <target name="get-svn-info" depends="get-env" unless="dont-need-svn-info"
          description="Get the current repository information">
    <sequential>
      <exec executable="svn" output="${LPS_HOME}/repository-info.xml">
        <arg value="info" />
        <arg value="--xml" />
        <arg value="${LPS_HOME}" />
      </exec>
      <property name="done.get-svn-info" value="true" />
    </sequential>
  </target>

  <!--===============  Target [read-svn-info]  ==================-->
  <target name="read-svn-info" depends="get-env,get-svn-info" unless="dont-need-svn-info"
    description="Load repository information into properties">
      <xmlproperty file="${LPS_HOME}/repository-info.xml" keeproot="false" prefix="svninfo" />
    <property name="build.url" value="${svninfo.entry.url}" />
    <property name="build.revision" value="${svninfo.entry.commit(revision)}" />
    <property name="build.name" value="${svninfo.entry(path)}" />
  </target>

  <!-- Support to set attributes from an xpath query -->
  <scriptdef name="xpath-query" language="javascript">
    <attribute name="query"/>
    <attribute name="xmlfile"/>
    <attribute name="addproperty"/>

    <![CDATA[
      importClass(java.io.FileInputStream);
      importClass(javax.xml.xpath.XPath);
      importClass(javax.xml.xpath.XPathConstants);
      importClass(javax.xml.xpath.XPathFactory);
      importClass(org.xml.sax.InputSource);

      var exp = attributes.get("query");
      var filename = attributes.get("xmlfile");
      var input = new InputSource(new FileInputStream(filename));
      var xpath = XPathFactory.newInstance().newXPath();
      var value = xpath.evaluate(exp, input, XPathConstants.STRING);
      var property = attributes.get("addproperty");

      var echo = project.createTask("echo");
      echo.setMessage(property + " computed from " + filename + " as " + value);
      echo.perform();

      project.setProperty( property, value );
    ]]>
  </scriptdef>

  <!-- This target computes the version info from the checked-out
       source or the build.* values passed in by the nightly build
       script.  It is invoked by build-opt (which can be overridden on
       import) -->
  <target name="build-version-info" depends="get-env,read-svn-info" unless="done.build-version-info">
    <!-- compute the version and release from versions.xml -->
    <xpath-query xmlfile="${LPS_HOME}/versions.xml" addproperty="version.id"
                 query="/versions/branch[@url='${build.url}']/entry[@revision&lt;=${build.revision}][last()]/@id" />
    <property name="version.id.upper" value="${version.id}" />
    <property name="release.id" value="${version.id}" />
    <xpath-query xmlfile="${LPS_HOME}/versions.xml" addproperty="release"
                 query="/versions/branch[@url='${build.url}']/entry[@revision&lt;=${build.revision}][last()]/@release" />

    <!-- make sure we have a build.id -->
    <condition property="build.id" value="${build.revision} ${build.name}">
      <not>
        <isset property="build.id" />
      </not>
    </condition>
    <fail unless="build.id" message="build.id is not set" />

    <!-- make sure we have a build.date -->
    <tstamp><format property="timestamp.now" pattern="yyyy-MM-dd'T'HH:mm:ss'Z'" timezone="GMT" locale="en"/></tstamp>
    <condition property="build.date" value="${timestamp.now}">
      <not>
        <isset property="build.date" />
      </not>
    </condition>
    <fail unless="build.date" message="build.date is not set" />

    <property name="done.build-version-info" value="true" />
  </target>

  <!--===============  Target [build-opt]  ==================-->
  <target name="build-opt" depends="build-version-info" unless="done.build-opt">

    <basename property="lps.branch" file="${LPS_HOME}"/>

    <!-- make sure we have a working LZ_VENDOR_ROOT -->
    <available property="have_LZ_VENDOR_ROOT" file="${env.LZ_VENDOR_ROOT}" />
    <fail unless="have_LZ_VENDOR_ROOT" message="LZ_VENDOR_ROOT is not available (${env.LZ_VENDOR_ROOT})"/>
    <property name="LZ_VENDOR_ROOT" value="${env.LZ_VENDOR_ROOT}" />

    <available property="have_LZ_TOOLS_ROOT" file="${env.LZ_TOOLS_ROOT}" />
    <fail unless="have_LZ_TOOLS_ROOT" message="LZ_TOOLS_ROOT is not set"/> 

    <property name="build.tools" value="" />
    <property name="build.qa" value="" />

    <condition property="isautomatedbuild">
      <equals arg1="${user.name}" arg2="laszlo" />
    </condition>

    <!-- Determine value of platform -->
    <condition property="build.platform" value="windows" >
      <os family="windows" />
    </condition>
    <condition property="build.platform" value="macosx" >
      <os name="Mac OS X" />
    </condition>
    <condition property="build.platform" value="unix" >
      <os family="unix" />
    </condition>

    <!-- Determine value of filesystem casesensitivity -->
    <condition property="filesystem.casesensitive" value="false" >
      <os family="windows" />
    </condition>
    <condition property="filesystem.casesensitive" value="false" >
      <os name="Mac OS X" />
    </condition>
    <condition property="filesystem.casesensitive" value="true" >
      <os family="unix" />
    </condition>

    <!-- Set script extension for platform -->
    <condition property="sh" value="bat" >
      <os family="windows" />
    </condition>
    <condition property="sh" value="sh" >
      <os name="Mac OS X" />
    </condition>
    <condition property="sh" value="sh" >
      <os family="unix" />
    </condition>

    <!-- Remove these property definitions if you want the associated
         ant target to run. [bshine 8.25.06] -->     
    <property name="skip.prefetch" value="true" />
    <!-- property name="skip.wrappertest" value="true" -->
    <!-- <property name="skip.runlzunit" value="true" -->
    <!-- property name="skip.doc.reference" value="true" / -->

    <property name="build.doc.index" value="1" />

    <property name="done.build-opt" value="true" />
  </target>

  <!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
  * Copyright 2001-2007, 2009, 2010 Laszlo Systems, Inc.  All Rights Reserved.              *
  * Use is subject to license terms.                                            *
  * X_LZ_COPYRIGHT_END ****************************************************** -->

</project>
