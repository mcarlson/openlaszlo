<?xml version="1.0"?>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2008 Laszlo Systems, Inc.  All Rights Reserved.                   *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

<!-- the content of this file was derived from files
     info-{attribinfo,attributes,categories,reservedwords,tiers}.html
     in the 3.4 docs/src/hardpages directory. -->

<js2doc>

<property id="info-attributes" topic="LZX" subtopic="General Information" access="public">
<doc>
<tag name="lzxname"><text>An introduction to Attributes</text></tag>
<text>
<p>Attributes can be an element of a tag or a property of a JavaSctipt
  class.  Attributes are declared and set in tags, but they can also
  be set and read in script.  Not all attributes can be set in script,
  similarly not all attributes can be in tags. Attributes are
  characterized based on this behaviour into five categories. See <a
  href="#types">below</a> for more information on the various
  categories.</p>

<p>An attribute can be declared in a tag header as follows:</p>

<example title="Setting an attribute value in the tag header">&lt;canvas height="20"&gt;
  &lt;view <span class="redText">width="20"</span> height="20" bgcolor="red"/&gt;
&lt;/canvas&gt;</example>

<p>An alternative (although more verbose) way to set the attribute is
using the <tagname link="true">attribute</tagname> tag as a child of
the tag whose attribute is being set:</p>

<example title="Using the attribute element to set an attribute value">&lt;canvas height="20"&gt;
  &lt;view&gt;
    <span class="redText">&lt;attribute name="width" type="number" value="20"/&gt;</span>
    &lt;attribute name="height" type="number" value="20"/&gt;
    &lt;attribute name="bgcolor" type="color" value="red"/&gt;
  &lt;/view&gt;
&lt;/canvas&gt;</example>

<p>This second example is actually the same as saying &lt;view width="20" height="20" bgcolor="red"/&gt;. The <tagname>attribute</tagname> tag becomes useful when writing classes as well as when performing complicated constraints of existing attributes.</p>

<p>In script, the values of most attributes are can be retrieved using
dot syntax:</p>

<example title="Using dot syntax to retrieve an attribute value">&lt;canvas height="20"&gt;
  &lt;view name="myView" width="20" height="20" bgcolor="red"/&gt;

  &lt;script&gt;
    var myAttributeValue = <span class="redText">myView.x</span>;
    // myAttributeValue now has the value 20
  &lt;/script&gt;
&lt;/canvas&gt;</example>

<p>Additionally attributes can be read using the
<method>getAttribute</method> method. This is unnecessary most of the
time, but can be useful for retrieving the value of an arbitrary
attribute, whose name is represented by a string.</p>

<example title="Using getAttribute to retrieve an attribute value">&lt;canvas height="20"&gt;
  &lt;view name="myView" width="20" height="20" bgcolor="red"/&gt;

  &lt;script&gt;
    var myAttributeName = "x";
    var myAttributeValue = <span class="redText">myView.getAttribute(myAttributeName)</span>;
    // myAttributeValue now has the value 20
  &lt;/script&gt;
&lt;/canvas&gt;</example>

<p>All attributes that are settable in script (see below) can be set
using the <method>setAttribute</method> method:</p>

<example title="Using setAttribute to set an attribute value">&lt;canvas height="20"&gt;
  &lt;view width="20" height="20" bgcolor="red"
      oninit="<span class="redText">this.setAttribute('width', 50);</span>"/&gt;
&lt;/canvas&gt;</example>



<p>For more infomation see the reference page for <a
href="tag.attribute.html">Attribute</a>.  The <a
href="${tutorials}classes-tutorial.html">Classes</a> tutorial describes how to
use attributes to define a class.</p>

<!-- This is our current workaround for inserting an hrule -->
<para role="postprocess-html-hr"/>

<p><a name="types"></a>There are four kinds of attributes:</p>
<ul>
  <li><a href="#setter"><literal>read/write</literal> attributes</a></li>
  <li><a href="#eventhandler"><literal>event-handler</literal></a> <a href="#final"> (script may
      be defined XML tag)</a></li>
  <li><a href="#final"><literal>initialize-only</literal> attributes (defined only in XML tag)</a></li>
  <li><a href="#readonly"><literal>read-only</literal> attributes (JavaScript fields)</a><br /> 
  </li>
</ul>

<para role="postprocess-html-hr"/>
<a name="setter"></a>
<simplesect>
  <h2><literal>read/write</literal> attributes</h2>
  <p><literal>read/write</literal> attributes may be modified at runtime
and used in constraint expressions. When <method>setAttribute</method>
is called, the appropriate setter will be called automatically. The
value of an attribute can be retrieved through script using dot
syntax, (for example, myView.opacity). </p>

<p>For example:</p>
<example title="Using setAttribute to update a constraint">&lt;canvas height="20"&gt;
  &lt;view id="myView" onclick="setAttribute('opacity', 1.5 - this.opacity)" bgcolor="red"&gt;
    &lt;text text="${'My opacity is ' + myView.opacity + '.  Click to change it.'}"/&gt;
  &lt;/view&gt;
&lt;/canvas&gt;</example>

<a name="defaultsetter"></a>

<p>Some attributes use the setter method
(<method>setAttribute</method>) to set their values at
run-time. Typically they are custom attributes that have been declared
in components using the <tagname>attribute</tagname> tag. Therefore they can be
declared and set in tags too.</p>

<example title="Using SetAttribute to set a window title">&lt;canvas height="50"&gt;
    &lt;window width="140" <span class="redText">title="My Window"</span> onclick="this.setAttribute('title', 'Hello World');"/&gt;
&lt;/canvas&gt;
</example>

  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

<para role="postprocess-html-hr"/>
<a name="eventhandler"></a>
<simplesect>
  <h2><literal>event-handler</literal> attributes</h2>
  <p><literal>event-handler</literal> attributes are instructions for what to perform when a particular event happens. They always contain script, and cannot be changed at run-time (that is, from script). Their values cannot (and do not need to) be retrieved from script.</p>

<example title="Using event-handler attributes">
&lt;canvas height="150" debug="true"&gt;
    &lt;view width="50" height="50" bgcolor="red" <span class="redText">onclick="Debug.write('Hello, World!');"</span> /&gt;
&lt;/canvas&gt;
</example>

  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

<para role="postprocess-html-hr"/>
<a name="final"></a>
<simplesect>
  <h2><literal>initialize-only</literal> attributes</h2>
  <p><literal>initialize-only</literal> attributes are declared and set in the tag, but cannot be changed in using script. Good examples of <literal>initialize-only</literal> attributes are name and id. They can be read from script using dot syntax.</p>
  <example title="Using initialize-only attributes">
&lt;canvas height="50"&gt;
    &lt;view width="50" height="50" bgcolor="red" <span class="redText">align="center"</span> /&gt;
&lt;/canvas&gt;
  </example>
  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

<para role="postprocess-html-hr"/>
<a name="readonly"></a>
<simplesect>
  <h2><literal>read-only</literal> attributes</h2>
  <p><literal>read-only</literal> attributes, sometimes called "Fields", are only available through
  the element's API. Since they are read-only, they cannot be set in a &lt;tag&gt;.
  Their values can be retrieved using dot syntax.</p>
  <example title="Using read-only attributes">
&lt;canvas height="150" debug="true"&gt;
  &lt;view width="50" height="50" bgcolor="red" <span class="redText">onclick="Debug.write('subview' + canvas.subviews);"</span> /&gt;
&lt;/canvas&gt;
  </example>
  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

</text>
</doc>
</property>

</js2doc>
