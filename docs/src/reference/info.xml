<?xml version="1.0"?>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2008 Laszlo Systems, Inc.  All Rights Reserved.                   *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

<!-- the content of this file was derived from files
     info-{attribinfo,attributes,categories,reservedwords,tiers}.html
     in the 3.4 docs/src/hardpages directory. -->

<js2doc>

<property id="info-attributes" topic="LZX" subtopic="General Information" access="public">
<doc>
<tag name="lzxname"><text>An introduction to Attributes</text></tag>
<tag name="docfilename"><text>info-attributes</text></tag>
<text>
<p>Attributes can be an element of a tag or a property of a JavaScript
  class. Attributes are declared and set in tags, but they can also
  be set and read in script.  Not all attributes can be set in script,
  similarly not all attributes can be in tags. Attributes are
  characterized based on this behavior into five categories. See <a
  href="#types">below</a> for more information on the various
  categories.</p>

<p>An attribute can be declared in a tag header as follows:</p>

<example title="Setting an attribute value in the tag header">
  &lt;canvas height="20"&gt;
    &lt;view <span class="redText">width="20"</span> height="20" bgcolor="red"/&gt;
  &lt;/canvas&gt;</example>

<p>An alternative (although more verbose) way to set the attribute is
using the <tagname link="true">attribute</tagname> tag as a child of
the tag whose attribute is being set:</p>

<example title="Using the attribute element to set an attribute value">
  &lt;canvas height=&quot;20&quot;&gt;
    &lt;view&gt;
      &lt;attribute name=&quot;width&quot; value=&quot;20&quot;/&gt;
      &lt;attribute name=&quot;height&quot; value=&quot;20&quot;/&gt;
      &lt;attribute name=&quot;bgcolor&quot; value=&quot;red&quot;/&gt;
    &lt;/view&gt;
  &lt;/canvas&gt;
</example>

<p>This second example is actually the same as saying &lt;view width="20" height="20" bgcolor="red"/&gt;. The <tagname>attribute</tagname> tag becomes useful when writing classes as well as when performing complicated constraints of existing attributes.</p>

<p>In script, the values of most attributes are can be retrieved using
dot syntax:</p>

<example title="Using dot syntax to retrieve an attribute value">
  &lt;canvas height=&quot;40&quot; debug=&quot;false&quot;&gt;
    &lt;simplelayout /&gt;
    &lt;view name=&quot;myView&quot; width=&quot;20&quot; height=&quot;20&quot; bgcolor=&quot;red&quot;/&gt;
    
    &lt;text oninit=&quot;this.format(&apos;myView.width = %d&apos;, myView.width)&quot; /&gt;
  &lt;/canvas&gt;
</example>

<p>Additionally attributes can be read using the
<method>getAttribute</method> method. This is unnecessary most of the
time, but can be useful for retrieving the value of an arbitrary
attribute, whose name you don't know in advance.</p>

<example title="Using getAttribute to retrieve an attribute value">
  &lt;canvas height=&quot;40&quot; debug=&quot;false&quot;&gt;
    &lt;simplelayout /&gt;
    &lt;view name=&quot;myView&quot; width=&quot;20&quot; height=&quot;20&quot; bgcolor=&quot;red&quot;/&gt;
    &lt;attribute name=&quot;whatAttr&quot; type=&quot;string&quot; value=&quot;height&quot; /&gt;
    &lt;text
      oninit=&quot;this.format(&apos;myView.%s = %d&apos;,
      canvas.whatAttr,
      myView[canvas.whatAttr])&quot; /&gt;
  &lt;/canvas&gt;
</example>

<p>All attributes that are settable in script (see below) can be set
using the <method>setAttribute</method> method:</p>

<example title="Using setAttribute to set an attribute value">&lt;canvas height="20"&gt;
  &lt;view width="20" height="20" bgcolor="red"
      oninit="<span class="redText">this.setAttribute('width', 50);</span>"/&gt;
&lt;/canvas&gt;</example>



<p>For more infomation see the reference page for <a
href="tag.attribute.html">Attribute</a>.  The <a
href="${tutorials}classes-tutorial.html">Classes</a> tutorial describes how to
use attributes to define a class.</p>

<!-- This is our current workaround for inserting an hrule -->
<para role="postprocess-html-hr"/>

<p><a name="types"></a>There are four kinds of attributes:</p>
<ul>
  <li><a href="#setter"><literal>read/write</literal> attributes</a></li>
  <li><a href="#eventhandler"><literal>event-handler</literal></a> <a href="#final"> (script may
      be defined XML tag)</a></li>
  <li><a href="#final"><literal>initialize-only</literal> attributes (defined only in XML tag)</a></li>
  <li><a href="#readonly"><literal>read-only</literal> attributes (JavaScript fields)</a><br /> 
  </li>
</ul>

<para role="postprocess-html-hr"/>
<anchor id="setter"/>
<a name="setter"></a>
<simplesect>
  <h2><literal>read/write</literal> attributes</h2>
  <p><literal>read/write</literal> attributes may be modified at runtime
    and be the target of a constraint expression. When <method>setAttribute</method>
    is called the value of the attribute will be updated, along with any constraints that depend on the attribute. The
value of an attribute can be retrieved through script using dot
syntax, (for example, myView.opacity). </p>

<p>For example:</p>
<example title="Using setAttribute to update a constraint">&lt;canvas height="20"&gt;
  &lt;view id="myView" onclick="setAttribute('opacity', 1.5 - this.opacity)" bgcolor="red"&gt;
    &lt;text text="${'My opacity is ' + myView.opacity + '.  Click to change it.'}"/&gt;
  &lt;/view&gt;
&lt;/canvas&gt;</example>

  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

<para role="postprocess-html-hr"/>
<anchor id="eventhandler"/>
<a name="eventhandler"></a>
<simplesect>
  <h2><literal>event-handler</literal> attributes</h2>
  <p><literal>event-handler</literal> attributes are instructions for what to perform when a particular event happens. They always contain script, and cannot be changed at run-time (that is, from script). Their values cannot (and do not need to) be retrieved from script.</p>

<example title="Using event-handler attributes">
&lt;canvas height="150" debug="true"&gt;
    &lt;view width="50" height="50" bgcolor="red" <span class="redText">onclick="Debug.write('Hello, World!');"</span> /&gt;
&lt;/canvas&gt;
</example>

<para>
There is a long-hand version for event-handler attributes, just like normal attributes:
</para>
  <example title="Using the long-hand version">
  &lt;canvas height=&quot;40&quot;&gt;
    &lt;text&gt;
      Click me!
      &lt;handler name=&quot;onclick&quot;&gt;
        this.setAttribute(&apos;text&apos;, &apos;Hello World!&apos;);
      &lt;/handler&gt;
    &lt;/text&gt;
  &lt;/canvas&gt; 
</example>
  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

<para role="postprocess-html-hr"/>
<anchor id="final"/>
<a name="final"></a>
<simplesect>
  <h2><literal>initialize-only</literal> attributes</h2>
  <p><literal>initialize-only</literal> attributes are declared and set in the tag, but cannot be changed in using script. Good examples of <literal>initialize-only</literal> attributes are name and id. They can be read from script using dot syntax.</p>
  <example title="Using initialize-only attributes">
    &lt;canvas height=&quot;40&quot;&gt;
      &lt;text id=&quot;myID&quot;&gt;
        Click me!
        &lt;handler name=&quot;onclick&quot;&gt;
          this.setAttribute(&apos;text&apos;, this.id);
        &lt;/handler&gt;
      &lt;/text&gt;
    &lt;/canvas&gt; 
  </example>
  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

<para role="postprocess-html-hr"/>
<anchor id="readonly"/>
<a name="readonly"></a>
<simplesect>
  <h2><literal>read-only</literal> attributes</h2>
  <p><literal>read-only</literal> attributes, sometimes called "Fields", are only accessible using script. Since they are read-only, they cannot be set in a &lt;tag&gt;.
  Their values can be retrieved using dot syntax.</p>
  <example title="Using read-only attributes">  
    &lt;canvas height=&quot;30&quot; debug=&quot;true&quot;&gt;
      &lt;!-- need debugging for %w formatter, but don&apos;t need debug window --&gt;
      &lt;debug y=&quot;50&quot; /&gt;
      &lt;text id=&quot;myID&quot;&gt;
        Click me!
        &lt;handler name=&quot;onclick&quot;&gt;
          this.format(&quot;canvas.subviews: %w&quot;, canvas.subviews);
        &lt;/handler&gt;
      &lt;/text&gt;
    &lt;/canvas&gt;    
  </example>
  <para role="rightalign"><ulink>More on attributes</ulink></para>
</simplesect>

</text>
</doc>
</property>

</js2doc>
