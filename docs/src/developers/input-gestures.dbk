<chapter id="input-devices">

   <title>Input Devices and Gestures</title>

   <!-- remove commented out sample code that was ignored by the build. IORIO 20 nov 2007 -->


   <section>
      <title>Overview</title>
      <para> This chapter explains how to incorporate mouse and keyboard input into an OpenLaszlo
         application. It covers the basic concepts as well as more advanced topics such as tracking
         the mouse across multiple views while the mouse is down, and how to implement the "right
         click" context menu in OpenLaszlo applications. </para>

      <para/>
   </section>
   <section>
      <title>The Mouse</title>

      <para> Interaction with a view via the mouse is fundamental to all applications. These
         sections will explore the basic concepts as well some more advanced topics. </para>
      <para/>
      <section>
         <title>Basic Mouse Events</title>
         <para> Interacting with the example below displays the five basic mouse events that can be
            recognized by a view: <literal>onmouseover</literal>, <literal>onmouseout</literal>,
               <literal>onmousedown</literal>, <literal>onmouseup</literal>, and
            <literal>onclick</literal>
         </para>
         <para>Although <literal>onmouseup</literal> and <literal>onclick</literal> are similar,
               <literal>onmouseup</literal> is sent whenever the user lets up on the mouse, while
               <literal>onclick</literal> is only sent when the user lets up on the mouse while the
            cursor is still contained within the boundary of the view. </para>
         <example role="live-example">
            <title>The basic mouse events</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$1.lzx"/></textobject> 
   </programlisting>
         </example>

         <para/>
      </section>
      <section>
         <title>Making Views Clickable</title>
         <para> A view will only respond to mouse events when its attribute
               <literal>clickable="true"</literal>. Views, by default, are not clickable. If,
            however, any of the mouse events are included in a view's tag (like above) then
               <literal>clickable</literal> will be set to true automatically. In the example below,
            there are no mouse events declared within the tag itself, only in its methods. In this
            case it becomes necessary to explicitly define <literal>clickable="true"</literal> for
            the view. </para>
         <example role="live-example">
            <title>Making views clickable</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$2.lzx"/></textobject> 
   </programlisting>
         </example>

         <para/>
      </section>
      <section>
         <title>ClickRegion</title>
         <para> Setting <literal>clickregion</literal> to a vector-based SWF turns the SWF shape
            into a clickable hotspot. </para>

         <example role="live-example">
            <title>Setting a clickregion</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/clickregion.lzx"/></textobject> 
    </programlisting>
         </example>


         <para/>
      </section>
      <section>
         <title>Cursor Management</title>
         <para> The cursor automatically changes to a hand when it is over a clickable view, but if
            a custom cursor is desired, then this can be accomplished by defining a custom resource
            for the cursor and using it with <literal>lz.Cursor</literal> service as shown below. </para>

         <example role="live-example">
            <title>Changing the cursor</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$3.lzx"/></textobject> 
   </programlisting>
         </example>

         <para/>
         <section>
            <title>Disabling the "hand" cursor</title>
            <para>By setting <indexterm>
                  <primary>
                     <literal>lz.Cursor.showHandCursor()</literal>
                  </primary>
               </indexterm><methodname>lz.Cursor.showHandCursor()</methodname> to true or false, you
               show or hide the hand cursor for all clickable views. This means that you can, for
               example, prevent clicks from traveling through windows, without the hand cursor
               appearing.</para>
            <para>Here is an example showing the hand cursor turned on and off.</para>

            <example role="live-example">
               <title>Enabling and disabling the hand cursor</title>
               <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$4.lzx"/></textobject> 
   </programlisting>
            </example>

            <para/>
         </section>
      </section>
      <section>
         <title>Custom Cursors for multiple runtimes</title>
         <para> With OpenLaszlo 4, you can set custom cursors in DHTML and SWF. If you plan to use
            custom cursors across DHTML and SWF, be sure you're using appropriate cursor IDs for
            DHTML (see <ulink url="http://www.quirksmode.org/css/cursor.html"
               >http://www.quirksmode.org/css/cursor.html</ulink> for more info), and make sure
            you've included resources named after those IDs for SWF.</para>
            
            <note><para>Cursor IDs with hypens work fine in DHTML
            but are not valid SWF names. For example, you should change the cursor ID col-resize, to colResize.</para></note>
            
            <para>Note that global cursors currently only work for clickable items in DHTML. </para>
         <example role="live-example"><title>Using custom cursors</title>
            <programlisting language="lzx">
               <textobject><textdata fileref="programs/cursors.lzx"/></textobject> 
            </programlisting>
         </example>
      </section>
      <section>
         <title>Custom buttons</title>
         <para>Creating a custom button that changes its images with onmouseup, onmouseover, and
            onmousedown is a common practice. Here is an example using the <indexterm>
               <primary>basebutton</primary>
            </indexterm><sgmltag class="element">&lt;basebutton&gt;</sgmltag><remark
               role="fixme">[unknown tag]</remark>
            <!--unknown tag: basebutton--> tag: </para>
         <example role="live-example">
            <title>Creating a custom button using basebutton</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$5.lzx"/></textobject> 
   </programlisting>
         </example>

         <para/>
      </section>
      <section>
         <title>Dragging Views</title>
         <para>Dragging a view can be accomplished with the use of a <literal>dragstate</literal>.
            When a <literal>dragstate</literal> is applied, views can be dragged freely or
            constrained to a boundary as well as an axis. The example below shows the use of a
               <literal>dragstate</literal> with its <literal>max</literal>, <literal>min</literal>,
            and <literal>axis</literal> attributes.</para>

         <example role="live-example">
            <title>Dragging a view</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$6.lzx"/></textobject> 
   </programlisting>
         </example>

         <para/>
      </section>
   </section>
   <section>
      <title>Tracking the Mouse</title>
      <para/>
      <section>
         <title>Tracking the mouse within a single view</title>
         <para> This simple program shows how to do basic mouse tracking in a view: </para>

         <example role="live-example">
            <title>Simple mouse tracking</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$7.lzx"/></textobject> 
   </programlisting>
         </example>

         <para> This generates a lot of points, but you can decide how much data to filter or not in
            the trackmouse method. </para>

         <para/>
      </section>
      <section>
         <title>Tracking the Mouse in overlapping views</title>
         <para> Once the mouse is down in relation to a specific view,
            <literal>onmouseover</literal> and <literal>onmouseout</literal> events are only sent to
            that view. This makes it difficult to track the mouse over other views. This section
            explains how to accomplish this, first by using a base component called
               <literal>&lt;basetrackgroup&gt;</literal>, and then with the low level APIs
            that basetrackgroup is built upon. </para>

         <para> In the example below, notice that the <literal>onmouseover</literal> and
               <literal>onmouseout</literal> events change the size of the view while the
               <literal>onmousetrackover</literal> and <literal>onmousetrackout</literal> events
            change the color of the view. As you drag the mouse, the first view will continue to
            change its size and color while the other views will only change their color. Again,
            this is because the basic <literal>onmouseover</literal> and
            <literal>onmouseout</literal> events are only being sent to the first view that was
            clicked. However, <literal>onmousetrackover</literal> and
            <literal>onmousetrackout</literal> are sent to all views while the mouse is down. </para>

         <example role="live-example">
            <title>Using basetrackgroup</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$8.lzx"/></textobject> 
   </programlisting>
         </example>

         <anchor id="input-devices.view_source"/>
         <para/>
      </section>
   </section>
   <section>
      <title>"View Source" right click menu item </title>
      <para> The default canvas context (right click) menu has a "view source" item, available in
         Flash player Version 7 and later. By default this menu includes an "About OpenLaszlo"
         entry, which links to the <ulink url="http://www.openlaszlo.org">OpenLaszlo</ulink>
         website, and an option to view source. </para>
      <para> For an application <literal>framitz.lzx</literal> that is deployed proxied (using the
         OpenLaszlo Server), clicking on View Source will fetch
         <literal>framitz.lzx?lzt=source</literal> in a new browser window. If you don't wish to
         make source visible, set <literal>allowRequestSOURCE=false </literal>in
            <literal>WEB-INF/lps/config/lps.properties</literal>. </para>
      <para> Starting with Flash 8, you can control the content of the menu using the class <indexterm>
            <primary>lz.ContextMenu</primary>
         </indexterm><classname>lz.contextmenu</classname>, which you instantiate using <literal>new
            lz.contextmenu()</literal>. The method <indexterm>
            <primary>
               <literal>lz.contextmenu.makeMenuItem ()</literal>
            </primary>
         </indexterm><methodname>lz.contextmenu.makeMenuItem ()</methodname>instantiates an
            <literal>lz.contextmenuitem</literal>. </para>
      <para> To make a new menu, first you create the menu, then you create a menu item, and then
         you add the menu item to the menu. The data type of the menu item is
            <literal>lz.contextmenuitem</literal>; you supply the text that you want to appear in
         the menu (the word 'Delete' may not be used as context menu text) and a delegate that
         specifies how you want that menu item to be handled. <indexterm>
            <primary>
               <literal>lz.contextmenu.addItem()</literal>
            </primary>
         </indexterm><methodname>lz.contextmenu.addItem()</methodname> adds an item to that menu.
         So, to create a new menu you would do: </para>

      <example role="live-example">
         <title>Creating a context menu</title>
         <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$9.lzx"/></textobject> 
    </programlisting>
      </example>



      <para> There is no method to clear the menu (Settings and About Flash Player are always
         there), but you can erase one with something like </para>
      <programlisting>
var cmenu = new lz.contextmenu();
canvas.setDefaultContextMenu(cmenu)
</programlisting>
      <para> That would give you an empty context menu. </para>
      <para condition="solo"> SOLO deployed applications, say, <literal>framitz.lzx.swf</literal>,
         will attempt to fetch <literal>"framitz.lzx.swf.zip"</literal>.This assumes that a copy of
         the source will be placed there if you desire to make your source visible. If you don't
         wish to share code of your SOLO application, use the method above. </para>
      <para/>
   </section>
   <section>
      <title>Keyboard Input</title>
      <para> In OpenLaszlo applications, the keyboard input can be accepted by the view which has
         the keyboard "focus". The <indexterm>
            <primary>lz.Focus</primary>
         </indexterm><classname>lz.Focus</classname> service allows you to set and control the
         focus. The opposite of focus is "blur", as discussed below. </para>
      <para/>
      <section>
         <title>Focus and the lz.Focus service</title>
         <para>A focusable view is a view whose <indexterm>
               <primary>focusable</primary>
            </indexterm><sgmltag class="attribute">focusable</sgmltag> attribute is true (the
            default value). When the user clicks on a focusable view, the focus is set to that view.
            If the view is different from the previously focused view, an <indexterm>
               <primary>onblur event</primary>
            </indexterm><literal>onblur</literal> is sent to the previously focused view, and an <indexterm>
               <primary>onfocus event</primary>
            </indexterm><literal>onfocus</literal> is sent to the newly focused view.</para>
         <para> To prevent a view from taking keyboard input, you can set its
            <literal>focusable</literal> attribute to "false".</para>
         <para/>
      </section>
      <section>
         <title>Focus trap and the focus group</title>
         <para><indexterm significance="preferred">
               <primary>Focus trap</primary>
            </indexterm><glossterm>Focus trap</glossterm>: A view's focus trap is its most direct
            ancestor whose <indexterm>
               <primary>focustrap</primary>
            </indexterm><sgmltag class="attribute">focustrap</sgmltag> attribute is true, or the
            canvas. A view's <indexterm significance="preferred">
               <primary>focus group</primary>
            </indexterm><glossterm>focus group</glossterm> is the set of focusable views that are
            descendants of the focus trap, and are not descendants of any more immediate ancestor
            whose <indexterm>
               <primary>focustrap</primary>
            </indexterm><sgmltag class="attribute">focustrap</sgmltag> attribute is also true.</para>

         <para>The effect of this definition is that tabbing within the children of a view that has
            a true <indexterm>
               <primary>focustrap</primary>
            </indexterm><sgmltag class="attribute">focustrap</sgmltag>, such as a window, will tab
            to another child of the same view, but won't tab to a view within another window.</para>

         <para>The <ulink url="../../demos/contacts/contacts.lzx" type="">Contacts demo</ulink>
            demonstrates the use of keyboard focus. Double-click on a name to open the details
            window. Click in a text, and then press tab and shift-tab to move to other text fields
            within the same focus group.</para>
         <para/>
         <section>
            <title>Using Tab key to move within a focus group</title>
            <para>When the tab key is pressed, the focus moves to the next focusable view within the
               current <emphasis role="i">focus group</emphasis>. If there is no next view, the
               first view within the current focus group is selected. Similarly, shift-tab selects
               the previous focusable view. If there is no previous view, the last view within the
               current focus group is selected.</para>

            <para>A view can override the <indexterm>
                  <primary>
                     <literal>getNextSelection()</literal>
                  </primary>
               </indexterm><methodname>getNextSelection()</methodname> and <indexterm>
                  <primary>
                     <literal>getPrevSelection()</literal>
                  </primary>
               </indexterm><methodname>getPrevSelection()</methodname> methods to change this
               default behavior. The tab and shift tab keys select the view returned by calling <indexterm>
                  <primary>
                     <literal>getNextSelection()</literal>
                  </primary>
               </indexterm><methodname>getNextSelection()</methodname> and <indexterm>
                  <primary>
                     <literal>getPrevSelection()</literal>
                  </primary>
               </indexterm><methodname>getPrevSelection()</methodname>, respectively, on the view
               that currently has the keyboard focus.</para>
            <para/>
         </section>
         <section>
            <title>Programmatic control of focus group</title>
            <para>In addition to the tab key, focus within a focus group can also be set under
               programmatic control, by calling the <indexterm>
                  <primary>
                     <literal>lz.Focus.setFocus()</literal>
                  </primary>
               </indexterm><methodname>lz.Focus.setFocus()</methodname>, <indexterm>
                  <primary>
                     <literal>lz.Focus.next()</literal>
                  </primary>
               </indexterm><methodname>lz.Focus.next()</methodname>, and <indexterm>
                  <primary>
                     <literal>lz.Focus.prev()</literal>
                  </primary>
               </indexterm><methodname>lz.Focus.prev()</methodname> methods.</para>
            <para/>
         </section>
      </section>
      <section>
         <title>Reading Key Values </title>
         <para> One way of integrating keyboard input into your application is to have a focusable
            view capture pressed key codes. Only one view can be focusable at any one time. In this
            example, we're making that view focused oninit (although in a larger application, you
            could bring focus to that view using the tab key, or you could write an onclick method
            to tell it to focus).</para>
         <para> The example below illustrates use of <indexterm>
               <primary>lz.Focus</primary>
            </indexterm><sgmltag class="element">&lt;lz.Focus&gt;</sgmltag> to make a view
            able to accept keyboard input.</para>

         <note>The actual character that corresponds to a particular key depends on the operating
            system and locale, so the character returned by <literal>String.fromCharCode()</literal>
            may be different on your system.</note>
         <example role="live-example">
            <title>Reading key values</title>
            <programlisting language="lzx">
   <textobject><textdata fileref="programs/input-devices-$10.lzx"/></textobject> 
   </programlisting>
         </example>

         <para/>
      </section>
   </section>
</chapter>
