<chapter id="animation">
<title>Animation </title>

<!-- remove empty para tag LI, LPP-4635 9/3/2007 -->
<!-- <para/> -->
<section><title>Introduction</title>
<para>
OpenLaszlo applications have a fluid, dynamic feel that allow you to guide the user's experience. This fluidity is achieved with <indexterm significance="preferred"><primary>animators</primary></indexterm><glossterm>animators</glossterm>,
which change the value of an object's attribute over a specified time duration. In this tutorial we'll start by showing the code for some short applications that allow you to see
the essential simplicity of coding with animators.  A little further down there are interactive examples that are a little more complicated but allow you to see animation in action.
</para>
<para>
Note that when we refer to animation in LZX applications, we mean anything that changes over time. This usually means something visible, but not always. For example, one might animate output volume of an audio file. You can animate the opening and closing of tabs and windows, the positions of items on the screen, and so forth.
</para>
<para>For example, the following application defines an animator for a window that moves it to a position of x=100 over 1 second (1000 milliseconds). The animator is an instance of <indexterm><primary>lz.animator</primary></indexterm><classname>lz.animator</classname>, and is defined by using the <indexterm><primary>animator</primary></indexterm><sgmltag class="element">&lt;animator&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: animator-->
 tag.</para>

<example role="live-example"><title>A simple animator</title>
  <programlisting language="lzx">
    <textobject><textdata fileref="programs/simpleanimation.lzx"/></textobject> 
  </programlisting>
</example>

<para>
An animator starts with the current value of an attribute unless otherwise specified.  
In the next example the application defines an animator for a window that first moves the window to a position 
of <literal>x="50"</literal>, and then animates the window to a position of <literal>x="100"</literal> over 1 second.
</para>

<example role="live-example"><title>Specifying starting conditions</title>
  <programlisting language="lzx">
    <textobject><textdata fileref="programs/startanimation.lzx"/></textobject> 
  </programlisting>
</example>

<para>
Animators, by default, change an object's attribute by easing in and out of the <indexterm><primary>from</primary></indexterm><sgmltag class="attribute">from</sgmltag> and 
<indexterm><primary>to</primary></indexterm><sgmltag class="attribute">to</sgmltag> values. Running the above sample applications shows a window that  accelerates in and out of its 
position. This nonlinear behavior can be minimally controlled with the use of the <indexterm><primary>motion</primary></indexterm><sgmltag class="attribute">motion</sgmltag> attribute. 
For example, the following  code shows a window which moves linearly across the screen, in contrast to examples above. 
The values for the motion tag are: <literal>easeboth</literal>, <literal>easein</literal>, <literal>easeout</literal>, and <literal>linear</literal>.
</para>
 
<example role="live-example"><title>Linear movement</title>
  <programlisting language="lzx">
    <textobject><textdata fileref="programs/linearanimation.lzx"/></textobject> 
  </programlisting>
</example>

<para>
Animators, like views, can be named so that they can be controlled later via scripts. This next example shows a common practice to activate an animator when a view is clicked, rather than when a view is first instantiated. Animators can be initially dormant by setting <literal>start="false"</literal>, and then activated on demand by calling its <indexterm><primary><literal>start()</literal></primary></indexterm><methodname>start()</methodname> method.
</para>

<example role="live-example">
  <title>Controlling animation with a script</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$4.lzx"/></textobject>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/@onclick"/>
    </areaspec>
  </programlistingco>
</example>

<para>
Animators can also animate objects relative to their current values.
This means that the goal of the animator is actually the "to" value
<emphasis role="em">plus</emphasis> the objects's current value. Starting with the example
above, and including relative="true" to the set of attributes, creates
a view that animates 100 pixels to the right every time it is clicked.
</para>

<example role="live-example">
  <title>Relative animation</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$5.lzx"/></textobject>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/animator[1]/@relative"/>
    </areaspec>
  </programlistingco>
</example>

<para> 
More than one animator can be added to an object, and the set will be processed simultaneously. The code below shows an object moving diagonally by using both "x" and "y" animators.
</para>

<informalexample>
  <programlisting language="lzx">
    <textobject><textdata fileref="programs/animation-$6.lzx"/></textobject>
  </programlisting>
</informalexample>

<para>To process the two animators above sequentially, i.e. one after the
other, you use the <indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: animatorgroup-->
 tag,
explained below.</para>

<section><title>The 'this' and 'parent' keyword in animators</title>
<para>
Inside Animators, the "this" keyword refers to the animator, and "parent" refers to the view or node it is nested in.
</para>
</section>
<!-- remove empty para tag LI, LPP-4635 9/3/2007 -->
<!-- <para/> -->
<section><title>Preview of comparative examples</title>

<para>The following examples illustrate various uses of the <indexterm><primary>animator</primary></indexterm><sgmltag class="element">&lt;animator&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: animator-->
 and <indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: animatorgroup-->
 tags.  Notice that below each
example there are "Test" and "Reset" buttons. The Test button causes
the animation code to be executed; the Reset button brings the
examples back to their initial state. Use these examples to see how
different animation techniques compare to each other.</para>

<para>These applications rely on the support file <ulink url="programs/animation_library.lzx?lzt=source">animation_library.lzx</ulink>.</para>

<para>The following example shows the effect of animating the
<indexterm><primary>opacity</primary></indexterm><sgmltag class="attribute">opacity</sgmltag>, <indexterm><primary>rotation</primary></indexterm><sgmltag class="attribute">rotation</sgmltag>,
<indexterm><primary>height</primary></indexterm><sgmltag class="attribute">height</sgmltag>, <indexterm><primary>width</primary></indexterm><sgmltag class="attribute">width</sgmltag>, and
<indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> and <indexterm><primary>y</primary></indexterm><sgmltag class="attribute">y</sgmltag> placement of
simple views.  Click on any red square to see the animation of the
named attribute, or press "test" to see them all at once.</para>

<example role="live-example">
  <title>Basic Animation</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$7.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[2]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[3]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[4]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[5]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[6]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section></section><section><title>Absolute vs. relative animation</title>

<para>The following example shows the difference between relative and
absolute animation. By default, <indexterm><primary>relative</primary></indexterm><sgmltag class="attribute">relative</sgmltag> is set
to <literal>false</literal>, which means that animation of an attribute is
calculated relative to that attribute's <emphasis role="em">initial</emphasis> value.  When
<indexterm><primary>relative</primary></indexterm><sgmltag class="attribute">relative</sgmltag> is set to <literal>true</literal>, the
animation is relative to the value of that attribute when the animator
is invoked.  Click on each of the red squares a few times to see the
difference.</para>

<example role="live-example">
  <title>Basic Animation</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$8.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]/view[1]/box[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]/view[2]/box[1]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section><section><title>Using the <indexterm><primary>from</primary></indexterm><sgmltag class="attribute">from</sgmltag> attribute</title>

<para>The <indexterm><primary>from</primary></indexterm><sgmltag class="attribute">from</sgmltag> attribute indicates the starting
value from which the animation is to begin. If the object is not at
that value, it first assumes it and then begins the animation.  In the
example below, the animated attribute is <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag>,
the horizontal placement. The <indexterm><primary>from</primary></indexterm><sgmltag class="attribute">from</sgmltag> value in
each case is <literal>200</literal>, and the <indexterm><primary>to</primary></indexterm><sgmltag class="attribute">to</sgmltag> value
is <literal>100</literal>. Before the specified animation begins, the object
first moves by setting its <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> value to
<literal>100</literal>.  In the absolute case, the object animates to
<literal>x=100</literal>, where <varname>x</varname> is calculated relative
to the object's <emphasis role="em">initial</emphasis> value.  In the second case, the
object moves until <literal>x=100</literal>, where <varname>x</varname> is
calculated relative to its value at the start of the animation.</para>

<example role="live-example">
  <title>Using the "from" attribute</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$9.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section><section><title>Using the <indexterm><primary>motion</primary></indexterm><sgmltag class="attribute">motion</sgmltag> attribute</title>

<para>The <indexterm><primary>motion</primary></indexterm><sgmltag class="attribute">motion</sgmltag> attribute allows you to specify
whether the animation accelerates ("ease out"), decelerates ("ease
in"), both accelerates and decelerates ("ease both"), or is at a
constant rate (linear).</para>

<example role="live-example">
  <title>Using the "motion" attribute</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$10.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[3]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[4]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section><section><title>Tags vs Script</title>
<para>
In OpenLaszlo applications you can achieve the same result by using XML tags or JavaScript APIs. The examples above have demonstrated how to use the <indexterm><primary>animator</primary></indexterm><sgmltag class="element">&lt;animator&gt;</sgmltag> tag.  Alternatively
you can use the <indexterm><primary><literal>lz.node.animate()</literal></primary></indexterm><methodname>lz.node.animate()</methodname> method in script statements. The following example contrasts tag and script approaches to animating views.
</para>

<example role="live-example">
  <title>The "bounce effect"</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$11.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[2]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[3]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[4]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[5]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section><section><title>Using the <indexterm><primary>indirect</primary></indexterm><sgmltag class="attribute">indirect</sgmltag> attribute</title>

<para>The <indexterm><primary>indirect</primary></indexterm><sgmltag class="attribute">indirect</sgmltag> attribute allows you to reverse
the direction in which an animation occurs while still arriving at the
same result.  In the example below, the
<indexterm><primary>indirect</primary></indexterm><sgmltag class="attribute">indirect</sgmltag> attribute is set to <literal>true</literal>
for the animation on <varname>B23</varname>.  This causes the
animation to go to the left, rather than the right, disappearing off
the canvas, as it were, and reappearing on the right.  Setting the
<indexterm><primary>indirect</primary></indexterm><sgmltag class="attribute">indirect</sgmltag> attribute to <literal>true</literal> in
animating the <indexterm><primary>rotation</primary></indexterm><sgmltag class="attribute">rotation</sgmltag> attribute changes the
sense of the apparent motion from clockwise to counterclockwise.  Try
setting <indexterm><primary>indirect</primary></indexterm><sgmltag class="attribute">indirect</sgmltag> to <literal>true</literal> on other
properties — such as height, width, opacity — to see the
effect.</para>

<example role="live-example">
  <title>Indirect attribute</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$12.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/box[2]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section><section><title>Animator Groups</title>

<para>The <indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: animatorgroup-->
 tag allows you to
combine the actions of several animators on a single object. The
animators can be set to operate simultaneously or sequentially.  In
the example below, animatorgroups are used to combine animations on
the <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> and <indexterm><primary>y</primary></indexterm><sgmltag class="attribute">y</sgmltag> attributes
of the two red views. Notice that the <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag>
attribute of <varname>B20</varname> has been set to linear motion
instead of the default <literal>easeboth</literal>.  In the case of
<varname>B21</varname> the motion of the <indexterm><primary>y</primary></indexterm><sgmltag class="attribute">y</sgmltag>
animation has been set to <literal>easeout</literal>.  By clicking the
<!-- "test" button you can see how the these simple changes to the animator -->
<!-- fix typo LI 9/3/2007 -->
"test" button you can see how these simple changes to the animator
parameters cause distinctly different movements.</para>

<para>The <indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: animatorgroup-->

<indexterm><primary>process</primary></indexterm><sgmltag class="attribute">process</sgmltag> attribute allows you to specify whether
the animators within an <indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag> should be
processed sequentially or simultaneously. By default the actions are
performed simultaneously.  To see the difference, edit the example
below by specifying <literal>process="sequential"</literal>.</para>
 
<example role="live-example">
  <title>Animator groups</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$13.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]/box[1]"/>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[2]/box[1]"/>
    </areaspec>
  </programlistingco>
</example>

<para> Animatorgroups can be contained within animatorgroups, allowing for the encapsulation of more complex behavior.
This next example illustrates that point by having the view return back to its original position. The return animates
the object along both the x and y axes simultaneously after its initial movements on them separately.</para>

<example role="live-example">
  <title>animatorgroup-2</title>
  <programlisting language="lzx">
    <textobject><textdata fileref="programs/animation-$14.lzx"/></textobject>
  </programlisting>
</example>

<para>Note that in the code above there was no duration set for the x and
y animators of the interior <indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag>.
Attributes such as <indexterm><primary>duration</primary></indexterm><sgmltag class="attribute">duration</sgmltag>,
<indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag>, <indexterm><primary>y</primary></indexterm><sgmltag class="attribute">y</sgmltag>,
<indexterm><primary>width</primary></indexterm><sgmltag class="attribute">width</sgmltag>, etc. can be defined in an
<indexterm><primary>animatorgroup</primary></indexterm><sgmltag class="element">&lt;animatorgroup&gt;</sgmltag> and these values will be adopted by
every subanimator unless they already have that attribute defined for
themselves. If, as in the example above, a
<indexterm><primary>duration</primary></indexterm><sgmltag class="attribute">duration</sgmltag> value is assigned to an animated
group, it does not necessarily mean that the animatorgroup will be
confined to that amount of time.  It means that every subanimator may
use that duration. If <literal>process='simultaneous'</literal> and each
subanimator uses the group <indexterm><primary>duration</primary></indexterm><sgmltag class="attribute">duration</sgmltag> as their
value then the length of total time for all subanimators would equal
the duration time for the animatorgroup</para>

<para/></section><section id="animation.animating_layout"><title>Animating Layout</title>

<para>You can animate any attribute that can be modified at runtime. For
example, the following example shows the effect you can get by
animating a layout. Because layout encompasses several attributes we
have simplified this example by having the layout return to its
initial state — there is no "reset" button.</para>

<example role="live-example">
  <title>Animating Layout</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$15.lzx"/></textobject>
      <parameter role="canvas">bgcolor: '#E5E1B0'</parameter>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]/simplelayout[1]"/>
    </areaspec>
  </programlistingco>
</example>

<para/></section><section><title>Everything Animates</title>
<para>Now that you've seen how animation works you can explore animating all different kinds of attributes.  
Here is a hint: try giving a view a "hidden" attribute, say "charm"
that is constrained to the value of other attributes, and then animating "charm."    </para>
 <para>
For example, often, you need a there-and-back animation. This can be a bother, since the obvious way to do it
requires two animators, and adjusting properties within an animator group can be tricky.</para>

<para>A simple workaround is to use an animated value as the square root of
the destination value. This gives you that kind of there-and-back
behavior with a single animator.</para>

<example role="live-example">
  <title>compound behavior in single animator</title>
  <programlistingco>
    <programlisting language="lzx">
      <textobject><textdata fileref="programs/animation-$16.lzx"/></textobject>
    </programlisting>
    <areaspec>
      <area units="other" otherunits="/canvas[1]/view[1]/view[2]/view[1]/simplelayout[1]"/>
    </areaspec>
  </programlistingco>
</example>

<?ignore Topics for future additions to this chapter:
 
 offset in animations
 The  onstop  event
 Chain animations of different events
 Call methods after animations finish

 last animation gives target destination
 difference between scripted and tag-based animations
 chaining delegates 
 The animator group
h.Animated resources (animated swfs, "animated animations")
i. Clip regions and animation
 
 Using  hidden  variable to coordinate multiple animations:
i. Constrain animations to varialble
k.  animators by reference
 

lz.animator animates an attribute of another object over time.
It does this by generating a new number eveytime the iterate
method is called. This sequence of numbers generated begins with the <b>from
</b>value and ends with the <b>to</b> value weithin the
time specified by <b>duration</b>. If <b>isRelative</b>
is <b>true</b> then the value generated is added to the binding property,
and if it is <b>false</b> the value replaces the binding property with a
new value.
?>

</section>
<section id="mulitframe-animation"><title>Animation with Multi-frame Resources</title>
<para>You can animate a group of images by specifying the directory from which to load the images. All the
files in that directory will be used for the animation.</para>
  <para>The following example uses the eight <literal>png</literal> files in <literal>resources/spinner/</literal> 
  for the animation.</para>
  <example role="live-example">
    <title>Multiframe animation</title>
      <programlisting language="lzx">
        <textobject><textdata fileref="programs/spinner.lzx"/></textobject>
      </programlisting>
  </example>
</section>
</chapter>
