<chapter id="color">


<title>Color</title>
<!-- remove commented out sample code that was ignored by the build. IORIO 20 nov 2007 -->

<para/><section><title>Overview</title>

<para>This chapter gives a brief introduction to the use of colors in OpenLaszlo applications. It explains the various syntaxes that are used to specify color, and gives general guidelines for using color effectively.</para>
<para>
OpenLaszlo uses the standard web color definitions, three hexadecimal values in a row, representing red, green, and blue components of a color (all colors can be created by mixing these three primary colors). Computer monitors are comprised of thousands of red, green, and blue dots grouped so closely by threes that our eyes see them as one blended color.
</para>


<para/></section><section><title>RGB or Red, Green, Blue</title>
<para>
Each red, blue, or green dot can have a value from 0 to 255. If the red dot is fully "on" at 255, while blue and green are fully "off" at 0, we see red. The RBG color code for red is 255,0,0. Blue is 0,255,0; green is 0,0,255. (Some graphics systems combine an RGB triplet with an 8-bit alpha value, and get a 32-bit color word; in those systems, we think of colors as RGBA.)
</para>

<example role="live-example">
   <title>RGB color values</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$1.lzx"/></textobject> 
   </programlisting>
</example>


<para/></section><section><title>Hexadecimal Code</title>
<para>
Some web applications require that RGB be expressed in hexadecimal (base 16 instead of base 10) values. OpenLaszlo much prefers hex values; for one thing, using hexadecimal values enables the use of stylesheets (see Cascading Style Sheets):
</para>

<example role="live-example">
   <title>Using Hex for colors with stylesheet</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$2.lzx"/></textobject> 
   </programlisting>
</example>

<para>
OpenLaszlo enables coloring in four ways: 0x000000, #000000, rgb(0,0,0), and "black". For now, the best reason to prefer to use the hex style 0x000000 is that it always works, whether the color is assigned explicitly within the view, or by stylesheet. Color assignment by stylesheet fails by name, #hex, or rgb(). Explicit color assignment by rgb() fails unless the RGB values are all numerals -- that is, rgb(0,0,0) produces black, but rgb(FF,FF,FF), which should produce white, comes back at compile time as an invalid color.
</para>
<para>
Coloring of text with fgcolor="foo" is enabled in the same fashions, but with the same limitations.
</para>

<example role="live-example">
   <title>Coloring text using CSS</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$3.lzx"/></textobject> 
   </programlisting>
</example>

<para/><section><title>Mixing Colors</title>
<para>
To blend a color, combine the RGB values. Red (FF0000) plus blue (0000FF) equals fuchsia (FF00FF):
</para>
<example role="live-example">
   <title>Blending Colors</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$4.lzx"/></textobject> 
   </programlisting>
</example>


<para/></section><section><title>Standard Web Colors</title>
<para>
The 16 basic web colors can be employed by name:
</para>

<example role="live-example">
   <title>Named colors</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$5.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section><title>Non-Standard Colors</title>
<para>
To specify any color but the 16 which are usable by name, use 0xFFFFFF hex codes. Alternatively, the non-standard colors named in <literal>lps/components/base/colors.lzx</literal> were added to OpenLaszlo's global namespace. Those colors can also be employed by name, but note the ${constraint} syntax around the bgcolor specification.  There are two ways to make the constraint: <literal>bgcolor="${global['iceblue1']}"</literal> is the same as <literal>bgcolor="${iceblue1}"</literal>.
</para>

<example role="live-example">
   <title>Non-standard colors</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$6.lzx"/></textobject> 
   </programlisting>
</example>


<para/></section><section><title>Opacity</title>
<para>
In OpenLaszlo, a view has a color and an opacity which are handled separately. The opacity attribute ranges from 0 (transparent) to 1 (opaque).
</para>

<example role="live-example">
   <title>Color and opacity</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/color-$7.lzx"/></textobject> 
   </programlisting>
</example>


<para>When a view's opacity=0, the 'visible' attribute of that view turns to false.</para>

<para/></section></section><section><title>When Red Isn't Red</title>

<para>
The print world paid careful attention to color matching: the color the client saw on the comprehensives in the conference room turned out the same as the color the customer saw on the cereal boxes. That involved synchronizing colors between a computer monitor and a laser printer (used to print the comprehensives), then the physical film separation into cyan, magenta, yellow, and black for the printer, and finally the finished product.
</para>

<para>
Web publishers had to let go of all that. Color specifications look different on different platforms and workstations â€”Macintosh or Windows, normal backlit LCD screens or aging CRTs, projectors in a conference room or high fidelity cinema displays. Web designers pretend that "0x6C6BA2" is always the same color, and hope it looks right other places.
</para>

<para>
The best you can do is look at your application on several different kinds of monitors and operating systems, and tweak the application until it looks decent on each platform.
</para>

<para>
W3C aims to mitigate this problem with support for the color model <ulink url="http://www.w3.org/Graphics/Color/sRBG">SRBG: Standard Default Color Space for the Internet</ulink>.
</para>

<para>
For more about this topic, look up "color gamut", "color space", "color matching", "display gamma", and the ActionScript function setColorTransform.
</para>



<para/></section></chapter>
