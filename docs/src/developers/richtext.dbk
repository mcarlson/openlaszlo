<chapter id="richtext">


<title condition="swf">Rich Text</title>


<para>OpenLaszlo provides a rich text object and capabilities for procedurally setting HTML text attributes:</para>


<para/><section><title condition="swf">Overview</title>

<para>This chapter explains the <indexterm><primary>richinputtext</primary></indexterm><sgmltag class="element">&lt;richinputtext&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: richinputtext-->
 component, which  allows you to include and manipulate html-formatted text in your applications. This diagram describes the architecture of the rich text editor:</para>

<informalfigure><mediaobject><imageobject><imagedata fileref="images/object_model.png"/></imageobject></mediaobject></informalfigure>
<para>
To use rich this component, include the line:</para>
<programlisting>
&lt;include href="/extensions/views/richinputtext.lzx" /&gt;
</programlisting>
<para>Formatting capabilities include:</para>
<itemizedlist spacing="compact"><listitem><para>Text style of bold, underline, or italics</para></listitem><listitem><para>Font type and size</para></listitem><listitem><para>Text color</para></listitem><listitem><para>Hyperlink creation, specifying a URL, and choosing a target type</para></listitem><listitem><para>Paragraph alignment: left, right, center</para></listitem><listitem><para>Block indent/outdent</para></listitem></itemizedlist>
<para>
You can specify html text by:
</para>
<itemizedlist spacing="compact"><listitem><para>Directly including markup</para></listitem><listitem><para>Using procedural code to set rich text attributes</para></listitem></itemizedlist>
<para>
Each of these methods is described in turn below.
</para>

<para/></section><section><title>Directly including rich text markup</title>
<para>
You can specify the html formatting directly in the <indexterm><primary>richinputtext</primary></indexterm><sgmltag class="element">&lt;richinputtext&gt;</sgmltag> tag, if you escape it with CDATA, like this:
</para>
<example role="live-example">
   <title>Inline markup of rich text</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/richtext-$1.lzx"/></textobject> 
      <parameter role="canvas">bgcolor: '#EAEAEA'</parameter>
   </programlisting>
</example>

<para/></section><section><title>Procedurally modifying text</title>
<para>
The <indexterm><primary><literal>setTextFormat()</literal></primary></indexterm><methodname>setTextFormat()</methodname> method allows you to procedurally set text properties. Using <indexterm><primary><literal>setTextFormat()</literal></primary></indexterm><methodname>setTextFormat()</methodname> is a two step process:
</para>
<orderedlist spacing="compact"><listitem><para>Create a <indexterm><primary>textformat</primary></indexterm><classname>textformat</classname> and assign to it the values of the properties you want to change;</para></listitem><listitem><para>Pass the <indexterm><primary>textformat</primary></indexterm><classname>textformat</classname> object as the argument to the <indexterm><primary><literal>setTextFormat()</literal></primary></indexterm><methodname>setTextFormat()</methodname> method.</para></listitem></orderedlist>


<para>
The example below demonstrates several ways that the richinputtext class can be used to apply rich formatted text.
</para>

<example role="live-example">
   <title>Rich text manipulation</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/richtext-$2.lzx"/></textobject> 
      <parameter role="canvas">bgcolor: '#EAEAEA'</parameter>
   </programlisting>
</example>

<para/></section></chapter>
