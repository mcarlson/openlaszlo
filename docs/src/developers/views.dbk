<chapter id="views">

<title>Views</title>

<!-- remove commented out sample code that was ignored by the build. IORIO 20 nov 2007 -->
<indexterm zone="views" significance="preferred"><primary>Views</primary></indexterm>
<indexterm zone="views" significance="preferred"><primary>view</primary></indexterm>

<para/><section><title>Fundamental Properties</title>
<para>Views are the fundamental visible elements of OpenLaszlo applications. 
Anything that is displayed on the canvas is a <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: view-->

or extends the view class. 
</para>
<para/><section><title>views are rectangular containers</title>
<para>
Visually, a <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag> is a rectangular container. As such it has a height, a width, and a placement, 
which is denoted by the x and y values of its upper left corner.  Views can have background
colors, although by default they are transparent. Transparent views can contain arbitrarily shaped images. 
Thus although views are rectangular, OpenLaszlo applications can have virtually any appearance.</para>
<para>
Logically, views are objects that act as containers. Views may contain other views, called subviews or child views, and may
be associated with <emphasis role="i">resources</emphasis> such as images, audio or video files, and Flash Player files in .swf format. Thus although a 
view usually has a visual representation on the canvas, it is also possible to have, for example, a view of zero width and zero height that plays, for example,
an audio file.
</para>

<example role="live-example">
   <title>Simple view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$1.lzx"/></textobject> 
   </programlisting>
</example>



<example role="live-example">
   <title>Invisible view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$2.lzx"/></textobject> 
   </programlisting>
</example>


<para>The following example shows that the view, although invisible, is
indeed present.  To see that this is so, click in the upper left
corner.</para>


<example role="live-example">
   <title>Clicking on invisible view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$3.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section><title>view visibility</title>
<para>A view is only visible if it has a color or an image assigned to it, and if the height and width are greater than zero.
 For example, the following code displays only two images even though four views are defined. The second and third views exist but
 they are completely transparent. The second has no color assigned to it and the third has zero width. They still, however, affect the
 arrangement of the other two views. </para>

<example role="live-example">
   <title>Invisible views affect placement</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$4.lzx"/></textobject> 
   </programlisting>
</example>

    <!-- added para tags: callout can not contain CDATA LI LPP-4643 9.4.2007 -->
<calloutlist><callout arearefs="N10058"><para>This view is a red square.</para></callout><callout arearefs="N1005B"><para>This view has no visual representation because it has no color, but it still exists and displaces other views.</para></callout><callout arearefs="N1005E"><para>This view has no visual representation because it has no width, but it still exists.</para></callout><callout arearefs="N10061"><para>This view displays the  image.</para></callout></calloutlist>

<para/></section><section><title>Z Axis</title>

<para>Aside from the x and y axes, there is also a <indexterm significance="preferred"><primary>z axis</primary></indexterm><glossterm>z axis</glossterm> in
the OpenLaszlo view hierarchy. Two sibling views will overlap; the latter
(in lexical order of the LZX code) will appear on top of the
former. This order can be changed using the
<indexterm><primary><literal>bringToFront()</literal></primary></indexterm><methodname>bringToFront()</methodname> and <indexterm><primary><literal>sendToBack()</literal></primary></indexterm><methodname>sendToBack()</methodname>
methods:</para>


<example role="live-example">
   <title>Simple layout</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$5.lzx"/></textobject> 
   </programlisting>
</example>


<para>
There are also methods such as <indexterm><primary><literal>sendBehind()</literal></primary></indexterm><methodname>sendBehind()</methodname> and <indexterm><primary><literal>sendInFrontOf()</literal></primary></indexterm><methodname>sendInFrontOf()</methodname>, that allow you to move a view in the z-axis more precisely, relative to a specified view:
</para>

<example role="live-example">
   <title>Moving views along z axis</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$6.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section><title>Nesting views within views</title>
<para>Views can also be contained within other views, allowing you to create 
  complex visual elements. Each <glossterm>parent view</glossterm> can have any number of children, and each <glossterm>child view</glossterm> is positioned relative 
  to the top-left corner of its parent, as shown here:</para>

<example role="live-example">
   <title>Views containing other views</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$7.lzx"/></textobject> 
   </programlisting>
</example>

 <para>
Each child view has one and only one parent view. The relationship between parent and child views is examined below 
and in later chapters.
</para>
<para/></section><section><title>Sizing view to its child views</title>
<para>If no width and height are actually
defined for a view, then it adopts the width and height of the
bounding box of its subviews. The example above also shows, however, that the width and height of a view
can be different than the dimensions of the bounding box of its child
views. The 'yellow' view is not clipped even though it lies outside
the boundary of its parent.  If clipping is desired, however, then
the attribute <literal>clip="true"</literal> can be added to the parent:</para>

<example role="live-example">
   <title>Using the "clip" attribute</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$8.lzx"/></textobject> 
   </programlisting>
</example>

<para>As stated above, views don't need to display an image or color to
affect other views. These types of views are referred to as "blank
views".  In fact, this technique of using blank views to group others
views is used extensively in the sample applications. The code below
shows what happens when <literal>bgcolor="red"</literal> is removed from the
outermost view.</para>

<example role="live-example">
   <title>blank view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$9.lzx"/></textobject> 
   </programlisting>
</example>


<para/></section><section><title>views, constraints and layouts</title>
<para>The fact that a view can be assigned  different dimensions than the
bounding box of its subviews is taken advantage of by other
elements within OpenLaszlo such as constraints (<xref linkend="constraints"/>) and layouts (<xref linkend="layout-and-design"/>).
</para>
<para>
To illustrate
this point, the following example has two views with identical
dimensions and subviews. The only difference in their code is that the
top view has a <indexterm><primary>simplelayout</primary></indexterm><sgmltag class="element">&lt;simplelayout&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: simplelayout-->
 and the second view has a
<indexterm><primary>stableborderlayout</primary></indexterm><sgmltag class="element">&lt;stableborderlayout&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: stableborderlayout-->
. The <indexterm><primary>simplelayout</primary></indexterm><sgmltag class="element">&lt;simplelayout&gt;</sgmltag> ignores the width of the parent,
while the <indexterm><primary>stableborderlayout</primary></indexterm><sgmltag class="element">&lt;stableborderlayout&gt;</sgmltag> stretches the middle subview so that the
combined width of all three subviews matches the width of their
parent.</para>

<para>
Don't worry if you don't understand how to use the layouts described below; layouts are fully explained in 
<xref linkend="layout-and-design"/>.
The crucial point to grasp is that a view can have different dimensions than
the bounding box of its subviews. This fundamental property of the OpenLaszlo view system
comes up in countless situations.
</para>

<example role="live-example">
   <title>Layouts and bounding box of subviews</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$10.lzx"/></textobject> 
   </programlisting>
</example>

  

<para/></section></section><section><title>The View Coordinate system</title>
<para>Starting with the canvas, each view has its own internal 2D coordinate system, with as you would expect, the horizontal axis named x and the 
vertical axis named y. The position of a view is calculated relative to its parent's coordinate system.
</para>
 
<para>
As view hierarchies can get complex, it's important to keep in mind, for any view:</para>
<orderedlist spacing="compact"><listitem><para>where its origin is  </para></listitem><listitem><para>units of measurement</para></listitem><listitem><para>its relationship to its parent's coordinate system  </para></listitem></orderedlist>

<para>
In the simple case where a view is, for example, the child of the
canvas, understanding its origin and coordinate system is simple.
Other cases can get rather subtle — as for example when a view's
x or y value is a negative number, or when a parent view changes size.
These cases are explored below.</para>

<para/><section><title>Relative positions</title>

<para>To position the floating view over the clicked view, you can use
the <indexterm><primary><literal>getAttributeRelative()</literal></primary></indexterm><methodname>getAttributeRelative()</methodname> method of view to obtain the
x and y coordinates of the view relative to a view other than its
parent. For example, consider the case below:</para>

<example role="live-example">
   <title>Relative positions</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$11.lzx"/></textobject> 
   </programlisting>
</example>

<para><varname>childView</varname>'s <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> value is
<literal>35</literal>, but its <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> value <emphasis role="i">relative to
the canvas</emphasis> is <literal>45</literal> (because its parent,
<varname>parentView</varname>, is already 10px in from the canvas's
origin). To place a view <varname>cover</varname> that is a child of
canvas on top of <varname>childView</varname>, give it an
<indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> value of <literal>45</literal>, because this is the
same offset relative to <varname>cover</varname>'s parent (the canvas)
that <varname>childView</varname> has relative to the canvas.</para>

 

<para/></section><section><title>Sizing of views</title>

<para>A view that has no width or height specified will be 0px wide by
0px high:</para>

<programlisting>
&lt;view/&gt;
</programlisting>


<para>Either dimension of a view can be set explicitly:</para>

<informalexample role="live-example"><programlisting>
&lt;view width="20"/&gt; <co id="N1013E"/>
&lt;view width="20" height="35"/&gt;
</programlisting></informalexample>
        <!-- added para tags: callout can not contain CDATA LI LPP-4643 9.4.2007 -->
    <calloutlist><callout arearefs="N1013E"><para>This view is not visible, because it has a height of zero</para></callout></calloutlist>
<para>
If a view's dimension is not explicitly set, and that view contains subviews (or has a resource attached), then the view will automatically scale to the extents of its contents or resource. In this case the yellow view will be 40px wide and 25px high:
</para>
<programlisting>
&lt;view bgcolor="yellow"&gt;
  &lt;view bgcolor="red" width="10" height="10" x="30" y="15"/&gt;
&lt;/view&gt;
</programlisting>
<para>
In the case above, the yellow view will resize as its contents resize and move. If a dimension had been set at any point then that axis would not resize. This is an important consideration if a nested view is to be moved while the application is running (e.g. if it is dragged by the user). The size of its parent will adjust as necessary:
</para>

<example role="live-example">
   <title>Resizing view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$13.lzx"/></textobject> 
   </programlisting>
</example>

<para>To get around this problem (in the example of a view that is
dragged), there are two solutions:</para>

<orderedlist spacing="compact"><listitem><para>Limit the drag area of the view to its parents dimensions, and give its parent an explicit size.</para></listitem><listitem><para>Make the view that is dragged a child of the canvas, so that it is not embedded in the view hierarchy.</para></listitem></orderedlist>

<para>There is no way to unset a dimension, so that the view returns to
resizing to its contents automatically.</para>

<para>Even if a view's dimensions are set explicitly, and the contents of
the view are larger than those dimensions, the view will <emphasis role="i">remain the
set size</emphasis>. You can retrieve the <emphasis role="em">computed</emphasis> width or height
using the <indexterm><primary><literal>measureWidth()</literal></primary></indexterm><methodname>measureWidth()</methodname> and
<indexterm><primary><literal>measureHeight()</literal></primary></indexterm><methodname>measureHeight()</methodname> methods respectively.</para>

<programlisting>
&lt;view bgcolor="yellow" width="30" height="100" clickable="true"&gt;
  &lt;handler name="onclick"&gt;
    Debug.write("Actual Width: " + this.width);
    Debug.write("Actual height: " + this.height);
    Debug.write("Measured Width: " + this.measureWidth());
    Debug.write("Measured Height: " + this.measureHeight());
  &lt;/handler&gt;

  &lt;view bgcolor="red" width="10" height="10" x="30" y="15"/&gt;
&lt;/view&gt;
</programlisting>

<para>If a view attaches a resource (and doesn't have its dimensions
set), then it sizes to its resource.  In this example, if
<literal>someimg.jpg</literal> is 70px wide by 30px high, the view will also
be 70px wide by 30px high:</para>

<programlisting>
&lt;view resource="someimg.jpg"/&gt;
</programlisting>

<para>In cases where the resource for a view is loaded at run-time (i.e. over HTTP), the view will be 0px wide by 0px high until the resource is loaded. This can cause unexpected behavior if other elements in your application are dependent on the size of the view in question. For example:</para>

<programlisting>
&lt;canvas&gt;
  &lt;simplelayout axis="y" spacing="2"/&gt;
  &lt;view id="myImageView"/&gt;
  &lt;view width="100" height="20" bgcolor="yellow"/&gt;
  &lt;view width="100" height="20" bgcolor="red"/&gt;
  &lt;button x="10" y="110"&gt;Set Image Now!
    &lt;handler name="onclick"&gt;
      myImageView.setSource("someimage.jpg");
      &lt;/handler&gt;
  &lt;/button&gt;
&lt;/canvas&gt;
</programlisting>

<para>
At init time, the yellow view will be positioned at (0, 0), because <literal>myImageView</literal> will have dimensions of 0px wide by 0px high. When the image is loaded (after the button gets clicked) <varname>myImageView</varname> will resize to accommodate the image, and display the image. Since <varname>myImageView</varname> and the other siblings are being acted on by <indexterm><primary>simplelayout</primary></indexterm><sgmltag class="element">&lt;simplelayout&gt;</sgmltag>, they will all move down. 
</para>

<para>For more on the subject of assigning resources to views, see 
<xref linkend="media-resources"/>.</para>

<para/></section><section><title>Scaling</title>

<para>Consider the following example, which illustrates the effect of
scaling a view's coordinate system. On each click of the view, the
value of the <indexterm><primary>height</primary></indexterm><sgmltag class="attribute">height</sgmltag> attribute diminishes by
10.</para>

<para>First let's look at a simple example that uses text, because this makes the effect more striking.
As you click on the red rectangle, it shrinks, along with the text inside. But the font size does not change.
The text is smaller relative to the canvas and to the computer screen, but not to its parent view.</para>

<example role="live-example">
   <title>Simple scaling with text</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$14.lzx"/></textobject> 
   </programlisting>
</example>


<para>
Here we have modified the example to further illustrate the same point.  Notice how the width of the green view does not change, even as the view visibly shrinks.</para>

<example role="live-example">
   <title>Simple scaling with text and colored view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$15.lzx"/></textobject> 
   </programlisting>
</example>


<para/></section><section><title>Offsets</title>
<!-- fix typo "registration pointthat" LPP-4769 IORIO 12 oct 2007-->
<para>
 Every view 
has an internal <glossterm>registration point</glossterm> that is at (0,0) by default, the upper left hand corner of the view. 
This point 
can be changed using the <indexterm><primary>xoffset</primary></indexterm><sgmltag class="attribute">xoffset</sgmltag> and <indexterm><primary>yoffset</primary></indexterm><sgmltag class="attribute">yoffset</sgmltag>
 attributes. In short, the offset attributes are applied to the registration point of the view.
Now, the x and y of this view is actually the 
position of its registration point within the view's parent coordinate system. Here is a simple app that 
demonstrates this. See below for an explanation of what's going on in this program.
</para>
<example role="live-example">
   <title>Offsets and registration point</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$16.lzx"/></textobject> 
   </programlisting>
</example>

<para>
The reason that the intersection point does not move is that the parent view (in this case the canvas) is 
placing the colored view at that point, and that point does not change. It is only the <literal>xoffset</literal> and <literal>yoffset</literal>
that are changing, not the <literal>x</literal> and <literal>y</literal> of the colored view.
</para>
<para>
Views rotate around the registration point. By default, <literal>xoffset</literal> and <literal>yoffset</literal> values are both zero and the 
registration point is in the upper left corner of each view. Offsets allow you to change the rotation point.  In the example below,
the pivot point of the red square is its upper left corner; the pivot point of the blue square is its center (where x and y are set to "20").

</para>
 
<example role="live-example">
   <title>Simple offsets</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$17.lzx"/></textobject> 
   </programlisting>
</example>


<para>Offsets allow the view to be placed
relative to the point (<indexterm><primary>xoffset</primary></indexterm><sgmltag class="attribute">xoffset</sgmltag>,
<indexterm><primary>yoffset</primary></indexterm><sgmltag class="attribute">yoffset</sgmltag>).  (Otherwise the view is placed using
the view's top left corner as a reference point.)  If a view has an
offset, it will affect how layouts position it relative to
other views.  See for example <indexterm><primary>constantboundslayout</primary></indexterm><sgmltag class="element">&lt;constantboundslayout&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: constantboundslayout-->
.
</para>

<para/></section></section><section><title>Positioning of Views</title>
<para>
There are a variety of ways to set the position of a view. You can explicitly set its x and y values using tags; you can
constrain the x and y values to values of other attributes, including those contained in a dataset, you can use layouts which "let the system"
determine a view's position, or you can change the position  at runtime by using script.</para>

<itemizedlist spacing="compact"><listitem><para>Declaratively
  <itemizedlist spacing="compact"><listitem><para>Using absolute x and y values</para></listitem><listitem><para>Using constraints</para></listitem><listitem><para>Using path constraints</para></listitem><listitem><para>Using layouts</para></listitem></itemizedlist>
  </para></listitem><listitem><para>Programmatically
  <itemizedlist spacing="compact"><listitem><para>Using <indexterm><primary><literal>setAttribute()</literal></primary></indexterm><methodname>setAttribute()</methodname></para></listitem><listitem><para>Instantiating from script</para></listitem></itemizedlist>
  </para></listitem></itemizedlist>

<para/><section><title>Declarative positioning of views using absolute coordinates</title>
 
<para>
You can position views using absolute x and y coordinates, and the view will be positioned relative to its parent's origin:
</para>

<example role="live-example">
   <title>Absolute positioning</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$18.lzx"/></textobject> 
   </programlisting>
</example>


<para/></section><section><title>Declarative positioning of views using constraints</title>
<para>

You can also use constraints to position views. In the example below, the red view's position is set absolutely,
the blue view's x and y positions are constrained to a function of the red view's coordinates.
</para>

<example role="live-example">
   <title>Using constraintes to position views</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$19.lzx"/></textobject> 
   </programlisting>
</example>

<para>
In the example above,
</para>
<itemizedlist spacing="compact"><listitem><para>The red <varname>x</varname> and <varname>y</varname> coordinates
are constrained to mathematical expressions (20+5 and 70+5
respectively). </para></listitem><listitem><para>The blue view's <varname>x</varname> and <varname>y</varname> coordinates are constrained to the red view's <varname>y</varname> and <varname>x</varname> coordinates respectively.</para></listitem><listitem><para>The green view's <varname>x</varname> and <varname>y</varname> coordinates are constrained to some arbitrary attribute value.</para></listitem></itemizedlist>


<para>See <xref linkend="constraints"/> for more on constraint syntax.</para>
 
<para/></section><section><title>Negative coordinate values</title>
<para>
The x and y values can be set to negative values. In the example below, clicking on the square causes successive views
to appear and to move left or right.  The parent square (teal color) expands to contain the blue and black squares,
but not to contain the red and silver squares, which have negative x and y values.</para>

<example role="live-example">
   <title>Positive and negative offsets</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$20.lzx"/></textobject>
     <parameter role="canvas">height:250, bgcolor:'gray'</parameter>
   </programlisting>
</example>

<para/></section>
<section>
<!-- add sectin on pixel locking per LPP-992, IORIO 18 oct 2007 -->
<title>Pixel locking</title>
<para>Subpixel positioning gets blurry lines and images, with more positioning possibilities. This makes it look worse 
for static images, and better for animation, and for drawing 
sets of evenly spaced images where the average spacing isn't an integral number of pixels. If you do something which causes a view 
to end up at a non-integer x and y position, setting <indexterm><primary>pixellock</primary></indexterm><sgmltag class="attribute">pixellock</sgmltag> to "true" will snap it the nearest
integer values.</para>
<para><sgmltag class="attribute">pixellock</sgmltag> intercedes between the communication between
Laszlo and the flash player. It's important to have <methodname>setAttribute()</methodname> actually
set the value you pass it, especially for animators. </para>
<note><para>If you set <sgmltag class="attribute">pixellock</sgmltag> to <literal>true</literal> for a view, you must also set <sgmltag class="attribute">pixellock</sgmltag> to <literal>true</literal> for all of that view's 
parents.</para></note>
</section>
</section>
<section><title>View Hierarchy</title>
<para>Each view has a position in the <emphasis role="i">view hierarchy</emphasis>, that is, the tree structure of objects in which each view has
a parent, and, optionally, children and/or sibling views. In simple cases such as the following the relationship of 
parents and children is obvious from their position in the code.</para>

<example role="live-example">
   <title>Simple view hierarchy</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$21.lzx"/></textobject> 
   </programlisting>
</example>

<para>However, things are usually more complicated, especially when views are created within classes. Views can be created or destroyed at runtime, and moreover a single
line of code can cause the creation of an arbitrary number of views. In many cases there are, in effect, two hierarchies-
the <emphasis role="i">lexical hierarchy</emphasis> of views in the code, and the <emphasis role="i">node hierarchy</emphasis> of objects that are created by the code.
</para>
<para>
LZX employs the terms <emphasis role="i">parent</emphasis> and <emphasis role="i">immediate parent</emphasis> to distinguish between a view's relationship in different
hierarchies.  These terms are explained in greater depth in later chapters, but here's a short preview.</para>


<para/><section><title>Children and Parents</title>

<example role="live-example">
   <title>Parent and immediateparent </title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$22.lzx"/></textobject> 
   </programlisting>
</example>

            <!-- added para tags: callout can not contain CDATA LI LPP-4643 9.4.2007 -->
<calloutlist><callout arearefs="N102AC"><para>default placement view: instance or subclass children go here</para></callout></calloutlist>

<para>The view that contains the text <literal>hello</literal> has a
<indexterm><primary>parent</primary></indexterm><sgmltag class="attribute">parent</sgmltag> of <varname>w</varname> and an
<indexterm><primary>immediateparent</primary></indexterm><sgmltag class="attribute">immediateparent</sgmltag> of <literal>w.mycontent</literal>.
Note that "mycontent" could be nested in other views and it would
still work.  We call this ordering of objects the "node hierarchy." The term "view hierarchy" is more intuitive, but "node
hierarchy" is more correct.  (Notice that in the above example,
"dragger" is a node, not a view)</para>

<para>If you're an experienced JavaScript programmer you will have seen this pattern before. 
When you see "immediateparent" in JavaScript, think "container".</para>

<para> Similarly, if you've looked at XAML, you may have seen that
XAML distinguishes between the logical tree and the visual tree.  The logical tree corresponds to the hierarchy as represented in the source (what we have sometimes called the source hierarchy). 
 The visual hierarchy corresponds to the hierarchy as rendered.</para>

<para>Given this class definition:</para>

<example role="live-example">
   <title>Simple placement</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/views-$23.lzx"/></textobject> 
   </programlisting>
</example>

<para>this source fragment:</para>

<informalexample role="live-example"><programlisting>
&lt;myclass&gt;&lt;text placement="content"&gt;content1&lt;/text&gt;&lt;/myclass&gt;
&lt;myclass&gt;&lt;text placement="content"&gt;content2&lt;/text&gt;&lt;/myclass&gt;
</programlisting></informalexample>

<para>has the logical tree:</para>
<programlisting>
myclass (text "content1")
myclass (text "content2")
</programlisting>
<para>and the visual tree:</para>
<programlisting>
myclass (view (text "content1")) (text "label")
myclass (view (text "content2")) (text "label")
</programlisting>


<para>Thus <indexterm><primary>parent</primary></indexterm><sgmltag class="attribute">parent</sgmltag> refers to the parent in the
logical tree.  <literal>immediateparent</literal> (in JavaScript) and
<indexterm><primary>placement</primary></indexterm><sgmltag class="attribute">placement</sgmltag> (in XML) refers to the parent in the
visual tree. Placement is similar to, but not the same as immediateparent.  You
can think of them as meaning the same thing with different types, but
just to be clear: placement is a string which means: "find the view in
my parent's children (or any descendant) which has this name, and when
I am created make me a child of that view."  <emphasis role="i">immediateparent</emphasis> is then a
reference to that view.</para>

<para>Placement is an instruction from a view to its parent about
where it belongs within the parent's internal hierarchy. By default, this is
interpreted to mean: 'find the subview with this name', but the parent is free
to interpret it however it wants.</para>

<para>These concepts are explained in greater detail, and with several
more examples, in <xref linkend="class-inheritance"/>.</para>
 <para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>Creating an array of subviews</remark></para>
<!-- fix typo "you when you need" LPP-4769 IORIO 12 oct 2007-->
<para/></section></section><section><title>Views and Nodes</title>
<para>In LZX, the fundamental objects are called nodes. Nodes are abstract entities and as such they have no visual 
representation. Views are the most common kind of node, and in most cases when you need a container object, you should use a view even though a node would work. In fact, although 
you can use <indexterm><primary>node</primary></indexterm><sgmltag class="element">&lt;node&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: node-->
s for most of the abstract
infrastructure (dataset manipulation, content management, polling, etc.), the compiler complains when putting datapointers and
datasets in nodes.  
Though a tag does exist for <sgmltag class="element">&lt;node&gt;</sgmltag>, new <sgmltag class="element">&lt;node&gt;</sgmltag>s must be created in script. 
See the <sgmltag class="element" role="LzView">&lt;node&gt;</sgmltag> entry in the reference guide for details.</para>
<para> 
As discussed in later chapters, in situations when you are trying to squeeze out the last bit of performance, you may want to
examine how much overhead there is in using a view versus a node (when there's no
presentation associated with the element).</para>



 <para/></section><section><title>How views are built</title>

<para>
Sometimes it's important to understand the sequence that takes place
when views are created.  This is explained in depth in <xref linkend="initialization-and-instantiation"/>, but here's a brief
summary:</para>

<para>The evaluation of a view occurs in three phases:</para>

<orderedlist spacing="compact"><listitem><para><glossterm baseform="construction">Construction</glossterm>:
  The
  object representing the view is created, and attributes with
  constant initial values are filled in.</para></listitem><listitem><para><glossterm baseform="instantiation">Instantiation</glossterm>:
  The attributes
  with dynamic initial values are filled in (which includes the
  construction and instantiation of any child views), the
  <indexterm><primary><literal>initialize()</literal></primary></indexterm><methodname>initialize()</methodname> method is executed, and the
  <indexterm><primary>onconstruct event</primary></indexterm><literal>onconstruct</literal> event is sent.</para></listitem><listitem><para><glossterm>Initialization</glossterm>:
  The
  <indexterm><primary><literal>init()</literal></primary></indexterm><methodname>init()</methodname> method is executed and the
  <indexterm><primary>oninit event</primary></indexterm><literal>oninit</literal> event is sent.</para>
  </listitem></orderedlist>

<para>
   Note that  construction  and  instantiation  occur
   sequentially, but that  initialization  may be arbitrarily
   delayed, depending on the value of the  <indexterm><primary>initstage </primary></indexterm><sgmltag class="attribute">initstage </sgmltag> attribute.
   Attributes with dynamic initial values may not depend on other
   attributes with dynamic initial values, nor on the <indexterm><primary><literal>initialize()</literal></primary></indexterm><methodname>initialize()</methodname>
   or <indexterm><primary><literal>init()</literal></primary></indexterm><methodname>init()</methodname> methods having been run. 
</para>
 <para/><section><title>Adding subviews</title>
<para>When an view is built, <literal>subviews[]</literal> is initialized to an empty array. (In releases before OpenLaszlo 3.0 it was null.)</para>
<para><indexterm><primary><literal>addSubview()</literal></primary></indexterm><methodname>addSubview()</methodname> is like an event handler; it's a protected method of view that is called when a view is added to its 
parent. You can't call it directly, but you can override it.  However, in most cases you will want to use
the <indexterm><primary>onaddsubview</primary></indexterm><sgmltag class="attribute">onaddsubview</sgmltag> event instead.</para>
<para/></section></section><section><title>Distinguishing features of OpenLaszlo's Coordinate System</title>

<para>If you have experience doing graphics programming, you may be interested in the following paragraph.
Otherwise you can safely skip this topic.</para>
<para>The fundamental properties of a view are:</para>
<itemizedlist spacing="compact">
<listitem>
        <para><sgmltag class="attribute">stretches</sgmltag> —which says whether to scale or not and in which dimensions</para>
</listitem>
<listitem>
        <para><sgmltag class="attribute">unstretched{height,width}</sgmltag>—which are the original's dimensions (and can be used to implement a scale factor)</para>
</listitem>
<listitem>
        <para><sgmltag class="attribute">{height,width}</sgmltag>—which will clip or scale according to the setting of <sgmltag class="attribute">stretches</sgmltag></para>
</listitem>
</itemizedlist>
<para>
The OpenLaszlo system is equivalent to the Flash Player's, but syntactically OpenLaszlo is closer to HTML/CSS standard (and would be equivalent if <sgmltag class="attribute">stretches</sgmltag> defaulted to <literal>both</literal> instead of <literal>none</literal>).</para>
<para>Other systems define
only a translation, or only a translation and scale, or allow an
arbitrary 3x2 or 3x3 transformation.  OpenLaszlo is distinctive both in
not defining a translation (<literal>x</literal> and <literal>y</literal> position the bounds of the
view within its parent as well as defining a translation that precedes
the rotate/scale, so it can't be used for this), and in representing
the matrix in terms of its ops (which leaves some gaps, such
as skew — but is much better for animation, which requires a
much heavier-duty symbolic mechanism in SVG).</para>
<para>
The fact that resources aren't child views leads to some 
tension in the system, where 
designers expect them to be view-like, and there's a pull to make them view-like by adding rotation or
 translation to them that's independent of the view that embeds them, and to make it possible to 
retrieve their bounds.  (This is largely independent from the fact that they're represented as ids 
instead of objects.)   
</para> 
<para/></section></chapter>
