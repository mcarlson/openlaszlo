<?xml version="1.0"?>

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2007 Laszlo Systems, Inc.  All Rights Reserved.                   *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter language="en">
<title>Building OpenLaszlo from Source</title>

<section><title>Introduction</title>

  <para>These are the instructions for building 4.0.0 and later from source. These instructions may also work for 3.4.x. See <ulink url="http://wiki.openlaszlo.org/3.x_Build_Instructions">3.x Build Instructions</ulink> for build instructions for 3.3.x and earlier.</para>

  <para>These instructions are fairly well tested, but there may be issues with your particular setup. Please help us make it better by reporting your experience to the laszlo-dev mailing list laszlo-dev mailing list and the Laszlo developer forums.</para>

  <note><para>This document has been modified from it's original (wiki) format. It has been reformatted to fit your screen.</para></note>

</section>

<section><title>Philosophy</title>

  <para>The philosophy of these installation instructions is to create a user-owned-and-operated installation with all of the tools you need in one place. If you follow these instructions, we don't think you will need root access at any point. If you are a power user, use these instructions as guidelines; you can put anything anywhere, so long as you set the correct environment variables defined in <ulink url="http://svn.openlaszlo.org/tools/trunk/env/setup-lps.sh">setup-lps.sh</ulink></para>

</section>

<section><title>Prerequisites</title>

  <para>You will need Java, Subversion, a command line, and the ability to set environment variables.</para>

  <para>If you have firewall software, including Windows Firewall, you might need to open up access to port 8080. We'll mostly be using port 8080, but the other ones are briefly used for controlling server shutdown, startup, and secure connections. Do this with caution; if you don't know what it means to poke a hole in your firewall, you probably shouldn't.</para>

  <section><title>Migrating from an existing installation</title>
    <para>If you already build OpenLaszlo on your machine, but from a source other than Subversion, the cleanest thing to do is to ignore that distribution and start over. You don't need to delete it, but you do need to take references to it out of your path. (For advanced users only: you can keep your tools installed where they are, while changing your LPS-specific environment variables.)</para>
  </section>
  
  <section><title>Windows</title>
    <para>To build OpenLaszlo, you're going to need <ulink url="http://www.cygwin.com/">Cygwin</ulink>. You can almost build and run without Cygwin, but you will suffer, so perform a minimum Cygwin installation.When you install cygwin, be sure to select installation of gcc, subversion, and unzip.</para>
  </section>
  
  <section><title>OS X: Developer Tools and bash</title>
    <para>You'll need to install the developer tools in order to compile OpenLaszlo. They can be found on your Mac OS X installation CD, or at developer.apple.com.</para>
    <para>All the shell scripts referenced here use the bash shell. That's the default on OS X.</para>
  </section>
  
  <section><title>Clean up Tomcat</title>
    <para>Clean up any other Tomcat instances you have running, or any processes which are using port 8080, 8005, or 8043. To find existing Tomcat instances:</para>

    <variablelist>
      <varlistentry><term>Linux</term>
        <listitem><informalexample><screen>ps -o args -C java</screen></informalexample></listitem>
      </varlistentry>
      <varlistentry><term>OS X</term>
        <listitem><informalexample><screen>ps | grep java</screen></informalexample></listitem>
      </varlistentry>
      <varlistentry><term>Windows</term>
        <listitem><para>(this stops the LPS instance if it exists)</para><informalexample><screen>sc delete LPS</screen></informalexample></listitem>
      </varlistentry>
    </variablelist>
    
    <para>Create a directory to hold the source and tools you're about to install -- for example, <literal>C:\Laszlo</literal> on Windows, while on OS X and Linux, we like <literal>/home/$USER/src/svn</literal>.</para>
    
  </section>
  
  <section><title>Get Java</title>

    <para>We recommend using Java 1.5, although reportedly Java 1.6 works as well with later versions (greater than 4.0.2) of OpenLaszlo.</para>
    
    <para>You must get the Java Development Kit (JDK), not the Java Runtime Environment (JRE).</para>

    <para><ulink url="http://java.sun.com/j2se/1.4.2/download.html">JDK 1.4 Download Page</ulink></para>

    <para><ulink url="http://java.sun.com/javase/downloads/index_jdk5.jsp">JDK 1.5 Download Page</ulink></para>
    
    <para><ulink url="http://java.sun.com/javase/downloads/index.jsp">JDK 1.6 Download Page</ulink></para>

    <para>Windows: Install Java in a path with no spaces in the name. That is,</para>
    <informalexample><screen>C:\Java\jdk1.5.0_06</screen></informalexample>
    <para>not</para>
    <informalexample><screen>C:\Program Files\Java\jdk1.5.0_06</screen></informalexample>

    <para>Be sure to set <literal>JAVA_HOME</literal> appropriately.</para>

    <para>Mac OS X (10.3 and 10.4) comes with Java 1.4.2 so there is no need to install it. Set <literal>JAVA_HOME</literal> to <literal>/Library/Java/Home</literal>. As of mid-April 2006, OS X includes and defaults to Java 5.0. If you have problems, see the Gotchas section at the end of this document.</para>
    
  </section>
  
  <section><title>Get the Subversion client</title>

    <para>General information on Subversion is at <ulink url="http://subversion.tigris.org">subversion.tigris.org</ulink>. These instructions use the command line client for Subversion.</para>

    <para>The package is usually called <literal>subversion</literal> and the executable is <literal>svn</literal>. Before you try to install, check if you already have it by going to a command prompt and typing</para>
    
    <informalexample><screen>svn</screen></informalexample>

    <para>If the result is "command not found" or something like that, you need to install Subversion. If the result is something like "Do svn help for more instructions", then you do not need to install Subversion. We suggest subversion 1.4 or later; 1.3.2 or later should work.</para>

    <variablelist>
      <varlistentry><term>Windows</term>
        <listitem>
          <para>There are several options. You can get the <ulink url="http://subversion.tigris.org/downloads/svn-win32-1.4.3.zip">.exe binaries</ulink> directly from Tigris. For a nice GUI, we've had success with <ulink url="http://wiki.openlaszlo.org/TortoiseSVN">TortoiseSVN</ulink>. Alternatively, use the Cygwin installer: the Subversion package is inside the "Devel" group. Earlier builds of cygwin build of svn (version 1.2.3) might have a problem with properly checking out a source tree. See <ulink url="http://svn.haxx.se/users/archive-2005-08/1408.shtml">this posting</ulink> for details.</para>
          <para>If you elect to use the native Windows svn command line client, and also have the cygwin Subversion package, make sure to put it in your bash shell path in front of the cygwin bin directories, so you don't inadvertently use the cygwin 'svn' command by mistake.</para>
        </listitem>
      </varlistentry>
      <varlistentry><term>OS X</term>
        <listitem>The easy way is to install Subversion using the pre-built binaries. Using Fink or building Subversion from source will probably also work, but then you must know what you're doing.</listitem>
      </varlistentry>
      <varlistentry><term>Linux</term>
        <listitem>If you have a Linux box, you surely know how to install Subversion.</listitem>
      </varlistentry>
    </variablelist>
  </section>
  
  <section><title>Get the source</title>
  
    <para>As stated in the philosophy section, these instructions show you how to make a user-owned-and-operated installation. Once you're a power user, you can be clever in all the ways you want to be clever; first-timers should stick to this path, and post on <ulink url="http://www.openlaszlo.org/mailman/listinfo/laszlo-dev">laszlo-dev</ulink> if they have trouble.</para>
    
    <para>Make a directory in which you'll put all the stuff you're about to get. We recommend <literal>$HOME/src/svn</literal> for the downloaded code, and <literal>$HOME/lib</literal> for the libraries you'll have to install.</para>

    <informalexample><programlisting>cd $HOME
mkdir src
mkdir src/svn
mkdir lib</programlisting></informalexample>

    <para>To get the source with Subversion, do</para>
    
    <informalexample><programlisting>cd $HOME/src/svn
svn co http://svn.openlaszlo.org/openlaszlo/trunk openlaszlo/trunk</programlisting></informalexample>

    <para>Note that the URL is svn.openlaszlo.org, not www.openlaszlo.org. You'll get an Authentication Realm message if you mistakenly use www.</para>
    
    <para>To get the source for a particular branch, say <literal>legals</literal>, do</para>

    <informalexample><programlisting>svn co http://svn.openlaszlo.org/openlaszlo/branches/<replaceable>legals</replaceable> openlaszlo/branches/<replaceable>legals</replaceable></programlisting></informalexample>

    <para>This will take a while, because you're getting upwards of 100 MB.</para>
    
    <para>Also get the vendor directory, which contains third-party libraries and applications which are required to build and run the OpenLaszlo server. These are here as a convenience; they are exactly the bits that you would get from each vendor's distribution of that version. Note that there are some tricky version requirements; if you get weird errors, check that you're using the suggested versions.</para>
    
    <informalexample><programlisting>cd $HOME/src/svn
svn co http://svn.openlaszlo.org/vendor</programlisting></informalexample>

    <para>The tools directory, which provides customized tools written by OpenLaszlo developers, is helpful for development:</para>

    <informalexample><programlisting>cd $HOME/src/svn
svn co http://svn.openlaszlo.org/tools/trunk tools/trunk</programlisting></informalexample>

    <para>You can check these trees out to anywhere you want. We recommend this structure:</para>

    <informalexample>
      <programlisting>$HOME/src/svn/
    openlaszlo/        
        trunk/ <lineannotation>this is <literal>LPS_HOME</literal> if you're working in trunk</lineannotation>               
        tags/
        branches/
            <replaceable>branchname</replaceable>/ <lineannotation>this is <literal>LPS_HOME</literal> if you're working in a branch</lineannotation>
    tools/    
        trunk/ <lineannotation>this is <literal>LZ_TOOLS_ROOT</literal></lineannotation>
    vendor/ <lineannotation>this is <literal>LZ_VENDOR_ROOT</literal></lineannotation>
$HOME/lib <lineannotation>this is <literal>LZ_INSTALLS_ROOT</literal></lineannotation></programlisting>
    </informalexample>

    <para>We've created a script to ease configuration. Take a look at <ulink url="http://svn.openlaszlo.org/tools/trunk/env/setup-lps.sh">tools/trunk/env/setup-lps.sh</ulink> and the rest of this document might make more sense. This script enables you to specify with command line parameters the location of these directories: openlaszlo, tools, installed libraries, and vendor. The script sets environment variables relative to the specified directories. If you follow the recommended paths in this document, you can just do</para>

    <informalexample><programlisting>$HOME/src/svn/tools/trunk/env/setup-lps.sh</programlisting></informalexample>

    <para><emphasis>Note the leading dot.</emphasis> You'll have to invoke this setup script in every shell in which you want to do OpenLaszlo development. You might have to edit the script so that the environment variables correspond to your directory structure.</para>

    <para>There are a few applications you must install in order to build OpenLaszlo. The Subversion repository contains the installers, but you need to run the installers. Run these installers from the same user account with which you will be developing. We recommend installing these tools into <literal>$HOME/lib</literal>; this makes it easier to force the tools to use the versions that come with OpenLaszlo.</para>

  </section>
  
</section>

<section><title>Install the tools</title>
  <section><title>Make sure you have zip</title>
    <para>Check to see if you have at least one of /usr/bin/unzip or /sw/bin/unzip. If you don't have it there are a number of ways you can get unzip. For some reason I didn't have unzip even though I'd installed the Apple developer tools. Supposedly, the Apple developer tools will do it, but Installing fink will work. Another choice is <ulink url="http://www.info-zip.org/">http://www.info-zip.org/</ulink> for an easy and free download and install of zip and unzip.</para>
  </section>
  
  <section><title>Get ant 1.6.5</title>
    <para>We are using ant 1.6.5. Ant 1.5.* will not work. Ant 1.7 appears to work, although you will get some warnings.</para>

    <informalexample><programlisting>cd $LZ_INSTALLS_ROOT
unzip $LZ_VENDOR_ROOT/apache-ant-1.6.5-bin.zip
export ANT_HOME=$LZ_INSTALLS_ROOT/apache-ant-1.6.5</programlisting></informalexample>

    <variablelist>
      <varlistentry><term>Windows (no cygwin)</term>
        <listitem>Use the WinZip GUI to unzip apache-ant-1.6.5-bin.zip into your lib directory.</listitem>
      </varlistentry>
      <varlistentry><term>OS X (no unzip)</term>
        <listitem>If you don't have /usr/bin/unzip, you may be able to double-click on apache-ant-1.6.5-bin.zip in the finder, and drag the resulting folder into $LZ_INSTALLS_ROOT (most likely ~/lib).</listitem>     
      </varlistentry>
      <varlistentry><term>SUSE Linux</term>
        <listitem>Do not install the ant rpm.</listitem>
      </varlistentry>
    </variablelist>
  </section>
  
  <section><title>Install JavaCC</title>
    <para>JavaCC is a compiler compiler, like yacc; we use it to help build the compiler. If you want to run the GUI installer:</para>

    <informalexample><programlisting>cd $LZ_VENDOR_ROOT
java -cp . JavaCC2_1</programlisting></informalexample>

    <para>It will ask you where to install to; we suggest <literal>$LZ_INSTALLS_ROOT/javacc2.1</literal>. It will also tell you to set <literal>~/lib/javacc2.1/bin</literal> on your path, but the <literal>setup-lps</literal> script has taken care of this for you.</para>

    <para>If you would prefer the command line installer, add -c to the Java command.</para>
    
    <informalexample><programlisting>cd $LZ_VENDOR_ROOT
java -cp . JavaCC2_1 -c</programlisting></informalexample>

  </section>
  
  <section><title>Install Jython (pre-4.1.0 only)</title>

    <para>Jython is a Java application that executes Python scripts. Parts of the OpenLaszlo build pipeline are written in Python, but these have been phased out in 4.x.</para>

    <informalexample><programlisting>cd $LZ_VENDOR_ROOT
java -cp . jython-21</programlisting></informalexample>

    <para>Make sure "use jre" is not checked. The GUI will prompt you for the Jython installation directory. We suggest <literal>$LZ_INSTALLS_ROOT/jython-21</literal>.</para>

    <para>If you don't want to use the GUI installer, add <literal>-o dir-to-install-to</literal>:</para>
    
    <informalexample><programlisting>java -cp . jython-21 -o ~/lib/jython-2.1</programlisting></informalexample>

    <para>Don't put jython in a system directory; the build will fail if the jython process does not have write access to the jython directory.</para>

    <para><emphasis>NOTE: You can't use the command line installer on Windows_XP because the installer does not understand that XP is Windows. If you get an error about extra bytes at the end of your class file, it is because jython has their own class loader and your Java is puking trying to verify the non-standard class file. Downgrade your java to 1.5 and you will win.</emphasis></para>

  </section>
  
  <section><title>Install Python</title>
    <variablelist>
      <varlistentry><term>Windows</term>
        <listitem>
          <para>Run the Python 2.2.2 installer, which is in <literal>$LZ_VENDOR_ROOT/Python-2.2.2.exe</literal>. Reportedly 2.4.4 and later do not work on Windows.</para>
          <note><para>If you get a message from the 16 bit MS-DOS Subsystem telling you that <literal>C:\WINDOWS\system32\ntvdm.exe</literal> got an error "while setting up the environment for the application. Choose 'Close' to terminate the application.", it is likely because you are trying to use the Cygwin version of Python, which just won't do. You need to arrange for the Windows version of Python that you installed above to be found before the Cygwin version is, either by juggling your search path or perhaps uninstalling Cygwin Python.</para></note>
        </listitem>
      </varlistentry>
      <varlistentry><term>OS X</term>
        <listitem>OS X comes with Python installed to <literal>/usr/bin/python</literal>. We're using 2.3.5 successfully.</listitem>
      </varlistentry>
      <varlistentry><term>Linux</term>
        <listitem>Most modern Linux distributions come with Python 2.2 or later. The python-devel package must be installed, too. We have been using Python 2.4.1 on Linux.</listitem>
      </varlistentry>
    </variablelist>
  </section>
  
  <section><title>Install PyXML</title>
    <variablelist>
      <varlistentry><term>Windows</term>
        <listitem>Run <literal>vendor/PyXML-0.8.win32-py2.2.exe</literal>.</listitem>
      </varlistentry>
      <varlistentry><term>Linux and OS X</term>
        <listitem>
          <informalexample><programlisting>cd $LZ_VENDOR_ROOT
gunzip PyXML-0.8.3.tar.gz
tar xvf PyXML-0.8.3.tar    
cd PyXML-0.8.3
python setup.py build
sudo python setup.py install</programlisting></informalexample>
          <para>Note: contrary to previous reports, this step is necessary.</para>
          <note><title>ptw's notes</title>
            <para>I install in a non-default place:</para>
            <informalexample><programlisting>sudo python setup.py install --install-lib /usr/local/lib/python2.3/site-packages</programlisting></informalexample>
            <para>I set the <literal>--install-lib</literal> option so that I won't lose my local extensions if OS X updates Python. I also put the following in my .bashrc so Python sees the local packages:</para>
            <informalexample><programlisting># we use _xmlplus, which I put here to stay out of the /System dir
export PYTHONPATH=/usr/local/lib/python2.3/site-packages</programlisting></informalexample>
          </note>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section><title>Install Tomcat 5.0.30</title>
    <para>The Tomcat 5.0.30 installer in our vendor directory is exactly the same as the official Tomcat 5.0.30 release.</para>

    <variablelist>
      <varlistentry><term>Windows</term>
        <listitem>Get the Tomcat 5.0.30 installer from <ulink url="http://download.nextag.com/apache/tomcat/tomcat-5/v5.0.30/bin/jakarta-tomcat-5.0.30.exe">here</ulink>. Run the installer. When it asks you where to put it, say C:/Tomcat5. Don't start Tomcat; we'll do that later.</listitem>
      </varlistentry>
      <varlistentry><term>Linux and OS X</term>
        <listitem>
          <informalexample><programlisting>cd $LZ_INSTALLS_ROOT
unzip $LZ_VENDOR_ROOT/jakarta-tomcat-5.0.30.zip</programlisting></informalexample>
          <para>This installs tomcat into <literal>$LZ_INSTALLS_ROOT/jakarta-tomcat-5.0.30/</literal>.</para>
          <para>Create a user with "admin" and "manager" roles, in <literal>jakarta-tomcat-5.0.30/conf/tomcat-users.xml</literal>. See <ulink url="http://tomcat.apache.org/tomcat-4.1-doc/manager-howto.html#Configuring%20Manager%20Application%20Access">this page</ulink> for details. The build is set up to use user "admin" with password "laszlo", but you can change this in <literal>${LPS_HOME}/build.properties</literal>.</para>
          <para>The scripts in <literal>jakarta-tomcat-5.0.30/bin/*</literal> need to be executable; if you know what this means, do this:</para>
          <informalexample><programlisting># Don't do this if you don't understand chmod. See your local sysadmin.) 
chmod ugo+x jakarta-tomcat-5.0.30/bin/*</programlisting></informalexample>
        </listitem>
      </varlistentry>
    </variablelist>      
  </section>

  <section><title>Install Rhino</title>
    <informalexample><programlisting>cp $LZ_VENDOR_ROOT/js.jar $ANT_HOME/lib/</programlisting></informalexample>
  </section>

</section>

<section><title>Set environment variables</title>
  <para>The rest of these instructions require that you set several environment variables. We've created a bash setup script in <ulink url="http://svn.openlaszlo.org/tools/trunk/env/setup-lps.sh">tools/trunk/env/setup-lps.sh</ulink>. You can source this script from your .bashrc, or call it interactively. If you don't use our script, your mileage may vary, but we require the following variables to be set:</para>
  <informalexample><screen>ANT_HOME, JAVA_HOME, JAVACC_HOME, JYTHON_HOME, TOMCAT_HOME, CATALINA_HOME, LPS_HOME</screen></informalexample>
  <para>However you set these variables, you should make sure the directories exist and they're the right ones. If you can't CD to the directory you have a definite problem, and with all the version numbers you might get wrong you'll probably save yourself a lot of frustration if you run this script:</para>
  <informalexample><programlisting>cd $ANT_HOME
cd $JAVA_HOME
cd $JAVACC_HOME
cd $JYTHON_HOME
cd $TOMCAT_HOME
cd $CATALINA_HOME
cd $LPS_HOME</programlisting></informalexample>
  <variablelist>
    <varlistentry><term>Windows/Cygwin</term>
      <listitem>For Cygwin, WindowsBuilderSetup shows how we set environment variables for a particular Windows machine; use it as a guide for creating your own Cygwin bash script. The number and direction of slashes and quotes is a source of difficulty, but can be fixed with a function called cygpath. As an alternative to WindowsBuilderSetup, here's a variant of the setup-lps.sh that uses cygpath to fix the slash issues and will work on cygwin: cygwin version of setup-lps.sh. Read the comments in the file and call it from your .bashrc.</listitem>
    </varlistentry>
    <varlistentry><term>OS X</term>
      <listitem>
        <para>Note that in certain circumstances it can be preferable to use Java 1.4.2 instead of Java 1.5, even on versions of OS X where Java 1.5 is the default. The preferred technique for doing this in bash is to set JAVA_HOME as follows:</para>
        <informalexample><programlisting>export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/home/"</programlisting></informalexample>
        <para>To return to Java 1.5, reset JAVA_HOME to its original value:</para>
        <informalexample><programlisting>export JAVA_HOME="/Library/Java/Home"</programlisting></informalexample>
      </listitem>
    </varlistentry>
  </variablelist>
</section>

<section><title>Install a few libraries automatically</title>
  <para>(You may need to do this step as root.)</para>
  <informalexample><programlisting>cd $LZ_VENDOR_ROOT
svn up 
cd $LZ_TOOLS_ROOT/build-tools/install-libs
ant</programlisting></informalexample>
  
</section>

<section><title>Build and run!</title>
  <para>Start a new shell so you have all the right environment variables. Then (Windows users running Cygwin, run ant init first, before ant build, in order to copy some required jar files before the compile):</para>
  <informalexample><screen>cd $LPS_HOME
ant build 
$TOMCAT_HOME/bin/startup.sh
ant webapp.install</screen></informalexample>
  <para>If, during webapp.install, you get java.net.ConnectException: Connection refused: connect, that means Tomcat never started. If you get a HTTP 401 response code, it means that you failed to set up your admin user/password correctly (see above on installing Tomcat).</para>
  <variablelist>
    <varlistentry><term>OS X</term>
      <listitem>
        <para>OS X 10.4.3 I found that I had to do the following:</para>
        <informalexample><programlisting>bash // This loads the environment variables in setup-lps.sh
cd $LPS_HOME
ant build
cd $TOMCAT_HOME
chmod +x *
$TOMCAT_HOME/bin/startup.sh
bash // for some reason bash exited at the end of startup.sh
cd $LPS_HOME
ant webapp.install</programlisting></informalexample>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>Then point your browser at <ulink url="http://localhost:8080/trunk">http://localhost:8080/trunk</ulink>, or, if you're running a branch or tag, <literal>http://localhost:8080/<replaceable>branchname</replaceable></literal>.</para>
  <para>In the future, when you have updated your branch(es) with <literal>svn up</literal>, you will have to repeat this build process.</para>
</section>

<section><title>Notes and gotchas</title>
  <note><para>This section still needs to be copied over from the <ulink url="http://wiki.openlaszlo.org/SubversionBuildInstructions">wiki</ulink>.</para></note>
</section>

<section><title>What if it doesn't work?</title>
  <note><para>This section still needs to be copied over from the <ulink url="http://wiki.openlaszlo.org/SubversionBuildInstructions">wiki</ulink>.</para></note>
</section>

</chapter>
