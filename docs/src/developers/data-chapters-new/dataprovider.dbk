<chapter id="dataprovider">
<title>Under the hood: The dataprovider</title>
<para>
Summary: This is an advanced topic for people who want to develop alternative protocols. It's used by Laszlo Webtop, for example.
</para>
<para>
A DataProvider specifies the transport mechanism and policies for communicating data requests from the client to the server. For example, dataproviders may batch requests, whitelist/blacklist URIs.
</para>
<para>
Datasets make data requests through dataproviders. The transport mechanism is abstracted away from the dataset. That is, a dataset could use a dataprovider that uses HTTP in one instance, and then swap out to another dataprovider that uses XMPP as its transport as long as the dataprovider can support the dataset's request.
</para>
<para>
It provides a way for datasets to use data protocols other than HTTP. Enhancements provided by the dataprovider specification will allow clients to set differing data request policies--currently only supported through a server proxy like LPS--like security (e.g., blacklisting and whitelisting of URIs) and transport mechanims (e.g., batching of HTTP requests)
</para>
<para>
Outline:

Will cover these attributes:

dataprovider --The dataprovider which will handle the dataset's request.

multirequest -- True if multiple sequential requests can be made without override previous requests. Default is false for backward compatibility.

datarequest -- The current datarequest instance to be used by the dataset to call the dataprovider with. Other methods like setQueryParam() and setSrc() set properties of dataRequest.

datarequestclass'' The default datarequest class to be used by the dataset.

New dataset methods: 

** ''doRequest( DataRequest )'' behaves the same way as the previous doRequest except a DataRequest instance may be passed in. If passed in, the dataRequest param is used to call into the dataprovider, otherwise the dataset's dataRequest instance is used.

** ''handleResponse( DataRequest )'' the callback handler for doRequest().

Data Request Sequence  

The request life cycle begins with the dataset.doRequest() method. In doRequest(), a DataRequest instance is generated to call into the dataprovider with. Before the dataprovider is invoked, the DataRequest is filled in with enough data for the dataprovider to handle the request. In turn, the dataprovider sets a data callback on the DataRequest instance and then, using request information provided by the DataRequest, makes a server data request. When the server responds, the callback handler of the DataRequest instance is invoked, which then calls the calling dataset's handleResponse method.
</para>
</chapter>
