<chapter id="delegates">

<title>Delegates</title>
 <!-- remove commented out sample code that was ignored by the build. IORIO 20 nov 2007 -->
<para>This chapter explains the use of delegates, which are a part of the mechanism that different parts of an OpenLaszlo application use to communicate with each other when values of attributes change. </para>
<para>
You generally only need to be aware of delegates for objects that you create in script (that is, not with tags). For objects that you create with tags, for example &lt;view&gt;, you can manage communication using event handlers, as described in <xref linkend="methods-events-attributes"/>. When you use handlers, the OpenLaszlo runtime takes care of delegates for you.  Delegates are still there, behind the scenes, but the system manages them invisibly. However, it's helpful to understand the relationship between tag and script-based event syntax.</para>
<para>The last section of this chapter explains how delegates compare to similar things in other programming languages.</para>






<?ignore <h2><a name="overview">Overview</a></h2>

<p> </p>

<!-- See other chapters in the D3 guide and also the wiki for more informtion on formatting chapters --> 
<!-- Here is a list of some topics you may want to discuss in this chapter-->


 <h2>LZX's point-to-point event system</h2>
<fixme>
Link to appropriate section of the "methods, attributes events " chapter
</fixme>
<fixme>
 No 'broadcast'; no trickle up or down
 Event: message that attribute has changed value(??)
</fixme>
<h3>Delegate: named method of an instance </h3>
?>


<para/><section><title>Overview</title>
<para>
The purpose of a delegate is to bind an event at runtime to a particular method. Thus to "register an event with a delegate" simply means to bind that event, temporarily, to the method that is invoked by the delegate. The event stays bound to that method until you "unregister" the delegate. This means, then, that when the event happens the method is executed.</para>
<para>
Significantly, you can use delegates even if you don't know, at compile time, the name of the event that will invoke the delegateâ€” the name of the event can be passed as a parameter whose value is generated during the running of the application.
</para>
<para>
In LZX, delegates and events are defined in terms of each other.
A delegate is a named object that calls a method, and an event is an object which stores delegates.  </para>
<para>
When the event is generated, it
calls all of its delegates in turn. A delegate can be considered, then, a named method of an instance. 
</para>
<para>
Delegates that you explicitly create are generally used for objects that are created in script (that is, not by tags), although delegates can be associated with tag-generated objects as well.
</para>

<para>
Delegates are necessary because sometimes you don't know, at compile time, what a particular event should do.  For example, say you have a <indexterm><primary>window</primary></indexterm><classname>window</classname>, and you want a certain method to be called every time the window is clicked.  In that case, you would use a tag such as <literal>&lt;window onclick="clickhandler()"&gt;</literal>.  However, there may exist times when the desired action for the event depends on conditions at the time the event is created.  In that situation you would use delegates.</para>
<para/><section><title>lz.Delegate</title>
<para>
To create and manage delegates, you use the <indexterm><primary>lz.Delegate</primary></indexterm><classname>lz.Delegate</classname> class.
</para>
<para>
The syntax for creating a delegate is:</para>
<programlisting>
lz.Delegate(object, method, sender, event)
</programlisting>
<para>
The 3rd and 4th optional arguments to lz.Delegate are just shorthand: </para>
<programlisting>
 var del = new lz.Delegate(object, method, sender, event); 
</programlisting>
<para>
is the same as: 
</para>
<programlisting>
 var del = new lz.Delegate(object, method); 
 del.register(sender, event);
</programlisting> 

<para/></section><section><title>Relationship between delegates and tag-generated events</title>

<para>
The <indexterm><primary>lz.Delegate</primary></indexterm><classname>lz.Delegate</classname> class is used to create delegates in script. 
</para>
<para>
That is to say, you can statically attach a handler to an event by:</para>
<programlisting>
    &lt;handler name="eventName" reference="eventSender"&gt;
       ...what to do...
    &lt;/handler&gt;
</programlisting>
<para>
but if you don't know <literal>eventName</literal> or <literal>eventSender</literal> at compile time, you need to use the dynamic technique:
</para>
<programlisting>
     &lt;method name="methodName" args="value=null"&gt;
       ...what to do...
     &lt;/method&gt;

     &lt;method name="createDelegate&gt;
     this.myDel = new lz.Delegate(this, "methodName", eventSender, "eventName");
     &lt;/method&gt;
</programlisting>
<note>
The method referenced by a delegate must accept an argument. Most times this
requirement is fulfilled by adding an optional argument to the method. 
</note>
<para>
An event handler automatically handles all the work of making and registering a delegate for you: 
</para>
<programlisting>
onclick="do something or other;"
</programlisting>
<para>
expands to: 
</para>
<programlisting>
 &lt;handler name="onclick" &gt; 
 do something or other; 
 &lt;/name&gt; 
</programlisting>
<para>
 Which expands to: </para>
<programlisting><![CDATA[
 // make a method with a unique name to run the onclick code 
 <method name="$m<unique id>" args="ignore=null">
  do something or other;
 </method>

 // make a delegate for that method 
 var del = new lz.Delegate(this, $m<unique id>); 
 // register it to receive onclick events 
 del.register(this, 'onclick'); 
]]></programlisting>
<para>
The example below illustrates <indexterm><primary>lz.Delegate</primary></indexterm><classname>lz.Delegate</classname> in use.
</para>

<para/></section><section><title> Example: using lz.Delegate to register an event at runtime </title>

<para>
The following example is a simple memory game.  When a button is clicked once,
nothing special is reported.  If a button is clicked a second time, the green
status bar reports a message stating this fact.  The game can be started over by
clicking the 'start over' button.
</para>

<para>
Notice that for each button, when the <literal>onclick</literal> event is fired, the <indexterm><primary><literal>regbutton()</literal></primary></indexterm><methodname>regbutton()</methodname>
method is invoked on the canvas.  The <indexterm><primary><literal>regbutton()</literal></primary></indexterm><methodname>regbutton()</methodname> method creates a delegate for
the <indexterm><primary><literal>buttonclickedagain()</literal></primary></indexterm><methodname>buttonclickedagain()</methodname> method if no such delegate already exists, and then registers
the 'onclick' event of the button that has just been clicked. 
</para>
<para/><section><title>Flow of control</title>
<para>
 If a button that
hasn't been clicked before is clicked, nothing special is reported (although the delegate is created). However,
when a
previously clicked button is clicked,
the delegate calls <indexterm><primary><literal>buttonclickedagain()</literal></primary></indexterm><methodname>buttonclickedagain()</methodname> which prints
the message stating this fact.  This is because buttons that have already been clicked have had their 'onclick' events 'registered with' (or bound to) the delegate.</para>
<para>
 Clicking on the 'start over' button unregisters
all events from the delegate, and resets the message to nothing special.   
</para>

<example role="live-example">
   <title>Registering an event at runtime</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/delegates-$1.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section></section></section><section><title>Delegates and Memory Management</title>
<para>
In the past, it was necessary to manually track delegates and manually clean them up when objects were destroyed to prevent memory leaks.  This is no longer required - the event system now automatically cleans up delegates as needed.
</para>
<para/></section><section><title>Using a lz.Timer to show the passage of time </title>

<para> 
In the following example, a visual timer is created which shows each passing
second.   When the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 node is initialized, we call the
<indexterm><primary><literal>updateTimer()</literal></primary></indexterm><methodname>updateTimer()</methodname> method.  <indexterm><primary><literal>updateTimer()</literal></primary></indexterm><methodname>updateTimer()</methodname> first updates the text showing to indicate
the number of seconds passed, and then increments the secondsPassed attribute.
The first time <indexterm><primary><literal>updateTimer()</literal></primary></indexterm><methodname>updateTimer()</methodname> is invoked, a new delegate is created which simply
calls <indexterm><primary><literal>updateTimer()</literal></primary></indexterm><methodname>updateTimer()</methodname>,  and a timer is created which in turn calls the newly
created delegate after 1 second.   Each subsequent time <indexterm><primary><literal>updateTimer()</literal></primary></indexterm><methodname>updateTimer()</methodname> is invoked
by the delegate, instead of creating a new timer (which would be inefficient) , <indexterm><primary><literal>lz.Timer.resetTimer()</literal></primary></indexterm><methodname>lz.Timer.resetTimer()</methodname> is invoked.    
</para> 

<example role="live-example">
   <title>Using lz.Timer to create a second timer</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/delegates-$3.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section><title> Using <indexterm><primary>lz.Delegate</primary></indexterm><classname>lz.Delegate</classname> to determine initialization of the last replicated view </title>

<para>
In the following example, when the last <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> object has been
replicated and initialized, we set the text in the green <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> to 'The last
view has been replicated'.  To accomplish this task, we first explicitly declare 
a datapath on the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> to be replicated.  Next, we handle
the onclones event, which indicates that the new <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> nodes
has been cloned, but not initialized.  Inside the onclones event, we determine the
last replicated clone, and register the oninit event using <indexterm><primary>lz.Delegate</primary></indexterm><classname>lz.Delegate</classname>.  When the
last <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> node has been initialized, the delegate calls the
"replicationComplete" method, where the text of the green <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> node is updated. 
</para>

<para> 
This technique can also be used to detect when the last view has loaded its
resource by simply registering the <indexterm><primary>onload event</primary></indexterm><literal>onload</literal> event instead of the <indexterm><primary>oninit event</primary></indexterm><literal>oninit</literal> event.  
</para>
<example role="live-example">
   <title>Registering for an event when the last view has been replicated</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/delegates-$4.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section><title>Delegates as attributes</title>
<para>
A delegate is an object, and as such it can be an attribute of another object. For example, consider:</para>
<example role="live-example"><title>delegate as attribute</title><programlisting>
&lt;button text="clickme"&gt;
    &lt;attribute name="mydel" type="expression"
               value="$once{new lz.Delegate(this, 'handler')}"
</programlisting></example>
<para>
The above code creates the delegate <literal>mydel</literal> when the button is instantiated. This technique of declaring a delegate has the advantage of being easy to read, and it ensures that only one delegate is created.
</para>
<para>For an example that uses this technique, see <xref linkend="rpc"/>.</para>
<para/></section><section><title>Delegates in relation to other languages</title>
<para>
Here is a brief discussion of delegates in relation to other programming languages with which you may be familiar.  You don't need to follow this discussion in order to use delegates in LZX.
</para>
<para>
A delegate is a 'method pointer'. It's a way of saying: "give me a thing that when I call it will call method m on object o." (As opposed to a function pointer, which doesn't capture the object.) In Java, you use an 'anonymous inner class' to get this effect (i.e., Java creates an instance with a function). In Lisp, you use a closure (i.e., Lisp creates a function with a context). [The Java and Lisp ways are just two sides of the same coin.] </para>
<para>
Basically: </para>
<programlisting>

 // constructor 
 LzDelegate = function(o, m) { this.o = o; this.m = m; } 
 LzDelegate.prototype.execute = function () { with (this) { return o[m](); } }; 

 var del = new LzDelegate(object, 'method'); 
 del.execute(); 
</programlisting>
<para>
is the same as: </para>
<programlisting>

 // constructor 
 function makeDelegate (o, m) { return function () { return o[m](); }; }; 

 var del = makeDelegate(object, 'method'); 
 del(); 
</programlisting>
<para>
Here you can see the parallel between allocating an instance that captures the context 'o' and 'm' and has a function (method) to invoke it, and a function that you can invoke that captures the context 'o' and 'm' by being a closure. 
</para>


<?ignore <h2>Services that are based on delegates</h2>

<fixme>
This chapter needs to be flushed out with examples of custom events, an explanation of lzdelegate, an example using timers
</fixme>
<fixme>
"listens" for event
 Understanding the "registry" (not to be confused with windows registry)
 When are events triggered?
i.  on data
ii.  on percent
iii.  on init
iv.  etc
v.  Forward reference to 'initialization/instantiation' chapter
</fixme>
 ?>

<para/></section></chapter>
