<chapter id="introductory-classes">

<title>Classes</title>
<para>
This chapter begins with a concise summary of basic features of our class system, and concludes with an essay 
about how LZX allows you to develop efficiently.</para>


<para>This chapter explains the essential concepts of object oriented
programming in OpenLaszlo applications, and the <indexterm><primary>class</primary></indexterm><sgmltag class="element">&lt;class&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: class-->
 tag in particular.</para>


<para/><section><title>Overview</title>
<para>
Classes are at the heart of LZX programming. Depending on your background, you may consult any of several
discussions in the OpenLaszlo documentation to learn how to use classes effectively in your applications.
</para>
<!-- change link for classes-tutorial per LPP-4923, IORIO 17 oct 2007 -->
<para>To get a feel for how to use classes in OpenLaszlo applications, you
may want to start with the tutorial: <xref linkend="classes-tutorial" /> .  That's the best place to start learning, especially if
you've never done any <glossterm>object oriented</glossterm> ("OO")
programming.</para>

<para>The chapter you're now reading contains a more concise exposition
of Laszlo classes and explains LZX in relation to other OOP systems.
In particular, this chapter assumes that you've mastered the concepts
covered in the tutorial. In this chapter we'll go beyond some of the
mechanics of how to create and extend classes and explore how the
design of LZX supports rapid application development.</para>

<para><xref linkend="class-inheritance"/> is for more experienced
developers.  It explains advanced techniques.</para>

<para/></section><section><title>Summary of Class syntax</title>

<para>In its simplest form, a class can be used as a macro, where a
complex structure can be reduced to a single tag. The following
example defines a class square, and instantiates it twice.</para>

<example role="live-example">
   <title>Defining a new tag</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$1.lzx"/></textobject> 
   </programlisting>
</example>

<!-- remove commented out sample code here and others that was ignored by the build. IORIO 31 oct 2007 -->

<para>This program is equivalent to the following program, but is shorter
and easier to maintain.</para>


<example role="live-example">
   <title>Without the class tag</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$2.lzx"/></textobject> 
   </programlisting>
</example>

<para>In addition, the class definition in the first program can be moved
to a separate file, through the use of the <indexterm><primary>library</primary></indexterm><sgmltag class="element">&lt;library&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: library-->
 and <indexterm><primary>include</primary></indexterm><sgmltag class="element">&lt;include&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: include-->
 tags:</para>


<example role="live-example">
   <title>Defining a new tag in a library file</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$3.lzx"/></textobject> 
   </programlisting>
</example>

<informalexample role="live-example"><programlisting>
&lt;library&gt;
  &lt;class name="square" width="20" height="20" bgcolor="red"/&gt;
&lt;/library&gt;
</programlisting></informalexample>

<para/><section><title>Attributes</title>

<para>The attributes of the class are the default attributes for each instance.  The instance can override these attributes by supplying its own attributes:</para>

<example role="live-example">
   <title>Overriding a class attribute</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$5.lzx"/></textobject> 
   </programlisting>
</example>

<para>A class can introduce a new attribute with the <indexterm><primary>attribute</primary></indexterm><sgmltag class="element">&lt;attribute&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: attribute-->
 element:</para>

<example role="live-example">
   <title>Defining an attribute</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$6.lzx"/></textobject> 
   </programlisting>
</example>

<!-- fix LPP-4923: replace ulink with xref to fix broken link. IORIO 31 oct 2007 -->
<para>For more information about attributes and class definitions, see
the <indexterm><primary>attribute</primary></indexterm><sgmltag class="element">&lt;attribute&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: attribute-->
 tag and <xref linkend="classes-tutorial" />.</para>

<para/></section><section><title>Children</title>
<para>If a class definition contains children, these children are copied
for each instance:</para>

<example role="live-example">
   <title>Class children</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$7.lzx"/></textobject> 
   </programlisting>
</example>

<example role="live-example">
   <title>Using attributes and class children together</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/class-1.lzx"/></textobject> 
   </programlisting>
</example>

<calloutlist><callout arearefs="N10086"><para>
    The <indexterm><primary>extends</primary></indexterm><sgmltag class="attribute">extends</sgmltag> is optional here.  The default base class is <indexterm><primary>lz.view</primary></indexterm><classname>lz.view</classname>.</para></callout><callout arearefs="N10090"><para>
    Create an instance of <indexterm><primary>myframe</primary></indexterm><classname>myframe</classname>.</para></callout></calloutlist>

<para/></section><section id="introductory-classes.methods"><title>Methods</title>

<para>Methods defined within classes are available to all instances of
the class, and the over-ridden superclass methods can be called with
the <literal>super</literal> keyword.</para>

<para>Unlike many other OO systems, Laszlo allows you to override class
methods in an instance.</para>

<para/></section><section id="introductory-classes.text-classes"><title>Text Classes</title>

<para>The <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 and <indexterm><primary>inputtext</primary></indexterm><sgmltag class="element">&lt;inputtext&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: inputtext-->
 tags are unique among the built in
classes in that they can hold textual content:</para>

<example role="live-example">
   <title>Built-in text classes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$9.lzx"/></textobject> 
   </programlisting>
</example>

<para>The <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 may contain character text,
as well as certain XHTML markup tags (<xref linkend="text"/>).  The
<indexterm><primary>inputtext</primary></indexterm><sgmltag class="element">&lt;inputtext&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: inputtext-->
 tag may contain character
text.</para>

<para>Classes that extend the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 and
<indexterm><primary>inputtext</primary></indexterm><sgmltag class="element">&lt;inputtext&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: inputtext-->
 classes may contain XHTML and
plain text, respectively.  The text content is available as the
<indexterm><primary>text</primary></indexterm><sgmltag class="attribute">text</sgmltag> attribute of such a class.</para>

<example role="live-example">
   <title>Extending the built-in text classes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$10.lzx"/></textobject> 
   </programlisting>
</example>

<para>A tag may also contain text if it defines an attribute named
<indexterm><primary>text</primary></indexterm><sgmltag class="attribute">text</sgmltag> with a value of <literal>text</literal> (for
plain text) or <literal>html</literal> (for XHTML text), or if it extends a
class that does so.  This technique may be used to define a tag that
contains text but does not extend <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->

or <indexterm><primary>inputtext</primary></indexterm><sgmltag class="element">&lt;inputtext&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: inputtext-->
.</para>

<example role="live-example">
   <title>Defining new text classes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$11.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section id="introductory-classes.placement"><title>Placement</title>

<para>The internal structure of a class is generally not visible to its
hierarchical children. By default, instances which appear inside a
class are made children of the top level instance of the class. This
is generally not desirable for container classes. e.g.:</para>

<example role="live-example">
   <title>Default placement of children in a class</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/class-2.lzx"/></textobject> 
   </programlisting>
</example>

<para>This behavior can be changed using the
<indexterm><primary>node.defaultplacement</primary></indexterm><sgmltag class="attribute">node.defaultplacement</sgmltag> attribute or the
<indexterm><primary><literal>lz.node.determinePlacement()</literal></primary></indexterm><methodname>lz.node.determinePlacement()</methodname> method. Using
<indexterm><primary>defaultplacement</primary></indexterm><sgmltag class="attribute">defaultplacement</sgmltag> is simple — this is a
class attribute that identifies by name the subview where a child
should be attached.  In this example, the interior view is named and
the defaultplacement attribute is given that name.</para>

<example role="live-example">
   <title>Using placement within a class</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/class-3.lzx"/></textobject> 
   </programlisting>
</example>
<para/></section></section><section><title>Constraints in class definitions</title>
<para>
Constraints are a general mechanism for relating the value of one attribute to that of another, as explained in <xref linkend="constraints"/>.
</para>
<para>
Take care when using constraints in class definitions.  Depending on the syntax you use to specify the constraint, you will either 
cause the creation of:
</para> 
<itemizedlist spacing="compact"><listitem><para>a single entity to be shared among all instances of the class, or </para></listitem><listitem><para>a unique entity for each instance of the class.</para></listitem></itemizedlist>
<para/><section><title>Creating objects to be shared</title>
<para>
If, in a class definition, you say any of:</para>
<programlisting>
value="[]"
value="new Array()"
value="{}"
value="new Object()"
</programlisting>
<para>
you will get a single array or object that is shared by all instances.
</para>
<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
Need examples!
</remark></para>
<para/></section><section><title>Creating unique objects for each instance</title>
<para>
If, in a class definition, you say any of:
</para>
<programlisting>
value="${[]}"
value="${new Array()}"
value="${{}}"
value="${new Object()}"
</programlisting>
<para>each instance will get its own array or object.
</para>
<para>
Note that <literal>
 ${}</literal> is equivalent to <literal>$always{}</literal>, but since the expression inside has no dependencies, it is also equivalent to 
<literal>$once{}</literal>. It's therefore perhaps more "honest" (and also marginally more efficient), to use the <literal>$once{}</literal> syntax. 
This will also improve readability.
</para>

<para/></section></section><section><title>Creating objects from script</title>

<para>LZX is designed to be a declarative language, so instantiating
views from script is not the recommended method for creating Laszlo
applications. Of course, from time to time you need to create views
on-the-fly -- that's why it is supported -- so you need to know how to
pass pointers to views in LZX.  There's a couple of ways you
could do that in this scenario:</para>

<orderedlist spacing="compact"><listitem><para>The "right" way. In the <indexterm><primary>PopupWindow</primary></indexterm><classname>PopupWindow</classname> class declare an attribute that
will be a pointer to some view:</para>

<example role="live-example"><title>Defining a pointer in a class definition</title><programlisting>
&lt;class name="PopupWindow"
       extends="windowpanel"
       width="160"
       height="160"&gt;
  &lt;attribute name="viewToAffect" type="expression"/&gt;
  —
</programlisting></example> 

<remark role="fixme">
The following paragraph is pretty jargonny!
</remark>

<para>Then when you instantiate that class, pass a pointer to the view into its constructor function:</para>

<example role="live-example"><title>passing a pointer in constructor function</title><programlisting>
var c = new lz.PopupWindow(canvas, {title:'popupbutton', 
                                 height:200, 
                                 width:200, viewToAffect: RootWindow.winbutton}); 
</programlisting></example>

<para>Then you could reference the view that was passed in from anywhere
in the <indexterm><primary>PopupWindow</primary></indexterm><classname>PopupWindow</classname> class:</para>

<programlisting>classroot.viewToAffect.setAttribute('text', newText);</programlisting>

<para>Now if you had just instantiated the <indexterm><primary>RootWindow</primary></indexterm><classname>RootWindow</classname> class, you could pass the variable <varname>b</varname> into the constructor function for the PopupWindow:</para>

<example role="live-example"><title>passing a parameter to a constructor function</title><programlisting>
var b = new lz.window(canvas, {height:80,width:80});
var c = new lz.PopupWindow(canvas, {title:'popupbutton',
                                 height:200,
                                 width:200,
                                 viewToAffect: b}); 
</programlisting></example>
</listitem><listitem>
<para>The quick and easy way: You could always store a pointer as a global variable, e.g.</para>

<programlisting>canvas.targetWindow = new lz.window(canvas, {height:80,width:80});</programlisting>

<para>or</para>

<programlisting>canvas.targetWindow = RootWindow.winbutton;</programlisting>
</listitem></orderedlist>

<para/><section><title>Reference views by name</title>

<para>
You can also give a view a name no matter how you instantiate it (whether you use the constructor function or the tag), and reference it as follows: 
</para>

<example role="live-example">
   <title>Accessing views by name</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/introductory-classes-$17.lzx"/></textobject> 
   </programlisting>
</example>
<para/></section></section><section><title>A Prototype-based language</title>

<para>
LZX is a prototype-based language: any attribute that can be attached to a class definition, can be attached to an instance of that 
class instead.  
This is handy in UI programming, where there are a number of objects with one-off behaviors.  It is also handy in prototyping and 
incremental program development, where it creates the possibility for a novel kind of refactoring.</para>

<para>The following two XML documents are complete LZX applications.  Each defines a view named <varname>myview</varname>, that contains a method named <indexterm><primary><literal>f()</literal></primary></indexterm><methodname>f()</methodname>.  Evaluating <literal>myview.f()</literal> in either application will result in <literal>100</literal>.</para>
 <para>A trivial method:</para>
<programlisting>
&lt;canvas&gt;
  &lt;view id="myview"&gt;
    &lt;method name="f"&gt;return 100;&lt;/method&gt;
  &lt;/view&gt;
&lt;/canvas&gt;</programlisting>
 <para>A trivial method in a class:</para>
<programlisting>
&lt;canvas&gt;
  &lt;class name="myclass"&gt;
    &lt;method name="f"&gt;return 100;&lt;/method&gt;
  &lt;/class&gt;
  &lt;myclass id="myview"/&gt;
&lt;/canvas&gt;</programlisting>

<para/><section><title>Instance-First Development</title>

<para>The equivalence between the two programs above supports a development strategy we call <indexterm significance="preferred"><primary>instance-first development</primary></indexterm><glossterm>instance-first development</glossterm>.  
In instance-first development, you implement functionality for a single instance, and then "refactor" the instance into a class that 
supports multiple instances.</para>

<para/><section><title>Global variables</title>

<para>One instance-first development technique is to use global variables.  It is often easier to develop and debug a program that 
stores state in global variables than it is to attach variables to a state, session, or user object.  
This avoids threading the state object through all the API calls, and it makes it easier to find and manipulate the state during 
interactive debugging (<xref linkend="debugging"/>).</para>

<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
Can we make this a little less abstract, please? Some code, maybe?
</remark></para> 

<para>Eventually you can refactor the globals into members of a state
object, but this refactoring is relatively easy, especially if you
have written the program with the knowledge that this would eventually
happen.</para>

<para>This technique is cheaper than maintaining the state threading and
writing the extra access during all the other refactoring of the
program (as extra parameter to each method that is added or
refactored).  This is a special case of the principle that if you are
going to refactor a program anyway, you can optimize the order in
which the refactorings are applied, and where within the development
pipeline they occur.</para>

<para>In the global variable approach to instance-first development, the entire program is an instance.  Prototype-based programming supports 
another approach, that doesn’t rely on global variables.  With prototype-based programming, you can add functionality to and interact 
with a single instance of an object, refactoring its members and functionality into a class when another instance with the same or 
similar functionality is called for.   This avoids a pitfall of programming, <indexterm significance="preferred"><primary>premature abstraction</primary></indexterm><glossterm>premature abstraction</glossterm>, where behavior is generalized 
too early and has to be rewritten at the framework level, where it’s difficult to reason and expensive to debug, rather than at 
the level of the specific instance.  <emphasis role="em">It’s easier to generalize from two examples than from one.</emphasis></para>

<para>In a language without prototypes, you can apply this strategy for instance-driven development by implementing "singleton" classes.  
Prototypes simply cut out the middleman, reducing the line count, the abstraction, and the indirection that is necessary during development. 
 This is particularly useful during user interface programming, where there may be a number of one-off visual objects.  
Using a singleton class for each of these can increase the size of a program (and therefore the development time) substantially, 
but you want the freedom to rapidly refactor these into classes.  Prototypes in a language that also supports classes lets you seamlessly
 move between these representations.</para>

<para>Instance-first development is similar to test-driven development, but is orthogonal to it. 
(Instance-first development can be used independently from test-driven development, or to complement it.)  
In test-driven development, you incrementaly add test-specific functionality to encompass a growing test suite.  
In instance-first development, you add instance-specific functionality to an instance and then generalizes from it.  
Both are cases of implementing specific cases first and then generalizing from them.</para>

<para/></section></section><section><title>The Instance Substitution Principal</title>

<para>In LZX, classes are user-defined XML tags that have functionality  
 equivalent to class definitions in non-XML languages.  However, LZX already has methods and attributes (similar to fields or properties in other languages) 
on instances definitions, so class definitions look like instance definitions.</para>


<para>In understanding the semantics of LZX class definitions, you may find the following principle useful:</para>

<blockquote>
  <para><indexterm significance="preferred"><primary>Instance substitution principal</primary></indexterm><glossterm>Instance substitution principal</glossterm>: An instance of a class can be replaced by the definition of the instance,
  without changing the program semantics.</para>
</blockquote>

<para>The two programs at the beginning of this entry illustrate the instance substitution principle.</para>

<para>The instance substitution principle can be applied at the level of semantics, or at the level of syntax. 
 At the level of semantics, it means that a member can equivalently be attached either to a class or its instance. 
 At the level of syntax, it means that the means of defining a class member and an instance member are syntactically parallel.</para>

<para/></section><section><title>Comparison of LZX to other languages</title>

<para>Many prototype-based languages don't obey the instance substitution
principle, either because they don't have classes, or because class
and instance definitions are not parallel.  (Typically there's not a
declarative means for defining an instance member.)  JavaScript
versions 1.0 through 1.5 (the versions in browsers) is also a
prototype-based language, but lacks classes as a first-class syntactic
entity, and lacks the hierarchical syntax that Java, C++, and LZX use
to define class members.  JavaScript 2.0, JScript.NET, and Python have
a class definition syntax, but don’t use the same syntax to
define instance members.  For example, contrast the following two
Python programs, which parallel the LZX programs above.</para>

<informalexample role="live-example"><programlisting>
myobject = object()
myobject.f = lambda f: 100
</programlisting></informalexample>

<informalexample role="live-example"><programlisting>
class MyClass(object):
  def f():
    return 100
myobject = MyClass()
</programlisting></informalexample>

<para>The syntactic version of the instance substitution principle makes a class look like a function or a macro.  
Class, function, and macro definitions 
are all mechanisms for abstracting program structure so that it can be reused. 
 </para>

<para>
 Some languages hide this, because they're missing mechanisms to the specific or general case.  
 For example, the instance substitution principle only makes sense in a language with both prototypes and classes; 
the derivation of a function definition from a sequence of statements is muddier in a language such as C++ or Java that 
is missing anonymous functions to represent the intermediate step.</para>

 

 
<para/></section></section></chapter>
