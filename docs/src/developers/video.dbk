<chapter id="video">


<title>Audio and Video</title>
<!-- remove commented out sample code that was ignored by the build. IORIO 20 nov 2007 -->
<para>
This chapter discusses streaming audio and video in .flv and .mp3 formats that are rendered in the specialized <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: videoview-->
. More limited audio and visual capabilities can be obtained by attaching audio and visual sources as resources to regular <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: view-->
s. For discussion of that topic, see <xref linkend="media-resources"/>. The video APIs described in this chapter work only in OpenLaszlo applications that are compiled for the Flash runtime target.
</para>

<para>OpenLaszlo video APIs give you access to the full functionality of media players such as the <ulink url="http://www.adobe.com/products/flashmediaserver/">Flash Media Server</ulink> and the <ulink url="http://www.osflash.org/red5">Red5</ulink> media player. When your OpenLaszlo program is connected to a media server over a Real Time Media Protocol connection, you can not only receive and play audio and video (in mp3 and flv formats), you can also record your own audio and video locally and send it to the server, where it can be stored or shared in real time with other client programs.
</para>
<para>
In contrast to RTMP, files that are streamed over an HTTP connection allow more limited functionality.</para>

<para>This chapter explains the concepts of controlling streaming media over an HTTP connection and and bi-directional communication with a media server over an RTMP connection. </para>



<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
What happens if you compile for DHTML?  Compiler error? Warning?
How this differs from earlier LPS, which did allow playing of video media.
</remark></para>





<para/><section><title condition="swf">Overview</title>
<para>
There are two main ways that OpenLaszlo applications can interact with video media: as a basically passive recipient of streamed video served over HTTP, or, when a media server is present, the OpenLaszlo application can fully interact with the server, capturing video and audio data with local cameras and microphones and sending it back to the media server over RTMP.
</para>
<para>
Media servers do not only stream media content to the Flash plugin, they can also send instructions to be executed on the client and other kinds of data. Servers can receive video, audio and data from an OpenLaszlo application and either save it or rebroadcast it. These APIs allow you to manipulate the source video content on the clientâ€”for example, to rotate it, change its transparency, seek forward and back, and so forth.
</para>
<para>
This functionality makes possible entirely new types of web applications. For example:</para>

<itemizedlist spacing="compact"><listitem><para>Video on demand</para></listitem><listitem><para>Video mail</para></listitem><listitem><para>Multi-user video chat</para></listitem><listitem><para>Video sharing and publishing</para></listitem><listitem><para>Conferencing</para></listitem><listitem><para>Broadcasting live streams of concerts</para></listitem><listitem><para>Recording audio</para></listitem></itemizedlist>
<para>
OpenLaszlo APIs implement an abstraction layer so that you can use the same classes to manipulate video data regardless of its source. For example, you use a <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> to contain video data, regardless of the protocol (HTTP or RTMP) over which the data comes.  The <indexterm><primary>mediastream</primary></indexterm><sgmltag class="element">&lt;mediastream&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: mediastream-->
 associated with that <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> determines its properties.
</para>

<para/></section><section><title>Architecture</title>
<para>
Depending on whether your application is a simple receptor of streams or a sender and receiver, the architecture of the application may be simple or complex.  In the simplest case, the LZX application merely catches and displays streamed files, and your programming options are limited.  In the more complex case, for example, a multi-point video chat, your application may be considered to have a central server component and any number of clients, which communicate with each other through the server. In such applications you need to handle such things as receiving and displaying streamed data, recording and broadcasting from local microphones and cameras, seeking forward and back in the stream, and so forth. We'll examine some of these cases in examples below.
</para>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
Should there be an illustration? How would we illustrate the difference between streaming and full interaction?

</remark></para>
<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
etc

FLV format.  What is it.  Reference Youtube, etc.
</remark></para>
<para/><section><title>File Formats</title>
<para>
LZX videoviews can stream content in FLV or Mp3 format.  According to the <ulink url="http://en.wikipedia.org/wiki/FLV">Wikipedia</ulink>,
</para>
<para>
<emphasis role="i">
FLV (Flash Video) is a proprietary file format used to deliver video over the Internet using Adobe Flash Player (also called Macromedia Flash Player) version 6, 7, 8, or 9. FLV content may also be embedded within SWF files. Notable users of the FLV format include Google Video, Reuters.com, YouTube and MySpace. Flash Video is viewable on most operating systems, via the widely available Macromedia Flash Player and web browser plug-in, or one of several third-party programs such as Media Player Classic (with the ffdshow codec installed), MPlayer, or VLC media player.
</emphasis>
</para>
<para>
The ubiquitous Mp3 format is <ulink url="http://en.wikipedia.org/wiki/Mp3">described</ulink>:</para>
<para>
<emphasis role="i">
MPEG-1 Audio Layer 3, more commonly referred to as MP3, is a popular digital audio encoding and lossy compression format, designed to greatly reduce the amount of data required to represent audio, yet still sound like a faithful reproduction of the original uncompressed audio to most listeners. It was invented by a team of German engineers who worked in the framework of the EUREKA 147 DAB digital radio research program, and it became an ISO/IEC standard in 1991.
</emphasis>
</para>
<para/></section><section><title>Protocols</title>
<para>
Video content can be communicated from the server using either of two protocols:</para>
<itemizedlist spacing="compact"><listitem><para>HTTP</para></listitem><listitem><para>Real Time Media Protocol(RTMP)</para></listitem></itemizedlist>
<para>
Depending on where the media is being served from and what protocol connects the OpenLaszlo client to the sever, different capabilities are available in the client application.
</para>
<para/><section><title>HTTP</title>
<para>
HTTP, the HyperText Transfer Protocol, is useful for downloading files to a client. However it's not interactive and has no special provisions for handling data in video format. When you load an URL that identifies a .flv or mp3 file, that file is downloaded. You have some control over when to start playing the download, but that's about it. From the point of view of the content provider, the most obvious value of using HTTP is that it requires no special media server. Also, HTTP is useful when bidirectional communication is not needed because videos downloaded on this protocol start fast.
</para>
<para>
When you download a file over HTTP, the entire file is loaded into memory. Once in memory you can quickly seek.  But because the files must all fit into memory, there is a limit on the size of files that you can handle in this way.</para>
<para/></section><section><title>RTMP</title>
<para>
RTMP, the Real Time Messaging Protocol, was developed by Adobe (formerly Macromedia), in order to get around the limitations of HTTP when dealing with bi-directional ("full duplex") video data in real time. RTMP provides APIs for complex interactions, and because the connection allows you to download portions of the file as needed, you can handle larger files than can HTTP, which download the entire file.  With RTMP there is less memory usage, as only one frame is loaded into memory at a time. RTMP has been optimized for video, and has better compression rates. In order to use the RTMP protocol, you must establish a connection to an application on a server. You do this using the <indexterm><primary>rtmpconnection</primary></indexterm><sgmltag class="element">&lt;rtmpconnection&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: rtmpconnection-->
 tag.
</para>
<para>
For more information on the RTMP protocol, see <ulink url="http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=tn_16458">Adobe</ulink> and <ulink url="http://www.osflash.org/rtmp/protocol">OS Flash</ulink> sites.
</para>
<para>
Each of these protocols has its uses. The RTMP protocol, coupled with a media server, provides a much more rich environment for creating interactive media applications.  On the other hand HTTP requires no special media server software, and for many simple streaming applications it provides faster startup.
</para>
<para/></section></section></section><section><title>The OpenLaszlo Video Client Model</title>
<para>
OpenLaszlo capabilities on the client are provided through a group of base classes and through two components that are built on top of these base classes.</para>
<para/><section><title>Overview of Base Classes</title>
<para>
The <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> is the visual object that is used to display audio and visual data. The <indexterm><primary>mediastream</primary></indexterm><sgmltag class="element">&lt;mediastream&gt;</sgmltag> associated with a <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> tells it where and how to get its content. You can attach devices to the <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>; as of OpenLaszlo 3.4 the two supported devices are <indexterm><primary>camera</primary></indexterm><sgmltag class="element">&lt;camera&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: camera-->
 and <indexterm><primary>microphone</primary></indexterm><sgmltag class="element">&lt;microphone&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: microphone-->
. The classes <indexterm><primary>camera</primary></indexterm><sgmltag class="element">&lt;camera&gt;</sgmltag> and <indexterm><primary>microphone</primary></indexterm><sgmltag class="element">&lt;microphone&gt;</sgmltag> are implemented as extensions of the base class <indexterm><primary>mediadevice</primary></indexterm><sgmltag class="element">&lt;mediadevice&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: mediadevice-->
.
</para>
<para>
<indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> is an extension of <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag>. It's a visual object whose height, width, placement, etc, you can control just as you would any other view.
</para>
<para/><section><title>The Videoview</title>
<para>
The <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: videoview-->
 is a subclass of <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag> that is optimized for audio/visual streaming.  In addition to the attributes inherited from <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag>, this class has additional attributes that allow you to, for example identify a camera and microphone associated with it, to control whether media starts playing immediately or not, to determine play rates, and so forth.
</para>
<para>
Notice that unlike <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag>, you cannot attach a resource to a <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>. 
</para>
<para>
<indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> has methods parallel to those on <indexterm><primary>resource</primary></indexterm><sgmltag class="element">&lt;resource&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: resource-->
.  For example, you use <indexterm><primary><literal>play()</literal></primary></indexterm><methodname>play()</methodname> and <indexterm><primary><literal>stop()</literal></primary></indexterm><methodname>stop()</methodname> to control the video playback.
 
</para>
<para/></section><section><title>The mediastream</title>
<para>When you create a <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> and pass an URL and type (http or rtmp) to it, a stream is created, by default.  If you wish to have more control over the stream, you can define a <indexterm><primary>mediastream</primary></indexterm><sgmltag class="element">&lt;mediastream&gt;</sgmltag>.</para>
<para>
The <indexterm><primary>mediastream</primary></indexterm><sgmltag class="element">&lt;mediastream&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: mediastream-->
 tag allows you to identify the type of stream to be associated with a given <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>. Using attributes of and methods on the <indexterm><primary>mediastream</primary></indexterm><sgmltag class="element">&lt;mediastream&gt;</sgmltag>, you can, for example, determine the frame rate and current time of the stream, set it to record or broadcast and so forth.
</para>

<para/></section></section><section><title>Overview of Components</title>
<para>
OpenLaszlo provides two upper level components for managing connections and video objects.
</para>
<para/><section><title>rtmpstatus</title>
<para>
The <indexterm><primary>rtmpstatus</primary></indexterm><sgmltag class="element">&lt;rtmpstatus&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: rtmpstatus-->
 component provides a visual indication of the status of the rtmp connection. 
</para>
<para>
This element causes a small indicator "light" to show the status of the connection:</para>
<itemizedlist spacing="compact"><listitem><para>red: no connection</para></listitem><listitem><para>green: working connection</para></listitem></itemizedlist>
<para>
The example below shows this component.
</para>

<example role="live-example">
   <title>Trivial rtmpstatus example</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/video-$1.lzx"/></textobject> 
   </programlisting>
</example>

<para/></section><section><title>videoplayer</title>
<para>
The <indexterm><primary>videoplayer</primary></indexterm><sgmltag class="element">&lt;videoplayer&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: videoplayer-->
 component provides the a graphical representation of the essential controls for handling video and audio: play, stop, pause, seek forward, seek in reverse, and control volume.
</para>
<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
We'll need to spruce this up, of course, when the real video player gets checked in.
</remark></para>


<para/></section></section></section><section><title>Establishing a connection to an RTMP sever</title>
<para>
An <indexterm><primary>rtmpconnection</primary></indexterm><sgmltag class="element">&lt;rtmpconnection&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: rtmpconnection-->
 represents a connection to an application running on an RTMP server, such as the Flash Media Server or Red5, enabling two-way streaming of audio and video. This allows you to broadcast and receive live audio and and or video, as well as recording video from a webcam or audio from a microphone to files on the server. Recorded files may be played back over HTTP (using <indexterm><primary>mediastream</primary></indexterm><sgmltag class="element">&lt;mediastream&gt;</sgmltag> and <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag> classes) or with RTMP to allow seeking within and playback of long files that are impractical to load into memory.
</para>

<para/><section><title>Automatic connection to the RTMP service</title>
<para>
If there is only one rtmpconnection, the video object automatically hooks up to it:</para>
<example role="live-example"><title>automatic connection to RTMP connection</title><programlisting>
   &lt;rtmpconnection src="rtmp://mysite.com/myapp/" autoconnect="true"/&gt;
   &lt;videoview url="myvideo.flv" type="rtmp" autoplay="true"/&gt;
</programlisting></example>
<para/></section><section><title>Choosing between multiple connections</title>
<para>
When an application has more than one rtmp connection active, you chose among them by specifying the URL passed to the <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>.
</para>

<para/></section></section><section><title>Cameras and Microphones</title>
<para>
OpenLaslzo implements the <indexterm><primary>camera</primary></indexterm><sgmltag class="element">&lt;camera&gt;</sgmltag> and <indexterm><primary>microphone</primary></indexterm><sgmltag class="element">&lt;microphone&gt;</sgmltag> objects as subclasses of the <indexterm><primary>mediadevice</primary></indexterm><sgmltag class="element">&lt;mediadevice&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: mediadevice-->
 base class. Most of the methods and attributes that you use to control cameras and microphones are inherited from the base class. In order to ensure the privacy of computer users, camera and microphone objects must explicitly obtain permission from the user before they can be turned on (this ensures that people are not being spied upon without their knowledge). 
</para>
<para/><section><title>Obtaining permission</title>
<para>
When your program instantiates a camera or microphone object, the Flash Player causes a dialogue to be appear on the screen. If the person using the application indicates that permission has been granted, the <indexterm><primary>allowed</primary></indexterm><sgmltag class="attribute">allowed</sgmltag> attribute for every device is set to <literal>true&gt;</literal>
</para>
<para>
Note that it is not possible to allow permission on one device and not another. It's an all-or-nothing proposition. You grant access to all cameras and microphones, or to none.
</para>

<para>Here's an illustration of a representative security dialogue the first time the camera is requested:
</para>

<figure><title>Permission to record dialog</title><mediaobject><imageobject><imagedata fileref="images/AdobeFlashPlayerSettings1.png"/></imageobject></mediaobject></figure>
<para/><section><title>Changing permissions</title>
<para>
You can change the permissions of a running application by using the right-click context menu on the video. Note that the menu may show the name of device <emphasis role="i">drivers</emphasis>, not the actual devices. A typical right-click menu is shown below.
</para>
<figure><title>Permission to record dialogue</title><mediaobject><imageobject><imagedata fileref="images/AdobeFlashPlayerSettings2.png"/></imageobject></mediaobject></figure> 
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
Explain record versus broadcast
Explain privacy policy, capturing and allowed attributes.
</remark></para>
<para/></section></section><section><title>Recording Audio and Video</title>
<para>
Once you have attached a microphone and/or camera to a videoview and received permission from the user to turn them on, the application turns them on by setting <indexterm><primary>capturing</primary></indexterm><sgmltag class="attribute">capturing</sgmltag> to <literal>true</literal>.
</para>
<example role="live-example"><title>Turning microphone and camera on</title><programlisting>
   &lt;rtmpconnection src="rtmp://mysite.com/myapp/" autoconnect="true"/&gt;
   &lt;videoview id="v" url="test.flv" type="rtmp"&gt;
       &lt;camera show="true"/&gt;
       &lt;microphone capturing="true"/&gt;
   &lt;/videoview&gt;
   &lt;!-- a progress indicator bar proportional to stream time--&gt;
   &lt;view bgcolor="black" width="${v.stream.time/180*v.width}"/&gt;
   &lt;!--methods on the stream automatically created by the videoview --&gt;
   &lt;button text="record" onclick="v.stream.record()"/&gt;
   &lt;button text="stop" onclick="v.stream.stop()"/&gt;
</programlisting></example>
<para/><section><title>More than one camera or microphone attached to a view</title>
<para>You can have more than one camera associated with a videoview. The following example shows how to use the <indexterm><primary>index</primary></indexterm><sgmltag class="attribute">index</sgmltag> attribute of the of the camera object to control which camera is in use:</para>
<example role="live-example"><title>Selecting which camera to use</title><programlisting>
   &lt;rtmpconnection src="rtmp://mysite.com/myapp/" autoconnect="true"/&gt;
   &lt;videoview x="10" id="v" url="test.flv" type="rtmp"&gt;
       &lt;camera show="true" index="2"/&gt; 
       &lt;microphone name="mic" capturing="false"/&gt;    
   &lt;/videoview&gt;
   &lt;view bgcolor="green" width="10" height="${v.mic.level/100*v.height}"/&gt;
</programlisting></example>

<para>
</para>
<para/></section></section></section><section><title>Streaming Files over HTTP</title>
<para>
</para>
<para>
To show a video from http server and play it automatically:</para>
<example role="live-example"><title>Video Display over HTTP</title><programlisting>
&lt;videoview url="http://mysite.com/myvideo.flv" autoplay="true"/&gt;
&lt;videoview url="myvideo.flv" autoplay="true"/&gt;  
</programlisting></example>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
Using cameras and microphones on HTTP: mirror only.  For example, motion-detection, mirror playback, etc.
</remark></para>
<para/></section><section><title>Bidirectional interaction over Real Time Media Protocol (RTMP)</title>
<para>
The Real Time Media Protocol, RTMP, is designed to handle efficiently high speed communication of audio and video information between a client application and a media server.
</para>

<para/><section><title>Views with attached swf video resources</title>
<para>
<indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>s do not accept files in .swf format. To play a movie clip in .swf file format, use a <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: view-->
, not a <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>. You would would attach the video as a resource to the view, as explained in the media chapter.
</para>


<para/></section></section><section><title>Installing Video Cameras and Servers</title>
<para>
Here are some general guidelines for setting up video cameras and servers for OpenLaszlo applications.  You should of course consult the documentation for the individual servers too.
</para>
<para/><section><title>Flash Media Server 2</title>
<para>
Install the Flash Media Server in:</para>
<programlisting>
C:\Program Files\Macromedia\Flash Media Server 2\
</programlisting>
<para>
Create the test application directly and subdirectories:
</para>
<programlisting>
C:\Program Files\Macromedia\Flash Media Server 2\applications\test
C:\Program Files\Macromedia\Flash Media Server 2\applications\test\streams
C:\Program Files\Macromedia\Flash Media Server 2\applications\test\streams\instance1
</programlisting>
<para>
Copy the flash video test files into the test\streams\instance1 directory, from:
</para>
<programlisting>
$LZ_HOME/test/video/videos/*.flv
</programlisting>
<para>
If the media server fails to start on Windows, check to make sure
that Emacs or another text editor did not change the ownership and
permission of the configuration files. You may have to, for example, change permission on some of
the Flash Media Server xml configuration files
because the Flash server (which ran as another user) could not read
them and would not start.
</para>
<para>
If the media server fails to work on Linux, make sure that you have
the shared libraries from Firefox installed in /usr/lib. If you're
missing the libraries, the server will run and appear to be working,
and the admin interface actually will work, but none of the
streaming video works. When you run the flash server startup
command ("./server start"), it will complain about missing
libraries. If this happens, download Firefox and copy all its shared libraries
to /usr/lib.
</para>
<programlisting>
http://livedocs.macromedia.com/fms/2/docs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=LiveDocs_Parts&amp;file=00000009.html
</programlisting>
<para/></section><section><title>Red5</title>
<para>
OpenLaszlo applications can communicate with the Red5 media server, an open source Flash media server that uses rtmp. For more on Red5, see their <ulink url="http://osflash.org/red5">website</ulink>.
</para>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
Red5 setup instructions: TBD
</remark></para>
<para/></section><section><title>Logitech QuickCam</title>
<para>
There is a QuickCam "Logitech Process Monitor" server (LvPrcSrv.exe)
that interferes with Cygwin, the one that substitutes computer
generated characters for the video stream, who track your motion and
facial expressions. It causes cygwin to fail forking new
processes. This manifests itself by build processes mysteriously
failing, and Emacs having problem forking sub-processes in 
shell windows. You have to disable the server to make Cygwin work
again.
</para>
<programlisting>
http://blog.gmane.org/gmane.os.cygwin.talk
http://www.cygwin.com/ml/cygwin/2006-06/msg00641.html
</programlisting>

 




<para/><section><title>Adding playback controls to a videoview</title>
<para>You control playing and stopping of the videostream by using the <indexterm><primary><literal>play()</literal></primary></indexterm><methodname>play()</methodname> and <indexterm><primary><literal>stop()</literal></primary></indexterm><methodname>stop()</methodname> methods on the stream.


</para>
<example role="live-example"><title>Adding playback controls on a stream</title><programlisting>
  &lt;rtmpconnection src="rtmp://mysite.com/myapp/" autoconnect="true"/&gt;
  &lt;videoview id="v" url="http://mysite.com/myvideo.flv"/&gt;
  &lt;!--should stream be streamname?--&gt;
  &lt;button text="play" onclick="v.stream.play()"/&gt;
  &lt;button text="stop" onclick="v.stream.stop()"/&gt;
</programlisting></example>



<para/></section><section><title>A Multi-party application</title>
<para>
In the example below, two videoviews are communicating with each other through a media server located at 127.0.0.1/test over the RTMP protocol. Each view specifies an URL to the other.
</para>
<example role="live-example"><title>A simple multi-party video application</title><programlisting>
   &lt;rtmpconnection src="rtmp://127.0.0.1/test" autoconnect="true"/&gt;   
   &lt;simplelayout/&gt;
   &lt;rtmpstatus/&gt;
   &lt;view layout="axis:x; inset:10; spacing:10"&gt;
       &lt;videoview id="live" url="me" type="rtmp" oninit="this.stream.broadcast()" &gt;
           &lt;camera show="true"/&gt;
       &lt;/videoview&gt;
       &lt;videoview id="vp" url="you" type="rtmp" oninit="this.stream.play()"/&gt;
   &lt;/view&gt;
</programlisting></example>
<para/></section></section><section><title>Control of muting, recording, and broadcasting</title>
<para>

</para>
<example role="live-example"><title>control of Muting, Recording, Broadcasting</title><programlisting>
&lt;canvas debug="true"&gt;

    &lt;rtmpconnection
        src="rtmp://127.0.0.1/test" 
        autoconnect="true"
    /&gt;
    &lt;mediastream name="s1" 
        type="rtmp"
    /&gt;
    &lt;mediastream name="s2" 
        type="rtmp"
    /&gt;
    &lt;simplelayout/&gt;
    
    &lt;text multiline="true" width="100%"&gt;
    Instructions:&lt;br/&gt;
    1. Either run a flash media server on localhost (127.0.0.1), or ssh tunnel to a media server at a known host&lt;br/&gt;
    2. Press the broadcast button. (Grant camera access permission if needed.)
       The button should change to say "stop broadcasting"&lt;br/&gt;
    3. Press the receive button. You should be receiving audio and video from yourself and the
       button should say "stop receiving."&lt;br/&gt;
    4. Try out the audio and video mute buttons. The video mute should freeze the received picture.
       The audio mute should silence the received sound.&lt;br/&gt;
    5. Press the receive button. The received video should freeze and the button should say "stop receiving".&lt;br/&gt;
    6. Press the receive button again. The video should resume and the button should say "receiving".&lt;br/&gt;
    7. Press the broadcast button. The received video should freeze and the button should say "broadcast".&lt;/br&gt;
    &lt;/br&gt;
    The indicator below shows the status of the video connection. 
       
    &lt;/text&gt;
    &lt;rtmpstatus/&gt;
    &lt;view
        layout="axis:x; inset:10; spacing:10"
    &gt;
        &lt;view id="v1" 
            layout="axis:y; spacing:4"
        &gt;
            &lt;videoview id="live" 
                type="rtmp" 
                stream="$once{canvas.s1}"
            &gt;
                &lt;camera id="cam" 
                    show="false"
                /&gt;
                &lt;microphone id="mic" capturing="false"/&gt;
                
            &lt;/videoview&gt;
            &lt;edittext name="username"&gt;YourName&lt;/edittext&gt;
            &lt;button
                text="broadcast"
            &gt;
                &lt;attribute
                    name="text" 
                    value="${(s1.broadcasting == false) ? 'broadcast' : 'stop broadcasting'}"
                /&gt;
                &lt;handler name="onclick"&gt;&lt;![CDATA[
                    if (cam.show == false) {
                        live.stream.setAttribute('url', parent.username.text);
                        live.stream.broadcast();
                        cam.setAttribute('show', true);
                    } else {
                        live.stream.stop();
                        cam.setAttribute('show', false);
                    }
                  ]]&gt;
                &lt;/handler&gt;
            &lt;/button&gt;
            
            &lt;checkbox onvalue="s1.setAttribute('muteaudio', value)"&gt;Mute Audio&lt;/checkbox&gt;
            &lt;checkbox onvalue="s1.setAttribute('mutevideo', value)"&gt;Mute Video&lt;/checkbox&gt;
        &lt;/view&gt;
        &lt;view id="v2" 
            layout="axis:y; spacing:4"
        &gt;
            &lt;videoview name="vid" 
                type="rtmp" 
                stream="$once{canvas.s2}"
            /&gt;
            &lt;edittext name="username"&gt;YourName&lt;/edittext&gt;
            &lt;button
                text="${s2.playing ? 'stop receiving' : 'receive'}"
                onclick="s2.setAttribute('url', parent.username.text);
                         if (s2.playing) s2.stop(); else s2.play();"
            /&gt;
        &lt;/view&gt;
    &lt;/view&gt;

&lt;/canvas&gt;
</programlisting></example>

<para/></section></section><section><title>Comparison of Views and Videoviews for Rendering Audio and Video</title>
<para>
Audio and video files that are attached as resources to regular <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag>s are not described in this chapter.  However, here is a brief discussion of how they differ in terms of designing applications.
</para>
<para>
If you attach a resource to a view it's compiled into the swf, making the initial swf size larger, but then when the swf is fully loaded it is available to play instantaneously when needed. 
</para>

<para>
If you stream the mp3 it will usually be easier on the memory, but timing will be less reliable, as the player has to buffer the downloaded file. For example, consider how you might build a video editor. If you had two video clips on a server and you wanted to use two video views to overlay on top of one another so you could create a transition from one to the other (creating a virtual video editor), you could monitor the first video so you know when to start the second. However, the appearance of this transition would be unpredictable. If you were tell the second video to play while fading from one video view to another, the amount of time before the second video were to play would depend on the buffer amount and bandwidth, not on time, so you would not be able to pre-load it and pause it in order to control the precise moment for the second video to start playing. 
</para>

<para>
So you'd use the first approach, using files transcoded to .swf and attached as resources to <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag> for mouse clicks and other places where precise timing is important and you'd use the second approach, streaming to <indexterm><primary>videoview</primary></indexterm><sgmltag class="element">&lt;videoview&gt;</sgmltag>s for an mp3 or video player where the size of the file and memory efficiency becomes important. 
</para>

<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
Do I say anything about proxies?
Do I say anything about security?
</remark></para>

<para/></section></chapter>
