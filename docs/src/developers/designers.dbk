<chapter id="designers">

<title>OpenLaszlo for Designers</title>

<para/><section><title>Overview</title>
<para>
This chapter discusses the OpenLaszlo platform from the point of view of the designer. 
However your team is set up, somebody is responsible for the aesthetic experience of the application you're building. This chapter is for them.

We'll discuss OpenLaszlo's ability to support designers and engineers in building innovative Internet applications.
 </para>
<para/><section><title>Learning to Think Laszlorificly</title>
<!-- change link for tutorials per LPP-4923, IORIO 18 oct 2007 -->
<para>
With OpenLaszlo technology, web application designers are freed from the familiar limitations of static, linear, page-based task flow. 
Your visions of dynamic, data-driven, concise and intelligent UI can become a reality. But you may need to change your thinking
a little bit, because things are possible with OpenLaszlo that aren't possible with most other technologies.  And while it is not necessary for you to learn to write code in order to be an effective designer on an OpenLaszlo project, 
a familiarity with the basic structure and features of the LZX language will help you understand how to approach your task. 
So we recommend that you at least work through a few of the <ulink url="../developers/" type="laszlo-dguide">tutorials</ulink>.
</para>

<para>
Some thoughts on how OpenLaszlo is different as a web design technology:</para>
   
<itemizedlist spacing="compact"><listitem><para>You have complete control of the end user experience. Most web design technologies cause the application to look different depending on the OS and browser used to deliver it. This is often a design challenge that can lead to unwanted compromises. With OpenLaszlo, especially when you compile to SWF, you have control of every pixel and gesture.</para></listitem><listitem><para>Fast prototyping: OpenLaszlo offers a complete set of UI components  that    includes UI controls supported by HTML (radio buttons,  checkboxes,  etc.)    along with standard desktop UI (windows, menus, tree control,  tabs)  and    more. These components in the context of a concise declarative  XML for    application layout and event-based interaction login allow for  high    productivity.   </para></listitem><listitem><para>Object oriented programming: You can organically move from  prototyping    to serious application development though Laszlo's powerful  class    declarations that support full inheritance. </para></listitem><listitem><para>In-page transactions: OpenLaszlo applications do not require  a "page    refresh" when you get data from the server. This allows for  data  to be    delivered to the user in a way that is integrated seamlessly  into  the UI.    It also allows for "ambient" data â€”data updates asynchronously  and is    provided in context.</para></listitem></itemizedlist>
<para>
When approaching a project, think about desktop applications that you were able to use 
effortlessly and intuitively without ever picking up a manual. Recall a beautiful UI from some Flash 
site and imagine it being successfully data-driven, scalable and easily modified. Spend some time walking around the problem. 
Look at it sideways. Slice it into cross sections, rearrange the pieces and then use those perceptions to drive your design. 
</para>

<para/></section></section><section><title>Continuous interaction instead of page refresh</title>

<para>
Consider the task or tasks to be accomplished by the end-user, and the flow to completion. 
One of the key benefits of using OpenLaszlo to build your project is its strength in consolidating information through interaction 
and presentation. A process that might have taken 20 html pages to accomplish for the very patient user, might now be 
designed to occur within the framework of a single "page" with small bits of information elegantly surfaced as needed. 
This ability to present information in a useful, contextual manner, regardless of complexity, is the foundation of 
a successful application. 
</para>

<figure><title>Continuous interaction</title><mediaobject><imageobject><imagedata fileref="images/design_sec2_ill.jpg"/></imageobject></mediaobject></figure>

<para/></section><section><title>Design Process</title>
<para>
Design processes are unique to the experience and culture of a team. Overlapping skill sets 
between designers who write code and engineers with design sensibility mean that there are often no strict divisions of labor.
Yet all teams need to spend time dissecting the problem, brainstorming, and arriving 
at a unanimous understanding of, and agreement on the solution. </para>
<para>
These are some time-prooven steps in the process: </para>
<orderedlist spacing="compact"><listitem><para><indexterm significance="preferred"><primary>Wire-frames</primary></indexterm><glossterm>Wire-frames</glossterm>. Wire-frame examples of layouts will help begin the visualization of the pieces as a whole.</para>
 These are basic definitions of placement for the UI; often including navigation, branding and content. </listitem><listitem><para><indexterm significance="preferred"><primary>Storyboards</primary></indexterm><glossterm>Storyboards</glossterm>. Once a structure has been defined, storyboards of both general and detailed task flow help to refine and 
    communicate the vision of interactivity. Storyboards can begin as simple flowcharts and evolve into pictures of each state of each element. 
	The complexity of the problem and solution will likely dictate how obsessive the  
 storyboarding needs to be.</para></listitem><listitem><para><indexterm significance="preferred"><primary>Animations</primary></indexterm><glossterm>Animations</glossterm>. Simple, linear animations of functionality and process can help both engineers and designers evaluate 
  and experiment with interactive elements.</para></listitem><listitem><para><indexterm significance="preferred"><primary>Engineering prototypes</primary></indexterm><glossterm>Engineering prototypes</glossterm>.
 Once all (or some subset) of these are mapped and agreed upon, the engineering team  
 can begin to block out the framework using place-holder artwork or primitive shapes in LZX.</para></listitem></orderedlist>

<figure><title>Design process</title><mediaobject><imageobject><imagedata fileref="images/design_sec3_ill.jpg"/></imageobject></mediaobject></figure>
 
<para/></section><section><title>
How Does It Look?
</title>
<para>
While engineering is busy developing the application's infrastructure, designers can resume focus on the "look" of the application. 
 Some designers prefer to have a fully flushed-out
 design before any coding starts, but the reality of deadlines and the likelihood of iterative modification means that visual 
design and production 
will likely happen in parallel to coding efforts. Elemental design decisions need to be made. 
Are your users going to be more comfortable with traditional UI elements, or is there room to experiment with new methods of 
representation, interaction or display? Comps for the look and feel should be designed in the application you are most comfortable
 with. </para>
<para>Bitmap and vector tools are equally viable, and resources of either format can be leveraged when producing art resources.</para>
 
<para/></section><section><title>
Using Resources
</title>
<para>
Resources are the visual assets used by LZX code to construct the look of an application. LZX supports 
numerous image formats, including bitmap (GIF, JPEG, PNG) and vector (SWF) files. Animations and video (in the form of multi-frame 
SWF files) as well as audio (MP3 files) can also be integrated into applications. Resources are often constructed of multiple
 pieces assembled to create various UI and their states (up, down, rollover, etc). To enable these states LZX provides multi-frame 
resources. It is also possible to use a single resource and affect its look via code (eg: tinted, resized, repositioned, etc.).
In the LZX language, color, tint, brightness and opacity of resources can be modified programmatically. 
</para>

<figure><title>Using resources</title><mediaobject><imageobject><imagedata fileref="images/design_sec5_ill.jpg"/></imageobject></mediaobject></figure>

<para/></section><section><title>
Bitmap vs. Vector-Based Resource Files
</title>
<para>
The decision to work with bitmap or vector files is dictated by the design and the runtime to which you're compiling. If many complex, fixed-size objects, 
such as gradients, shadows and/or alpha elements are used, bitmap resources are more appropriate. Vector files, though generally 
physically smaller (file size), require more processing power to draw. The other major consideration is whether the design requires 
the resizing of resources. If a resource must scale, you should use a vector file, as it will do so without degrading. Scaling 
bitmap files to a size larger than the original will cause interpolation and image degradation.
</para>
<para condition="swf"> In general SWF files are the most 
flexible in applications compiled to run in the Flash player. Although the obvious tool for creating SWF files is Macromedia Flash, many vector-based applications, such as Adobe 
Illustrator allow export of files to this format. If the option is given, SWF files should be saved as version 5.0. The exporter 
for Illustrator 10 does not provide an option, but uses 5.0 by default.</para>
<note><para>With the exception of the "stop" command, Flash ActionScript should not 
be used in SWF files included in LZX.</para></note>

<para/></section><section><title>
Fonts
</title>
<para>
Your options with regard to fonts differ greatly depending on whether the application will be compiled to SWF or DHTML. In applications compiled to SWF, you have the option to include virtually whatever font you like within the application. Applications that are to be compiled to DHTML, on the other hand, are limited to those fonts that are commonly found in all runtime environments (that is, all supported browsers and operating systems).
</para>
<para condition="swf">
OpenLaszlo supports all True Type Format (TTF) fonts. In applications compiled to SWF, embedded fonts ensure that the appearance of type within your application will be 
consistent across all browsers and operating systems. </para>
 
<para>The default font in OpenLaszlo applications is the Ultra Pixel Font "Verity". The Flash 
Plugin (which is responsible for rendering LZX files) displays small outline fonts poorly so designers frequently use bitmap 
(aka pixel) fonts at small sizes (usually less than 12pt). Bitmap fonts circumvent the rendering problem by eliminating 
anti-aliasing. Though quite legible, traditional bitmap fonts lose the nuances of traditional typography. Ultra Pixel Fonts employ
 fixed anti-aliasing, which maximizes legibility while retaining smooth characters and distinct form. Verity was designed to mimic
 the Bitstream outline font "Vera" (also included in the OpenLaszlo Server).
</para>

<figure><title>Fonts</title><mediaobject><imageobject><imagedata fileref="images/design_sec7_ill.jpg"/></imageobject></mediaobject></figure>

<para> At larger sizes, Vera can be seamlessly integrated with Verity. 
Bitmap fonts such as Verity only render correctly when specified at 8pt. The Verity TTF file (9pt or 11pt) must be used to 
change size. Verity contains an unaccented subset of characters; for the full Windows Western Unicode font set, use VerityPlus,
 which includes accented European characters. The Bitstream font Vera was released as an open source font for the Gnome Project. 
The Ultra Pixel font Verity was built by Christopher Lowery using technology produced by Truth in Design.</para>
<!-- fix broken link per LPP-4896, IORIO 15 oct 2007 -->
<!-- change title per LPP-4804, IORIO 15 oct 2007 -->
<para>
For more on fonts, see <ulink url="../developers/fonts.html" type="laszlo-dguide">OpenLaszlo Application Developer's Guide</ulink>.</para>
 
<para/></section><section><title>OpenLaszlo Components Design Guide</title>
<para>For details on designing user-interface components in OpenLaszlo, see
<ulink url="../component-design/index.html">Laszlo Components Design Guide</ulink>.
</para>







   





<para/></section></chapter>