<chapter id="dynamic-databinding">
<title>Dynamic Databinding with Procedural (DOM) APIs</title>

<para>
The procedural (DOM) APIs for working with datasets allow you to build and manipulate datasets at runtime using DOM conventions. There are three kinds of objects: the absract class LzDataNode, and LzDataElement and LzTextNode which are derived from it.
</para>
<para>In this chapter, we look at the attributes and methods on each of these classes, and then look at short examples that show how to use them to create and manipulate dataset objects. 
</para>
<section><title>
Introduction and Philosphy of the DOM APIs</title>
<para>
</para>
</section>
<section>
<title>The LzDataNode object</title>
<para>
</para>
<para>
-- attributes
-- methods
</para>

</section>

<section>
<title>The LzDataElement object</title>
<para>An LzDataElement corresponds to a single XML node in a dataset. As such, the LzDataElement is a subclass of LzDataNode, and inherits all of that class's methods and attributes.
</para>
LzDataElements have properties and methods that let you:
                  read and change the data
                  refer to parent or child nodes
<para>
-- attributes
-- methods
</para>

</section>
<section>
The LzDataText object
<para>
LzDataText represents a text node in an XML node in a dataset. Recall that in XML, text is 
</para>
<para>
-- attributes
-- methods
</para>
</section>
<section>
<title>
Datapointer Basics</title>

<para>
This example shows the basic usage of the datapointer API to manipulate nodes. 
</para>
<para>
To show the value of the first name of the first node, inside the onclick event handler for the first button, the setAttribute() method of the dp datapointer sets the xpath attribute to the first person node in the dataset, ds:/addressbook/contacts/person[1]: 
</para>
<para>
&lt;button text="Show value of first name of the first &lt;person/&gt; node"&gt;
&lt;handler name="onclick"&gt;
dp.setAttribute("xpath","ds:/addressbook/contacts/person[1]");
&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
The onclick event handler next writes out to the Debug window the firstname attribute. It uses getAttr() and pass firstname as the one argument to this function, to retrieve the firstname attribute from the dataset: 
</para>
<para>
Debug.write(dp.p.getAttr('firstname'));
</para>
<para>
To show the full name of the owner of the address book, inside the onclick event handler for the second button, the setAttribute() method of the dp datapointer to set the xpath attribute to the owner of the addressbook in the dataset, 
</para>
<para>
ds:/addressbook/metainformation/addressbookowner[1]/: 
</para>
<para>
&lt;button text="Show the full name of the owner of the address book."&gt;
&lt;handler name="onclick"&gt;
</para>
<para> dp.setAttribute("xpath","ds:/addressbook/metainformation/addressbookowner[1]/");
&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>  
The onlclick handler next traces out to the Debug window the full name (both firstname and lastname attributes) of the address book owner: 
</para>
<para>
Debug.write(dp.p.getAttr('firstname'),dp.p.getAttr('lastname'));
</para>
<para>
To show the total number of nodes, the onclick event handler for the third button, uses the setAttribute() method of the dp datapointer to set the xpath attribute to the contacts array in the dataset, ds:/addressbook/contacts: 
</para>
<para>
&lt;button text="Show total of &lt;person/&gt; nodes?"&gt;
&lt;handler name="onclick"&gt;
dp.setAttribute("xpath","ds:/addressbook/contacts");
&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
The onclick handler next traces out to the Debug window the length of this array. Note that in datasets, nodes have an array attribute called childNodes, that is an array of the child nodes for that given node. Note also that arrays have a length attribute: 
</para>
<para>
      Debug.write(dp.p.childNodes.length);
</para>
<para> 
To show the value of the last name of the second node, the onclick event handler for the fourth button uses the setAttribute() method of the dp datapointer to set the xpath attribute to the 2nd person node within the dataset, ds:/addressbook/contacts/person[2]: 
</para>
<para>
&lt;button text="Show the value of the lastname of the 2nd node"&gt;
&lt;handler name="onclick"&gt;
dp.setAttribute("xpath","ds:/addressbook/contacts/person[2]");
&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
The onclick event handler next writes to the Debug window the firstname attribute: 
</para>
<para>
      Debug.write(dp.p.getAttr('firstname'));
</para>
<para>
To capitalize the first name of the of 2nd node, the onclick event handler for the fifth button, uses the setAttribute() method of the dp datapointer to set the xpath attribute to the second person node in the dataset, ds:/addressbook/contacts/person[2]: 
</para>
<para>
&lt;button text="Capitalize the firstname of the 2nd node"&gt;
&lt;handler name="onclick"&gt;
dp.setAttribute("xpath","ds:/addressbook/contacts/person[2]");
&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
Next, let's capitalize the firstname attribute of the node that our datapointer is currently pointing at (from the previous step). Use setAttr() to change the data in the dataset. Use toUpperCase() (a method of the String class) to capitalize the string: 
</para>
<para>
      dp.p.setAttr('firstname',dp.p.getAttr('firstname').toUpperCase()) ;
</para>
<para>
Last, we trace the firstname attribute to the Debug window, to verify that it has been capitalized: 
</para>
<para>
      Debug.write("AFTER ",dp.p.getAttr('firstname'));
</para>
<example role="live-example">
   <title>Datapointer basics</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/datapointer_basics.lzx"/></textobject> 
   </programlisting>
</example>
</section>
<section><title>Accessing LzDataElements</title>
<para>
This example shows the different ways to access an LzDataElement (data within a dataset). 
</para>
<para>
Get LzDataElement using a Datapointer 
  Inside the onclick event handler for the first button, instantiate a new LzDatapointer and name it dp: 
</para>
<para>
&lt;button&gt;Get LzDataElement via datapointer
&lt;handler name="onclick"&gt;
 var dp = new LzDatapointer();

&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
  After instantiating the datapointer, using setAttribute(), set its xpath attribute to point at the contacts node within the ds dataset: 
</para>
<para>
dp.setAttribute("xpath","ds:/addressbook/contacts");
</para>
<para>
  Now that the dp datapointer is pointing at the appropriate node, trace the p attribute of the dp datapointer to the Debug window. Note that the p attribute is the attribute of the datapointer that points at the actual data, which is in this case, an array of contact nodes: 
</para>
<para>
Debug.write(dp.p);
Get LzDataElement  using a datapath 
  Inside the onclick event handler for the second button, trace out to the Debug window the p attribute of the datapath object of the mylist list: 
</para>
<para>
&lt;button&gt;Get LzDataElement via datapath
&lt;handler name="onclick"&gt;
Debug.write(mylist.datapath.p);
&lt;/handler&gt;
&lt;/button&gt; 
</para>
</section>
<section>
<title>
Creating A New LzDataElement In JavaScript </title>
<para>
  The onclick event handler for the third button, instantiates a new LzDataElement and names it newNode.  This is passed into the constructor contacts as the first argument (what type of node to create), null as the second argument (the text for the node [text that is between the opening and closing tag]), and null as the third argument (node attributes): 
</para>
<para>
&lt;button&gt;Create a new LzDataElement in JavaScript
&lt;handler name="onclick"&gt;
var newNode = new LzDataElement('contacts', null, null);

&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
After instantiating the LzDataElement, on the next line of code (still inside the onclick event handler) it traces out newNode to the Debug window: 
</para>
<para>
Debug.write(newNode); 
</para>
<example role="live-example">
   <title>Different techniques for accessing LzDataElements</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-accessing_lzdataelement.lzx"/></textobject> 
   </programlisting>
</example>

</section>
<section>
<title>
Creating a Node using a datapointer</title>
<para>
This example shows how to indirectly create a data-bound item by creating a new node in the source data using the datapointer API. 
</para>
<para>
To print the total number of person nodes, the onclick event handler for the first button uses the setAttribute() method of the dp datapointer to set the xpath attribute to the contacts array in the dataset, ds:/addressbook/contacts: 
</para>
<para>
&lt;button text="Print total person nodes"&gt;
&lt;handler name="onclick"&gt;
dp.setAttribute("xpath","ds:/addressbook/contacts");

&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
The onclick event handler next traces out to the Debug window the length of this array. Recall that in datasets, nodes have an array attribute called childNodes, that is an array of the child nodes for that given node. Arrays have a length property, so the length of the array is equal to the number of child nodes: 
</para>
<para>
      Debug.write("total child nodes "+dp.p.childNodes.length);
</para>
<para>
Inside the onclick event handler for the Add fflintstone@cartoon.com button, use setAttribute() to set the xpath to point at the contacts array node within the dataset: 
</para>
<para>
&lt;button text="Add 'fflinestone@cartoon.com' item"&gt;
&lt;handler name="onclick"&gt;
dp.setAttribute("xpath","ds:/addressbook/contacts");

&lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
The addNode() method on the dp datapointer add a new person node to the contacts array. The first argument to the addNode() method is the type of node to create (in this case, a person node). The second argument is the text for the node (the text contained between the opening and closing tag). The third argument is an array of node attributes: 
</para>
<para>
dp.addNode('person', 'Fred Flinestone', {'email':'fflinestone@cartoon.com'});
</para>
<example role="live-example">
   <title>Datapointer basics</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/datapointer_creating_node.lzx"/></textobject> 
   </programlisting>
</example>
</section> 
<section><title>
Destroying a Node</title>
<para>
This example shows an approach of removing a replicated item by destroying the node (the data within the dataset) that it is pointing to. When you modify any data in a dataset, any UI components that are data bound to that data are automatically updated with the new data. So essentially, you work with the data layer and the UI layer will automatically be updated. 
</para>
<para>
The onclick event handler for the Destroy the selected node button, instantiates an LzDatapointer and name it dp: 
</para>
<para>
&lt;button text="Destroy the selected node"&gt;
&lt;handler name="onclick"&gt;
var dp = new LzDatapointer();
</para>
<para>
Right after the instantiation of the LzDatapointer (still inside the onclick event handler) we create a variable called selectedIndex and set it equal to mylist.value -1 (mylist.value is the selected items offset/index within the list): 
</para>
<para>
var selectedIndex = mylist.value - 1; //xpath is 1-based but scripts is 0-based
</para>
<para>
On the next line, code out an if statement that checks to see if selectedIndex is a valid number (it might be undefined if there is nothing selected in the list). We use !isNaN() (not, not a number) to achieve this: 
</para>
<para>
if (!isNaN(selectedIndex)){

}
</para>
<para>
Inside the if block, a local variable called selectedNode is crreated and, using the nodes array attribute of the mylist list, gets a reference to the item in the list (currently, we have the index of what item in the list is selected, so lets get the actual data at that index): 
</para>
<para>
var selectedNode = mylist.myitem.nodes[selectedIndex];
</para>
<para>
As the next line of code, we point the dp datapointer at the node that we now have a reference to (selectedNode). Use setPointer() to achieve this: 
</para>
<para>
dp.setPointer(selectedNode);
</para>
<para>
Now that the datapointer is pointing at the data that we want to destroy, lets remove that data from the dataset: 
</para>
<para>
dp.deleteNode();
</para>

</section>
<section>
<title>
Pretty Printer</title>
<para>
This example shows usage of the "pretty printer" utility class and usage of a datapointer to manipulate a dataset at runtime. The pretty printer is used for debugging. It provides a clean, visual representation of xml data. This can be very useful when adding and deleting nodes (especially when the xml data is very complex). 
</para>
<para>
After the include tag at the top of the canvas, code out a datapointer tag with the name from and a datapath of template_uk:/address: 
</para>
<para>
&lt;datapointer name="from" xpath="template_uk:/address" /&gt; 
  Create another datapointer tag with the name to and a datapath of ds_complete:/contacts/contact[1]: 
</para>
<para>
&lt;datapointer name="to" xpath="ds_complete:/contacts/contact[1]" /&gt; 
</para>
<para>  
Next, we create an addresscopier node: 
</para>
<para>
&lt;node name="addresscopier"&gt;

&lt;/node&gt; 
</para>
<para>  
Inside this node, create three datapointers, with namesfrom_uk, from_us and to. Set their xpath atributes to template_uk:/address, template_us:/address, and ds_complete:/contacts, respectively: 
</para>
<para>
&lt;datapointer name="from_uk" xpath="template_uk:/address" /&gt;
&lt;datapointer name="from_us" xpath="template_us:/address" /&gt;
&lt;datapointer name="to" xpath="ds_complete:/contacts" /&gt; 
</para>
<para>
After the instantiation of the three datapointers, we create a copyAddressNodes method: 
</para>
<para>
&lt;method name="copyAddressNodes"&gt;
&lt;/method&gt; 
</para>
<para>
The first line inside the method calls the selectChild() method on the to datapointer:
</para>
<para>
to.selectChild(); 
  Next, create a do-while loop and set the condition for the loop to to.selectNext(): 

do {

} while ( to.selectNext() ); 
</para>
<para>
  Inside the do-while loop, code out an if statement and do an xpath query on the to datapointer and search for the string us: 
</para>
<para>
if ( to.xpathQuery("@location") == "us" ) {
to.addNodeFromPointer( from_us );
} 
</para>
<para>
An else-if statement and xpath query on the  datapointer searches for the string  uk: 

else if ( to.xpathQuery("@location") == " uk" ) {
to.addNodeFromPointer( from_uk );
} 
</para>
<para>
  Inside the onclick event handler for the Write Dataset button, using the prettyPrint() method on the pp prettyprinter object, print to the Debug window the xml data: 
</para>
<para>
&lt;button&gt;Write Dataset
&lt;handler name="onclick"&gt;
 pp.prettyPrint();
 &lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
The onclick event handler for the copy one button makes a call to the addNodeFromPointer method on the to datapointer and passes into it as its only argument to from datapointer: 
</para>
<para>
&lt;button&gt;Copy one
&lt;handler name="onclick"&gt;
 to.addNodeFromPointer( from );
 &lt;/handler&gt;
&lt;/button&gt; 
</para>
<para>
Lastly, it calls the copyAddressNodes() method in the addresscopier node, to make a copy of the address nodes: 
</para>
<para>
&lt;button&gt;Copy all
&lt;handler name="onclick"&gt;
 addresscopier.copyAddressNodes();
  &lt;/handler&gt;
&lt;/button&gt;
</para>
<example role="live-example">
   <title>Datapointer basics</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-prettyprinter.lzx"/></textobject> 
   </programlisting>
</example>
</section>
</chapter>
