<chapter id="cookies">

<title>Cookies and Sessions</title>
 <!-- remove commented out sample code that was ignored by the build. IORIO 20 nov 2007 -->

<para/><section><title>Using cookies</title>

<para>Because HTTP is stateless, each request to the server is seen as an
independent visit by an anonymous client. Cookies are used to maintain session
state by uniquely identifying clients between requests. Servers can then use the
session to save application data, track users, deliver personalized information,
etc. Cookies are received by HTTP servers through the <literal>Cookie</literal> request
header and set using the <literal>Set-Cookie</literal> response header.</para>

<para>For security reasons, only cookies for a requested domain are sent up to the
server. A great reference for cookie information is the Unofficial Cookie FAQ at
<ulink url="http://www.cookiecentral.com/faq/">cookiecentral.com</ulink>.</para>


<para/></section><section><title>Proxying request and response headers</title>

<para>The OpenLaszlo Server proxies client request headers and backend server response
headers. Because clients always talk to the server, only headers in the OpenLaszlo Server domain
will be sent. If a client makes a request to a server that has a different
domain than the server, incorrect headers will be forwarded.</para>

<para>For example, assume your OpenLaszlo Server is hosted in the myhost.com domain. If your
application makes a request to a server that lives in myhost.com, then the right
headers will be sent. If the server is hosted in anotherhost.com, then the
client's myhost.com headers will be incorrectly proxied. </para>

<para/></section><section><title>Lifecycle of a data request</title>

<para>As previously mentioned, all http data requests have to go through the
OpenLaszlo Server. When the server receives a request, it proxies the request headers (like the
<literal>Cookie</literal> header, if found) and makes a request to the destination server
on behalf of the application. When the backend data is returned, the server proxies
the response headers (like the <literal>Set-Cookie</literal> header, if found) and compiles
the XML into bytecode. Once the bytecode is ready, it is sent down to the
application.</para>

<figure><title>Data request lifecycle</title><mediaobject><imageobject><imagedata fileref="images/cookies.png"/></imageobject></mediaobject></figure>

<para/></section><section><title>Things to consider when deploying sessioned applications</title>

<para>Things to keep in mind when building sessioned OpenLaszlo apps:</para>

<itemizedlist spacing="compact"><listitem><para>Make sure your authentication server's host has the same domain as your
    OpenLaszlo Server</para></listitem><listitem><para>Because your OpenLaszlo application lives in the Flash runtime, there's no
    way to directly access your browser's cookies. A trick you can use is to
    make a data request to a JSP (or server) that responds with the cookie
    embedded in body of the response. See the next section for an example of how
    to do this.</para></listitem></itemizedlist>

<para/></section><section><title>Getting at cookies from LZX</title>

<para>This section demonstrates how an OpenLaszlo application can get at its cookie by
calling a JSP. The JSP will parse and display the cookie value from the
application and return the data to the application as XML. The application will
then display the information using a text datapath.</para>

<informalexample><programlisting>
&lt;canvas width="500" height="200"&gt;

    &lt;dataset name="request" type="http" src="cookie.jsp" request="true" /&gt;

    &lt;view x="20" y="20" layout="spacing: 5" &gt;
        &lt;text&gt;&lt;b&gt;cookie: &lt;/b&gt;&lt;/text&gt;
        &lt;text resize="true" selectable="true" multiline="true" width="450" 
              datapath="request:/cookie[1]/text()" /&gt;
    &lt;/view&gt;

&lt;/canvas&gt;
</programlisting></informalexample>

<para>The LZX expects the format of the returned XML to look like:</para>

<programlisting>
&lt;cookie&gt;COOKIE&lt;/cookie&gt;
</programlisting>

<para>Copy the LZX code and save it in a file called <literal>cookie.lzx</literal>. Make sure you
can access this file using your OpenLaszlo Server. Before you run it, you'll need to create
the JSP.</para>

<para>Take the following JSP code and drop it in a web application directory
that you can access by URL. Make sure the LZX code's dataset is pointing to this
URL, that is, replace the <literal>src</literal> value with your URL.</para>

<example><title>jsp code for generating cookie</title><programlisting>
&lt;%@ page import="java.util.*" %&gt;

&lt;%
    response.setHeader("Content-Type","text/xml");
%&gt;

&lt;cookie&gt;
&lt;%
    Enumeration headers = request.getHeaderNames();
    if (headers != null) {
        while (headers.hasMoreElements()) {
            String h = (String)headers.nextElement();
            if (h.equalsIgnoreCase("Cookie")) {
                out.println(request.getHeader(h));
                break;
            }
        }
    } 
%&gt;
&lt;/cookie&gt;
</programlisting></example>
<para/></section><section><title>Using cookies to recover state</title>
<para>
The following example shows an LZX program that uses a java sever page (JSP) to set and store a cookie. (The jsp program is shown below.)

<remark role="fixme">
Explain how it works
</remark>
</para>

<example>
   <title>Combobox that creates a cookie</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/cookies-$3.lzx"/></textobject> 
   </programlisting>
</example>

<example><title>cookie.jsp</title><programlisting>


&lt;%@ page import="java.util.*,java.io.*" contentType="text/xml" %&gt;
&lt;info&gt;
&lt;%!
/** 
 * Get cookie to store information.
 * @param name: name of cookie
 * @param cookies: client cookies
 */
Cookie getCookie(String name, Cookie[] cookies) {

    if (cookies != null) {
        for (int i=0; i &lt; cookies.length; i++) { 
            Cookie cookie = cookies[i];
            if (cookie.getName().equals(name)) {
                return cookie;
            }
        }
    }

    return new Cookie(name, "");
}

void showCookie(JspWriter out, Cookie cookie) throws IOException {
    out.println("&lt;success/&gt;");
    out.print("&lt;data&gt;");
    Map map = getCookieValues(cookie);    
    Iterator iter = map.entrySet().iterator();
    while (iter.hasNext()) {
        Map.Entry e = (Map.Entry)iter.next();
        String k = (String)e.getKey();
        out.println("&lt;" + k + "&gt;" + (String)e.getValue() + "&lt;/" + k + "&gt;\n");
    }
    out.println("&lt;/data&gt;");    
}

Map getCookieValues(Cookie cookie) throws IOException{
    // saved as key1=val1&amp;key2=val2&amp;...
    String str = cookie.getValue();
    StringTokenizer st = new StringTokenizer(cookie.getValue(), "&amp;");
    Map map = new HashMap();
    while (st.hasMoreTokens()) {
        String pair = st.nextToken();
        int index = pair.indexOf('=');
        if (index == -1 || index == 0) continue;
        String k = pair.substring(0, index);
        String v = pair.substring(index+1);
        map.put(k, v);
    }
    return map;
}

/**
 * Copy parameter key/value pairs into cookie. Skips "op" and "name" parameters.
 */
void setValues(JspWriter out, Cookie cookie, Map params) throws IOException{

    Iterator iter = params.entrySet().iterator();
    Map cookieValues = getCookieValues(cookie);
    while (iter.hasNext()) {
        Map.Entry e = (Map.Entry)iter.next();
        String k = (String)e.getKey();

        // skip op and name
        if (k.equals("op") || k.equals("name")) continue;

        String[] values = (String[])e.getValue();
        cookieValues.put(k, values[0]);
    }

    String newvalue = "";
    iter = cookieValues.entrySet().iterator();
    while (iter.hasNext()) {
        Map.Entry e = (Map.Entry)iter.next();
        String k = (String)e.getKey();
        String v = (String)e.getValue();
        newvalue += k + "=" + v + "&amp;";
    }

    cookie.setValue(newvalue);
}

%&gt;

&lt;%
    // operation
    String op = request.getParameter("op");
    if ( op == null || op.equals("") ) {
        out.println("&lt;status&gt;error&lt;/status&gt;\n&lt;message&gt;op: null or empty&lt;/message&gt;\n");
        out.println("&lt;/info&gt;");
        return;
    }

    // name of cookie
    String name = request.getParameter("name");
    if (name == null || name.equals("") ) {
        out.println("&lt;status&gt;error&lt;/status&gt;\n&lt;message&gt;name: null or empty&lt;/message&gt;\n");
        out.println("&lt;/info&gt;");
        return;
    }

    Cookie cookie = getCookie(name, request.getCookies());
    if ( op.equals("get") ) {
        showCookie(out, cookie);
    } else if ( op.equals("set") ) {
        setValues(out, cookie, request.getParameterMap());
        response.addCookie(cookie);
        showCookie(out, cookie);
    } else {
        out.println("&lt;status&gt;error&lt;/status&gt;\n&lt;message&gt;no such op: " + op + "&lt;/message&gt;\n");
    }
%&gt;
&lt;/info&gt;

</programlisting></example>


<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
Is there going to be a place in the dguide that talks about 
how to set 
up (say) a combobox to recover its state from a previous 
application 
session with a cookie? If you were to categorize this, it would be 
part of a larger set of issues, such as "Common application 
development problems". A bunch of the Tips would fall into this 
</remark></para>
<para role="fixme"><remark role="fixme"><emphasis role="para-label">FIXME: </emphasis>
You can't get at the cookie from the response headers. 
The only cookie header you can access is the "set-cookie" header. 
At the moment, you'll have to write a JSP to get at your cookie. 
Ideally, it'd be nice if there was a getCookie() call in the LFC.
</remark></para>
<para/></section></chapter>
