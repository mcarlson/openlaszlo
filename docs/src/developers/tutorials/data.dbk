<chapter id="data-tutorial">
<?dbhtml dir="tutorials" ?>

<title>Introduction to Databinding</title>
<para/><section><title>Introduction</title>


<para>We shall be examining how to interact with data in LZX.</para>

<anchor id="data-tutorial.datapaths"/>
<para/></section><section><title>The Basics</title>

<para>As far as importing data into an LZX app is concerned, we always work in XML. The XML declaration is not required, but a single root XML node is. Data is represented by the <indexterm><primary>dataset</primary></indexterm><sgmltag class="element">&lt;dataset&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: dataset-->
 element.</para>

<example role="live-example">
   <title>Datasets</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-tutorial-$1.lzx"/></textobject> 
   </programlisting>
</example>

<?example role="live-example"><title>Datasets</title><programlisting role="lzx-embednew"><filename>data-tutorial-$1.lzx</filename><parameter/><code>
&lt;canvas height="80" width="500" &gt;
  &lt;dataset name="myData"&gt;
    &lt;myXML&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Homer&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Marge&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Montgomery&lt;/firstName&gt;
        &lt;lastName&gt;Burns&lt;/lastName&gt;
      &lt;/person&gt;
    &lt;/myXML&gt;
  &lt;/dataset&gt;
  
  &lt;text datapath="myData:/myXML[1]/person[1]/firstName[1]/text()"/&gt;
&lt;/canvas&gt;
</code></programlisting><programlisting>
&lt;canvas height="80" width="500" &gt;
  &lt;dataset name="myData"&gt;
    &lt;myXML&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Homer&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Marge&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Montgomery&lt;/firstName&gt;
        &lt;lastName&gt;Burns&lt;/lastName&gt;
      &lt;/person&gt;
    &lt;/myXML&gt;
  &lt;/dataset&gt;
  
  &lt;text datapath="myData:/myXML[1]/person[1]/firstName[1]/text()"/&gt;
&lt;/canvas&gt;
</programlisting><?lzx-edit programs/data-tutorial-$1.lzx></example?>

<para>In the above example, the single root element is myXML. The <indexterm><primary>datapath</primary></indexterm><sgmltag class="attribute">datapath</sgmltag> attribute of the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 tag binds it to the data.</para>

<para>Datapaths use XPath attributes to navigate through the XML data. So the name of the dataset to use goes before the colon <literal>myData:</literal>, followed by the nodes, separated by forward slashes (/). The square brackets provide a (one-based) space to enter which sibling node we want. </para>

<para>In plain English, the above example says: "get me the text from the first firstName node, of the first person node of the first (and of course, only) myXML node." The text() method call returns that node's text.</para>

<para>To get Marge's name, we could rewrite the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> tag as follows:</para>

<programlisting>
&lt;text datapath="myData:/myXML/person[2]/firstName/text()" /&gt; 
</programlisting>

<para>To get the "show" attribute of Montgomery, we could write:</para>

<programlisting>
&lt;text datapath="myData:/myXML/person[3]/@show" /&gt; 
</programlisting>

<para>The <literal>/text()</literal> path segment is unnecessary with the
<indexterm><primary>datapath</primary></indexterm><sgmltag class="attribute">datapath</sgmltag> attribute.</para>


<para>So far we've used the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag> tag in conjunction with a single datapath. If we wanted to present tabular information, this would mean each text element would need its own datapath, and would be cumbersome and difficult to write. Instead let's make a quick table, by giving a <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: view-->
 a datapath:</para>

<example role="live-example">
   <title>Assigning a datapath to a view</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-tutorial-$2.lzx"/></textobject> 
   </programlisting>
</example>
<?example role="live-example"><title>Assigning a datapath to a view</title><programlisting role="lzx-embednew"><filename>data-tutorial-$2.lzx</filename><parameter/><code>
&lt;canvas height="80" width="500"&gt;
  &lt;dataset name="myData"&gt;
    &lt;myXML&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Homer&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Marge&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Montgomery&lt;/firstName&gt;
        &lt;lastName&gt;Burns&lt;/lastName&gt;
      &lt;/person&gt;
    &lt;/myXML&gt;
  &lt;/dataset&gt;

  &lt;view name="rowOfData" datapath="myData:/myXML[1]/person[1]"&gt;
    &lt;simplelayout axis="x" /&gt;
    &lt;text datapath="firstName/text()" /&gt; 
    &lt;text datapath="lastName/text()" /&gt; 
    &lt;text datapath="@show" /&gt;
  &lt;/view&gt;
&lt;/canvas&gt;
</code></programlisting><programlisting>
&lt;canvas height="80" width="500"&gt;
  &lt;dataset name="myData"&gt;
    &lt;myXML&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Homer&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Marge&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show="simpsons"&gt;
        &lt;firstName&gt;Montgomery&lt;/firstName&gt;
        &lt;lastName&gt;Burns&lt;/lastName&gt;
      &lt;/person&gt;
    &lt;/myXML&gt;
  &lt;/dataset&gt;

  &lt;view name="rowOfData" <emphasis role="em">datapath="myData:/myXML[1]/person[1]"</emphasis>&gt;
    &lt;simplelayout axis="x" /&gt;
    &lt;text <emphasis role="em">datapath="firstName/text()"</emphasis> /&gt; 
    &lt;text <emphasis role="em">datapath="lastName/text()"</emphasis> /&gt; 
    &lt;text <emphasis role="em">datapath="@show"</emphasis> /&gt;
  &lt;/view&gt;
&lt;/canvas&gt;
</programlisting><?lzx-edit programs/data-tutorial-$2.lzx></example?>

<para>The datapath of the entire <varname>rowOfData</varname> view has now become Homer's <varname>person</varname> node. The child elements of <varname>rowOfData</varname> inherit this, so their datapaths can be referenced relatively.</para>

<para/><section><title>Multiple rows of data</title>

<para>In the above example we used a single <varname>rowOfData</varname> node. Next, we shall use a range of nodes:</para>

<example role="live-example">
   <title>Range of nodes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-tutorial-$3.lzx"/></textobject> 
   </programlisting>
</example>
<?example role="live-example"><title>Range of nodes</title><programlisting role="lzx-embednew"><filename>data-tutorial-$3.lzx</filename><parameter/><code>
&lt;canvas height="80" width="500" &gt;
  &lt;dataset name="myData"&gt;
    &lt;myXML&gt;
        &lt;person show="simpsons"&gt;
          &lt;firstName&gt;Homer&lt;/firstName&gt;
          &lt;lastName&gt;Simpson&lt;/lastName&gt;
        &lt;/person&gt;
        &lt;person show="simpsons"&gt;
          &lt;firstName&gt;Marge&lt;/firstName&gt;
          &lt;lastName&gt;Simpson&lt;/lastName&gt;
        &lt;/person&gt;
        &lt;person show="simpsons"&gt;
          &lt;firstName&gt;Montgomery&lt;/firstName&gt;
          &lt;lastName&gt;Burns&lt;/lastName&gt;
        &lt;/person&gt;
      &lt;/myXML&gt;
  &lt;/dataset&gt;

  &lt;view name="myTable"&gt;
    &lt;simplelayout axis="y" /&gt;
    &lt;view name="rowOfData" datapath="myData:/myXML[1]/person"&gt;
      &lt;simplelayout axis="x" /&gt;
      &lt;text datapath="firstName/text()" /&gt; 
      &lt;text datapath="lastName/text()" /&gt; 
      &lt;text datapath="@show" /&gt;
    &lt;/view&gt;
  &lt;/view&gt;
&lt;/canvas&gt;
</code></programlisting><programlisting>
&lt;canvas height="80" width="500" &gt;
  &lt;dataset name="myData"&gt;
    &lt;myXML&gt;
        &lt;person show="simpsons"&gt;
          &lt;firstName&gt;Homer&lt;/firstName&gt;
          &lt;lastName&gt;Simpson&lt;/lastName&gt;
        &lt;/person&gt;
        &lt;person show="simpsons"&gt;
          &lt;firstName&gt;Marge&lt;/firstName&gt;
          &lt;lastName&gt;Simpson&lt;/lastName&gt;
        &lt;/person&gt;
        &lt;person show="simpsons"&gt;
          &lt;firstName&gt;Montgomery&lt;/firstName&gt;
          &lt;lastName&gt;Burns&lt;/lastName&gt;
        &lt;/person&gt;
      &lt;/myXML&gt;
  &lt;/dataset&gt;

  &lt;view name="myTable"&gt;
    &lt;simplelayout axis="y" /&gt;
    &lt;view name="rowOfData" datapath="myData:/myXML[1]/person"&gt;
      &lt;simplelayout axis="x" /&gt;
      &lt;text datapath="firstName/text()" /&gt; 
      &lt;text datapath="lastName/text()" /&gt; 
      &lt;text datapath="@show" /&gt;
    &lt;/view&gt;
  &lt;/view&gt;
&lt;/canvas&gt;
</programlisting><?lzx-edit programs/data-tutorial-$3.lzx></example?>

<para>Whichever tag contains the <indexterm><primary>datapath</primary></indexterm><sgmltag class="attribute">datapath</sgmltag> attribute will get repeated as often as is necessary.</para>



<para>Remember that datapaths bind themselves to a view, so if the data changes, so will the view. We shall come to that a little later.</para>


<para/></section></section><section id="data-tutorial.including"><title>Ways to include data</title>

<para>So far we've been using embedded data (XML that is written into the document). This is fine for very small amounts of static data, but there are other methods better suited to larger (or dynamic) data.</para>
 
<informaltable><tgroup cols="3"><thead><row><entry>How is it included?</entry>
<entry>When is it loaded?</entry><entry>Syntax</entry></row></thead><tbody><row><entry><link linkend="data-tutorial.embedded">Embedded</link></entry><entry>Compile-time</entry><entry>
<informalexample role="live-example"><programlisting>
&lt;dataset name="myData"&gt;
  &lt;myXML&gt;
     &lt;!-- ... other XML tags ... --&gt;
  &lt;/myXML&gt;
&lt;/dataset&gt;
</programlisting></informalexample>
    </entry></row><row><entry><link linkend="data-tutorial.included">Included</link></entry><entry>Compile-time</entry><entry>
<programlisting>
&lt;dataset name="myData" src="myXMLDoc.xml"/&gt;
</programlisting>
    </entry></row><row><entry><link linkend="data-tutorial.http">HTTP data</link></entry><entry>Runtime</entry><entry>
<programlisting>
&lt;dataset name="myData" request="true" 
         type="http" src="myXMLDoc.xml" /&gt;
</programlisting>
    </entry></row></tbody></tgroup></informaltable>


<para/><section id="data-tutorial.embedded"><title>Embedded Data</title>

<para>Embedded data is XML between the <indexterm><primary>dataset</primary></indexterm><sgmltag class="element">&lt;dataset&gt;</sgmltag> tags. When the OpenLaszlo Server compiles the application, the data is bound into it. The data can still be changed after the application runs. Included data is static.</para>


<para/></section><section id="data-tutorial.included"><title>Included Data</title>
<para>Included data is essentially the same as embedded data, except that the XML itself is kept in a separate file. The size of the initial download will be the same as with embedded data.</para>

<para>It is locally referenced via the filesystem, so it can be placed in other directories. Included data is static.</para>


<para/></section><section id="data-tutorial.http"><title>HTTP Data</title>
<para>Remote data goes over HTTP, which means it can (but doesn't have to) be dynamic. If it is static, then the only difference between it and included or embedded data is that it is downloaded <emphasis role="i">after</emphasis> the application loads. The <literal>type="http"</literal> attribute indicates that this is an HTTP request. The requests can be either GET or POST. </para>

<para>There are several points at which the client requests the data:</para>

<itemizedlist spacing="compact"><listitem><para>The client will request the data as soon as the app loads if the dataset's  <indexterm><primary>request</primary></indexterm><sgmltag class="attribute">request</sgmltag> attribute is true. </para></listitem><listitem><para>If the <indexterm><primary>request</primary></indexterm><sgmltag class="attribute">request</sgmltag> attribute is set to "true", the client will also request the data every time the querystring or base URL of the dataset changes (using the <indexterm><primary><literal>setQueryString()</literal></primary></indexterm><methodname>setQueryString()</methodname> or <indexterm><primary><literal>setSrc()</literal></primary></indexterm><methodname>setSrc()</methodname> respectively) methods of the LzHTTPDataset object.</para></listitem><listitem><para>When the dataset's <indexterm><primary><literal>doRequest()</literal></primary></indexterm><methodname>doRequest()</methodname> method gets called.</para></listitem></itemizedlist>

<para>In the table above, we referenced a file locally (myXMLDoc.xml), but we could have done it absolutely, or we could have hit a server-side (PHP, ASP, JSP or some CGI) that returned an XML document. We could add the query string to the <indexterm><primary>dataset</primary></indexterm><sgmltag class="element">&lt;dataset&gt;</sgmltag> tag:</para>

<informalexample role="live-example"><programlisting>
&lt;dataset name="myData"
         <emphasis role="em">src="http://www.myServer.com/cgi-bin/myXMLDoc.cgi?return=addresses"</emphasis>/&gt;
</programlisting></informalexample>

<para>The <literal>type="http"</literal> attribute gets implied when the <indexterm><primary>src</primary></indexterm><sgmltag class="attribute">src</sgmltag> attribute contains "<literal>http://</literal>".</para>


<para/></section></section><section id="data-tutorial.datapointers"><title>Datapointers</title>

<para>Datapaths are extremely handy, but if you need more control over the data, they can become cumbersome. Datapaths are actually extensions of datapointers, but are easier to learn, which is why we introduced them first. A datapointer is a pointer into the dataset, which can be moved around. It can only be in one place of the dataset at a time, but you can have multiple datapointers, each pointing to a different part of a dataset.</para>

<para>Datapointers are not bound to views like datapaths are, but they do have a place in the view hierarchy (that is, they know about parents and children).</para>

<para>You will use a datapointer when you need to operate on the data in some way. For example, using the same format of data as in the previous examples, say you wanted to find all the people who were in the South Park show:</para>

<example role="live-example">
   <title>Manipulating datapointers</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-tutorial-$6.lzx"/></textobject> 
   </programlisting>
</example>
<?example role="live-example"><title>Manipulating datapointers</title><programlisting role="lzx-embednew"><filename>data-tutorial-$6.lzx</filename><parameter/><code>
&lt;canvas height="180" width="500" debug="true"&gt;
  &lt;dataset name="myData" src="../myShowData.xml" /&gt;
  
  &lt;datapointer xpath="myData:/" ondata="processData()"&gt;
    &lt;method name="processData"&gt;
      this.selectChild(2); 
      do {
        if (this.xpathQuery( '@show' ) == 'south park') {
            Debug.write(this.xpathQuery('firstName/text()'));
        }
      } while (this.selectNext()); 
    &lt;/method&gt;
  &lt;/datapointer&gt;
&lt;/canvas&gt;
</code></programlisting><programlisting>
&lt;canvas height="180" width="500" debug="true"&gt;
  &lt;dataset name="myData" src="../myShowData.xml" /&gt;
  
  &lt;datapointer xpath="myData:/" ondata="processData()"&gt;
    &lt;method name="processData"&gt;
      this.selectChild(2); 
      do {
        if (this.xpathQuery( '@show' ) == 'south park') {
            Debug.write(this.xpathQuery('firstName/text()'));
        }
      } while (this.selectNext()); 
    &lt;/method&gt;
  &lt;/datapointer&gt;
&lt;/canvas&gt;
</programlisting><?lzx-edit programs/data-tutorial-$6.lzx></example?>

  <para>For brevity's sake, we are writing to the debugger, and we are including the data from a local file. You can download that XML file <ulink url="http://labs.openlaszlo.org/trunk-nightly/docs/developers/programs/resources/myShowData.xml">here</ulink>, and here's what it looks like:</para>
  <programlisting>
    &lt;myXML&gt;
      &lt;person show=&quot;simpsons&quot;&gt;
        &lt;firstName&gt;Homer&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show=&quot;simpsons&quot;&gt;
        &lt;firstName&gt;Marge&lt;/firstName&gt;
        &lt;lastName&gt;Simpson&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show=&quot;simpsons&quot;&gt;
        &lt;firstName&gt;Montgomery&lt;/firstName&gt;
        &lt;lastName&gt;Burns&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show=&quot;south park&quot;&gt;
        &lt;firstName&gt;Eric&lt;/firstName&gt;
        &lt;lastName&gt;Cartman&lt;/lastName&gt;
      &lt;/person&gt;
      &lt;person show=&quot;south park&quot;&gt;
        &lt;firstName&gt;Stan&lt;/firstName&gt;
        &lt;lastName&gt;Marsh&lt;/lastName&gt;
      &lt;/person&gt;
    &lt;/myXML&gt;</programlisting>

<para>The first <literal>selectNext()</literal> method call selects the first <literal>&lt;person&gt;</literal> node.</para>

<para>The other <literal>selectNext()</literal> method call returns <literal>true</literal> as long as an XML node was successfully selected (that is, until there aren't any more). We exploit this by using it in a <literal>do <replaceable>…</replaceable> while</literal> loop, so that the same iteration occurs for every <literal>&lt;person&gt;</literal> node.</para>

<para>We could also have given the <literal>&lt;datapointer&gt;</literal> <literal>onerror</literal> and <literal>ontimeout</literal> event handlers to capture any problems. </para>

<para/>
<section>
<title>Differential debugging SWF and DHTML</title>
<para>When you query or manipulate an invalid datapointer, in the past,
you got back `undefined`. In DHTML, this often led to disaster down
the road, so the compiler added a warning when you did this, but still returned
`undefined` for backwards compatibility. In SWF, which is very
lenient about dealing with undefined values, manipulating an invalid
datapointer appears to have no ill effects; but the compiler still issues the
warning, because you may run into trouble if you compile your code
for DHTML. </para>
<para>When you define an LZX class whose name is the same as an
underlying runtime global, in the past, the runtime clobbered the runtime
global, to allow you to say `new &lt;tagname&gt;` to dynamically create
instances of your LZX tag. This leads to disaster in any runtime, so
the runtime no longer clobbers the global and it emits a warning telling you you
will need to use `lz.&lt;tagname&gt;` to reference the class dynamically.</para>
</section>
</section></chapter>
