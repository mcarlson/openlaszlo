<chapter id="calculator">
<?dbhtml dir="tutorials" ?>
<!-- remove commented out code that the build ignored. IORIO 6 nov 2007 -->
<!-- fix LPP-5041, IORIO 3 nov 2007 -->
<title>Building a Calculator</title>
<section>
<title>Introduction</title>
<para>In this section we draw on the concepts presented thus far to create a simple â€” calculator as shown below.</para>
<para condition="swf">
When you compile this application for SWF, you can uncomment the lines that embed fonts. This will import fonts that give a somewhat more polished look to the calculator.
</para>
 
<informalfigure><mediaobject><imageobject><imagedata fileref="img/d_t_calculator_1.jpg"/></imageobject></mediaobject></informalfigure> 
 <para>As throughout this Guide, the examples are "live" and you can edit them. However, many of the examples are a bit long and not
ideally suited to the example editor.  So, if you wish to do some experimenting with this example you may wish to copy the source files
and resources to whichever directory you use for development.</para>

<para>Keep in mind that this is an exercise in basic LZX, not in scripting, so there won't be too much discussion on how the script works.</para>

</section>
<section><title>Visual Layout</title>
<para>Our first step will be to build the calculator visually. That is, to start with we will not worry about the functionality, we'll just make it look right. 
Let's start by bringing in all the art assets. There are a body, a display and a number of buttons. </para>

<example role="live-example">
   <title>Using resourced for body image</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$1.lzx"/></textobject> 
   </programlisting>
</example>

<para>In this code we have brought in the fonts and art assets we plan to use, and created the body of the calculator. Remember, if you're compiling for DHTML you cannot use imported fonts.
</para>
<para>We don't need to set the size of the view that is the calculator body, because it will stretch to the size of its resource automatically.</para>
 
<para>Next we add the display:</para>

<example role="live-example">
   <title>Adding the display</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$2.lzx"/></textobject> 
   </programlisting>
</example>

<para>There are two parts to this. The first is the light gray art asset that is the display itself, and the second is the text in the display.
 We're naming everything with name attributes now, so that later we will be able to refer to these elements 
from scripts (for example, to change the text in the display).</para>
<para>Note that the text tag is <emphasis role="i">within</emphasis> the display view tag. In fact it's 
convenient because it allows us to position the text tag relative to the display, which is how we think of it.
</para>
    

<para>The buttons are all the same size, and they're arranged in a grid. The buttons are actually arranged in rows 
(or you might describe them as columns, but for the purposes of this tutorial, we're going to treat them as rows):</para>
 
<informalfigure><mediaobject><imageobject><imagedata fileref="img/d_t_calculator_2.gif"/></imageobject></mediaobject></informalfigure>
<para>Ignore the fact that the first row of two buttons is odd (we'll come to that later). The above diagram shows how we're going 
to arrange them. Each button will be a view with a resource attached to it. We could have used images
 for the labels, but it is far easier to use text.</para>
<para>Here's the code for a single button:</para>
<example role="live-example"><title>code for a single button</title><programlisting>
    &lt;view resource="button_blu" clickable="true" 
          onclick="display.inputDigit( this );"&gt;
        &lt;text name="buttonText" font="obliqueText" fontsize="30" 
              fgcolor="#ffffff" x="9" valign="middle"&gt;
            7
        &lt;/text&gt;
    &lt;/view&gt;
</programlisting></example>
<para>The resource attribute tells the button what image to use. Remember the button will automatically size to 
fit the view. Next the clickable attribute means that this button will be clickable - it will have 
an onclick event, which will come to later and the mouse will change to a hand when it hovers over it. 
The text tag is the button's label.</para>
<para>The onclick event handler is calling a method that we haven't written yet.</para>
<para>The code for a row of buttons is as follows:</para>
<example role="live-example"><title>code for a row of buttons</title><programlisting>
    &lt;!-- row 2 --&gt;
    &lt;view name="row2"&gt;
        &lt;simplelayout axis="x" spacing="7" /&gt;
        &lt;view resource="button_blu" clickable="true" 
              onclick="display.inputDigit( this );"&gt;
            &lt;text name="buttonText" font="obliqueText" fontsize="30" 
                  fgcolor="#ffffff" x="9" valign="middle"&gt;
                7
            &lt;/text&gt;
        &lt;/view&gt;
        &lt;view resource="button_blu" clickable="true" 
              onclick="display.inputDigit( this );"&gt;
            &lt;text name="buttonText" font="obliqueText" fontsize="30" 
                  fgcolor="#ffffff" x="9" valign="middle"&gt;
                8
            &lt;/text&gt;
        &lt;/view&gt;
        &lt;view resource="button_blu" clickable="true" 
              onclick="display.inputDigit( this );"&gt;
            &lt;text name="buttonText" font="obliqueText" fontsize="30" 
                  fgcolor="#ffffff" x="9" valign="middle"&gt;
                9
            &lt;/text&gt;
        &lt;/view&gt;
        &lt;view resource="button_blu" clickable="true" 
              onclick="display.inputDigit( this );"&gt;
            &lt;text name="buttonText" font="obliqueText" fontsize="30" 
                  fgcolor="#ffffff" x="9" valign="middle"&gt;
                *
            &lt;/text&gt;
        &lt;/view&gt;
    &lt;/view&gt;
</programlisting></example>
<para>Notice that we're using the simplelayout tag to control the spacing of the buttons <emphasis role="i">in the x-axis</emphasis>.</para>
<para>For four rows of buttons, we will just repeat the above code, and we shall space all the <emphasis role="i">rows</emphasis> with 
a simplelayout <emphasis role="i">in the y-axis</emphasis>. Here's the code so far:</para>

<example role="live-example">
   <title>Spacing rows with &lt;simplelayout&gt;</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$5.lzx"/></textobject> 
   </programlisting>
</example>

<para>The x and fontsize properties of the text elements 
have been tweaked to get the button labels to line up correctly.</para>

<para>Finally, let's build the top row of buttons:</para>
<example role="live-example"><title>top row of buttons</title><programlisting>
    &lt;!-- row 1 --&gt;
    &lt;view name="row1" width="${parent.width}"&gt;
        &lt;view resource="button_red" clickable="true" 
              onclick="display.inputDigit( this );"&gt;
            &lt;text name="buttonText" font="obliqueText" fontsize="30" 
                  fgcolor="#ffffff" x="7" valign="middle"&gt;
                C
            &lt;/text&gt;
        &lt;/view&gt;
        &lt;view resource="button_blu" clickable="true" 
              onclick="display.inputDigit( this );"
              align="right"&gt;
            &lt;text name="buttonText" font="obliqueText" fontsize="30" 
                  fgcolor="#ffffff" x="9" valign="middle"&gt;
                /
            &lt;/text&gt;
        &lt;/view&gt;
    &lt;/view&gt;
</programlisting></example>
<para>The "C" button will be automatically placed at x="0" y="0". The "/" button needs to be right aligned, hence 
the align="right" attribute.</para>
<para>The parent view of the buttons (i.e. one named <emphasis role="i">buttons</emphasis> in the code above) will automatically size to 
fit rows 2, 3, 4 and 5, so it's OK to align the "/" button to the right, as long as we explicitly set the width of <emphasis role="i">row1</emphasis> to the 
same as <emphasis role="i">buttons</emphasis>.</para>

<section><title>Scripting</title>
<anchor id="calculator.scripting"/>
<para>There is a lot of code here to make the calculator behave predictably. We can break this down into methods that perform tasks, 
and properties that retain values. Alternatively, if we didn't want to use methods and properties, we'd have to write a lot of 
functions and have a large number of global variables declared. All the methods that we write are going to be assigned to the
 <emphasis role="i">display</emphasis> view, which is also the parent of the <emphasis role="i">screen</emphasis> text field.</para>
</section>
<section>
<title>Methods</title>
<para>
<emphasis role="b">start()</emphasis>

This is the method that sets up all the view properties.
</para>
<para>
<emphasis role="b">clear()</emphasis>

For clearing the screen and restarting. All this does is call the start method again, so that the properties get re initialized. We could have called the start method directly when we wanted to clear the screen.
</para>
<para>
<emphasis role="b">inputDigit()</emphasis>

The default method for hitting a key. This figures out what the user is typing in (whether it's a number, an operator, the equals
 sign and so forth) and takes the appropriate action.
</para>
<para>
<emphasis role="b">inputOperator()</emphasis>

When the user hits an operator ("+", "-", "*", "/") a few things could based on what the user has entered previously. 
For example, if the user has hits "1" then "*", nothing happens. But if the user has already entered two operands 
and an operator (e.g. "1" then "*" then "4" <emphasis role="i">then</emphasis> "+") the first expression gets evaluated. This method handles all that logic.
</para>
<para>
<emphasis role="b">equals()</emphasis>

Called when the user hits the equals sign. </para>
<para>
<emphasis role="b">execute()</emphasis>

The actual method that does any computation. Called from various circumstances.</para>
<para>
<emphasis role="b">isThereDecimal()</emphasis>

Utility method for checking if a decimal point is shown on the display (to prevent one from being entered twice.</para>
<para>
<emphasis role="b">addDecimalPoint()</emphasis>
<!-- fix broken docbook IORIO 6 nov 2007 -->
<!-- add definition for negative() IORIO 6 nov 2007 -->

<emphasis role="b">negative()</emphasis> Toggles the sign of a number.
Concatenates a decimal point to the end of the display</para>

</section><section><title>Properties</title>
<para>
<emphasis role="b">valueX</emphasis>

The first operand (value) to use.</para>
<para>
<emphasis role="b">oldValue</emphasis>

This can be different things depending on the combination of buttons that were entered.</para>
<para>
<emphasis role="b">lastInput</emphasis>

What was last entered (e.g. digit, equals, operator).</para>
<para>
<emphasis role="b">allOperators</emphasis>

An array of values that are operators.</para>
<para>
<emphasis role="b">operator</emphasis>

The active operator (e.g. "+").</para>
</section>
<section><title>Global functions</title>
<para>
<emphasis role="b">isInArray</emphasis>

This is a simple function that loops through an array to determine whether a value is contained within it. 
The reason it is not a method is because it's the kind of function that might be reused in another script, and it's handy to have 
it set aside like this.</para>
<para>So here's the full code:</para>

<example role="live-example">
   <title>Completed calculator</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$7.lzx"/></textobject> 
   </programlisting>
</example>

<para>Notice that there is now an oninit event handler on the display that calls the <emphasis role="i">start</emphasis> method.</para>
<para>Also notice how we're always calling the <emphasis role="i">inputDigit</emphasis> method from the buttons with the same argument: We're passing 
the button element, and the <emphasis role="i">inputDigit</emphasis> method works out what the button it is by calling the getText() method on its
 text element. This saves us the hassle of writing a different argument each time.</para>
 
<para>There is still a lot of code here, a lot of which is repetitive. We can condense it by using classes. For an introduction to classes in LZX, see <xref linkend="classes-tutorial"/></para>
</section></section>
<section id="calculator.perspective">
<title>Using Classes to Simplify</title>
<para>Let's take a look at how we can use classes to simplify our code. We'll start by making a class for calculator buttons.</para>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
need another intro sentence
</remark></para>
<section><title>Button</title>
<para>Consider a calculator button. Most of them are blue and they have a white label on them. The label varies from button to button. They all call a method when clicked. When we say blue, we really mean that they take a resource which happens to be blue. Some buttons take other images. In at least one case, we had to position the label explicitly so it would look right.</para>
<para>In short, what we need is a class that will:</para>
<itemizedlist spacing="compact"><listitem><para>Produce a blue button by default.</para></listitem><listitem><para>Allow us to specify a different resource.</para></listitem><listitem><para>Take a label attribute.</para></listitem><listitem><para>Allow the label to be explicitly positioned in the x plane to tweak it.</para></listitem></itemizedlist>
<para>Here is the old code for a single button:</para>

<example role="live-example">
   <title>Single button</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$8.lzx"/></textobject> 
   </programlisting>
</example>

<para>And here's how that might be translated into a class:</para>

<example role="live-example">
   <title>Converting button to class</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$9.lzx"/></textobject> 
   </programlisting>
</example>

<para>We can give the class a default resource (<varname>button_blu</varname>), as well as a default onclick attribute. Since these are 
default attributes of the class we're extending (i.e. view), they get overwritten when we instantiate the class and set that attribute.
 However we need a method to handle the custom attributes <indexterm><primary>buttLabel</primary></indexterm><sgmltag class="attribute">buttLabel</sgmltag> and <indexterm><primary>labelX</primary></indexterm><sgmltag class="attribute">labelX</sgmltag>. That's why 
we call the <indexterm><primary><literal>initButton()</literal></primary></indexterm><methodname>initButton()</methodname> method at init time, and set the label of the text and optionally the x-offset of the label 
that way.</para>

<para>In this case we've made the fontsize of the view a little smaller, so that we don't have to worry about making the labels fit 
the buttons.</para>
<para>The method within the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 tag adjusts the size of the text field when the text gets set to the correct size 
(plus a few extra pixels for good measure).</para>
<para>Applying this to the original calculator code, we get:</para>

<example role="live-example">
   <title>Classes in calculator</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$10.lzx"/></textobject> 
   </programlisting>
</example>

<para>Not only does this make the code more navigable, but lightens the calculator application by over 100 lines of code.</para>
<para>Now, say that we wanted to upgrade the buttons we have and make them react to mouse events (e.g. highlight when rolled over
and appear depressed when clicked). Since we've created a class, we only have to make the change in one place, and it will 
immediately be propagated to all of the instances of that class:</para>

<example role="live-example">
   <title>Updating class definition</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$11.lzx"/></textobject> 
   </programlisting>
</example>

<para>Aside from defining and naming the new multi-frame resources at the
top of the code, the only other change was to extend the
<indexterm><primary>basebutton</primary></indexterm><classname>basebutton</classname> class instead of the
<indexterm><primary>LzView</primary></indexterm><classname>LzView</classname> class. The
<indexterm><primary>basebutton</primary></indexterm><classname>basebutton</classname> class is a predefined class that
gives simple mouse rollover and click behavior to a view with a
multiframe resource. Since the <indexterm><primary>basebutton</primary></indexterm><classname>basebutton</classname> class
extends <indexterm><primary>LzView</primary></indexterm><classname>LzView</classname>, it inherits all
<indexterm><primary>LzView</primary></indexterm><classname>LzView</classname>'s attributes. This means that we can
still use the same attributes (e.g. <indexterm><primary>onclick</primary></indexterm><sgmltag class="attribute">onclick</sgmltag> and
<indexterm><primary>resource</primary></indexterm><sgmltag class="attribute">resource</sgmltag>) in our new <indexterm><primary>calcButton</primary></indexterm><classname>calcButton</classname> class, as we could in the original
<indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: view-->
 tag, which used to <emphasis role="em">be</emphasis> the button.</para>
</section></section><section id="calculator.separating"><title>Separating Across Files</title>
<para>Although we've saved a lot of typing, the lzx file is still quite long. This may not be much of an issue if 
you're writing this application on your own, but one of the great advantages of using classes is that a project can be 
divided up among developers with ease. To do this, we're going to break the calculator application across a number of files, 
using classes as a divider.</para>
<para>Since we already have the button separated out as a class, let's start with that one:</para>
<example role="live-example"><title>Grouping classes in libraries</title><programlisting>
<emphasis role="b">calculator_button.lzx:</emphasis>
<emphasis role="em">&lt;library&gt;</emphasis>
  &lt;!-- A standard calculator button --&gt;
  &lt;resource name="button_grn"&gt;
    &lt;frame src="./resources/new_button_green_off.png"/&gt;
    &lt;frame src="./resources/new_button_green_over.png"/&gt;
    &lt;frame src="./resources/new_button_green_down.png"/&gt;
  &lt;/resource&gt;
  &lt;resource name="button_blu"&gt;
    &lt;frame src="./resources/new_button_blue_off.png"/&gt;
    &lt;frame src="./resources/new_button_blue_over.png"/&gt;
    &lt;frame src="./resources/new_button_blue_down.png"/&gt;
  &lt;/resource&gt;
  &lt;resource name="button_red"&gt;
    &lt;frame src="./resources/new_button_red_off.png"/&gt;
    &lt;frame src="./resources/new_button_red_over.png"/&gt;
    &lt;frame src="./resources/new_button_red_down.png"/&gt;
  &lt;/resource&gt;
  
  &lt;class name="calcButton" resource="button_blu" clickable="true" 
          onclick="display.inputDigit(this);" oninit="this.initButton()"
          extends="basebutton"&gt;
    &lt;attribute name="buttLabel" type="string"&gt;
    &lt;attribute name="labelX" type="number" value="11"&gt;
    
    &lt;method name="initButton"&gt;
      this.buttonText.setAttribute('x', 
                                   this.getAttribute('labelX'));
      this.buttonText.setAttribute('text', this.getAttribute('buttLabel'));
    &lt;/method&gt;
    
    &lt;text name="buttonText" font="obliqueText" fontsize="25" 
              fgcolor="#ffffff" x="13" valign="middle"&gt;
      &lt;handler name="ontext"&gt;
        this.setAttribute('width', this.getTextWidth() + 5);
      &lt;/handler&gt;
    &lt;/text&gt;
  &lt;/class&gt;
<emphasis role="em">&lt;/library&gt;</emphasis>
</programlisting></example>
<para>Notice that the <indexterm><primary>library</primary></indexterm><sgmltag class="element">&lt;library&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: library-->
 tag replaces the <indexterm><primary>canvas</primary></indexterm><sgmltag class="element">&lt;canvas&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: canvas-->
 when we're breaking apart code like this. 
It's also worth noting that the resources included by calculator_button.lzx are referenced <emphasis role="i">relative</emphasis> to it.</para>
<para>Next we're going to separate out the display. Even though there is only one instance of the display, it's 
OK to turn it into a class:</para>
<example role="live-example"><title>Placing display in a library</title><programlisting>
<emphasis role="b">calculator_display.lzx:</emphasis>
<emphasis role="em">&lt;library&gt;</emphasis>
  &lt;resource name="calc_display" src="../resources/display.png"/&gt;
  
  &lt;!-- The calculator display --&gt;
  &lt;<emphasis role="em">class name="calcDisplay"</emphasis> resource="calc_display" x="20" y="31"
            oninit="this.start()"&gt;
    &lt;!-- the text in the display --&gt;
    &lt;text name="screen" height="30" width="165"
                font="displayText" fontsize="30"
                y="5" x="5"&gt;
      0
    &lt;/text&gt;
    
    &lt;method name="start"&gt;
      this.valueX = 0;
      this.lastInput = 'none';
      this.oldValue = false;
      this.allOperators = new Array('+', '-', '/', '*');
      this.operator = '+';
      this.screen.setAttribute('text', this.valueX.toString());
    &lt;/method&gt;
    
    &lt;method name="clear"&gt;
      this.start();
    &lt;/method&gt;
    
    &lt;!-- handles the push of a button --&gt;
    &lt;method name="inputDigit" args="buttonObj"&gt;
    &lt;![CDATA[
      var val = buttonObj.buttonText.getText();
      // weed out any non-numbers (e.g. operators, clear button)
      if (isInArray(val, this.allOperators)) {
        var theOperator = val;
        this.inputOperator(theOperator);
        return;
      } else if (val == 'C') {
        this.start();
        return;
      } else if (val == '.') {
        this.addDecimalPoint();
        return;
      } else if (val == '+/-') {
        this.negative();
        return;
      } else if (val == '=') {
        this.equals();
        return;
      }
      displ = this.screen.getText();
      if ((displ == '0') &amp;&amp; (val == '0')) {
        return;
      }
      if ((this.lastInput == 'none') 
          || (this.lastInput == 'operator')) {
        // clear display and rewrite
        this.screen.setAttribute('text', val);    
      } else if (this.lastInput == 'digit') {
        this.screen.setAttribute('text', displ + val);
      } else if (this.lastInput == 'equals') {
        this.clear();
        this.screen.setAttribute('text', val);
      }
      this.lastInput = 'digit';
    ]]&gt;
    &lt;/method&gt;
    
    &lt;method name="inputOperator" args="operator"&gt;
      if (this.lastInput == 'digit') {
        this.execute(this.screen.getText());
      }
      this.valueX = this.screen.getText();
      this.operator = operator;
      this.lastInput = 'operator';
    &lt;/method&gt;
    
    &lt;method name="equals"&gt;
      if (this.lastInput != 'equals') {
        this.oldValue = this.screen.getText();
        this.lastInput = 'equals';
        this.execute(this.oldValue);
      } else {
        this.lastInput = 'equals';
        this.execute(this.oldValue);
      }
    &lt;/method&gt;
    
    &lt;method name="execute" args="val"&gt;
      this.valueX -= 0;
      var valFromDisp = val - 0;
      if (this.valueX == 0) return;
      if (this.operator == '+') {
        val = this.valueX + valFromDisp;
      } else if (this.operator == '-') {
        val = this.valueX - valFromDisp;
      } else if (this.operator == '*') {
        val = this.valueX * valFromDisp;
      } else if (this.operator == '/') {
        val = this.valueX / valFromDisp;
      }
      valFromDisp = val;
      this.screen.setAttribute('text', valFromDisp.toString());
      this.valueX = this.screen.getText();
    &lt;/method&gt;
    
    &lt;method name="isThereDecimal"&gt;
    &lt;![CDATA[
      var disp = this.screen.getText();
      var isDecimal = false;
      for (var i=0; i != disp.length; i++) {
        if (disp.charAt(i) == '.') {
            return true;
        }
      }
      return false;
  ]]&gt;
    &lt;/method&gt;
    
    &lt;method name="addDecimalPoint"&gt;
      if ((this.lastInput == 'none') 
          || (this.lastInput == 'operator')) {
        if (!this.isThereDecimal()) {
            this.screen.setAttribute('text', "0.");
        }
      } else if (this.lastInput == 'digit') {
        if (!this.isThereDecimal()) {
            var newText = this.screen.getText();
            newText += ".";
            this.screen.setAttribute('text', newText);
        }
      } else if (this.lastInput == 'equals') {
        this.clear(); 
        this.screen.setAttribute('text', '0.');
      }
      this.lastInput = 'digit';
    &lt;/method&gt;
    
    &lt;method name="negative"&gt;
      if ((this.lastInput == 'digit') ||
          (this.lastInput == 'equals')) {
        var newDisp = (this.screen.getText() - 0) * -1;
        this.screen.setAttribute('text', newDisp.toString()); 
      } else {
        clear();
      }            
    &lt;/method&gt;
  &lt;/class&gt;
<emphasis role="em">&lt;/library&gt;</emphasis>
</programlisting></example>
<para>The <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag> tag changes to a <indexterm><primary>class</primary></indexterm><sgmltag class="element">&lt;class&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: class-->
 tag, and the id attribute is removed. This is because if
 we used an id attribute here (i.e. in the <emphasis role="i">class definition</emphasis>, then every instance of that class would have the same 
id (which would cause problems, since IDs are supposed to be unique!). We also added a <indexterm><primary>name</primary></indexterm><sgmltag class="attribute">name</sgmltag> attribute, which will get used to create 
instances of the class. The resource for the display is also included in the display library file.</para>
<para>Finally, the code for the calculator itself:</para>

<example role="live-example">
   <title>Calculator implemented with libraries</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/calculator-$14.lzx"/></textobject> 
   </programlisting>
</example>

<para>We used the same id attribute that we had in the <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag> tag of the display in the <emphasis role="i">instance</emphasis> of the calcDisplay class.
The calculator app is now broken up across three files:</para>
<orderedlist spacing="compact"><listitem><para>calculator_main.lzx</para></listitem><listitem><para>calculator_display.lzx</para></listitem><listitem><para>calculator_display.lzx</para></listitem></orderedlist>
<para>At the very least, classes help minimize the amount of typing you have to do, as well as giving you an intuitive system 
for dividing up and organizing your code. LZX was designed to be an Object Oriented language, and the use of classes in LZX goes much 
further than saving you typing. </para>
<para>For a deeper discussion of using classes in LZX, see the <xref linkend="introductory-classes"/> and 
<xref linkend="class-inheritance"/>
chapters of the Guide</para>

<para>Copyright Â© 2002-2007 <ulink url="http://www.laszlosystems.com/">Laszlo Systems, Inc.</ulink>
All Rights Reserved. Unauthorized use, duplication or
distribution is strictly prohibited. This is the proprietary
information of Laszlo Systems, Inc. Use is subject to license terms.</para>

</section></chapter>
