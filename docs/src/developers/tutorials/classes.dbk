<chapter id="classes-tutorial">
<?dbhtml dir="tutorials" ?>

<!-- remove commented out code that the build ignored. IORIO 3 nov 2007 -->
<!-- fix LPP-5041, IORIO 6 nov 2007 -->

<title>Introduction to Classes and Object Oriented Programming</title>
<para/><section id="classes-tutorial.basics"><title>Introduction</title>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
References to other chapters that deal with classes.
</remark></para>
<para>LZX is an object-oriented, prototype-based language that allows you to create custom, reusable classes to streamline and minimize code.</para>

<para> This tutorial shows you how to define and instantiate classes, as well as where to use them. 
The <indexterm><primary>class</primary></indexterm><sgmltag class="element">&lt;class&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: class-->
 tag is used to define classes. Classes are instantiated when the tag is used.</para>

<example role="live-example">
   <title>Simple Class Example</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/classes-tutorial-$1.lzx"/></textobject> 
   </programlisting>
</example>

<para>The <indexterm><primary>class</primary></indexterm><sgmltag class="element">&lt;class&gt;</sgmltag> tag defined the class, and the <indexterm><primary>MyClass</primary></indexterm><sgmltag class="element">&lt;MyClass&gt;</sgmltag> tag <emphasis role="i">instantiated</emphasis> it. 
Everything that was in the definition of the class is <emphasis role="i">inherited</emphasis> by each instance of it that is created.
That is, the instance of MyClass inherits a width of 80, a height of 25, a background color, as well as some text. 
The instance is named "myFirstInstance", in the same way we might name a <indexterm><primary>view</primary></indexterm><sgmltag class="element">&lt;view&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: view-->
, or 
a <indexterm><primary>window</primary></indexterm><sgmltag class="element">&lt;window&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: window-->
.</para>

<para>In fact, when we write <indexterm><primary>window</primary></indexterm><sgmltag class="element">&lt;window&gt;</sgmltag>, we are actually <emphasis role="i">instantiating</emphasis> the window class, 
which is a pre-defined class.</para>

<para>In this example, there is only one element within the class (the <indexterm><primary>text</primary></indexterm><sgmltag class="element">&lt;text&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: text-->
 element). But classes can contain many objects;
for example, views can contain many subviews. </para>
<para/><section><title>The id attribute</title>
<para>
It's important to note that you should not assign an <indexterm><primary>id</primary></indexterm><sgmltag class="attribute">id</sgmltag> attribute 
in a class definition.  Each id should be unique; ids are global and if you were to include an id assignment in the class definition, then creating several instances of a class would several views with the same id, which would cause unpredictable behavior.</para>


<para/></section></section><section id="classes-tutorial.inheritance"><title>Inheritance</title>

<para>As mentioned above, instances of <indexterm><primary>MyClass</primary></indexterm><sgmltag class="element">&lt;MyClass&gt;</sgmltag> are going to inherit from it. Just because we 
didn't specify <indexterm><primary>x</primary></indexterm><sgmltag class="attribute">x</sgmltag> and <indexterm><primary>y</primary></indexterm><sgmltag class="attribute">y</sgmltag> coordinates in the class definition doesn't mean we can't give them to the instance:</para>

<para>The <indexterm><primary>class</primary></indexterm><sgmltag class="element">&lt;class&gt;</sgmltag> tag defined the class, and the <indexterm><primary>MyClass</primary></indexterm><sgmltag class="element">&lt;MyClass&gt;</sgmltag> tag <emphasis role="i">instantiated</emphasis> it. Everything that was in the definition of the class is <emphasis role="i">inherited</emphasis> by the instance of it that we have created. i.e. The instance of <indexterm><primary>MyClass</primary></indexterm><sgmltag class="element">&lt;MyClass&gt;</sgmltag> inherits a width of 80, a height of 25, a background color, as well as some text. The instance is named "myFirstInstance", in the same way we might name a view, or a <indexterm><primary>window</primary></indexterm><sgmltag class="element">&lt;window&gt;</sgmltag>.</para>

<para>The instances behave just like views. In fact, that's because we are <emphasis role="i">extending</emphasis> the view class. By default, the <indexterm><primary>class</primary></indexterm><sgmltag class="element">&lt;class&gt;</sgmltag> tag extends the view class, so:</para>

<programlisting>&lt;class name="MyClass"&gt;</programlisting>

<para>… is the same as…</para>

<programlisting>&lt;class name="MyClass" <emphasis role="em">extends="view"</emphasis>&gt;</programlisting>

<para>It follows that you can extend any class you want:</para>

<example role="live-example">
   <title>Extending the 'button' class</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/classes-tutorial-$2.lzx"/></textobject> 
   </programlisting>
</example>

<para>Since the <indexterm><primary>button</primary></indexterm><sgmltag class="element">&lt;button&gt;</sgmltag><remark role="fixme">[unknown tag]</remark>
<!--unknown tag: button-->
 can take a text childnode that becomes its label, the <indexterm><primary>SpecialButton</primary></indexterm><sgmltag class="element">&lt;SpecialButton&gt;</sgmltag> class 
that extends it can also take the text childnode. The method <indexterm><primary><literal>changeLabel()</literal></primary></indexterm><methodname>changeLabel()</methodname> is also inherited by the instance.</para>

<para>Just as with attributes, methods can be overridden in instances:</para>

<example role="live-example">
   <title>Overwriting methods</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/classes-tutorial-$3.lzx"/></textobject> 
   </programlisting>
</example>

<para>Rewriting methods can be very handy when using both your own and pre-defined classes components, 
but it's not practical for when you have a class for which every instance may need a particular argument. </para>


<para/></section><section id="classes-tutorial.attributes"><title>Attributes</title>

<para>We've used attributes before (e.g. width="160"), but these have been attributes that are present in the class we are extending. 
As mentioned above, it is useful to be able to pass an instance of a class an argument when it is created:</para>

<example role="live-example">
   <title>Passing an argument to a class instance</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/classes-tutorial-$4.lzx"/></textobject> 
   </programlisting>
</example>


<para>If we give the attribute a value, then that will be its default value, and will get assigned if we don't explicitly set it.</para>

<para/></section><section><title>More Inheritance</title>

<para>You can extend a class more than once. For example, an application might contain more than one kind of button:</para>

<itemizedlist spacing="compact"><listitem><para>A standard button that is blue, then switches to green when we roll over it. Clicking this button writes out the name of a pet.</para></listitem><listitem><para>A special button, that is red, but also switches to green when we roll over it. Clicking this button writes out a day of the week.</para></listitem></itemizedlist>

<example role="live-example">
   <title>Extending a class more than once</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/classes-tutorial-$5.lzx"/></textobject> 
   </programlisting>
</example>

<para>Here we only changed the <indexterm><primary><literal>doAction()</literal></primary></indexterm><methodname>doAction()</methodname> method and the resource. The <indexterm><primary><literal>doOver()</literal></primary></indexterm><methodname>doOver()</methodname> and <indexterm><primary><literal>doOut()</literal></primary></indexterm><methodname>doOut()</methodname> methods remained the same, so there was no need to redefine them in the MySpecialButton definition.</para>

<para/></section><section id="classes-tutorial.placing"><title>Placing views inside of classes</title>

<para>Since we frequently write classes that extend view, at some stage we're going to need to place a view inside an instance of a class that we have created. For example, we may want to write a window class and put a text field inside of its title bar. Or we may want to put some content inside the middle of our window. There are two ways to do this: giving the subviews <indexterm><primary>placement</primary></indexterm><sgmltag class="attribute">placement</sgmltag> attributes, or giving the class the <indexterm><primary>defaultplacement</primary></indexterm><sgmltag class="attribute">defaultplacement</sgmltag> attribute.</para>

<para/><section><title>Placing views using the placement attribute</title>
<para>If you had one view and you specifically wanted to place it in a particular subview of a class, you would use the <indexterm><primary>placement</primary></indexterm><sgmltag class="attribute">placement</sgmltag> attribute of that view. </para>

<para>An example is the title bar of a window: It's unlikely that you would need to place several things in the title bar of a window, so it's OK to have to add the <indexterm><primary>placement</primary></indexterm><sgmltag class="attribute">placement</sgmltag> attribute to the subview of the class that you want to place in the title bar.</para>

<para/></section><section><title>Placing views by defining class with a defaultplacement attribute</title>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
Link to other chapters where this is described
</remark></para>
<para>If you want every subview of a class to be placed in the same location, then you give the <emphasis role="i">class definition</emphasis> a defaultplacement attribute.</para>

<para>An example is the contents of a window class. If you built your own window class (see the window tutorial), you might well have an area for all window content. You might well place numerous subviews in that window, and you don't want to explicitly position <emphasis role="i">each</emphasis> one.</para>
<para role="todo"><remark role="todo"><emphasis role="para-label">TODO: </emphasis>
conclusion and link to next subjects.
</remark></para>


<para/></section></section></chapter>
