<chapter id="static-databinding">

<title>Static Databinding with tag APIs</title>
<section><title>Introduction</title>
<para>
In this chapter we explain how to instantiate global and local datasets, populate them with "canned" data or from a remote source, and bind their contents to views using datapaths. Datapointers are explained as a way to position a logical cursor in a dataset.
</para>
<para>
This is "static" databinding in the sense that datasets are identified at compile-time; you cannot create new datasets at runtime using the &lt;dataset&gt; tags.
</para>
<para>
This chapter uses mostly small examples. Many more examples follow in later chapters, in order to illustrate most of the attributes and methods on &lt;dataset&gt;, &lt;datapath&gt; and &lt;datapointer&gt;
</para>
</section>
<section><title>Creating Static Datasets</title>
   <para>
    Declaring data using &lt;dataset&gt;
-- Creating Dataset relationships at compile time
---Global datasets and class ("local") datasets
-- The "src" attribute; inline data versus retreived data
---Literal Data (the &lt;data&gt; tag)
---When and how datasets are updated (autorequest, doRequest())
   </para>
</section>

<section><title>Dataset events</title>
   <para>Dataset events: onerror, ondata, ontimeout</para>

 

</section>

<section><title>Introduction to Databinding</title>

<section><title>Data Binding with XPath</title>
   <section>
<para>
    Conditional logic with Paths 
    Binding data to objects 
    -- binding nodes using datapaths
    -- binding attributes using $path

</para>
</section>
<section><title>
Data Binding and Attributes</title>
<para>
This example shows how to set the datapath on an object (in this case, a button) and then set the attributes within that object to access the data that the object is bound to. 
</para>
<para>
When the user clicks the button, it sets the value of a text field to that person's phone number in the database.
</para>
<para>
The datapath on the button is bound to the first person in the address book: 
</para>
<para>
&lt;button datapath="dset:/addressbook/contacts/person[1]" text="Set Last Name"&gt; 
</para>
<para>
  Inside the button, the attribute called phonenumber has its value set to the phone attribute of the person node that the button is data bound to: 
</para>
<para>
      &lt;attribute name="phonenumber" value="$path{'@phone'}"/&gt;
</para>
<para>
  The onclick event handler accesses the first phone text object and sets its text to the phonenumber attribute: 
</para>
<para>
    &lt;handler name="onclick"&gt;
parent.firstphone.setText(this.phonenumber);
&lt;/handler&gt;
</para>
<para>
The image of the first person is retrieved and displayed using the ondata event. Also the path of the file is written to the debugger.
</para>
<para> 
  Databind the myimage view to the first person in the address book: 
</para>
<para>
&lt;view name="myimage" datapath="dset:/addressbook/contacts/person[1]"&gt;
</para>
<para>
Inside the view, the value of the attribute called imagefile is set to be the phone attribute of the person node that the button is data bound to: 
</para>
<para>
      &lt;attribute name="imagefile" value="$path{'@thumbnail'}"/&gt;
</para>
<para>
The ondata event handler method sets the source for the view to the image that has now finished loading. We trace out to the debug window the path to the image: 
</para>
<para>
&lt;handler name="ondata"&gt;
var imagepath = "./sharedresources/headshots/" + this.imagefile;
Debug.write(imagepath);
this.setSource(imagepath);
&lt;/handler&gt;
</para>
<para>
We can retrieve the image of the second person and display it by overwriting the applyData() method (also writing the path of the file to the debugger). 
Here's how to databind the myimage2 view to the thumbnail attribute of the second person in the address book: 
</para>
<para>
&lt;view name="myimage2" datapath="dset:/addressbook/contacts/person[2]/@thumbnail"&gt;
</para>
<para>
Inside the view, we create an applyData() method. Inside the method, the source is set for the view to the image that has now finished loading. We trace out to the debug window the path to the image: 
</para>
<para>
&lt;method name="applyData"&gt;
var imagepath = "./sharedresources/headshots/" + this.data;
Debug.write(imagepath);
this.setSource(imagepath);
&lt;/method&gt; 
</para>

<example role="live-example">
   <title>Binding to attributes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-attributepathbinding.lzx"/></textobject> 
   </programlisting>
</example>

</section>
<section><title>
Concatenating Attributes</title>
<para>
This example shows how to concatenate two attribute values into the text value of a text object.  It concatenates the firstname and lastname attributes from within the first person node and display them in a text object.  
</para>
<para>

Databind the view to the first person node in the address book: 
</para>
<para>
&lt;view datapath="dset:/addressbook/contacts/person[1]"&gt;
</para>
<para>
Inside the view, we create two attributes, firstname and lastname, and set their values to their respective attributes within the xml data that this view is now bound to: 
</para>
<para>
&lt;attribute name="firstname" value="$path{'@firstname'}"/&gt;
&lt;attribute name="lastname" value="$path{'@lastname'}"/&gt;
</para>
<para>
Set the text attribute of the text object inside the view to be the firstname attribute value, then concatenate a space, then concatenate the lastname attribute: 
</para>
&lt;text text="${parent.firstname + ' ' + parent.lastname}"/&gt;
<example role="live-example">
   <title>Concatenating databound attributes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-concatenatingattributes.lzx"/></textobject> 
   </programlisting>
</example>
</section>
<section>
<title>Conditional logic with Paths</title>
<para>
This example shows the use of boolean logic to set the value of object attributes.  Based on the values in the xml data, either male or female, we will draw a blue view, or a pink view.
</para>
<para>
First, we create a view that displays the color pink if the gender of the first contact is female; or blue if male.
</para>
<para>
      Databind the gendercolor1 view to the first person node in the address book: 
</para>
<para>
            &lt;view width="100" height="100" name="gendercolor1" 
            
          datapath="dset:/addressbook/contacts/person[1]"&gt;
</para>
<para>
      Inside this view, we create an attribute called gender and set it's value to be the sex attribute of the person node that the view is currently data bound to: 
</para>
<para>
            &lt;attribute name="gender" value="$path{'@sex'}"/&gt;
</para>
<para>
Now, we create a bgcolor attribute of the view and, using the ternary operator, set its value to blue if the sex attribute is male and set its value to be pink if the sex attribute is female: 
</para>
<para>
            &lt;view width="100" height="100" name="gendercolor1" 
            
            datapath="dset:/addressbook/contacts/person[1]" log, you can reach him at vgoel@mercurynews.com bgcolor="${this.gender == 'female' ? 
            
            0xFF7070 : 0x7585FF}"&gt;
</para>
<para>
      Repeat steps 1 - 3 to produce the same effect for the second view. 
</para>
</section>

    <section>
    Changing a Datapath 
    --Setting the XPath Using a String 

    Updating datasets
     -- the updateData() method
    </section>
</section>

<section>
<title>Moving through data with datapointers</title>
<para>
An object's datapath may be changed at run-time.
</para>
<para>
The datapath must be declared in the LZX code.
               datapath is a subclass of LzDatapointer.
                LzDatapointer is capable of moving to a different location in the XML e.g.
                   Use selectNext(), selectPrev() etc., to move around the dataset.
                   Use setXPath() with a new string XPath to re-bind to a new location.
                   Use setPointer() to bind to a specific LzDataElement.
</para>
   <para>
   A datapointer is an object that represents a pointer to a node in an LzDataset. The datapointer can be repositioned using either:
   ----- cursor movements calls such as selectNext(), 
   ----- running an XPath request via setXPath()
   </para>

<example role="live-example">
   <title>Binding to attributes</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/datapointermove.lzx"/></textobject> 
   </programlisting>
</example>


<section>
<title>Changing a Datapath</title>
<para>
This example shows how to the datapath API (specifically selectNext() and selectPrev()) to access and traverse through data in a dataset. 

</para>
<para>
Inside the onclick event handler inside the nextname button, invoke the selectNext() method on the datapath object of the lastnameview view: 
</para>
<para>
lastnameview.datapath.selectNext();

</para>

<section><title>
Setting the XPath Using a String</title>
<para>
This example shows how to build a string and then set the datapath of an object to that string. 

</para>
<para>
  Inside the onclick event handler inside the nextname view, we create a string called apath and set its value to be the string 
</para>
<para>
"dset:/addressbook/contacts/person[", then concatenate to the end of this string the value of the idx attribute of the canvas, then concatenate the string "]": 
</para>
<para>
      var apath = "dset:/addressbook/contacts/person[" + parent.idx++ +"]";
</para>
<para>
  As the next line of code, still inside the onclick event handler, using the setXPath() method, we set the XPath of the lastnameview view to the apath string: 
</para>
<para>
      lastnameview.datapath.setXPath(apath);
</para>
<example role="live-example">
   <title>Setting XPath using a string</title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-xpathstring.lzx"/></textobject> 
   </programlisting>
</example>
</section>
</section>
</section>
</section>
</chapter>
