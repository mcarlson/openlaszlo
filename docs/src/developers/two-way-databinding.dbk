
<chapter id="two-way-databinding">
<title>Two-way databinding</title>
<para>
Mixing static and dynamic databinding
</para>
<para>
Summary:
This chapter explains the "funhouse mirror" quasi-equivalence of the datapath/datapointer APIs. There are two goals for the chapter: 
(1) at a minimum, make clear the distinction between the two kinds of approaches; that is, between moving nodes and moving pointers to nodes.
(2) hopefully, give enough explanation and examples such that people can mix and match between the two approaches without getting hopelessly confused.
</para>
<para>
            
                If the data changes, the data-bound object will update.
              Sometimes, with input controls, you need to bind back into the data.
              To trigger two-way databinding:
                    Call datapath.updateData().
                    Optionally, define an updateData() method at the root of the control.
                   This method is called automatically.
                    Returns the value to put back into the data.
</para>
<para>
Outline:
A comparison of datapath/datapointer APIs and DOM APIs
-- How to do equivalent action using either technique
---A table showing equivalent and quasi-equivalent methods
-- Explanation of actions that can be performed using only one or the other approach.
The .p property -- the gateway between static and dynamic APIs
-- Every datapath/datapointer has a .p property, which is the node to which it points.
--- therefore, you can use the DOM APIs on the .p attribute of datapaths and datapointers
</para>
<article lang="">
  <informaltable frame="all">
    <tgroup cols="3">
      <tbody>
        <row>
          <entry>
            <para>Datapointer Classes</para>
          </entry>

          <entry>
            <para>DataNode Classes</para>
          </entry>
          <entry>
            <para>Description</para>
          </entry>
        </row>
        <row>

          <entry>
            <para>addNode</para>
          </entry>
          <entry>
            <para>appendChild</para>
          </entry>
          <entry>
            <para>Adds a new child node below the current
            context</para>

          </entry>
        </row>
        <row>
          <entry>
            <para>deleteNode</para>
          </entry>
          <entry>
            <para>removeChild</para>

          </entry>
          <entry>
            <para>Removes the referenced node</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>deleteNodeAttribute</para>

          </entry>
          <entry>
            <para>removeAttr</para>
          </entry>
          <entry>
            <para>Removes the name attribute from the current
            node</para>
          </entry>
        </row>

        <row>
          <entry>
            <para>getChild</para>
          </entry>
          <entry>
            <para>getFirstChild and getLastChild</para>
          </entry>
          <entry>

            <para>Gets a specified child node</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>getNodeAttribute</para>
          </entry>
          <entry>

            <para>getAttr</para>
          </entry>
          <entry>
            <para>Returns the value of the current node's name
            attribute</para>
          </entry>
        </row>
        <row>
          <entry>

            <para>getNodeName</para>
          </entry>
          <entry>
            <para>NodeName (LzDataNode attribute)</para>
          </entry>
          <entry>
            <para>Gets the name of the node that the data pointer
            is pointing to</para>

          </entry>
        </row>
        <row>
          <entry>
            <para>getNodeText</para>
          </entry>
          <entry>
            <para>data (LzDataText attribute)</para>

          </entry>
          <entry>
            <para>Returns a string that is a concatenation of the
            text nodes beneath the current element</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>selectNext</para>

          </entry>
          <entry>
            <para>getNextSibling</para>
          </entry>
          <entry>
            <para>Selects the next sibling node in the
            dataset</para>
          </entry>
        </row>

        <row>
          <entry>
            <para>selectPrev</para>
          </entry>
          <entry>
            <para>getPreviousSibling</para>
          </entry>
          <entry>

            <para>Selects the previous sibling node in the
            dataset</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>selectParent</para>
          </entry>
          <entry>

            <para>parentNode (LzDataNode attribute)</para>
          </entry>
          <entry>
            <para>Moves up the data hierarchy to the next parent
            node in the dataset</para>
          </entry>
        </row>
        <row>
          <entry>

            <para>serialize</para>
          </entry>
          <entry>
            <para>serialize</para>
          </entry>
          <entry>
            <para>Serializes the current element and its children
            to an XML string</para>

          </entry>
        </row>
        <row>
          <entry>
            <para>setNodeAttribute</para>
          </entry>
          <entry>
            <para>setAttr</para>

          </entry>
          <entry>
            <para>Sets the name attribute of the current node to
            the val argument</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>setNodeName</para>

          </entry>
          <entry>
            <para>setNodeName</para>
          </entry>
          <entry>
            <para>Sets the name of the current element to the name
            argument</para>
          </entry>
        </row>

        <row>
          <entry>
            <para>setNodeText</para>
          </entry>
          <entry>
            <para>setData</para>
          </entry>
          <entry>

            <para>Sets the current node's text to the text
            argument</para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para />
</article>
<para>
Datapointer and DataElement

-- Deleting a Node
-- Creating a Node
---Accessing a LzDataelement
---Using a LzDataelement
---Destroying a Node
</para>
<para>
<section><title>
Changing Data Binding with Attribute p</title>

This example shows how to change the datapath of an object using the p attribute.


  Inside the onclick handler inside the button, set the p attribute of the firstview object to be the p attribute of the secondview object: 

      parent.firstview.datapath.setAttribute("p", parent.secondview.datapath.p);
<example role="live-example">
   <title>Changing Data Binding with Attribute p </title>
   <programlisting language="lzx">
   <textobject><textdata fileref="programs/data-setattribute_p.lzx"/></textobject> 
   </programlisting>
</example>
</section>

Exploring Two-way Data Binding 

This example shows that when data in a dataset changes, any objects that are databound to that data automatically get updated (there is automatic synchronization between the data layer and the UI layer). 


Using the datapath attribute, display the last name of the first contact in the first text object: 

&lt;text resize="true" name="lastnameinitcaps" 
    datapath="dset:/addressbook/contacts/person[1]/@lastname" /&gt; 

Using the datapath attribute, databind the edittext object to the same lastname attribute, as in Step 1: 

&lt;edittext width="300" name="lastnameedit" 
    datapath="dset:/addressbook/contacts/person[1]/@lastname"&gt; 

The above shows how the dataset controls the what is displayed. Now let's look at how the updateData() method works in the other direction, when the changes to the databound attributes can be propagated back to the dataset. Examine the
onclick event handler for the button. When the button is clicked, it programmatically synchronizes the data and the UI layer of the lastnameedit using the updateData() method of its datpath object: 

      parent.lastnameedit.datapath.updateData();

The .data property
-- .data is shorthand for datapath.p
-- Objects like views have a .data property when they are databound and replicated. Otherwise .data is null.
</para>
</chapter>
