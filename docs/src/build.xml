<?xml version="1.0"?>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2006 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!DOCTYPE project [
    <!ENTITY build_opt SYSTEM "file:../../build-tools/build-opt.xml">
]>

<project name="reference" default="build">
  &build_opt;
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask"/>
  
  <!-- Local locations for public DTDs, so that the build doesn't
       require web access -->
  <xmlcatalog id="commonDTDs">
    <dtd publicId="-//W3C//DTD XHTML 1.0 Transitional//EN"
         location="dtds/xhtml1-transitional.dtd"/>
  </xmlcatalog>

  <path id="saxon.processor.classpath">
    <pathelement path="../../WEB-INF/lib/saxon-6.5.3-lz-p1.jar" />
    <pathelement path="../../3rd-party/jars/dev/xercesImpl.jar"/>
    <pathelement path="${docbook-xsl}/extensions/saxon651.jar" />
  </path>
  
  <!-- Format a single html file and extract its examples.  This is a
       helper target for the reference and tutorials builds. -->
  <target name="format-one" depends="init">
    <!-- the tail is everything after the final / or \ -->
    <propertyregex property="tail"
              input="${fname}"
              regexp=".*[\\/](.*)"
              select="\1"/>
    <!-- the basename is the tail minus .suffix -->
    <propertyregex property="base"
              input="${fname}"
              regexp=".*[\\/](.*)\.[^.]*"
              select="\1"/>
    <style style="xsl/format.xsl" in="${fname}"
           out="${reference.output.dir}/${tail}">
      <xmlcatalog refid="commonDTDs"/>
      <param name="show.comments" expression="${show.comments}"/>
      <param name="show.fixmes" expression="${show.fixmes}"/>
      <param name="docid" expression="${base}"/>
      <param name="localdir" expression="docs/reference/"/>
      <param name="lpsdir" expression="../../"/>
      <!-- lxz dir encodes lpsdir and localdir so make-php can translate -->
      <param name="lzxdir" expression="../../docs/reference/"/>
      <param name="requestType" expression="inline-example"/>
    </style>
  </target>

  <target name="init" description="Init tasks for documentation generation"
          unless="docs.src.done.init" depends="build-opt">
      
      <!-- build properties -->
      <property file="${LPS_HOME}/build.properties"/>
      
      <!-- doc build properties -->
      <property name="docbook-xsl" value="${VENDOR_ROOT}/docbook-xsl-1.65.1"/>
      <property name="docs.output.dir" value="${LPS_HOME}/docs" />
      <if><equals arg1="${release}" arg2="Production" casesensitive="true"/>
      <then>
        <property name="draft.mode" value="no"/>
        <property name="show.comments" value="0"/>
        <property name="show.fixmes" value="0"/>
      </then>
      <else>
        <property name="draft.mode" value="yes"/>
        <property name="show.comments" value="1"/>
        <if><equals arg1="${release}" arg2="Internal" casesensitive="true"/>
        <then>
          <property name="show.fixmes" value="1"/>
        </then>
        <else>
          <property name="show.fixmes" value="0"/>
        </else>
        </if>
      </else>
      </if>
      
      <!-- reference properties -->
      <property name="schema.dir" value="${LPS_HOME}/WEB-INF/lps/schema" />
      <property name="components.dir" value="${LPS_HOME}/lps/components"/>
      <property name="tagdocs.dir" value="${schema.dir}/tagdocs" />
      <property name="server.dir" value="${LPS_HOME}/WEB-INF/lps/server" />
      <property name="sc.dir" value="${server.dir}/sc" />
      <property name="jsdocs.dir" value="${sc.dir}/jsdocs" />
      <property name="lfc.dir" value="${LPS_HOME}/WEB-INF/lps/lfc" />
      <property name="reference.input.dir" value="hardpages"/>
      <property name="reference.input.wrappers.dir" value="wrappers"/>
      <property name="reference.redmond.input.tags" value="build"/>
      <property name="reference.build.dir" value="build/reference"/>
      <property name="reference.build.html.dir" value="${reference.build.dir}/html"/>
      <property name="reference.build.xml.dir" value="${reference.build.dir}/xml"/>
      <property name="reference.output.dir" value="${docs.output.dir}/reference" />
      
      <!-- TODO: [2005-02-18 ptw] s/dguide/developers/ -->
      <!-- dguide properties -->
      <property name="dguide.input.dir" value="dguide"/>
      <property name="dguide.input.index" value="index.dbk"/>
      <property name="dguide.build.dir" value="build/dguide"/>
      <property name="dguide.output.dir" value="${docs.output.dir}/guide"/>
      <property name="dguide.output.index" value="index.html"/>

      <property name="dguide.fast.output.dir" value="${docs.output.dir}/fast-dguide"/>
      <property name="dguide.old.input.dir" value="dguide"/>
      <property name="dguide.old.build.dir" value="build/old-dguide"/>
      <property name="dguide.old.output.dir" value="${docs.output.dir}/old-developers-guide"/>
      
      <!-- deployers properties -->
      <property name="deployers.input.dir" value="dguide"/>
      <property name="deployers.input.index" value="deployers-index.dbk"/>
      <property name="deployers.build.dir" value="build/deploy"/>
      <property name="deployers.output.dir" value="${docs.output.dir}/deploy"/>
      <property name="deployers.output.index" value="deployers-index.html"/>
      
      <!-- designers properties -->
      <property name="designers.input.dir" value="dguide"/>
      <property name="designers.input.index" value="designers-index.dbk"/>
      <property name="designers.build.dir" value="build/design"/>
      <property name="designers.output.dir" value="${docs.output.dir}/design"/>
      <property name="designers.output.index" value="designers-index.html"/>
      
      <!-- internal properties -->
      <property name="internal.input.dir" value="internal"/>
      <property name="internal.input.index" value="index.dbk"/>
      <property name="internal.build.dir" value="build/internal"/>
      <property name="internal.output.dir" value="${docs.output.dir}/internal"/>
      <property name="internal.output.index" value="index.html"/>

      <!-- tutorial properties -->
      <property name="tutorials.input.dir" value="tutorials"/>
      <property name="tutorials.input.index" value="index.dbk"/>
      <property name="tutorials.build.dir" value="build/tutorials"/>
      <property name="tutorials.output.dir" value="${dguide.output.dir}"/>
      <property name="tutorials.output.index" value="index.html"/>
      
      <property name="tutorials.old.input.dir" value="tutorials"/>
      <property name="tutorials.old.build.dir" value="build/old-tutorials"/>
      <property name="tutorials.old.output.dir" value="${docs.output.dir}/old-tutorials"/>
      
      <property name="docs.src.done.init" value="true" />
  </target>

  <!--
    targets relating to the reference:
  -->

  <target name="clean-reference-html" depends="init">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${reference.output.dir}" includes="**/*"/>
    </delete>
  </target>

  <target name="clean-local-reference" depends="init">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="build" includes="*.xml" excludes="redmond-*.xml"/>
      <fileset dir="${reference.build.dir}"/>
      <fileset dir="${reference.output.dir}"/>
    </delete>
  </target>
  
  <target name="clean-reference" description="Clean the reference files"
          depends="init,clean-local-reference">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${tagdocs.dir}"/>
      <fileset dir="${jsdocs.dir}"/>
      <fileset dir="${reference.input.wrappers.dir}" includes="**/*.xml"
               excludes="**/schemas.xml"/>
    </delete>
  </target>
  
  <target name="api-xml" description="Build the API doc XML files"
          depends="init">
      <if><not>
        <uptodate targetfile="${jsdocs.dir}/api-lzview.xml">
           <srcfiles dir="${lfc.dir}" includes="**/*.as" />
           <srcfiles dir="${sc.dir}" includes="*.py" />
        </uptodate></not>
      <then>
        <mkdir dir="${jsdocs.dir}" />
        <delete>
          <fileset dir="${jsdocs.dir}" includes="api-*.xml"/>
        </delete>
        <ant dir="${server.dir}" target="compile" />
        <exec executable="bash" dir="${sc.dir}" failonerror="${build.docs.error.fail}">
          <arg line="-c &quot;./sci jsdoc2xml.py&quot;"/>
        </exec>
      </then></if>
      <!-- Copy the files -->
      <copy todir="${reference.input.wrappers.dir}">
        <fileset dir="${jsdocs.dir}" includes="*.xml" excludes="schemas.xml">
          <depend targetdir="${reference.input.wrappers.dir}"/>
        </fileset>
      </copy>
  </target>
  
  <target name="tag-xml" description="Build the tag doc XML files" 
          depends="init">
      <if><not><uptodate targetfile="${tagdocs.dir}/tag-view.xml">
            <srcfiles dir="${schema.dir}" includes="lzx.rnc"/>
            <srcfiles dir="${schema.dir}" includes="*.py"/>
            <srcfiles dir="${components.dir}" includes="**/*.lzx"/>
        </uptodate></not>
      <then>
          <mkdir dir="${tagdocs.dir}"/>
          <delete>
            <fileset dir="${tagdocs.dir}" includes="tag-*.xml"/>
          </delete>
          <ant dir="${schema.dir}"/>
          <exec executable="python" dir="${schema.dir}" failonerror="${build.docs.error.fail}">
             <arg line="rng2xml.py"/>
          </exec>
      </then></if>
      <!-- Copy the files -->
      <copy todir="${reference.input.wrappers.dir}">
        <fileset dir="${tagdocs.dir}" includes="**/*.xml">
          <depend targetdir="${reference.input.wrappers.dir}"/>
        </fileset>
      </copy>
  </target>

  <target name="combined-xml" depends="init,tag-xml,api-xml"> <!-- ,validate -->
      <if><not><uptodate targetfile="${reference.build.xml.dir}/view.xml">
            <srcfiles dir="${tagdocs.dir}" includes="**/*"/>
            <srcfiles dir="${reference.input.wrappers.dir}" includes="**/*"/>
            <srcfiles dir="." includes="*.py"/>
        </uptodate></not>
      <then>
        <mkdir dir="${reference.build.html.dir}"/>
        <mkdir dir="${reference.build.xml.dir}"/>
        <exec executable="python" failonerror="${build.docs.error.fail}">
          <arg line="makeXML.py"/>
          <arg line="--output ${reference.build.xml.dir}"/>
          <arg line="--indexdir ${reference.build.html.dir}"/>
          <arg line="-q"/>
        </exec>
    </then></if>
    <copy todir="${reference.build.xml.dir}">
      <fileset dir="${reference.redmond.input.tags}" includes="*.xml"/>
    </copy>
  </target>
  
  <!-- Build the HTML files and place them in build/html.  They still
       need to be run through the stylesheet. -->
  <target name="raw-html" depends="init,combined-xml">
    <mkdir dir="${reference.build.dir}"/>
    <outofdate>
      <sourcefiles>
        <fileset dir="." includes="*.py"/>
        <fileset dir="wrappers" includes="**/*"/>
      </sourcefiles>
      <mapper type="glob" dir="wrappers"
              from="*.xml" to="${reference.build.html.dir}/*.html"/>
      <sequential>
        <exec executable="python" failonerror="${build.docs.error.fail}">
	  <arg line="makeHTML.py"/>
          <arg line="--input ${reference.build.xml.dir}"/>
          <arg line="--output ${reference.build.html.dir}"/>
	  <arg line="-q"/>
        </exec>
      </sequential>
    </outofdate>
  </target>
  
  <target name="reference.target.db" depends="init,raw-html">
    <concat destfile="${reference.build.dir}/target.db">
      <filelist dir="." files="target.db.header"/>
      <fileset  dir="${reference.build.html.dir}" includes="*.db.fragment"
                excludes="redmond-*,splash-view.*,html-font.*"/>
      <filelist dir="." files="target.db.footer"/>
    </concat>
  </target>
  
  <!-- This assures that the target db exists, but not that it's up to
       date.  It's a much faster alternative to reference.target.db
       for use in incremental guide and tutorial builds. -->
  <target name="reference.target.db.exists" depends="init">
    <if>
      <not><available file="${reference.build.dir}/target.db"/></not>
      <then>
        <ant target="reference.target.db"/>
      </then>
    </if>
  </target>
  
  <target name="reference.html"
          depends="init,raw-html,reference.target.db">
    <mkdir dir="${reference.output.dir}"/>
    <!-- If the stylesheets have changed more recently than the html
         output files, force the latter to rebuild by deleting
         them. -->
    <outofdate>
      <sourcefiles>
        <fileset dir="xsl" includes="format.xsl"/>
      </sourcefiles>
      <targetfiles>
        <fileset dir="${reference.output.dir}" includes="**/*.html"/>
      </targetfiles>
      <sequential>
        <delete>
          <fileset dir="${reference.output.dir}" includes="**/*.html"/>
        </delete>
      </sequential>
    </outofdate>
    <style style="xsl/redmond-components.xsl"
           in="${reference.build.html.dir}/index-alphabetical.html"
           out="${reference.build.html.dir}/redmond-components.html">
      <xmlcatalog refid="commonDTDs"/>
    </style>
    <!-- Copy the HTML files from build/html and hardpages, formatting
         them with the stylesheet as they're copied.  This stylesheet
         extracts the *.lxz.in files and places them in the output
         directory. -->
    <foreach param="fname" target="format-one">
      <path>
        <fileset dir="${reference.build.html.dir}" includes="*.html">
          <depend targetdir="${reference.output.dir}"/>
        </fileset>
        <fileset dir="${reference.input.dir}"
                 includes="*.html" 
                 excludes="nav.html,html-nav.html">
          <depend targetdir="${reference.output.dir}"/>
        </fileset>
      </path>
    </foreach>
  </target>
  
  <target name="reference" description="Build the reference"
          depends="init,reference.html">
    <!-- Copy non-html pages from hardpages -->
    <copy todir="${reference.output.dir}">
      <fileset dir="${reference.input.dir}" excludes="*.html,schemas.xml">
        <depend targetdir="${reference.output.dir}"/>
      </fileset>
      <fileset dir="${reference.build.html.dir}" includes="*.xml"/>
      <fileset dir="wrappers" includes="images/**"/>
      <fileset dir="wrappers" includes="resources/**"/>
    </copy>
    
    <!-- Create the *.lzx files from the *.lzx.in files that the
         stylesheet created. -->
    <copy todir="${reference.output.dir}">
      <fileset dir="${reference.output.dir}" includes="*.in"/>
      <filterset begintoken="&amp;" endtoken=";">
        <filtersfile file="entities.properties"/>
      </filterset>
      <mapper type="glob" from="*.in" to="*"/>
    </copy>
    <!-- Now delete the *.in files -->
    <delete>
      <fileset dir="${reference.output.dir}" includes="*.in"/>
    </delete>
    
    <!-- Create the navbar data -->
    <style style="xsl/make-toc.xsl"
           in="${reference.build.html.dir}/categories.xml"
           out="${reference.output.dir}/toc.xml">
      <xmlcatalog refid="commonDTDs"/>
    </style>
    <style style="xsl/make-tag-index.xsl"
           in="${reference.output.dir}/index.xml"
           out="${reference.output.dir}/tags.xml">
      <param name="class" expression="tag"/>
    </style>
    <style style="xsl/make-tag-index.xsl"
           in="${reference.output.dir}/index.xml"
           out="${reference.output.dir}/classes.xml">
      <param name="class" expression="api"/>
    </style>
    <outofdate>
      <sourcefiles>
        <fileset dir="${reference.output.dir}" includes="toc.xml,tags.xml,classes.xml"/>
      </sourcefiles>
      <targetfiles>
        <fileset dir="${reference.output.dir}" includes="nav.html,html-nav.html"/>
      </targetfiles>
      <sequential>
        <delete>
          <fileset dir="${reference.output.dir}" includes="nav.html,html-nav.html"/>
        </delete>
      </sequential>
    </outofdate>
    <style style="xsl/reference-nav.xsl"
           basedir="${reference.input.dir}"
           destdir="${reference.output.dir}"
           includes="nav.html,html-nav.html">
      <xmlcatalog refid="commonDTDs"/>
    </style>
  </target>
  
  
  <!--
    implementation targets shared by the dguide and tutorials
  -->
  
  <target name="dguide-or-tutorials" description="Build the tutorials"
          depends="init">
    <!-- Copy the input files to the build directory.  The stylesheet
         formats them and extracts the lzx programs as *.in files. -->
    <mkdir dir="${local.build.dir}"/>
    <style style="xsl/format.xsl" basedir="${local.input.dir}"
           destdir="${local.build.dir}" includes="*.html">
      <xmlcatalog refid="commonDTDs"/>
      <!-- lxz dir encodes lpsdir and localdir so make-php can translate -->
      <param name="lzxdir" expression="${param.lpsdir}${param.localdir}programs/"/>
      <param name="localdir" expression="${param.localdir}"/>
      <param name="lpsdir" expression="${param.lpsdir}"/>
      <param name="bodyClass" expression="${param.bodyClass}"/>
      <param name="make-toc" expression="true"/>
    </style>
    
    <!-- Copy the build files to the output directory. -->
    <mkdir dir="${local.output.dir}"/>
    <chmod dir="${local.output.dir}" perm="ugo+w" includes="*.html"/>
    <copy todir="${local.output.dir}">
      <fileset dir="${local.build.dir}" includes="*.html" />
    </copy>
    
    <!-- Extract the lzx (and other) files from the *.in files. -->
    <mkdir dir="${local.output.dir}/programs"/>
    <copy todir="${local.output.dir}/programs">
      <fileset dir="${local.build.dir}" includes="*.in"/>
      <filterset begintoken="&amp;" endtoken=";">
        <filtersfile file="entities.properties"/>
      </filterset>
      <mapper type="glob" from="*.in" to="*"/>
    </copy>
    
    <!-- Copy non-html files -->
    <copy todir="${local.output.dir}">
      <fileset dir="${local.input.dir}" excludes="*.html,schemas.xml,build.xml"/>
    </copy>
  </target>
  
  <target name="old-tutorials" description="Build the tutorials"
          depends="init">
    <foreach target="dguide-or-tutorials" list="tutorials" param="dir" inheritall="true">
      <param name="local.build.dir" value="${tutorials.old.build.dir}"/>
      <param name="local.input.dir" value="${tutorials.old.input.dir}"/>
      <param name="local.output.dir" value="${tutorials.old.output.dir}"/>
      <param name="param.localdir" value="docs/tutorials/"/>
      <param name="param.lpsdir" value="../../"/>
      <param name="param.bodyClass" value="tutorial"/>
    </foreach>
  </target>
  
  <!-- A parameterized target called by *.resources.  Inputs are
       local.input.dir, local.build.dir, and local.output.dir -->
  <target name="book.resources" depends="init">
    <!-- Extract the lzx (and other) files from the *.in files. -->
    <mkdir dir="${local.output.dir}/programs"/>
    <copy todir="${local.output.dir}/programs">
      <fileset dir="${local.build.dir}" includes="*.in"/>
      <filterset begintoken="&amp;" endtoken=";">
        <filtersfile file="entities.properties"/>
      </filterset>
      <mapper type="glob" from="*.in" to="*"/>
    </copy>
    
    <copy todir="${local.output.dir}/images">
      <fileset dir="${docbook-xsl}/images"/>
    </copy>
    
    <mkdir dir="${local.output.dir}/programs/resources"/>
    <copy todir="${local.output.dir}/programs/resources">
      <fileset dir="${local.input.dir}/resources"/>
    </copy>
    <copy todir="${local.output.dir}">
      <fileset dir="${local.input.dir}" excludes="*.html,*.dbk,schemas.xml"/>
    </copy>
  </target>
  
  <target name="tutorials.preprocess" depends="init,reference.target.db.exists">
    <foreach target="book.preprocess" list="tutorials" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${tutorials.input.dir}"/>
      <param name="local.input.index" value="${tutorials.input.index}"/>
      <param name="local.build.dir" value="${tutorials.build.dir}"/>
    </foreach>
  </target>
  
  <target name="tutorials.docbook" depends="init,tutorials.preprocess">
    <mkdir dir="${tutorials.output.dir}/programs"/>
    <outofdate>
      <sourcefiles>
        <fileset dir="${LPS_HOME}" includes="build.properties"/>
        <fileset dir="xsl" includes="common-html.xsl"/>
        <fileset dir="xsl" includes="parameters.xsl"/>
        <fileset dir="xsl" includes="tutorials.xsl"/>
        <fileset dir="${tutorials.build.dir}" includes="*"/>
      </sourcefiles>
      <targetfiles>
        <fileset dir="${tutorials.output.dir}" includes="*.html"/>
        <pathelement path="${tutorials.output.dir}/${tutorials.output.index}"/>
      </targetfiles>
      <sequential>
        <java classname="com.icl.saxon.StyleSheet"
              fork="yes" 
              failonerror="${build.docs.error.fail}">
          <classpath refid="saxon.processor.classpath" />
          <jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
          <jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
          <jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>
          
          <arg line="-o ${tutorials.output.dir}/${tutorials.output.index}"/>
          <arg line="${tutorials.build.dir}/${tutorials.input.index}"/>
          <arg line="xsl/tutorials.xsl"/>
          <arg line="base.dir=${tutorials.output.dir}/"/>
          <arg line="localdir=docs/tutorials/"/>
          <arg line="draft.mode=${draft.mode}"/>
          <arg line="show.comments=${show.comments}"/>
          <arg line="show.fixmes=${show.fixmes}"/>
        </java>
      </sequential>
    </outofdate>
  </target>
  
  <target name="tutorials.resources" depends="init">
    <foreach target="book.resources" list="tutorials" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${tutorials.input.dir}" />
      <param name="local.output.dir" value="${tutorials.output.dir}" />
      <param name="local.build.dir" value="${tutorials.build.dir}" />
    </foreach>
  </target>
  
  <target name="tutorials" depends="init,tutorials.docbook,tutorials.resources">
    <copy file="${tutorials.input.dir}/${tutorials.output.index}"
          todir="${tutorials.output.dir}"
          overwrite="true"/>
  </target>
  
  <!-- dguide targets -->
  
  <target name="old-dguide" description="Build the dguide"
          depends="init">
    <mkdir dir="${dguide.old.build.dir}"/>
    <foreach target="dguide-or-tutorials" list="dguide" param="dir" inheritall="true">
      <param name="local.build.dir" value="${dguide.old.build.dir}"/>
      <param name="local.input.dir" value="${dguide.old.input.dir}"/>
      <param name="local.output.dir" value="${dguide.old.output.dir}"/>
      <param name="param.localdir" value="docs/guide/"/>
      <param name="param.lpsdir" value="../../"/>
      <param name="param.bodyClass" value="dguide-chapter"/>
    </foreach>
    <mkdir dir="${dguide.old.output.dir}/programs/resources"/>
    <copy todir="${dguide.old.output.dir}/programs/resources">
        <fileset dir="${dguide.old.input.dir}/resources"/>
    </copy>
  </target>
  
  <!-- A parameterized target called by *.preprocess.  Inputs are
       local.input.dir, local.input.index, and local.build.dir -->
  <target name="book.preprocess" depends="init,reference.target.db.exists">
    <mkdir dir="${local.build.dir}"/>
    <outofdate>
      <sourcefiles>
        <fileset dir="xsl" includes="html2dbk.xsl,xref.xsl"/>
      </sourcefiles>
      <targetfiles>
        <fileset dir="${local.build.dir}" includes="*.dbk" excludes="${local.input.index}"/>
      </targetfiles>
      <sequential>
        <delete>
          <fileset dir="${local.build.dir}" includes="*.dbk" excludes="${local.input.index}"/>
        </delete>
      </sequential>
    </outofdate>
    <style style="xsl/collect-includes.xsl"
           in="${local.input.dir}/${local.input.index}"
           out="${local.build.dir}/includes.txt"/>
    <style style="xsl/doc2dbk.xsl"
           basedir="${local.input.dir}"
           includesfile="${local.build.dir}/includes.txt"
           destdir="${local.build.dir}"
           extension=".dbk"
           excludes="${local.output.index}">
      <xmlcatalog refid="commonDTDs"/>
      <param name="show.fixmes" expression="${show.fixmes}"/>
    </style>
    <copy todir="${local.build.dir}">
      <fileset dir="${local.input.dir}" includes="*.dbk" excludes="${local.input.index}"/>
    </copy>
  </target>
  
  <!-- A parameterized target called by *.docbook.  Inputs are
       local.build.dir, local.input.index, local.output.dir, and
       local.output.index -->
  <target name="book.docbook" depends="init">
    <!-- localdir is the output dir relative to LPS_HOME -->
    <propertyregex property="LPS_HOME.escaped" input="${LPS_HOME}"
        regexp="\\" replace="\\\\\\\\" global="true" defaultvalue="${LPS_HOME}" />
    <propertyregex property="localdir"
              input="${local.output.dir}"
              regexp="${LPS_HOME.escaped}/(.*)"
              select="\1/"/>
    <mkdir dir="${local.output.dir}/programs"/>
    <outofdate>
      <sourcefiles>
        <fileset dir="${LPS_HOME}" includes="build.properties"/>
        <fileset dir="xsl" includes="parameters.xsl"/>
        <fileset dir="xsl" includes="common-html.xsl"/>
        <fileset dir="xsl" includes="local.xsl"/>
        <fileset dir="${local.build.dir}" includes="*"/>
      </sourcefiles>
      <targetfiles>
        <fileset dir="${local.output.dir}" includes="*.html"/>
        <pathelement path="${local.output.dir}/${local.output.index}"/>
      </targetfiles>
      <sequential>
        <java classname="com.icl.saxon.StyleSheet"
              fork="yes"
              failonerror="${build.docs.error.fail}">
          <classpath refid="saxon.processor.classpath" />
          <jvmarg value="-Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl"/>
          <jvmarg value="-Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
          <jvmarg value="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"/>
          
          <arg line="-o ${local.output.dir}/${local.output.index}"/>
          <arg line="${local.build.dir}/${local.input.index}"/>
          <arg line="${local.worksheet}"/>
          <arg line="base.dir=${local.output.dir}/"/>
          <arg line="localdir=${localdir}"/>
          <arg line="draft.mode=${draft.mode}"/>
          <arg line="show.comments=${show.comments}"/>
          <arg line="show.fixmes=${show.fixmes}"/>
        </java>
      </sequential>
    </outofdate>
  </target>
  
  <!-- developer's guide -->
  <target name="dguide.preprocess" depends="init,tutorials.preprocess">
    <foreach target="book.preprocess" list="dguide" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${dguide.input.dir}"/>
      <param name="local.input.index" value="${dguide.input.index}"/>
      <param name="local.build.dir" value="${dguide.build.dir}"/>
    </foreach>
    <style in="${dguide.input.dir}/${dguide.input.index}"
           style="xsl/insert-preface.xsl"
           out="${dguide.build.dir}/${dguide.input.index}">
      <param name="preface.dir" expression="${dguide.build.dir}"/>
    </style>
  </target>
  
  <target name="dguide.docbook" depends="init,dguide.preprocess">
    <foreach target="book.docbook" list="dguide" param="dir"
             inheritall="true">
      <param name="local.build.dir" value="${dguide.build.dir}"/>
      <param name="local.input.index" value="${dguide.input.index}"/>
      <param name="local.output.dir" value="${dguide.output.dir}"/>
      <param name="local.output.index" value="${dguide.output.index}"/>
      <param name="local.worksheet" value="xsl/dguide.xsl"/>
    </foreach>
  </target>
  
  <target name="dguide.resources" depends="init">
    <foreach target="book.resources" list="dguide" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${dguide.input.dir}"/>
      <param name="local.output.dir" value="${dguide.output.dir}"/>
      <param name="local.build.dir" value="${dguide.build.dir}"/>
    </foreach>
    <foreach target="book.resources" list="tutorials" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${tutorials.input.dir}"/>
      <param name="local.output.dir" value="${tutorials.output.dir}"/>
      <param name="local.build.dir" value="${tutorials.build.dir}"/>
    </foreach>
  </target>
  
  <target name="dguide" depends="init,dguide.docbook,dguide.resources"/>
  
  <!-- deployer's guide -->
  <target name="deployers.preprocess" depends="init,tutorials.preprocess">
    <foreach target="book.preprocess" list="deployers" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${deployers.input.dir}"/>
      <param name="local.input.index" value="${deployers.input.index}"/>
      <param name="local.build.dir" value="${deployers.build.dir}"/>
    </foreach>
    <style in="${deployers.input.dir}/${deployers.input.index}"
           style="xsl/insert-preface.xsl"
           out="${deployers.build.dir}/${deployers.input.index}">
      <param name="preface.dir" expression="${deployers.build.dir}"/>
    </style>
  </target>
  
  <target name="deployers.docbook" depends="init,deployers.preprocess">
    <foreach target="book.docbook" list="deployers" param="dir"
             inheritall="true">
      <param name="local.build.dir" value="${deployers.build.dir}"/>
      <param name="local.input.index" value="${deployers.input.index}"/>
      <param name="local.output.dir" value="${deployers.output.dir}"/>
      <param name="local.output.index" value="${deployers.output.index}"/>
      <param name="local.worksheet" value="xsl/dguide.xsl"/>
    </foreach>
  </target>
  
  <target name="deployers.resources" depends="init">
    <foreach target="book.resources" list="deployers" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${deployers.input.dir}"/>
      <param name="local.output.dir" value="${deployers.output.dir}"/>
      <param name="local.build.dir" value="${deployers.build.dir}"/>
    </foreach>
    <!-- [2005-02-18 ptw] No tutorials here? -->
  </target>
  
  <target name="deployers" depends="init,deployers.docbook,deployers.resources"/>
  
  <!-- designer's guide -->
  <target name="designers.preprocess" depends="init,tutorials.preprocess">
    <foreach target="book.preprocess" list="designers" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${designers.input.dir}"/>
      <param name="local.input.index" value="${designers.input.index}"/>
      <param name="local.build.dir" value="${designers.build.dir}"/>
    </foreach>
    <style in="${designers.input.dir}/${designers.input.index}"
           style="xsl/insert-preface.xsl"
           out="${designers.build.dir}/${designers.input.index}">
      <param name="preface.dir" expression="${designers.build.dir}"/>
    </style>
  </target>
  
  <target name="designers.docbook" depends="init,designers.preprocess">
    <!-- YS added the following copy as a temporary work around for a bug in oliver's doc tools! -->
    <copy todir="${designers.build.dir}">
        <fileset dir="${tutorials.build.dir}">
            <include name="laszlo_basics-*"/>
            <include name="text-*"/>
            <include name="art_assets-*"/>
            <include name="views-*"/>
        </fileset>
        <filterset begintoken="../" endtoken="/">
           <filter token="resources" value="../../guide/resources/" />
           <filter token="images" value="../../guide/images/" />
        </filterset>
    </copy>
    <foreach target="book.docbook" list="designers" param="dir"
             inheritall="true">
      <param name="local.build.dir" value="${designers.build.dir}"/>
      <param name="local.input.index" value="${designers.input.index}"/>
      <param name="local.output.dir" value="${designers.output.dir}"/>
      <param name="local.output.index" value="${designers.output.index}"/>
      <param name="local.worksheet" value="xsl/dguide.xsl"/>
    </foreach>
  </target>
  
  <target name="designers.resources" depends="init">
    <foreach target="book.resources" list="designers" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${designers.input.dir}"/>
      <param name="local.output.dir" value="${designers.output.dir}"/>
      <param name="local.build.dir" value="${designers.build.dir}"/>
    </foreach>
    <!-- [2005-02-18 ptw] No tutorials here? -->
  </target>
  
  <target name="designers" depends="init,designers.docbook,designers.resources"/>
  
  <!-- internal docs -->
  <target name="internal.preprocess" depends="init,tutorials.preprocess">
    <foreach target="book.preprocess" list="internal" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${internal.input.dir}"/>
      <param name="local.input.index" value="${internal.input.index}"/>
      <param name="local.build.dir" value="${internal.build.dir}"/>
    </foreach>
    <style in="${internal.input.dir}/${internal.input.index}"
           style="xsl/insert-preface.xsl"
           out="${internal.build.dir}/${internal.input.index}">
      <param name="preface.dir" expression="${internal.build.dir}"/>
    </style>
  </target>
  
  <target name="internal.docbook" depends="init,internal.preprocess">
    <foreach target="book.docbook" list="internal" param="dir"
             inheritall="true">
      <param name="local.build.dir" value="${internal.build.dir}"/>
      <param name="local.input.index" value="${internal.input.index}"/>
      <param name="local.output.dir" value="${internal.output.dir}"/>
      <param name="local.worksheet" value="xsl/dguide.xsl"/>
    </foreach>
  </target>
  
  <target name="internal.resources" depends="init">
    <copy todir="${internal.output.dir}/images">
      <fileset dir="${docbook-xsl}/images"/>
    </copy>
    <copy todir="${internal.output.dir}">
      <fileset dir="${internal.input.dir}">
        <include name="**"/>
        <exclude name="*.dbk"/>
        <exclude name="schema.xml"/>
      </fileset>
    </copy>
  </target>
  
  <target name="internal" depends="init,internal.docbook,internal.resources"/>
  
  <!-- component-design -->

  <target name="component-design" depends="init">
    <property name="component-design.input.dir" value="component-design"/>
    <property name="component-design.build.dir" value="build/component-design"/>
    <property name="component-design.output.dir" value="${docs.output.dir}/component-design"/>
    <foreach target="book.preprocess" list="component-design" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${component-design.input.dir}"/>
      <param name="local.input.index" value="${component-design.input.index}"/>
      <param name="local.build.dir" value="${component-design.build.dir}"/>
    </foreach>
    <foreach target="book.docbook" list="dguide" param="dir"
             inheritall="true">
      <param name="local.build.dir" value="${component-design.build.dir}"/>
      <param name="local.input.index" value="${component-design.input.index}"/>
      <param name="local.output.dir" value="${component-design.output.dir}"/>
      <param name="local.worksheet" value="xsl/dguide.xsl"/>
    </foreach>
    <foreach target="book.resources" list="dguide" param="dir"
             inheritall="true">
      <param name="local.input.dir" value="${component-design.input.dir}"/>
      <param name="local.output.dir" value="${component-design.output.dir}"/>
      <param name="local.build.dir" value="${component-design.build.dir}"/>
    </foreach>
  </target>
  
  <target name="fast-dguide.resources" depends="init">
    <property name="local.output.dir" value="${dguide.fast.output.dir}" />
    <property name="local.build.dir" value="${dguide.build.dir}" />
    <!-- Extract the lzx (and other) files from the *.in files. -->
    <mkdir dir="${local.output.dir}/programs"/>
    <copy todir="${local.output.dir}/programs">
      <fileset dir="${local.build.dir}" includes="*.in"/>
      <filterset begintoken="&amp;" endtoken=";">
        <filtersfile file="entities.properties"/>
      </filterset>
      <mapper type="glob" from="*.in" to="*"/>
    </copy>
    
    <copy todir="${local.output.dir}/images">
      <fileset dir="${docbook-xsl}/images"/>
    </copy>
    
    <mkdir dir="${local.output.dir}/programs/resources"/>
    <copy todir="${local.output.dir}/programs/resources">
        <fileset dir="dguide/resources"/>
    </copy>
    <copy todir="${local.output.dir}">
      <fileset dir="${dguide.input.dir}" excludes="*.html"/>
    </copy>
  </target>
  
  <target name="fast-dguide"
          depends="init,dguide.preprocess,fast-dguide.resources">
    <style style="xsl/fast-dguide.xsl"
           basedir="${dguide.build.dir}"
           destdir="${dguide.fast.output.dir}"
           includes="*.dbk">
      <param name="localdir" expression="docs/fast-dguide/"/>
    </style>
  </target>
   
  <target name="clean-tutorials" depends="init"
      description="clean up generated tutorial files">
    <mkdir dir="${tutorials.old.output.dir}"/>
    <chmod dir="${tutorials.old.output.dir}" perm="ugo+w" includes="*.html"/>
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${tutorials.old.build.dir}"/>
      <fileset dir="${tutorials.old.output.dir}"/>
      <fileset dir="${tutorials.build.dir}"/>
      <fileset dir="${tutorials.output.dir}"/>
    </delete>
  </target>
  
  <target name="clean-dguide" depends="init,clean-tutorials"
      description="clean up generated dguide files">
    <mkdir dir="${dguide.old.output.dir}"/>
    <chmod dir="${dguide.old.output.dir}" perm="ugo+w" includes="*.html"/>
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${dguide.old.build.dir}"/>
      <fileset dir="${dguide.old.output.dir}"/>
      <fileset dir="${dguide.build.dir}"/>
      <fileset dir="${dguide.output.dir}"/>
    </delete>
  </target>
  
  <target name="clean-deployers" depends="init,clean-tutorials"
      description="clean up generated deployers files">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${deployers.build.dir}"/>
      <fileset dir="${deployers.output.dir}"/>
    </delete>
  </target>

  <target name="clean-designers" depends="init,clean-tutorials"
      description="clean up generated designers files">
    <delete failonerror="false" includeEmptyDirs="true">
      <fileset dir="${designers.build.dir}"/>
      <fileset dir="${designers.output.dir}"/>
    </delete>
  </target>
  <!--
    Validation.  Optional because it requires a web connection
    for DTD resolution.
  -->
  
  <target name="validate-reference" depends="init">
    <jing rngfile="schemas/wrapper.rnc" compactsyntax="true" checkid="true">
      <fileset dir="wrappers" includes="**/*.html"/>
    </jing>
  </target>
  
  <target name="validate-dguide" depends="init">
    <jing rngfile="schemas/docs.rnc" compactsyntax="true" checkid="true">
      <fileset dir="dguide" includes="*.html"/>
    </jing>
  </target>
  
  <target name="validate-deployers" depends="init">
    <jing rngfile="schemas/docs.rnc" compactsyntax="true" checkid="true">
      <fileset dir="deployers" includes="*.html"/>
    </jing>
  </target>
  
  <target name="validate-designers" depends="init">
    <jing rngfile="schemas/docs.rnc" compactsyntax="true" checkid="true">
      <fileset dir="designers" includes="*.html"/>
    </jing>
  </target>
  
  <target name="validate-tutorials" depends="init">
    <jing rngfile="schemas/docs.rnc" compactsyntax="true" checkid="true">
      <fileset dir="tutorials" includes="**/*.html"/>
    </jing>
  </target>
  
  <target name="validate" depends="validate-dguide,validate-deployers,validate-designers,validate-reference,validate-tutorials"/>

  <!--
    targets relating to both ref and tutorial docs:
  -->

  <target name="build" description="Make the documentation"
          depends="reference,dguide,deployers,designers"/>

  <target name="clean" depends="clean-reference,clean-dguide,clean-deployers,clean-designers,clean-tutorials"
      description="clean up generated files">
    <delete failonerror="false" includeemptydirs="true">
      <!-- Old build locations.  These can be removed once the
           2004-07-04 version of this file has propogated through the
           branches.  (Please update this date if you add to the list
           below, or add a new section with a later date.) -->
      <fileset dir="../developers-guide" includes="**/*"/>
      <fileset dir="../lzx-reference"/>
      <fileset dir="build/html"/>
      <fileset dir="build">
        <exclude name="redmond-*" />
      </fileset>
    </delete>
  </target>
  
  <target name="test">
    <property file="build.properties"/>
    <echo message="Examples with long lines:"/>
    <apply executable="grep" parallel="true">
      <arg line="-l '${long.lines.pattern}'"/>
      <fileset dir="build" includes="**/*.in"/>
      <fileset dir="../reference" includes="**/*.lzx"/>
      <!--fileset dir=".." includes="**/*.lzx"/-->
    </apply>
  </target>
</project>
