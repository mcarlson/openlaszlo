/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @topic LZX
  * @subtopic Debugging
  */

/**
 * Output state
 * @access private
 */
Debug.atFreshLine = true;
/**
 * Output state
 * @access private
 */
Debug.atPrompt = false;

/**
  * Puts the typeout on a fresh line
  * @access private
  */
Debug.freshLine = function () {
    if (! this.atFreshLine) {
      this.addText('\n');
      this.atFreshLine = true;
    }
}

/**
  * Emit a prompt if not at one
  * @access private
  */
Debug.freshPrompt = function () {
  if (! this.atPrompt) {
    this.freshLine();
    this.addHTMLText('<span class="DEBUG">lzx&gt; </span>');
    this.atPrompt = true;
  }
}

/**
  * All output passes through here.  Maintains freshLine state.
  * Optionally logs all output acccording to the setting of
  * _dbg_log_all_writes
  * @access private
  */
Debug.__write = function (msg) {
  if (global['_dbg_log_all_writes']) {
    this.log(msg);
  }
  var str = String(msg);
  // Duplicated from addHTMLText, in case that is stubbed out
  this.atFreshLine = (str.charAt(str.length-1) == '\n');
  if (str.length) { this.atPrompt = false; }
  // Call addText on the original message, not the string, so it can
  // be formatted properly using .toHTML if applicable
  this.addText(msg);
}

// Debug.addText is platform-specific
// Debug.addHTMLText is platform-specific

/**
  * Implements <xref linkend="Debug+debug.write"/> in the core debugger
  * @access private
  */
Debug.writeInternal = function (objects) {
  // Call format in 'compatibility' mode
  var msg = this.formatToString.apply(this, arguments);
  this.freshLine();
  this.__write(msg);
}

/**
  * Display one or more objects on the debug console.
  *
  * Note: <xref linkend="Debug+debug.format"/> allows more control
  * over displaying multiple objects. Use it instead of
  * Debug.write.
  *
  * <code>Debug.write</code> displays objects on the debug console in
  * an informative format.  Simple objects are represented as
  * themselves.  Printed Complex objects are represented by their type
  * and a concise description.  Long representations (and long Strings)
  * are abbreviated if they are longer than <xref linkend="Debug+debug.printLength"/>.  Complex
  * objects and abbreviated objects presented as links.  Clicking on
  * the link will invoke <xref linkend="Debug+debug.inspect"/> on the object,
  * giving more detail.
  *
  * @param Object... objects: One or more objects to display.  Multiple
  * objects are separated by spaces, so <code>Debug.write("The answer
  * is:", 39+3)</code> will display: <code>The answer is: 42</code>
  *
  * @devnote This alias allows platform-specific overrides that
  * call writeInternal
  */
Debug.write = function () {
    return this.writeInternal.apply(this, arguments);
}


/*
 * Formatted output for the Laszlo Debugger
 */

/* TODO: [2007-07-05 ptw] When the debugger is 'classified'
 * these can be acquired through the LzFormatter mixin
 */
/** @access private */
Debug.pad = LzFormatter.prototype.pad;
/** @access private */
Debug.formatToString = LzFormatter.prototype.formatToString;

/**
  * Display formatted output to the debug console.
  *
  * Formats its arguments using <xref
  * linkend="LzFormatter.prototype.formatToString"/>.
  *
  * @param string control: A control string where % indicates a
  * subsequent argument is to be substituted
  *
  * @param [*] ...args: Any number of arguments to be formatted
  * according to the control string
  *
  * @devnote Can't use `...args` as swf9 will omit `arguments` if you
  * do
  */
Debug.format = function (control, args) {
  Debug.__write(this.formatToString.apply(this, arguments));
}

//* A_LZ_COPYRIGHT_BEGIN ******************************************************
//* Copyright 2001-2007 Laszlo Systems, Inc.  All Rights Reserved.            *
//* Use is subject to license terms.                                          *
//* A_LZ_COPYRIGHT_END ********************************************************
