/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
  * Support for tracing function calls in the debugger
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @topic LZX
  * @subtopic Debugging
  */


/**
  * A Trace is a warning with the tag 'TRACE'
  * @access private
  */
class LzTrace extends LzSourceMessage {
  static var type = 'TRACE';
  // Same color as Debug.debug
  static var color = '#00cc00';

  function LzTrace (file:String=null, line:Number=0, message:String='', node=null) {
    super(file, line, message, node);
  }

  static var format = LzSourceMessage.format;
};


/**
  * Create a trace message from a format string
  * @param String control: a format control string
  * @param [*] args: the arguments to the format control
  * 
  * See also: Debug.format
  * 
  * @access private
  */
// TODO: [2005-08-15 ptw] Make the timestamp an attribute of the
// instance that is automatically appended.  Perhaps all warnings
// should be timestamped?
Debug.traceMessage = function (control:String, ...args) {
  return this.warnInternal.apply(this, [LzTrace, control].concat(args));
}

/**
  * Trace a method of an object.
  *
  * Will trace the named method of the object and print a message to
  * the Debug console each time it is called or returned from.  When
  * called, the message will give a timestamp, the name of the function
  * and the arguments it was called with.  When returned from, the
  * message will give the name of the function and the value it
  * returned (if any).
  * 
  * If backtraces are enabled, inspecting the message will reveal the
  * call chain that caused the invocation.
  *
  * @param Object who: the object whose method to trace
  * @param String methodName: the name of the method to trace
  * 
  * @see Debug.untrace
  */
Debug.trace = function(who, methodName) {
  if (who[methodName] instanceof Function) {
    var f = who[methodName];
    var m = function () {
      Debug.traceMessage("[%6.2f] %s.apply(%w, %w)",
                           (new Date).getTime() % 1000000,
                           f, this, arguments);
      var r = f.apply(this, arguments);
      Debug.traceMessage("[%6.2f] %s -> %w",
                           (new Date).getTime() % 1000000,
                           f, r);
      return r;
    };
    m._dbg_previous_definition = f;
    // Use addProperty for our classes, otherwise just jam it in
    if (who is Instance) {
      who.addProperty(methodName, m);
    } else {
      who[methodName] = m;
    }
    return who[methodName] === m;
  } else {
    Debug.error('%w.%s is not a function', who, methodName);
  }
  return false;
}

/**
  * Stop tracing a method of an object.
  *
  * @param Object who: the object whose method to not trace
  * @param String methodName: the name of the method to not trace
  * 
  * @see Debug.trace
  */
Debug.untrace = function(who, methodName) {
  // Object.unwatch is Flash-specific
  if (who[methodName] instanceof Function) {
    var f = who[methodName];
    var p = f['_dbg_previous_definition'];
    if (p) {
      // Try just removing trace
      if (who.hasOwnProperty(methodName)) {
        delete who[methodName];
      }
      // If that didn't work, apply previous
      if (who[methodName] !== p) {
        // Use addProperty for our classes, otherwise just jam it in
        if (who is Instance) {
          who.addProperty(methodName, p);
        } else {
          who[methodName] = p;
        }
      }
      return who[methodName] === p;
    } else {
        Debug.error('%w.%s is not being traced', who, methodName);
    }
  } else {
    Debug.error('%w.%s is not a function', who, methodName);
  }
  return false;
}
