/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
  * Support for monitoring properties in the debugger
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @topic LZX
  * @subtopic Debugging
  */

/**
  * A Monitor is a debug message with the tag 'MONITOR'
  *
  * @access private
  */
class LzMonitor extends LzSourceMessage {
  static var type = 'MONITOR';
  // Same color as Debug.debug
  static var color = '#00cc00';

  function LzMonitor (file:String=null, line:Number=0, message:String='', node=null) {
    super(file, line, message, node);
  };

  static var format = LzSourceMessage.format;
};

/**
  * Create a monitor message from a format string
  * @param String control: a format control string
  * @param [*] args: the arguments to the format control
  * 
  * @see Debug.format
  * 
  * @access private
  * 
  * @todo 2005-08-15 ptw: Make the timestamp an attribute of the
  * instance that is automatically appended.  Perhaps all warnings
  * should be timestamped?
  */
Debug.monitorMessage = function (control:String, ...args) {
  return this.warnInternal.apply(this, [LzMonitor, control].concat(args));
};

// Debug.monitor and Debug.unmonitor have platform-specific
// implementations, we document them here so the doc tool will pick it
// up
if ($as2) {
  #include "debugger/platform/swf/LzMonitor.as"
} else if ($dhtml) {
  #include "debugger/platform/dhtml/LzMonitor.js"
} else {
  /**
   * Monitor a property of an object.
   *
   * Will monitor the named property of the object and print a message
   * to the Debug console each time it is modified.  The message
   * includes a timestamp, the function that modified the property, the
   * object and property, and the old and new values.
   *
   * If backtraces are enabled, inspecting the message will reveal the
   * call chain that caused the modification.
   *
   * @param Object who: the object whose property to monitor
   * @param String propertyName: the name of the property to monitor
   *
   * @see Debug.unmonitor
   */
  Debug.monitor = function (who:Object, propertyName:String) {
    Debug.error("Debug.monitor not supported on $s", $runtime);
  };
  /**
   * Stop monitoring a property of an object.
   *
   * @param Object who: the object whose property to not monitor
   * @param String propertyName: the name of the property to not monitor
   *
   * @see Debug.monitor
   */
  Debug.unmonitor = function (who:Object, propertyName:String) {
    Debug.error("Debug.unmonitor not supported on $s", $runtime);
  };
}
