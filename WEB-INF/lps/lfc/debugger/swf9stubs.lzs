/******************************************************************************
 * stubs.lzs
 *****************************************************************************/

//* A_LZ_COPYRIGHT_BEGIN ******************************************************
//* Copyright 2001-2006, 2008 Laszlo Systems, Inc.  All Rights Reserved.            *
//* Use is subject to license terms.                                          *
//* A_LZ_COPYRIGHT_END ********************************************************

// This file implements the debugger stubs, so that DHTML apps can make refernces to
// Debug.write, etc, when the full debugger is not compiled/linked in.

dynamic class LzDebugService {
    public function write(...args):void {
        trace.apply(Debug, args);
        LFCApplication.write.apply(LFCApplication, args);
    }
    public function info(...args):void {
        args.unshift('Info: ');
        write.apply(Debug, args);
    }
    public function warn(...args):void {
        args.unshift('Warn: ');
        write.apply(Debug, args);
    }
    public function error(...args):void {
        args.unshift('Error: ');
        write.apply(Debug, args);
    }
    public function debug(...args):void {
        args.unshift('Debug: ');
        write.apply(Debug, args);
    }
    public function monitor(...args):void {
        args.unshift('Monitor: ');
        write.apply(Debug, args);
    }

    public function __String (thing, pretty=null, limit=null, unique=null):String { return ""+ thing ; }
}

var Debug = new LzDebugService();
lz.DebugService = LzDebugService;  // publish

class LzSourceMessage extends LzMessage {
    var file;
    var line
        
function LzSourceMessage (file:String=null, line:Number=0, message:String='') {
  // Append a backtrace if there is one -- skip back to the
  // $reportSourceWarning or warnInternal frames.
  this.file = file;
  this.line = line;
  if (message instanceof LzMessage) {
    this.message = message;
  } else {
    this.message = new LzMessage(message);
  }
}

}

/**
  * A Warning is a sourceMessage with the tag 'WARN'
  * @access private
  */
class LzWarning extends LzSourceMessage {
    function LzWarning (file, line, message) {
        super(file, line, message);
    }
}


class LzError extends LzSourceMessage {
    function LzError (file, line, message) {
        super(file, line, message);
    }
}

class LzDebug extends LzSourceMessage {
    function LzDebug (file, line, message) {
        super(file, line, message);
    }
}

class LzInfo extends LzSourceMessage {
    function LzInfo (file, line, message) {
        super(file, line, message);
    }
}


var  $reportSourceWarning = function (...ignore) { };
var  $reportUndefinedObjectProperty = function (...ignore) { };
var  $reportUndefinedProperty = function (...ignore) { };
var  $reportUndefinedVariable = function (...ignore) { };
var  $reportNotFunction = function (...ignore) { };
var  $reportUndefinedMethod = function (...ignore) { };
