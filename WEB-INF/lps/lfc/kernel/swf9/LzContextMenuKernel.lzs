/**
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @affects lzcontextmenukernel
  * @topic LFC
  * @subtopic Views
  */

/**
  * @access private
  */
class LzContextMenuKernel {

    #passthrough (toplevel:true) {
    import flash.events.ContextMenuEvent;
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuBuiltInItems;
    }#

function LzContextMenuKernel (newowner:LzContextMenu) {
    this.owner = newowner;

    this.cm = new ContextMenu();
    this.cm.hideBuiltInItems();
}

var owner:LzContextMenu = null;
var cm:ContextMenu = null;


/**
  * LzContextMenu.setDelegate
  * Sets the delegate which will be called when the menu is opened
  * @param LzDelegate delegate: delegate which is executed when item is selected. An
  * onmenuopen event is also sent.
  * 
  * @access private
  */
function setDelegate (delegate:LzDelegate) :void {
  var __litem__:LzContextMenu = this.owner;
  var callback:Function = function (e:ContextMenuEvent) :void {
      if (delegate != null) delegate.execute(__litem__);
      if (__litem__.onmenuopen.ready) __litem__.onmenuopen.sendEvent(__litem__);
  };
  this.cm.addEventListener(ContextMenuEvent.MENU_SELECT, callback);
}

/**
  * LzContextMenu.addItem
  * Adds a menu items into a menu
  * @param LzContextMenuItem item: LzContextMenuItem to install on this menu
  * @access private
  */
function addItem (item:LzContextMenuItem) :void {
    this.cm.customItems.push(item.kernel.cmenuitem);
}

/**
  * LzContextMenu.hideBuiltInItems
  * @access private
  */
function hideBuiltInItems () :void {
    this.cm.hideBuiltInItems();
}

/**
  * LzContextMenu.showBuiltInItems
  * @access private
  */
function showBuiltInItems () :void {
    var builtins:ContextMenuBuiltInItems = this.cm.builtInItems;
    // display only 'useful' items in respect of a RIA!
    builtins.print = true;
    builtins.quality = true;
    builtins.zoom = true;
}

/**
  * LzContextMenu.clearItems
  * Remove all custom items from a menu
  * @access private
  */
function clearItems () :void {
    this.cm.customItems = [];
}


/**
  * ContextMenu.__LZcontextMenu
  * Returns Flash ContextMenu object
  * @access private
  */
function __LZcontextMenu () :ContextMenu {
   return this.cm;
}

}; // End of LzContextMenuKernel



/**
  * @access private
  */
class LzContextMenuItemKernel {

    #passthrough (toplevel:true) {
    import flash.events.ContextMenuEvent;
    import flash.ui.ContextMenuItem;
    }#

function LzContextMenuItemKernel (newowner:LzContextMenuItem, title:String, del:*) {
    this.owner = newowner;
    this.cmenuitem = new ContextMenuItem(title);
    this.setDelegate(del);
}

var owner:LzContextMenuItem = null;
var cmenuitem:ContextMenuItem = null;


/**
  * LzContextMenuItem.setDelegate
  * Sets the delegate which will be called when the menu item is selected
  * @param LzDelegate delegate: delegate which is executed when item is 
  * selected. An onselect event is also sent.
  * 
  * @access private
  */
function setDelegate (delegate:*) :void {
  var __litem__:LzContextMenuItem = this.owner;
  var callback:Function = function (e:ContextMenuEvent) :void {
      if (delegate != null) {
          if (delegate is Function) {
              delegate();
          } else if (delegate is LzDelegate) {
              delegate.execute(__litem__);
          } else if ($debug) {
              Debug.error("LzContextMenuItem.setDelegate must be passed a delegate or function", __litem__, delegate);
          }
      }
      if (__litem__.onselect.ready) __litem__.onselect.sendEvent(__litem__);
  };
  this.cmenuitem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, callback);
}

/**
  * LzContextMenuItem.setCaption
  * Sets the text string which is displayed for the menu item
  * @param String caption: text string to display
  * @access public
  */
function setCaption (caption:String) :void {
    this.cmenuitem.caption = caption;
}

/**
  * LzContextMenuItem.getCaption
  * Gets the text string which is displayed for the menu item
  * @access public
  */
function getCaption () :String {
    return this.cmenuitem.caption;
}

/**
  * LzContextMenuItem.setEnabled
  * @param boolean val: if false, menu item is grayed out and will not respond to clicks
  * @access public
  */
function setEnabled (val:Boolean) :void {
    this.cmenuitem.enabled = val;
}

/**
  * LzContextMenuItem.separatorBefore
  * Draw a horizontal separator line before this item in the menu
  * @param boolean val: sets visibility of separator line
  * @access public
  */

function setSeparatorBefore (val:Boolean) :void {
    this.cmenuitem.separatorBefore = val;
}

/**
  * LzContextMenuItem.setVisible
  * Sets the visibility of the menu item
  * @param boolean val: sets visibility
  * @access public
  */
function setVisible (val:Boolean) :void {
    this.cmenuitem.visible = val;
}

}; // End of LzContextMenuItemKernel
