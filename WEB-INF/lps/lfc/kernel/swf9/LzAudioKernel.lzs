/**
  * LzAudioKernel.lzs
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Kernel
  * @subtopic swf9
  */

/**
  * @shortdesc This service manages audio resource playback.
  * @access private
  * 
  */
class LzAudioKernel {
    #passthrough (toplevel:true) {
      import flash.display.Sprite;
      import flash.media.Sound;
      import flash.media.SoundChannel;
      import flash.media.SoundMixer;
      import flash.media.SoundTransform;
    }#

    /**
      * Sets the current sound resource and starts playing it. 
      * @param String snd: Name of a sound resource to play
      * @param LzSprite t: Sprite for sound to act upon (optional)
      */
    static function playSound (snd:String, t:LzSprite = null) :void {
        if (t == null) {
            if (LzAsset.isSoundAsset(snd)) {
                //TODO: check for swf8 compatibility
                var sound:Sound = new (LzResourceLibrary[snd])['assetclass']() cast Sound;
                sound.play();
            }
        } else {
            t.setResource(snd);
        }
    }

    /**
      * Stop playing the current sound
      * @param LzSprite t: Sprite for sound to act upon (optional)
      */
    static function stopSound (t:LzSprite = null) :void {
        if (t == null) {
            //TODO: check for swf8 compatibility
            SoundMixer.stopAll();
        } else {
            t.stop();
        }
    }

    /**
      * Start playing the current sound
      * */
    static function startSound (t:Sprite = null) :void {
        //TODO: check for swf8 compatibility
    }

    /**
      * @access private
      */
    static function getSoundObject (t:LzSprite) :* {
        return t ? t.soundChannel ? t.soundChannel : t : SoundMixer;
    }

    /**
      * Get the global volume
      * @return Number: volume from 0 to 100 (0 is silent).
      * @param LzSprite t: Sprite for sound to act upon (optional)
      */
    static function getVolume (t:LzSprite = null) :Number {
        return getSoundObject(t).soundTransform.volume * 100;
    }

    /**
      * Set the global volume.
      * @param Number v: linear volume from 0 to 100 (0 is silent).
      * @param LzSprite t: Sprite for sound to act upon (optional)
      */
    static function setVolume (v:Number, t:LzSprite = null) :void {
        var soundObj:* = getSoundObject(t);
        var sndTransform:SoundTransform = soundObj.soundTransform;
        sndTransform.volume = (v < 0 ? 0 : v > 100 ? 100 : v) / 100;
        soundObj.soundTransform = sndTransform;
    }

    /**
      * Get the global pan.
      * @return Number: linear pan from -100 to +100 (left to right)
      * @param LzSprite t: Sprite for sound to act upon (optional)
      */
    static function getPan (t:LzSprite = null) :Number {
        return getSoundObject(t).soundTransform.pan * 100;
    }

    /**
      * Set the global pan.
      * @param Number p: linear pan from -100 to +100 (left to right)
      * @param LzSprite t: Sprite for sound to act upon (optional)
      */
    static function setPan (p:Number, t:LzSprite = null) :void {
        var soundObj:* = getSoundObject(t);
        var sndTransform:SoundTransform = soundObj.soundTransform;
        sndTransform.pan = (p < -100 ? -100 : p > 100 ? 100 : p) / 100;
        soundObj.soundTransform = sndTransform;
    }
}
