/**
  * LzXMLTranslator.lzs
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Kernel
  * @subtopic AS2
  */

/**
  * @shortdesc: Utility for converting native XML DOM object into LzDataNode tree
  */

class LzXMLTranslator {

static function copyXML (xmlobj, trimwhitespace, nsprefix) {
    var lfcnode = copyFlashXML(xmlobj, trimwhitespace, nsprefix);
    var fc = lfcnode.childNodes[0];
    if ( fc is LzDataText ) {
        return null;
    }
    return fc;
}

// Recursively copy a Flash XML(Node) tree into a LzDataElement
// tree. Used by LzDataNode.stringToLzData
/**
  * @param boolean trimwhitespace: trim whitespace from start and end of text nodes
  * @param boolean nsprefix: preserve namespace prefixes on node names and attribute names
  * @access private
  */
function copyFlashXML (node, trimwhitespace, nsprefix) {
    var nv = node.nodeValue;
    var lfcnode = null;
    // text node?
    if (node.nodeKind() == 'text') {
        if (trimwhitespace == true) {
            nv = LzDataNode.trim(nv);
        }
        lfcnode = new LzDataText(nv);
    } else if (node.nodeKind == 'element') {
        // slow but sure way to copy attributes
        var nattrs = node.attributes;
        var cattrs = {};
        for (var key in nattrs) {
            var nkey = key;
            if (!nsprefix) {
                // strip namespace prefixes
                var colpos = key.indexOf(':');
                if (colpos >= 0) {
                    nkey = key.substring(colpos+1);
                }
            }
            cattrs[nkey] = nattrs[key];
        }

        var nname = node.nodeName;
        if (nname && !nsprefix) {
            // strip namespace prefix
            var npos = nname.indexOf(':');
            if (npos >= 0) {
                nname = nname.substring(npos+1);
            }
        }

        lfcnode = new LzDataElement(nname, cattrs);
        var children = node.childNodes;
        var newchildren = [];
        for (var i  = 0; i < children.length; i++ ) {
            var child = children[i];
            var lfcchild = copyFlashXML(child, trimwhitespace, nsprefix);
            newchildren[i] = lfcchild;
        }
        lfcnode.setChildNodes(newchildren);
    }
    return lfcnode;
}


} // End of LzXMLTranslator
      
