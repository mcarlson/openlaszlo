/**
  * LzLibraryLoader.as
  *
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Kernel
  * @subtopic AS2
  */

//* A_LZ_COPYRIGHT_BEGIN ******************************************************
//* Copyright 2001-2007 Laszlo Systems, Inc.  All Rights Reserved.            *
//* Use is subject to license terms.                                          *
//* A_LZ_COPYRIGHT_END ********************************************************

class LzLibraryLoader extends LzLoader {
    function LzLibraryLoader ( owner , args ) {
        super(owner, args);
        this.owner.loadperc = 0;
        //setup loadmovie stuff that never changes
        this.mc.loader = this;
        this.mc.mc = this.mc;
        this.mc.timeout = this.timeout;
        this.lastrequest = this.mc;
    }

var LOADERDEPTH = 9;

/**
  * @access private
  */
override function request( req ) {
    //Debug.write("LzLibraryLoader.request() this.proxied=", this.proxied);
    var o = { libpath: req, url: req , lzt: "lib", proxied: this.proxied};
    super.request( o );
}

/**
  * @access private
  */
function getLoadMC (){
    return this.mc.lmc;
}

/**
  * @access private
  */
// This is the callback when a library module has finished loading
function snippetLoaded ( loadmc, err ){
    // our 'owner' is a sprite, and the sprite's owner is the LzLibrary
    var lib = this.owner.owner;
    
    LzLoadQueue.loadFinished( loadmc );
    if ( ! loadmc.valid ) {
        lib.loaded = false;
        lib.loading = false;
        return;
    }

    this.lastloadtime = getTimer() - loadmc.loadtime;

    var err;
    // TODO [hqm 2004-10-01] figure out how to pass server error
    // message back through the loader. How about: a special library
    // loading error swf needs to be returned from the server and call
    // this snippetLoaded method with an error arg.

    if ( err != null ){
        lib.loaded = true;
        lib.loading = false;
        if (lib.onerror.ready) lib.onerror.sendEvent( err );
        return;
    }

    if ( loadmc.timedout ){
        this.doTimeOut();
        if (lib.ontimeout.ready) lib.ontimeout.sendEvent();
    } else {
        lib.loaded = true;
    }

    // The library's parent must be the canvas
    lib.parent.__LzLibraryLoaded(lib.name);
}

/*
 * @param loadobj: the request object that is being handled
  * @param data: unused by library loading, ResponderLIB server does not return an error swf
  * @access private
  */
override function returnData ( loadobj , data ){
    LzLoadQueue.unloadRequest(loadobj);

    var lib = this.owner.owner;

    this.lastloadtime = getTimer() - loadobj.loadtime;

    if ( loadobj.timedout ){
        this.doTimeOut();
        if (lib.ontimeout.ready) lib.ontimeout.sendEvent();
    } else {
        lib.loaded = true;
    }
}


}; // End of LzLibraryLoader
