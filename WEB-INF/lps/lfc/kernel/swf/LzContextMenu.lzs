/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @affects lzcontextmenu
  * @topic LFC
  * @subtopic Views
  */

/**
  * 
  * <p>
  * The <tagname>LzContextMenu</tagname> represents a context (right-click) menu.
  * </p>
  *
  * @shortdesc A contextual menu
  */
class LzContextMenu extends LzNode {

function LzContextMenu (del) {
                               // set callback for Flash "onSelect" event
                               this.cm = new ContextMenu();
                               this.cm.hideBuiltInItems();
                               this.items = [];
                               this.setDelegate(del);
                           }

var onmenuopen = LzDeclaredEvent;
var onselect = LzDeclaredEvent;


/**
  * LzContextMenu.setDelegate
  * Sets the delegate which will be called when the menu is opened
  * @param LzDelegate delegate: delegate which is executed when item is selected. An
  * onmenuopen event is also sent.
  * 
  * @access public
  */
function setDelegate (delegate) {
  var __litem__ = this;
  var callback =  function (mc,cmitem) {
      if (delegate != null) delegate.execute(__litem__);
      if (__litem__.onmenuopen.ready) __litem__.onmenuopen.sendEvent(__litem__);
  };
  this.cm.onSelect = callback;
}

/**
  * LzContextMenu.addItem
  * Adds a menu items into a menu
  * @param LzContextMenuItem item: LzContextMenuItem to install on this menu
  * @access public
  */
function addItem (item) {
    this.items.push(item);
    this.cm.customItems.push(item.cmenuitem);
}

/**
  * LzContextMenu.hideBuiltInItems
  * Removes Flash-installed default menu items
  * @access public
  */
function hideBuiltInItems () {
    this.cm.hideBuiltInItems();
}

/**
  * LzContextMenu.clearItems
  * Remove all custom items from a menu
  * @access public
  */
function clearItems () {
    this.items = [];
    this.cm.customItems = [];
}

/**
  * LzContextMenu.getItems
  * Return list of custom items
  * @access public
  */
function getItems () {
    return this.items;
}

/**
  * LzContextMenu.makeMenuItem
  * create a new menu item for a LzContextMenu
  * @param String title: menu item name
  * @param function callback:  delegate to execute when item is selected
  * @access public
  */
function makeMenuItem (title, callback) {
  var item = new LzContextMenuItem(title, callback);
  return item;
}

/**
  * ContextMenu.__LZcontextMenu
  * Returns Flash ContextMenu object
  * @access private
  */
function __LZcontextMenu () {
   return this.cm;
}

}; // End of LzContextMenu



/**
  * <p>
  * The class <tagname>LzContextMenuItem</tagname> represents a menu item within a context menu.
  * </p>
  * 
  * @shortdesc A menu item within a context menu
  */
class LzContextMenuItem extends LzNode {

function LzContextMenuItem (title, del) {
    this.cmenuitem = new ContextMenuItem(title);
    this.setDelegate(del);
}; // End of LzContextMenuItem


/**
  * LzContextMenuItem.setDelegate
  * Sets the delegate which will be called when the menu item is selected
  * @param LzDelegate delegate: delegate which is executed when item is selected. An
  * onselect event is also sent. For back compatibility, a function can be passed instead
  * of a delegate.
  * 
  * @access public
  */
function setDelegate (delegate) {
  var __litem__ = this;
  var callback =  function (mc,cmitem) {
      if (delegate != null) {
          if (typeof(delegate) == 'function') {
              delegate();
          } else if (delegate instanceof LzDelegate) {
              delegate.execute(__litem__);
          } else {
              Debug.error("LzContextMenuItem.setDelegate must be passed a delegate or function", this, delegate);
          }
      }
      if (__litem__.onselect.ready) __litem__.onselect.sendEvent(__litem__);
  };
  this.cmenuitem.onSelect = callback;
}

/**
  * LzContextMenuItem.setCaption
  * Sets the text string which is displayed for the menu item
  * @param String caption: text string to display
  * @access public
  */
function setCaption (caption) {
    this.cmenuitem.caption = caption;
}

/**
  * LzContextMenuItem.setEnabled
  * @param boolean val: if false, menu item is grayed out and will not respond to clicks
  * @access public
  */
function setEnabled (val) {
    this.cmenuitem.enabled = val;
}

/**
  * LzContextMenuItem.separatorBefore
  * Draw a horizontal separator line before this item in the menu
  * @param boolean val: sets visibility of separator line
  * @access public
  */

function setSeparatorBefore (val) {
    this.cmenuitem.separatorBefore = val;
}

/**
  * LzContextMenuItem.setVisible
  * Sets the function which will be called when the menu item is selected
  * @param boolean val: sets visibility
  * @access public
  */
function setVisible (val) {
    this.cmenuitem.visible = val;
}

}; // End of LzContextMenuItem
