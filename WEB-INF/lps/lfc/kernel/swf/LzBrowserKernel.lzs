/**
  *
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @affects lzbrowserkernel
  * @topic LFC
  * @subtopic Views
  */

/**
  * @access private
  */
class LzBrowserKernel {

/**
  * Loads a URL in the browser, optionally in a target
  * 
  * @param String url: URL to load
  * @param String target: Optionally specifies a named frame to display the contents of the URL.  Otherwise defaults to the current window.
  * @param String features: Optional features to use in the new window.
  */
static function loadURL ( url, target=null, features=null ){
  if (target == null) target = '_self';
  _root.getURL(url, target);
}


/**
  * Runs Javascript in the browser using a javascript: url, optionally in a
  * target
  * 
  * @param String js: Javascrit string to execute
  * @param String target: Optionally specifies a named frame to display the contents of the URL.
  * By default, the javascript specified in 'js' is executed in the current
  * browser frame .
  */
static function loadJS ( js, target ){
  _root.getURL('javascript:' + js + ';void(0);', target);
}


/**
  * Runs a Javascript method in the browser, optionally returning the result  
  * 
  * @param String js: Browser javascript method name to execute
  * @param Function callback: Optional callback function to get the return value
  * of the javascript call.  If false, the call will not be queued at app 
  * startup time.
  * @param Optional arguments to call
  */
static function callJS (js, callback) :* {
    if (LzBrowserKernel.__jslocked == true) {
        if (callback != false) {
            var args = [].slice.call(arguments);
            LzBrowserKernel.__jscallq.push(args);
            //Debug.write('queued', LzBrowserKernel.__jscallq.length, args); 
        }
    } else {
        var args = [].slice.call(arguments, 2);
        // Clear DojoExternalInterface callback, since we're calling back below
        args.unshift(js, null);

        var result = DojoExternalInterface.call.apply(null, args);
        //Debug.write('calling with args real', arguments, args, result);

        if (callback instanceof Function) {
            callback.call(null, result);
        }

        return result;
    }
}

/** @access private */ 
static var __jslocked = true;
/** @access private */ 
static var __jscallq = [];

// called from DojoExternalInterface
/** @access private */ 
static function __jsready () { 
    LzBrowserKernel._dequeueJS();
}

/** @access private */ 
static function _dequeueJS () {
    LzBrowserKernel.__jslocked = false;
    while (LzBrowserKernel.__jscallq.length > 0) {
        LzBrowserKernel.callJS.apply(LzBrowserKernel, LzBrowserKernel.__jscallq.shift());
    }
}

static function getPersistedObject(n) {
    return SharedObject.getLocal(n);
}

/**
  * Sets the browser history to a specified offset.
  * @access private
  */
static function setHistory(n) {
    //Debug.write('__setHistory', n);
    LzBrowserKernel.callJS('lz.embed.history.set', null, n);
}

/**
  * Invoked by browser JavaScript to call a method
  * @access private
  */
static function callMethod(js) { 
    return lz.Utils.safeEval(js);
}

static var _os = null;
static var _ver = null;

/**
  * Returns version information about the browser
  */
static function getVersion () {
    if (!LzBrowserKernel._ver) {
        var o = System.capabilities.version.split(' ');
        LzBrowserKernel._os = o[0]; 
        o = o[1].split(',');
        LzBrowserKernel._ver = (o[0] + '.' + o[2]) * 1;
    }
    return LzBrowserKernel._ver;
}

/**
  * Returns information about the operating system
  */
static function getOS () {
    return System.capabilities.os;
}

/**
  * Returns the URL from which the application was loaded.
  * @return String : the URL the swf was loaded from
  * 
  */
static function getLoadURL () {
    return _root._url;
}

/**
 * This function returns values from the the request string that
 * loaded the the lzx app. This can be used to communicate initialization 
 * arguments to an lzx app without forcing it to load data.
 *
 * @param String name: The name of the key whose value to return.  If null, 
 * returns an Object containing all initialization arguments.
 *
 * @return: The value for a key that appears in the request string 
 * that loaded the the lzx app or an Object containing all values 
 */
static function getInitArg (name) {
    if (! LzBrowserKernel.__initargs && LzBrowserKernel.__jslocked == false) {
        var newargs = LzBrowserKernel.callJS('eval', false, 'lz.embed.applications["' + _root.id + '"].initargs');

        if (newargs) {
            // cache callJS results
            LzBrowserKernel.__initargs = newargs;
        }
    }
    var args = LzBrowserKernel.__initargs || _root;
  
    if (name == null) return args;
    return args[name];
}

/**
 * This function returns values from the the request string that
 * loaded the the lzx app. This can be used to communicate initialization 
 * arguments to an lzx app without forcing it to load data.
 *
 * @param String name: The name of the key whose value to return.  If null, 
 * returns an Object containing all initialization arguments.
 *
 * @return: The value for a key that appears in the request string 
 * that loaded the the lzx app or an Object containing all values 
 */
static function getLzOption (name) {
    if (! LzBrowserKernel.__options && LzBrowserKernel.__jslocked == false) {
        var newargs = LzBrowserKernel.callJS('eval', false, 'lz.embed.applications["' + _root.id + '"].options');

        if (newargs) {
            // cache callJS results
            LzBrowserKernel.__options = newargs;
        }
    }
    var args = LzBrowserKernel.__options || _root;
  
    if (name == null) return args;
    return args[name];
}

/**
  * This function returns the id the app was started with
  * 
  * @return String: The id the app was started with
  */
static function getAppID() {
    return _root.id;
}

/**
  * Turns the flash context menu on or off
  * @keywords flashspecific private
  * @param Boolean truefalse: boolean value - true for on, false for off.
  */
static function showMenu (truefalse) {
    fscommand("showmenu", truefalse);
}

/**
  * Sets the system clipboard to the specified string
  * @keywords flashspecific
  * 
  * @param String str: String to set the system clipboard to
  */
static function setClipboard (str){
    System.setClipboard(str);
}

/**
  * Determines if the a screen reader is active and the Flash player is focused
  * @keywords flashspecific
  * 
  * @return: True if a screen reader is active and the Flash player is focused
  */
static function isAAActive (){
    var a = Accessibility.isActive();
    return a;
}

/**
  * Updates accessibility data
  * @keywords flashspecific
  * @access private
  */
static function updateAccessibility () {
    Accessibility.updateProperties();
}

/**
  * Loads a proxy policy file
  * @keywords flashspecific
  * @access private
  */
static function loadProxyPolicy (url) {
    System.security.loadPolicyFile(url);
}

} // End of LzBrowserKernel

