/**
  * LzXMLLoader.as
  *
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Kernel
  * @subtopic AS2
  * @author abargull
  */

/**
  * @access private
  */
class LzXMLLoader extends LzLoader {
    var oncontent = LzDeclaredEvent;

    var requestheaders = {};

    var rawtext = null;
    // native XML request/loader object
    var xmlloadobj = null;

    // Holds the state of the copy queue.
    // {ptr: int   where we are in the queue
    //  q: array of pending work, entries are XMLNodes to be copied.
    //  xmlobj: the root Flash XML node we started with
    // }
    //
    var copyQueue = null;
    var copyLoopsPerFrame = 1000;
    var maxLoopTime = 2000; // 2 seconds
    var copyTaskDel = null;
    var lfcrootnode = null;
    var trimwhitespace;
    var nsprefix;

    function LzXMLLoader (owner, args) {
        super(owner, args);

        // We need to make an idle task to split up the work of
        // copying the Flash XML tree into an LzDataNode tree
        this.copyTaskDel = new LzDelegate( this, "copyFlashData" );
    }

    /**
      * @access private
      * (not really, but the doc tools will complain
      */
    override function destroy () {
        if (this.__LZdeleted == true) return;

        this.removeCopyTask();
        super.destroy();
    }

    function setHeaders (headers) {
        this.requestheaders = headers;
    }

    /**
      * Request a data load using Flash XML object
      * @access private
      */
    override function request ( o ){
        if ($debug) {
            LzLoader.debugLoadObj(o);
        }
        this.initializeRequestObj(o);

        LzLoadQueue.enqueueRequest( o );
        // We should probably be passing something other than the obj itself to
        // the onrequest event
        if (this.onrequest.ready) this.onrequest.sendEvent(o);
    }

    /**
      * @access private
      * called by loader when raw data was arrived, but not yet been parsed
      */
    function gotRawData(content:String, loadobj:XML) {
        this.rawtext = content;
        this.xmlloadobj = loadobj;
        if (this.oncontent.ready) this.oncontent.sendEvent(content);
    }

    /**
      * Translate loaded XML document to LFC data-nodes
      * @access private
      */
    function translateXML () {
        this.xmlloadobj.parseXML(this.rawtext);
        // Copy the Flash XML tree into tree of LFC LzData classes,
        // on finish returnData() will be called
        this.queuedCopyFlashXML(this.xmlloadobj);
    }

    /**
      * @access private
      * This function is the callback ondata handler which gets attached to
      * the XML object that is getting data loaded into it. It is
      * responsible for parsing the raw string into the xmlobj XML object,
      * and then converting that datastructure into an LzDataElement tree,
      * via the xmltolzdata() method.
      *
      * N.B.: when this callback is invoked, 'this' is bound the the Flash
      * XML object which is being used to handle the load request. It is *not* bound to
      * LzXMLLoader!
      */
    static var XMLOnDataHandler = function (src) {
        // cancel the timeout handler
        LzLoadQueue.unloadRequest(this);

        if (src == undefined) {
            if ($debug) {
                if (! this.proxied) {
                    Debug.warn("LzXMLLoader.XMLOnDataHandler load failed from URL %w, no data received.", this.url);
                    Debug.warn("Failure to load data in serverless apps may be caused by Flash player security policies. Check your data server crossdomain.xml file");
                }
            }
            this.onLoad(false);
            //Debug.write("this.loader.onerror.ready =", this.loader.onerror.ready);
            if (this.loader.onerror.ready) {
                this.loader.onerror.sendEvent(null);
            }
        } else {
            // If we timed out, and this response came in late, ignore it.
            if (this.timedout) {
                return;
            }

            // Create a queue containing one root node, myself, and convert it and all children to
            // LzDataNodes.

            this.onLoad(true);
            this.loader.gotRawData(src, this);
        }
    }

    /**
      * Translate a single Flash XML(Node) into a LzDataNode.
      * This function is inlined in copyFlashXML
      */
    function copyFlashNode (node, trimwhitespace, nsprefix) {
        if (node.nodeType == 3) {
            var nv = node.nodeValue;
            if (trimwhitespace == true) {
                nv = LzDataElement.trim(nv);
            }
            return new LzDataText(nv);
        } else {
           var nname = nsprefix ? node.nodeName : node.localName;

            if (! nsprefix) {
                // slow but sure way to copy attributes
                var nattrs = node.attributes;
                var cattrs = {};
                var attrlist = [];
                for (var key in nattrs) {
                    // strip namespace prefixes
                    var colpos = key.indexOf(':');
                    if (colpos >= 0) {
                        var nkey = key.substring(colpos + 1);
                    } else {
                        var nkey = key;
                    }
                    //cattrs[nkey] = nattrs[key];
                    attrlist.push(nkey, nattrs[key]);
                }

                // Flash iterates over an object in reversed insertion order.
                // But as we want to preserve the original xml-attribute order,
                // we need to insert the attributes also in reversed order.
                for (var i = attrlist.length - 1; i >= 0; i -= 2) {
                    cattrs[attrlist[i - 1]] = attrlist[i];
                }
            } else {
                // this is the fast path
                var cattrs = node.attributes;
                cattrs.__proto__ = Object.prototype;
                cattrs.constructor = Object;
                ASSetPropFlags(cattrs, ['__proto__', 'constructor'], 1, 7);
            }

            var lfcnode = new LzDataElement(nname);
            // avoid copy of cattrs (see LzDataElement ctor)
            lfcnode.attributes = cattrs;
            return lfcnode;
        }
    }

    /**
      * Copy a Flash XML(Node) tree into a LzDataElement tree. Used by LzDataElement.stringToLzData
      *
      * @param boolean trimwhitespace: trim whitespace from start and end of text nodes
      * @param boolean nsprefix: preserve namespace prefixes on node names and attribute names
      * @access private
      */
    function copyFlashXML (xmlnode, trimwhitespace, nsprefix) {
        // create a new, empty ownerDocument (LPP-7537)
        var document = new LzDataElement(null);
        // handle this separately so you don't need to worry about the
        // case when xmlnode has got siblings
        if (! xmlnode.firstChild) {
            return document.appendChild(this.copyFlashNode(xmlnode, trimwhitespace, nsprefix));
        }
        var lfcparent = document;
        var next, node = xmlnode;
        // traverse DOM tree
        for (;;) {
            if (node.nodeType == 3) {
                // text node (3: TEXT_NODE)

                // this is inlined:
                // var lfcnode = this.copyFlashNode(node);
                // lfcparent.appendChild(lfcnode);

                var nv = node.nodeValue;
                if (trimwhitespace == true) {
                    nv = LzDataElement.trim(nv);
                }

                var lfcnode = new LzDataText(nv);
                // inlined lfcparent.appendChild(lfcnode)
                lfcnode.parentNode = lfcparent;
                lfcnode.ownerDocument = document;
                lfcnode.__LZo = (lfcparent.childNodes.push(lfcnode) - 1);
            } else {
                // element node (1: ELEMENT_NODE)

                // this is inlined:
                // var lfcnode = this.copyFlashNode(node);
                // lfcparent.appendChild(lfcnode);

                var nname = nsprefix ? node.nodeName : node.localName;

                if (! nsprefix) {
                    // slow but sure way to copy attributes
                    var nattrs = node.attributes;
                    var cattrs = {};
                    var attrlist = [];
                    for (var key in nattrs) {
                        // strip namespace prefixes
                        var colpos = key.indexOf(':');
                        if (colpos >= 0) {
                            var nkey = key.substring(colpos + 1);
                        } else {
                            var nkey = key;
                        }
                        //cattrs[nkey] = nattrs[key];
                        attrlist.push(nkey, nattrs[key]);
                    }

                    // Flash iterates over an object in reversed insertion order.
                    // But as we want to preserve the original xml-attribute order,
                    // we need to insert the attributes also in reversed order.
                    for (var i = attrlist.length - 1; i >= 0; i -= 2) {
                        cattrs[attrlist[i - 1]] = attrlist[i];
                    }
                } else {
                    // this is the fast path
                    var cattrs = node.attributes;
                    cattrs.__proto__ = Object.prototype;
                    cattrs.constructor = Object;
                    ASSetPropFlags(cattrs, ['__proto__', 'constructor'], 1, 7);
                }

                var lfcnode = new LzDataElement(nname);
                // avoid copy of cattrs (see LzDataElement ctor)
                lfcnode.attributes = cattrs;
                // inlined lfcparent.appendChild(lfcnode)
                lfcnode.parentNode = lfcparent;
                lfcnode.ownerDocument = document;
                lfcnode.__LZo = (lfcparent.childNodes.push(lfcnode) - 1);

                // traverse down first
                if ((next = node.firstChild)) {
                    // this node is the new context
                    lfcparent = lfcnode;
                    node = next;
                    continue;
                }
            }
            // select next node
            while (! (next = node.nextSibling)) {
                // no nextSibling, go back in DOM
                node = node.parentNode;
                lfcparent = lfcparent.parentNode;
                if (node === xmlnode) {
                    // reached top element, copy finished
                    return document.childNodes[0];
                }
            }
            node = next;
        }
    }

    /**
      * Set up the work queue
      * @access private
      */
    function queuedCopyFlashXML(xmlnode) {
        var rootnode = new LzDataElement('body');
        this.lfcrootnode = rootnode;
        rootnode.ownerDocument = rootnode;
        xmlnode._lfcparent = rootnode;
        var queue = [xmlnode];
        // set up the work queue
        this.copyQueue = {ptr: 0, q: queue, xmlobj: xmlnode};
        this.trimwhitespace = xmlnode.trimwhitespace;
        this.nsprefix       = xmlnode.nsprefix;
        var done = this.queuedCopyFlashXML_internal();
        // If the copy wasn't completed in this quanta, start a task to finish it.
        if (!done) {
            this.startCopyTask();
        }
    }

    /**
      * Task that is called periodically from Idle loop.
      * This does the work of copying the Flash XML tree into a LzDataElement tree.
      * Run the copy queue
      * @access private
      */
    function copyFlashData ( ignore ) {
        //    Debug.write("copyFlashData [1]", this.copyQueue.ptr);
        if (this.copyQueue != null) {
            //Debug.write("copyFlashData [2]");
            this.queuedCopyFlashXML_internal();
        } else {
            this.removeCopyTask();
        }
    }

    /**
      * @access private
      */
    function startCopyTask ( ){
        //    Debug.write("starting copy idle task ");
        this.copyTaskDel.register( lz.Idle, "onidle" );
    }

    /**
      * @access private
      */
    function removeCopyTask() {
        // Remove copyTask delegate
        //    Debug.write("removing copy idle task ", this);
        if (this.copyTaskDel.hasevents) this.copyTaskDel.unregisterAll();
        this.copyQueue = null;
        this.lfcrootnode = null;
    }

    /**
      * Iterative implementation, using a queue, to translate a XMLNode tree into
      * a tree of LzDataElement.
      * Queue contains list of XMLNodes to be copied
      * @access private
      */
    function queuedCopyFlashXML_internal () {
        var nsprefix = this.nsprefix;
        var trimwhitespace = this.trimwhitespace;
        var ptr = this.copyQueue.ptr;
        var q = this.copyQueue.q;
        var iter = 0;
        var maxiter = this.copyLoopsPerFrame;
        var loopstart = (new Date).getTime();
        var oproto = Object.prototype;
        while (ptr < q.length && iter++ < maxiter) {

            // check time once every 100 iterations
            if ((iter % 100) == 0) {
                var elapsed = (new Date).getTime() - loopstart;
                if (elapsed > this.maxLoopTime) {
                    //Debug.write("too much time in queuedCopyFlashXML_internal, break");
                    break;
                }
            }

            var node = q[ptr++];
            var lfcparent = node._lfcparent;
            delete node._lfcparent;
            var lfcnode = null;

            // text node?
            if (node.nodeType == 3) {
                var nv = node.nodeValue;
                if (trimwhitespace == true) {
                    nv = LzDataElement.trim(nv);
                }
                // FIXME: [2008-3-31 pbr] This bypasses initialization
                lfcnode = {__proto__: LzDataText.prototype, data: nv, parentNode: lfcparent, nodeType: LzDataElement.TEXT_NODE};
            } else {
                // Do we need to copy attributes list as well?
                // After this works, try bashing the __proto__
                // and see if GC still works.

                if (! nsprefix) {
                    // this is slow, we iterate over every attribute name
                    var nattrs = node.attributes;
                    var cattrs = {};
                    var attrlist = [];
                    for (var key in nattrs) {
                        var nkey = key;
                        // strip namespace prefixes
                        var colpos = key.indexOf(':');
                        if (colpos >= 0) {
                            nkey = key.substring(colpos + 1);
                        }
                        //cattrs[nkey] = nattrs[key];
                        attrlist.push(nkey, nattrs[key]);
                    }

                    // Flash iterates over an object in reversed insertion order.
                    // But as we want to preserve the original xml-attribute order,
                    // we need to insert the attributes also in reversed order.
                    for (var i = attrlist.length - 1; i >= 0; i -= 2) {
                        cattrs[attrlist[i - 1]] = attrlist[i];
                    }
                } else {
                    // this is the fast path
                    var cattrs = node.attributes;
                    cattrs.__proto__ = oproto;
                    cattrs.constructor = Object;
                    ASSetPropFlags(cattrs, ['__proto__', 'constructor'], 1, 7);
                 }

                //lfcnode = new LzDataElement(node.nodeName, cattrs);

                var nodename = nsprefix ? node.nodeName : node.localName;
                // FIXME: [2008-3-31 pbr] This bypasses initialization
                lfcnode = { __proto__: LzDataElement.prototype,
                            nodeType: LzDataElement.ELEMENT_NODE,
                            nodeName: nodename,
                            attributes: cattrs,
                            childNodes: [],
                            ownerDocument: lfcparent.ownerDocument,
                            parentNode: lfcparent};
            }

            // Add to the parent's childnodes.
            lfcparent.childNodes.push(lfcnode);

            // queue the XMLNode children for processing
            var children = node.childNodes;
            if (children != null) {
                for ( var i = 0; i < children.length; i++ ){
                    var c = children[i];
                    c._lfcparent = lfcnode;
                    q[q.length] = c;
                }
            }
        }
        this.copyQueue.ptr = ptr;
        //Debug.write("leaving queuedCopyFlashXML_internal main loop", ptr, iter);
        if (ptr >= q.length) {
            // If we get here, we're finished with the tree copy.
            // Unregister the idle loop handler
            var xmlobj = this.copyQueue.xmlobj;
            // <body><null>DATA</null></body>
            var data = this.lfcrootnode.childNodes[0].childNodes[0];
            this.removeCopyTask();
            // Proceed with getting this dataset returned to the customer
            xmlobj.loader.returnData(xmlobj, data);
            // Indicate that we finished it all in one go, no need to queue more copy tasks
            return true;
        } else {
            return false;
        }
    }
}
