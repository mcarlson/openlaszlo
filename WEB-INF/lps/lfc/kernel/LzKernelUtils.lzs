/**
 * Utilities that are shared by all kernels
 *
 * @copyright Copyright 2009-2010 Laszlo Systems, Inc.  All Rights
 * Reserved.  Use is subject to license terms.
 */

class LzKernelUtils {
    /**
     * Converts a number to a string with unit designator.  The default
     * unit is `px`.  If the passed-in value is a percentage, it is not
     * modified.  For compatibility with swf runtimes, NaN is coerced to
     * 0; for compatibility with DHTML runtimes, Infinity is coerced to
     * the largest possible integer value (as implied by the Javascript
     * bit operators).  Any other non-numeric value will be coerced to 0,
     * and if debugging is on, a warning will be issued.
     */
    public static function CSSDimension (value, units:String='px') {
        if (value == 0) return value;
        var result = value;
        if (isNaN(value)) {
            // Don't perturb % values
            if (typeof value == 'string' &&
                value.indexOf('%') == (value.length - 1) &&
                (! isNaN(value.substring(0, value.length - 1)))) {
                return value;
            } else {
                result = 0;
                if ($debug) {
                    Debug.warn("%w: coerced %w to %w", arguments.callee, value, result);
                }
            }
        } else if (value === Infinity) {
            result = (~0>>>1);
        } else if (value === -Infinity) {
            result = ~(~0>>>1);
        }
        return result + units;
    }

    public static function range(val, max, min=null) {
        val = (val > max) ? max : val;
        if (min != null) {
            val = (val < min) ? min : val;
        }
        return val;
    }

    public static function rect(context,x,y,width,height,topleftradius=0,toprightradius=null,bottomrightradius=null,bottomleftradius=null) {
        // the radius can't be bigger than our width/height
        var maxsize = Math.min(width, height) * .5;

        topleftradius = LzKernelUtils.range(topleftradius || 0, maxsize, 0);
        if (bottomleftradius == null) {
            bottomleftradius = bottomrightradius = toprightradius = topleftradius;
        } else {
            // default to topleftradius
            bottomleftradius = LzKernelUtils.range(bottomleftradius || 0, maxsize, 0);
            bottomrightradius = LzKernelUtils.range(bottomrightradius || 0, maxsize, 0);
            toprightradius = LzKernelUtils.range(toprightradius || 0, maxsize, 0);
        }

        // Method to draw curves
        var curvemethod = context['curveTo'] ? 'curveTo' : 'quadraticCurveTo';
            
        context.moveTo(x,y+topleftradius);
        context.lineTo(x,y+height-bottomleftradius);
        if (bottomleftradius != 0) {
            context[curvemethod](x,y+height,x+bottomleftradius,y+height);
        }
        context.lineTo(x+width-bottomrightradius,y+height);
        if (bottomrightradius != 0) {
            context[curvemethod](x+width,y+height,x+width,y+height-bottomrightradius);
        }
        context.lineTo(x+width,y+toprightradius);
        if (toprightradius != 0) {
            context[curvemethod](x+width,y,x+width-toprightradius,y);
        }
        context.lineTo(x+topleftradius,y);
        if (topleftradius != 0) {
            context[curvemethod](x,y,x,y+topleftradius);
        }
    }

/**
  * Parse out args from lzoptions string, returns a hash table of pairs: key => [val1, val2, ...]
  * @keywords flashspecific
  * @access private
  * NOTE: please keep this in sync with the version in embednew.js
  */

static function parselzoptions (lzopts:String) {
        var tokens = lzopts.split(new RegExp("([,()])"));
        /**
           Parse out options value from lzoptions, of the form
           ?lzoptions=runtime(dhtml),wrapper(html),debug(false),proxy(true)
           For boolean options, we default that if they are present they are true, if not they are false so:
           ?lzoptions=runtime(dhtml),wrapper(html),proxy
           would be the same as the above.

           multiple comma separated values can be passed in args list, e.g.,

           ?lzoptions=runtime(swf10),package(widget,android)

           @return hashmap of key=>List
        */
        var KEY = 1;
        var ARGS = 2;

        var options = {};
        var mystate = KEY;
        var vals = [];
        var lastkey = null;
        var nvals = 0;

        while (tokens.length > 0) {
            var token = tokens[0];
            var tokens = tokens.slice(1);
            if (token == "") continue;
            switch(mystate) {
              case KEY:
                if (token == ",") {
                    // we only saw key name, but no value, so give it an implicit true value.
                    if (lastkey != null && nvals == 0) {
                        options[lastkey] = [true];
                    }
                } else if (token == "(") {
                    mystate = ARGS;
                    vals = [];
                    options[lastkey] =  vals;
                } else {
                    lastkey = token;
                }
                break;
              case ARGS:
                if (token == ")") {
                    lastkey = null;
                    mystate = KEY;
                    nvals = 0;
                } else if (token == ",") {
                    
                } else {
                    vals.push(token);
                    nvals++;
                }
                break;
            }
        }
        if (lastkey != null && nvals == 0) {
            options[lastkey] =  [true];
        }
        return options;
    }


}
