/**
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @affects lzcontextmenukernel
  * @topic LFC
  * @subtopic Views
  */

/**
  * @access private
  */
class LzContextMenuKernel {

function LzContextMenuKernel (newowner:LzContextMenu) {
    this.owner = newowner;
}

var owner:LzContextMenu = null;
var showbuiltins = false;
var _delegate = null;

/**
  * LzContextMenu.setDelegate
  * Sets the delegate which will be called when the menu is opened
  * @param LzDelegate delegate: delegate which is executed when item is selected. An
  * onmenuopen event is also sent.
  * 
  * @access private
  */
function setDelegate (delegate) {
    this._delegate = delegate;
}

/**
  * LzContextMenu.addItem
  * Adds a menu items into a menu
  * @param LzContextMenuItem item: LzContextMenuItem to install on this menu
  * @access private
  */
function addItem (item) {
    // nothing to do
}

/**
  * LzContextMenu.hideBuiltInItems
  * @access private
  */
function hideBuiltInItems () {
    this.showbuiltins = false;
}

/**
  * LzContextMenu.showBuiltInItems
  * @access private
  */
function showBuiltInItems () {
    this.showbuiltins = true;
}

/**
  * LzContextMenu.clearItems
  * Remove all custom items from a menu
  * @access private
  */
function clearItems () {
    // nothing to do
}

/** @access private */
static var lzcontextmenu = null;

/** @access private */
static function __create () {
    var s = document.getElementById('lzcontextmenu');
    if (! s) {
        s = document.createElement('div');
        lz.embed.__setAttr(s, 'id', 'lzcontextmenu');
        lz.embed.__setAttr(s, 'style', 'display: none');
        var stopevent = function (e) {
            if (e) {
                e.preventDefault();
                e.stopPropagation();
            } else {
                e = window.event;
                e.returnValue = false;
                e.cancelBubble = true;
            }
            return false;
        }
        s.onmousedown = stopevent;
        s.onmouseup = stopevent;
        s.onclick = stopevent;
        document.body.appendChild(s);

        LzContextMenuKernel.lzcontextmenu = s;
    }
    return s;
}

/** @access private */
function __show () {
    var owner = this.owner;

    var del = this._delegate;
    if (del != null) del.execute(owner);
    if (owner.onmenuopen.ready) owner.onmenuopen.sendEvent(owner);
    

    var o = '';
    var shownItems = 0;
    var items = owner.getItems();
    var _items = {};
    for (var i = 0; i < items.length; i++) {
        var v = items[i].kernel.cmenuitem;
        var caption = v.caption;
        // Don't display the same item twice (matches swf behavior)
        if (v.visible != true || caption in _items) {
            continue; 
        }
        // Mark as displayed
        _items[caption] = true;
        shownItems += 1;

        if (v.separatorBefore) {
            o += '<div class="separator"></div>';
        }

        if (v.enabled) {
            o += '<a href="" onmouseup="LzMouseKernel.__showncontextmenu.__select(arguments[0],' + i + ');">';
        } else {
            o += '<a href="" class="disabled">';
        }
        o += caption + '</a>';
    }

    LzMouseKernel.__showncontextmenu = this;

    var s = LzContextMenuKernel.lzcontextmenu || LzContextMenuKernel.__create();
    s.innerHTML = o;
    s.style.left = LzMouseKernel.__x + 'px';
    s.style.top = LzMouseKernel.__y + 'px';

    // Only show menu if there are any visible items and builtin items are hidden
    if (shownItems && ! this.showbuiltins) {
        s.style.display = 'block';
    }
}

/** @access private */
function __hide () {
    var s = LzContextMenuKernel.lzcontextmenu;
    if (s) {
        s.style.display = 'none';
    }
    LzMouseKernel.__showncontextmenu = null;
}

/** @access private */
function __select (e, i) {
    e = e || window.event;
    var leftbutton = (LzSprite.prototype.quirks.ie_mouse_events ? 1 : 0);
    if (e.button == leftbutton) {
        this.__hide();
        var items = this.owner.getItems();
        if (items[i]) items[i].kernel.__select();
    }
}

}; // End of LzContextMenuKernel



/**
  * @access private
  */
class LzContextMenuItemKernel {

function LzContextMenuItemKernel (newowner:LzContextMenuItem, title, del) {
    this.owner = newowner;
    this.cmenuitem = {visible: true, enabled: true, separatorBefore: false, caption: title};
    this.setDelegate(del);
}

var owner:LzContextMenuItem = null;
var cmenuitem = null;
var _delegate = null;


/**
  * LzContextMenuItem.setDelegate
  * Sets the delegate which will be called when the menu item is selected
  * @param LzDelegate delegate: delegate which is executed when item is 
  * selected. An onselect event is also sent.
  * 
  * @access private
  */
function setDelegate (delegate) {
    this._delegate = delegate;
}

/**
  * LzContextMenuItem.setCaption
  * Sets the text string which is displayed for the menu item
  * @param String caption: text string to display
  * @access public
  */
function setCaption (caption) {
    this.cmenuitem.caption = caption;
}

/**
  * LzContextMenuItem.getCaption
  * Gets the text string which is displayed for the menu item
  * @access public
  */
function getCaption () {
    return this.cmenuitem.caption;
}

/**
  * LzContextMenuItem.setEnabled
  * @param boolean val: if false, menu item is grayed out and will not respond to clicks
  * @access public
  */
function setEnabled (val) {
    this.cmenuitem.enabled = val;
}

/**
  * LzContextMenuItem.separatorBefore
  * Draw a horizontal separator line before this item in the menu
  * @param boolean val: sets visibility of separator line
  * @access public
  */

function setSeparatorBefore (val) {
    this.cmenuitem.separatorBefore = val;
}

/**
  * LzContextMenuItem.setVisible
  * Sets the visibility of the menu item
  * @param boolean val: sets visibility
  * @access public
  */
function setVisible (val) {
    this.cmenuitem.visible = val;
}

/** @access private */
function __select () {
    var owner = this.owner;
    var delegate = this._delegate;
    if (delegate != null) {
        if (delegate instanceof LzDelegate) {
            delegate.execute(owner);
        } else if (typeof delegate == 'function') {
            delegate();
        } else if ($debug) {
            Debug.error("LzContextMenuItem.setDelegate must be passed a delegate", owner, delegate);
        }
    }
    if (owner.onselect.ready) owner.onselect.sendEvent(owner);
}

}; // End of LzContextMenuItemKernel
