/**
  * LzIdleKernel.lzs
  *
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Kernel
  * @subtopic DHTML
  * @author Max Carlson &lt;max@openlaszlo.org&gt;
  */

// Receives idle events and sends them into the runtime
var LzIdleKernel = {
    __callbacks: []
    ,__update: function (){
        var kernel = LzIdleKernel;
        // NOTE: [2009-06-16 ptw] (LPP-8269) The handler can work
        // directly on the callback array because it knows that
        // add/remove work on copies
        var callbacks = kernel.__callbacks;
        var now = LzTimeKernel.getTimer();
        for (var i:int = callbacks.length - 2; i >= 0; i -= 2) {
          var scope = callbacks[i];
          var funcname = callbacks[i + 1];
          scope[funcname](now);
        }
    }
    ,__intervalID: null
    ,addCallback: function (scope, funcname) {
        var kernel = LzIdleKernel;
        // NOTE: [2009-06-16 ptw] (LPP-8269) Manipulate a copy and
        // then atomically update
        var callbacks = kernel.__callbacks;
        for (var i:int = callbacks.length - 2; i >= 0; i -= 2) {
          if (callbacks[i] === scope && callbacks[i + 1] == funcname) {
            // don't add a callback multiple times
            return;
          }
        }
        (kernel.__callbacks = callbacks.slice(0)).push(scope, funcname);
        if (kernel.__intervalID == null) {
          kernel.__intervalID = setInterval( LzIdleKernel.__update, 1000 / kernel.__fps );
        }
    }    
    ,removeCallback: function (scope, funcname) {
        var kernel = LzIdleKernel;
        // NOTE: [2009-06-16 ptw] (LPP-8269) Manipulate a copy and
        // then atomically update
        var callbacks = kernel.__callbacks;
        // Process from the end on the assumption the most likely
        // callback to be removed is the one that is running
        for (var i:int = callbacks.length - 2; i >= 0; i -= 2) {
          if (callbacks[i] === scope && callbacks[i + 1] == funcname) {
            kernel.__callbacks = callbacks = callbacks.slice(0);
            var removed:Array = callbacks.splice(i, 2);
            if (callbacks.length == 0) {
              clearInterval( kernel.__intervalID );
              kernel.__intervalID = null;
            }
            // it's safe to return after the first hit, because addCallback()
            // ensures a single callback is never added more than once
            return removed;
          }
        }
    }    
    ,__fps: 30
    ,setFrameRate: function(fps) {
        LzIdleKernel.__fps = fps;
        if (LzIdleKernel.__intervalID != null) {
          clearInterval(LzIdleKernel.__intervalID);
          LzIdleKernel.__intervalID = setInterval( LzIdleKernel.__update, 1000 / fps );
        }
    }
}
