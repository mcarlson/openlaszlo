# file: jscombine.py
# Author: Antun Karlovac
# Description: 
# Generate LZX reference by combining output of both jsdoc and rngdoc
# (the lfc reference and schema), into the files that the schema created
#
# python rngdoc lzx.rng lzx-reference.php (or.html)
# ant doc
# python jscombine.py

# * P_LZ_COPYRIGHT_BEGIN ******************************************************
# * Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.            *
# * Use is subject to license terms.                                          *
# * P_LZ_COPYRIGHT_END ********************************************************

from jsdoc import *

# = Globals ==================================================================

outdir = normalizePath( os.getenv("LPS_HOME") + "/docs/noship/lzx-reference/" )
lfcdir = normalizePath( os.getenv("LPS_HOME") + "/WEB-INF/lps/lfc/" )
schemadir = normalizePath( os.getenv("LPS_HOME") + "/WEB-INF/lps/schema/")
schemaFile = 'lzx-reference' 
fileExtension = ".html"
genoptions = ""
basepath = ""
allTags = []
tagCatIndex = 0
tagAlphaIndex = 0
duplicateTags = []
copyrightInfo = '<br><p class="smaller">&copy; Copyright 2002-2003 <a target="_top" href="http://www.laszlosystems.com/">Laszlo Systems, Inc.</a> All Rights Reserved. Unauthorized use, duplication or distribution is strictly prohibited. This is the proprietary information of Laszlo Systems, Inc. Use is subject to license terms.</p>'

# = Classes ==================================================================

#
# A LZX tag
# Created upon parsing doc generated by rngdoc, then used as a holder for 
# tag information.
#
class tag:
    def __init__( self, commentMarkerLine ):
        self.name = self.getTagName( commentMarkerLine )
        self.desc = ''

    def getTagName( self, commentMarkerLine ):
        tagName = commentMarkerLine.split( ':' )
        tagName = tagName[1][:-5]
        return tagName

    def addLine( self, line ):
        self.desc += line
        
#
# An index file from the docs generated by rngdoc
# The rngdoc.py script inserts markers to designate where the indexes start and
# end. At that time, rngdoc doesn't know which page each tag lives on (e.g. 
# the view tag lives on the LzView page (from the api docs), but the <b> tag
# lives on its own page), so it leaves markers to be worked out at this stage. 
#
class tagIndex:
    def __init__( self, filename ):
        self.content = ''
        self.indexes = [ ['alpha', 'Alphabetical LFC Index'],
                         ['classes', 'Class LFC Index'],
                         ['tagalpha', 'Alphabetical Tag Index'],
                         ['tagcat', 'Categorical Tag Index'] ]
        self.fname = filename
        self.indexLinks = ''

    def addLine( self, line ):
        self.content += line
    
    def insertLink( self, tagName, actualFile ):
        marker = '"\$lz_taglink:' + tagName + '"'
        # Sometimes the rngdoc.py script doesn't create the markers that are
        # required, so we keep a stack of duplicate/extra tags around
        # that get added in at the last minute.
        if not re.search( marker, self.content ):
            tag = [ tagName, actualFile ]
            duplicateTags.append( tag ) 
        fileName = '"' + actualFile + fileExtension + '#tag"'
        self.content = re.sub( marker, fileName, self.content)
    
    # create the links to the other indexes (e.g. tag alphabetical, etc.)
    def makeIndexLinks( self ):
        for i in self.indexes:
            if self.fname != i[0]:
                lnk = i[0] + fileExtension
                self.indexLinks += '<a href="' + lnk + '">' + i[1] + '</a>' \
                                 + '<br />\n'
            else:
                self.indexLinks += '<b>' + i[1] + '</b><br />\n'
        self.indexLinks = addFormatting( self.indexLinks, 'regular' )
        self.indexLinks += '\n<hr />\n'
        
    def printExtraTags( self ):
        print 'Here are the duplicate/weird tags'
        for tag in duplicateTags:
            print tag[0] + " : " + tag[1]

    def addHeader( self ):
        self.makeIndexLinks()
        if not 'web' in genoptions:
            h = '<head>\n' \
              + '<link rel="STYLESHEET" type="text/css" href="./styles.css">\n' \
              + '</head>\n' \
              + '<body bgcolor="#E6E6E6">\n'
            self.content = h + self.indexLinks + self.content 

    def addFooter( self ):
        if not 'web' in genoptions:
            f = copyrightInfo 
            f += '</body>'
            self.content += f

    def saveFile( self ):
        filename = self.fname
        filename = basepath + '/' + filename + fileExtension
        fh = open( filename, 'w' )
        fh.write( self.content )
        fh.close()



#
# An index that will eventually get used in the right hand col of the website
# pages
#
class websiteIndex:
    def __init__( self, title, tagIndx, lfcIndx ):
        self.title = title
        self.content = ''
        self.addSubtitle( 'Tags' )
        self.content += self.addPaddingTable( tagIndx )
        self.addSubtitle( 'Foundation Classes' )
        self.content += self.addPaddingTable( lfcIndx )
        self.addStandardLaszloTable()
    
    # create a subtitle (grey bar)
    def addSubtitle( self, title ):
        s = '<table width="100%" border="0" cellspacing="0" cellpadding="6">\n'\
          + '<!-- grey bar -->\n'\
          + '    <tr><td bgcolor="#e6e6e6"><span class="regular"><b>'\
          + title + '</b></span></td></tr>\n'\
          + '</table>\n'
        self.content += s

    def addPaddingTable( self, txt ):
        s = '           <table width="100%" border="0" cellspacing="0" cellpadding="10">' \
          + '               <tr><td>\n'\
          + txt \
          + '</td></tr>\n' \
          + '            </table>\n'
        return s

    # adds the right hand table to the content
    def addStandardLaszloTable( self ):
        a = '<table width="177" border="0" cellspacing="0" cellpadding="0">' \
          + '<!-- Standard Laszlo Table -->' \
          + '<!-- Set the width of the spacer to width - 24 -->' \
          + '   <tr><!-- Title bar -->' \
          + '       <td width="1"><img src="../../../../img/g_table_title_corner_top_left.gif" width="1" height="6" alt="" border="0"></td>' \
          + '       <td width="6"><img src="../../../../img/g_table_title_top_left.gif" width="8" height="6" alt="" border="0"></td>' \
          + '       <td background="../../../../img/g_table_title_top_repeater.gif" width="100%"><img src="../../../../img/spacer.gif" width="177" height="1" alt="" border="0"></td>' \
          + '       <td width="6"><img src="../../../../img/g_table_title_top_right.gif" width="8" height="6" alt="" border="0"></td>' \
          + '       <td width="1"><img src="../../../../img/g_table_title_corner_top_right.gif" width="1" height="6" alt="" border="0"></td>' \
          + '   </tr>' \
          + '   <tr valign="top">' \
          + '       <td colspan="2"><img src="../../../../img/g_table_title_left.gif" width="9" height="15" alt="" border="0"></td>        ' \
          + '       <td background="../../../../img/g_table_title_background.gif"> <span class="tableTitle">' + self.title + '</span></td>' \
          + '       <td colspan="2"><img src="../../../../img/g_table_title_right.gif" width="9" height="15" alt="" border="0"></td>' \
          + '   </tr>' \
          + '   <tr>' \
          + '       <td colspan="2"><img src="../../../../img/g_table_title_corner_bottom_left.gif" width="9" height="3" alt="" border="0"></td>' \
          + '       <td background="../../../../img/g_table_title_bottom_repeater.gif"><img src="../../../../img/spacer.gif" width="1" height="3" alt="" border="0"></td>' \
          + '       <td colspan="2"><img src="../../../../img/g_table_title_corner_bottom_right.gif" width="9" height="3" alt="" border="0"></td>' \
          + '   </tr>' \
          + '   <tr><!-- Body -->' \
          + '       <td bgcolor="#000000"><img src="../../../../img/spacer.gif" width="1" height="1" alt="" border="0"></td>' \
          + '       <td colspan="3" bgcolor="#ffffff">' \

        b = '        </td>' \
          + '        <td bgcolor="#000000"><img src="../../../../img/spacer.gif" width="1" height="1" alt="" border="0"></td>' \
          + '    </tr>' \
          + '    <tr><!-- Bottom line -->' \
          + '        <td colspan="5" bgcolor="#000000"><img src="../../../../img/spacer.gif" width="1" height="1" alt="" border="0"></td>' \
          + '    </tr>' \
          + '</table>\n'
        self.content = a + '\n\n\n' + self.content + '\n\n\n' + b

# = Functions ================================================================



#
# Set all relevant vars, etc. Copy files to working directory
#
def init( args ):
    global genoptions, fileExtension, basepath, schemaFile, outdir, lfcdir
    genoptions = args[1:]
    genoptions = [a[1:] for a in genoptions]
    # == genoptions are: =====================================================
    # web: work with web files (php extensions, etc)
    

    if not 'web' in genoptions:
        docpath = "docs/build"
        lfcdir += docpath
    else:
        outdir = normalizePath( os.getenv("LPS_HOME") \
                                    + "/docs/noship/lzx-reference-website/" )
        lfcdir += "docs/build_website"
        fileExtension = ".php"

    schemaFile += fileExtension
    basepath = outdir
    prepareDestinationFolder( lfcdir, outdir )



#
# Return text from between given markers
#
def extractText( file, start, end ):
    fh = open( file, 'r' )
    txt = fh.read()
    fh.close()
    r = start + '(.+)' + end
    m = re.compile( r, re.DOTALL ).search( txt )
    if not m:
        return 0
    s = m.string[ m.start() + len(start) :m.end() - len(end) ]
    return s



#
# Adds the tag doc to the top of the api pages
#
def makeReference():
    print "Adding tag info to LFC docs"
    for file in os.listdir( basepath ):
        if os.path.isdir( file ):
            continue
        insertTagInfo( basepath + '/' + file )
    print str( len( allTags ) ) + " Tags to go...."
    for tag in allTags:
        fileName = tag.name 
        fname = basepath + '/' + fileName + fileExtension
        counter = 0
        # Sometimes files are created with duplicate names (e.g. font.html,
        # and font.html. Number them to prevent duplicates.
        while os.path.exists( fname ):
            counter += 1
            fileName = tag.name + str( counter ) 
            fname = basepath + '/' + fileName + fileExtension
        makeTagPage( fname, tag.name, tag.desc )
        tagAlphaIndex.insertLink( tag.name, fileName )
        tagCatIndex.insertLink( tag.name, fileName )


def makeTagPage( fname, tagName, tagDesc):
    fh = open( fname, 'w' )
    # header
    if not 'web' in genoptions:
        h = '<head>\n' \
          + '<link rel="STYLESHEET" type="text/css" href="./styles.css">\n' \
          + '</head>\n' \
          + '<body>\n'
        mid = ''
    else:
        h = "<?php ob_start(); ?>\n"
        h += "<?php $thisPage = '/var/www/html/new/developers/"
        h += "documentation/lzxref/index.php'; ?>\n"
        h += "<?php $urlPrefix = '../../../'; ?>\n"
        h += "<?php $mouseTrailLast = '" + tagName + " '; ?>\n"
        h += "<?php require $urlPrefix . 'includes/tree.php'; ?>\n"
        h += "<?php $noLeftMargin = 0; ?>\n"
        h += "<?php require $urlPrefix . 'includes/header.php'; ?>\n"
        h += "<?php \n"
        h += "    if ($devzoneProtected) {\n"
        h += "        // session management\n"
        h += "        require $urlPrefix . "\
             +"'developers/includes/global.php';\n"
        h += "        require $urlPrefix . "\
             +"'developers/includes/dev_session.php';\n"
        h += "    }\n"
        h += "    $header = ob_get_contents();\n"
        h += "    ob_end_clean();\n"
        h += "    // write out contents\n"
        h += "    echo($header);\n"
        h += "?>\n"

        # 3 columns
        h += '<!-- 3 col table -->'\
            + '<table width="635" border="0" cellspacing="0" cellpadding="0">\n' \
            + '    <tr>\n' \
            + '        <td><img src="<?php echo($urlPrefix); ?>img/spacer.gif" width="201" height="1" alt="" border="0"></td>\n' \
            + '        <td><img src="<?php echo($urlPrefix); ?>img/spacer.gif" width="16" height="1" alt="" border="0"></td>\n' \
            + '        <td><img src="<?php echo($urlPrefix); ?>img/spacer.gif" width="201" height="1" alt="" border="0"></td>\n' \
            + '        <td><img src="<?php echo($urlPrefix); ?>img/spacer.gif" width="16" height="1" alt="" border="0"></td>\n' \
            + '        <td><img src="<?php echo($urlPrefix); ?>img/spacer.gif" width="201" height="1" alt="" border="0"></td>\n' \
            + '    </tr>\n' \
            + '    <tr valign="top">\n' \
            + '        <td colspan="3"><!-- Columns 1 and 2 -->\n' 
        mid = '</td>\n' \
            + '<!-- <td></td> -->\n' \
            + '<!-- <td></td> -->\n' \
            + '<td>&nbsp;</td>\n' \
            + '<td><!-- column 3 -->\n\n' \
            + 'contentGoesHere\n'
    
    fh.write( h )
    fh.write( '<a name="tag"></a>' )
    fh.write( tagDesc )
    fh.write( mid )
    
    # footer
    if not 'web' in genoptions:
        f = copyrightInfo 
        f += '</body>'
        str = ''
    else:
        str = '</td>\n' \
            + '    </tr>\n' \
            + '</table>\n'
        f = "<?php include $urlPrefix . 'includes/footer.php'; ?>"
    fh.write( str )
    fh.write( f )
    fh.close()

#
# Insert tag info to the top of previously generated API pages
#
def insertTagInfo( file ):
    tagMarker = 'lz_correspondingTag:'
    descriptiveName = os.path.basename( re.sub( fileExtension, '', file ) )
    fh = open( file, 'r' )
    fdata = fh.read()
    m = re.search( tagMarker + '.+\n', fdata )
    fh.close()
    if m:
        tagName = m.string[ m.start()+len( tagMarker ):m.end()-1 ]
        tagDesc = getTagInfo( tagName )
        tagDesc = '\n<a name="tag"></a>\n' + tagDesc
        fdata = fdata[ 0:m.start() ] + tagDesc + fdata[ m.end(): ]
        tagAlphaIndex.insertLink( tagName, descriptiveName )
        tagCatIndex.insertLink( tagName, descriptiveName )
        #Debug: uncomment the return here
        #
        # return
        fh = open ( file, 'w' )
        fh.write( fdata )
        fh.close()
        

#
# Returns the documentation regarding a tag
#
def getTagInfo( tagName ):
    global allTags
    tagDescription = ''
    for tagObj in allTags:
        if tagObj.name == tagName:
            tagDescription = tagObj.desc
            allTags.remove( tagObj )
            break
    return tagDescription


#
# Scan the generated tag document and create a list of all the tags found there
# Crete two global objects that contain the text that we shall use for the
# indexes.
#
def getAllTags():
    global allTags
    lzxTag = 0
    refFile = schemadir + "/" + schemaFile 
    fh = open( refFile, 'r' )
    for line in fh.readlines():
        if re.match( '<!-- lz_tag:', line ) :
            if lzxTag:
                allTags.append( lzxTag )
            lzxTag = tag( line )
        elif re.match( '</body>', line ):
            if lzxTag:
                allTags.append( lzxTag )
            
        if lzxTag:
            lzxTag.addLine( line )




#
# Create objects that correspond to index files
# The tag indexes need to be parsed out of the single document that rngdoc
# generates, and the lfc indexes get parsed out of the two files that jsdoc
# creates
#
def getIndexes():
    global tagAlphaIndex, tagCatIndex, lfcAlphaIndex, lfcClassIndex
    alphaIndex = 0
    catIndex = 0
    refFile = schemadir + "/" + schemaFile 
    fh = open( refFile, 'r' )
            
    # Tag indexes
    for line in fh.readlines():
        if re.match( '<!-- lz_tagalphaindex:start -->', line ):
            alphaIndex = 1
            tagAlphaIndex = tagIndex( 'tagalpha' )
        elif re.match( '<!-- lz_tagalphaindex:end -->', line ):
            alphaIndex = 0
        elif re.match( '<!-- lz_tagcatindex:start -->', line ):
            catIndex = 1
            tagCatIndex = tagIndex( 'tagcat' )
        elif re.match( '<!-- lz_tagcatindex:end -->', line ):
            catIndex = 0

        if alphaIndex:
            tagAlphaIndex.addLine( line )
        if catIndex:
            tagCatIndex.addLine( line )
    fh.close()

    # LFC indexes
    lfcAlphaIndex = tagIndex( 'alpha' )
    ifile = basepath + '/' + 'alpha' + fileExtension
    fh = open( ifile, 'r' )
    lfcAlphaIndex.content = fh.read()
    fh.close()

    lfcClassIndex = tagIndex( 'classes' )
    ifile = basepath + '/' + 'classes' + fileExtension
    fh = open( ifile, 'r' )
    lfcClassIndex.content = fh.read()
    fh.close()

    


def saveTagIndexFiles():
    print "Saving index files"
    indexFiles = [ tagAlphaIndex, tagCatIndex, lfcClassIndex, lfcAlphaIndex ]
    for iFile in indexFiles:
        iFile.printExtraTags()
        iFile.addHeader()
        iFile.addFooter()
        iFile.saveFile()



# 
# Insert the index column on the right of a page (website)
#
def addWebsiteIndexColumn( wIndex, dirname, name ):
    thirdColumnIndex = wIndex.content

    fileExtPattern = re.compile ( '\\' + fileExtension )
    markerPattern = re.compile( 'contentGoesHere' )
    for fileName in name:
        if re.search( fileExtPattern, fileName ):
            pth = dirname + '/' + fileName
            pth = normalizePath( pth )
            f = open( pth, 'r' )
            txt = f.read()
            f.close()
            if re.search( markerPattern, txt ):
                txt = re.sub( markerPattern, thirdColumnIndex, txt )
                f = open( pth, 'w' )
                f.write( txt )
                f.close()


#
# Run through all files and put index column in each one
#
def addIndexToWebsitePages():
    print "Adding index column to pages (for website files)..."
    fn = basepath + '/' + 'alpha' + fileExtension
    alphaLFCText = extractText( fn , '<!-- lz_beginIndex:alphaApiShort -->',
                                        '<!-- lz_endIndex:alphaApiShort -->' )
    alphaTagText = tagAlphaIndex.content
    alphaTagText = re.sub( '<span class="regular">', 
                                        '<span class="lfcIndexTable">', 
                                        alphaTagText )
    alphaTagText = re.sub( 'target="content"', '', alphaTagText )
    alphaTagText = '<!-- ignoreThis -->\n' + alphaTagText \
                                                + '\n<!-- /ignoreThis -->'
    wIndex = websiteIndex( 'Index', alphaTagText, alphaLFCText )
    os.path.walk( basepath, addWebsiteIndexColumn, wIndex )
    return 0


def prepareDestinationFolder( lfcFolder, destFolder ):
    import shutil
    if os.path.isdir( destFolder ):
        shutil.rmtree( destFolder )
    shutil.copytree( lfcFolder, destFolder )


# ============================================================================



if __name__ == '__main__' :
    init( sys.argv )
    getTagApiRelationships()
    getAllTags()
    getIndexes()
    makeReference()
    saveTagIndexFiles()
    if 'web' in genoptions:
        addIndexToWebsitePages()
