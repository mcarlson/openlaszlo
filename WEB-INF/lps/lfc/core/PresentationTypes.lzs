/**
 * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @access public
 * @topic LZX
 */

/**
 * <p><code>lz.Type</code> is the single instance of the class
 * <code>lz.TypeService</code> which implements the runtime
 * presentation type system.</p>
 *
 * @shortdesc Type service.
 */
public final class $lz$class_TypeService {
  /** @access private */
  const PresentationTypes:Object;

  /**
   * The type service.  Also available as the global
   * <code>lz.Type</code>.
   *
   * @type $lz$class_TypeService
   * @lzxtype lz.TypeService
   * @keywords readonly
   * @devnote this should be a public getter to enforce readonly
   */
  public static const Type:$lz$class_TypeService;

  /** @access private
   * @devnote AS3 does not allow private constructors, so we need the
   * error
   */
  function $lz$class_TypeService () {
    super();
    //    if ($lz$class_TypeService.Type) {
    //      throw new Error("There can be only one instance of lz.TypeService");
    //    }
    // Create on instance, not prototype
    this.PresentationTypes = {};
  }

  $lz$class_TypeService.Type = new $lz$class_TypeService();

  /**
   * Converts a string representation of a value to a Javascript
   * representation using the presentation type's accept method
   *
   * @param type:String the type name
   * @param value:String the string representation of the desired
   * value
   * @param node:lz.node the node context
   * @param attribute:String the attribute context
   * @return Any: the string parsed as the type
   *
   * @devnote NOTE [2010-09-02 ptw] The context is important for types
   * that allow relative values, e.g., percentages or ems, or css
   * inherit values.
   *
   * @devnote NOTE [2010-09-02 ptw] `value` is intentionally un-typed,
   * because we don't want any automagic coercion (for backwards
   * compatibility).
   */
  function acceptTypeValue(type:String, value, node:LzNode, attribute:String):* {
    var presentationtype = type ? this.PresentationTypes[type] : null;
    // don't coerce null (or undefined) values
    if (value != null) {
      if (presentationtype != null) {
        return presentationtype.accept(value, node, attribute);
      } else if ($debug) {
        Debug.warn("No <type> named %w", type);
      }
    }
    return value;
  }

  /**
   * Converts a Javascript representation of a value to a string
   * representation using the presentation type's present method
   *
   * @param type:String the attribute type
   * @param value:* the Javascript representation of the value
   * @param node:lz.node the node context
   * @param attribute:String the attribute context
   * @return value:String
   *
   * @devnote NOTE [2010-09-02 ptw] `value` is intentionally un-typed,
   * because we don't want any automagic coercion (for backwards
   * compatibility).
   */
  function presentTypeValue(type:String, value, node:LzNode, attribute:String):String {
    var presentationtype = this.PresentationTypes[type];
    if (presentationtype != null) {
      return presentationtype.present(value, node, attribute);
    } else if ($debug) {
      Debug.warn("No <type> named %w", type);
    }
    return value;
  }

  /**
   * Add a new presentation type
   *
   * @access private
   */
  function addType(type:String, presentationType:$lz$class_PresentationType):void {
    if ($debug) {
      if (this.PresentationTypes[type]) {
        Debug.error("Redefining %s from %w to %w", type, this.PresentationTypes[type], presentationType);
      }
    }
    this.PresentationTypes[type] = presentationType;
  }

  /**
   * Add a presentation type alias
   *
   * @access private
   */
  function addTypeAlias(alias:String, type:String):void {
    var aliasType = this.PresentationTypes[type];
    if (! aliasType) {
      if ($debug) {
        Debug.error("No <type> named %w", type);
      }
      return;
    }
    if ($debug) {
      if (this.PresentationTypes[alias]) {
        Debug.error("Redefining %s from %w to %w", alias, this.PresentationTypes[alias], this.PresentationTypes[alias]);
      }
    }
    this.PresentationTypes[alias] = aliasType;
  }
}
lz.TypeService = $lz$class_TypeService;  // publish

/**
 * lz.Type is a shortcut for <link linkend="$lz$class_TypeService.Type">lz.TypeService.Type</link>
 * @type $lz$class_TypeService
 */
lz.Type = lz.TypeService.Type;

/**
 * A presentation type is a specification of how to map a Javascript type to
 * and from a String representation.
 *
 * If an inherited class does not implement present(),
 * PresentationType/present() will be used.
 *
 * @access private
 */
class $lz$class_PresentationType {
  static const nullValue = null;
  var _dbg_typename = 'type';
  var _dbg_name = function () {
    return this.constructor.lzxtype;
  }
  function accept(value, node:LzNode, attribute:String) {
    if ($debug) {
      Debug.error("%w.accept must be defined", this);
    }
  }
  function present(value, node:LzNode, attribute:String) {
    return String(value);
  }
};

/**
 * String presentation type
 *
 * @access private
 */
class $lz$class_StringPresentationType extends $lz$class_PresentationType {
  static const lzxtype = 'string';
  static const nullValue = "";
  override function accept(value, node:LzNode, attribute:String) {
    return String(value);
  }
}

lz.Type.addType('string', new $lz$class_StringPresentationType());

lz.Type.addTypeAlias('html', 'string');


/**
 * text presentation type
 *
 * `accept` will escape the 5 XML entities, `present` will unescape them
 *
 * @devnote NOTE [2010-07-20 ptw] To ensure markup is not interpreted,
 * you really only have to escape the two syntactical markers &lt; and
 * &amp;.
 *
 * @access private
 */
class $lz$class_TextPresentationType extends $lz$class_PresentationType {
  static const lzxtype = 'text';
  static const nullValue = "";
  /** The five XML entities
   * (See http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML)
   * @access private */
  static const xmlEscapes:Object = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&apos;'};

  override function accept(value, node:LzNode, attribute:String) {
    const escChars:Object = $lz$class_TextPresentationType.xmlEscapes;
    var result:String = "";
    for (var i:int = 0, l:int = value.length; i < l; i++) {
      var c:String = value.charAt(i);
      result += (escChars[c] || c);
    }
    return result;
  }

  override function present(value, node:LzNode, attribute:String) {
    var result:String = "";
    for (var i:int = 0, l:int = value.length; i < l; i++) {
      var c:String = value.charAt(i);
      if (c == '&') {
        var e:int = value.indexOf(';', i);
        if (e > i) {
          var p:String = value.substring(i, e);
          switch (p) {
            case 'amp': break;
            case 'lt': c = '<'; break;
            case 'gt': c = '>'; break;
            case 'quot': c = '"'; break;
            case 'apos': c = "'"; break;
            default: c = '&' + p + ';';
          }
          // Tip o' th pin to andre:  loop step will increment to e+1
          i = e;
        }
      }
      result += c;
    }
    return result;
  }
}
// NOTE: [2010-06-16 ptw] (LPP-9027) For the time being, 'html'
// and 'text' are treated as synonyms, and the runtime 'text'
// presentation type is _not_ used.
lz.Type.addTypeAlias('text', 'string');


/**
 * Boolean presentation type
 *
 * @access private
 */
class $lz$class_BooleanPresentationType extends $lz$class_PresentationType {
  static const nullValue = false;
  static const lzxtype = 'boolean';
  override function accept(value, node:LzNode, attribute:String) {
    // NOTE: [2009-01-13 ptw] Boolean("false") would not do what we
    // expect (a non-empty string is considered true).
    switch (value.toLowerCase()) {
      case "": case "0": case "false":
        return false;
      default:
        return true;
    }
  }
}

lz.Type.addType('boolean', new $lz$class_BooleanPresentationType());
lz.Type.addTypeAlias('inheritableBoolean', 'boolean');


/**
 * Number presentation type
 *
 * @access private
 */
class $lz$class_NumberPresentationType extends $lz$class_PresentationType {
  static const nullValue = 0;
  static const lzxtype='number';
  override function accept(value, node:LzNode, attribute:String) {
    // NOTE [2009-03-02 ptw] Only required for swf8 whose Number
    // does not understand Infinity
    if ($swf8) {
      switch (value) {
        case "Infinity": return Infinity;
        case "-Infinity": return (- Infinity);
      }
    }
    return Number(value);
  }
}

lz.Type.addType('number', new $lz$class_NumberPresentationType());
lz.Type.addTypeAlias('numberExpression', 'number');

/**
 * Color presentation type
 *
 * @access private
 */
class $lz$class_ColorPresentationType extends $lz$class_PresentationType {
  static const nullValue = 0;
  static const lzxtype = 'color';
  override function accept(value, node:LzNode, attribute:String) {
    // handle 'transparent' semaphore from compiler (for canvas)
    if (value == -1) {
        return null;
    }
    return LzColorUtils.hextoint(value);
  }
  override function present(value, node:LzNode, attribute:String) {
    // look up color names
    var ctab = lz.colors;
    for (var name in ctab) {
      if (ctab[name] === value) {
        return name;
      }
    }
    return LzColorUtils.inttohex(value);
  }
}

lz.Type.addType('color', new $lz$class_ColorPresentationType());


/**
 * Expression presentation type
 *
 * Attempts to heuristicate a typed value.  If you want something more
 * accurate, specify a target type, don't rely on this!
 *
 * NOTE: [2009-01-14 ptw] This could should be expanded to use JSON,
 * and so handle Date, Array, and Object (or perhaps a introduce
 * JSONPresentationType)
 *
 * @access private
 */
class $lz$class_ExpressionPresentationType extends $lz$class_PresentationType {
  static const nullValue = null;
  static const lzxtype = 'expression';
  override function accept(value, node:LzNode, attribute:String) {
    switch (value) {
      case "undefined": return void 0;
      case "null": return null;
      case "false": return false;
      case "true": return true;
      case "NaN": return 0/0;
      // NOTE [2009-03-02 ptw] Only required for swf8 whose Number
      // does not understand Infinity
      case "Infinity": return Infinity;
      case "-Infinity": return (- Infinity);
      case "":
        // Should this return the empty string, or null?  The empty
        // string is more JSON-like, null is what Adam proposed in
        // 'Laszlo XML DOM Data Type Strictness - RFC'
        return "";
    }
    // Adam's RFC calls for us to heuristicate color values, but JSON
    // would simply serialize them as numbers.  If you want to parse
    // color names, you should use the color type.
    if (! isNaN(value)) { return Number(value); }
    return String(value);
  }
  // Presentation is just the default string conversion.  JSON would
  // be better because it would preserve the type (distinguish between
  // literals and strings, e.g., `null` vs. `"null"`)
}

lz.Type.addType('expression', new $lz$class_ExpressionPresentationType());


/**
 * Size presentation type
 *
 * @access private
 */
class $lz$class_SizePresentationType extends $lz$class_PresentationType {
  static const nullValue = null;
  static const lzxtype = 'size';
  override function accept(value, node:LzNode, attribute:String) {
    // sizeExpression can be null
    if (value == "null") { return null; }
    // TODO: handle percentage values?
    return Number(value);
  }
}

lz.Type.addType('size', new $lz$class_SizePresentationType());


/**
 * CSS declaration presentation type
 *
 * A CSS declaration is a string in the format "property: value,
 * property: value, ..."  It is represented internally by an Object
 * (acting as a Map).
 *
 * @access private
 *
 * @devnote: NOTE [2010-08-30 ptw] We intentionally leave the values
 * as strings because we expect them to be accept/present-ed by the
 * corresponding attribute's type.
 */
class $lz$class_CSSDeclarationPresentationType extends $lz$class_PresentationType {
  static const nullValue = {};
  static const lzxtype = 'css';
  const PropRE = new RegExp('^\\s*(\\S*)\\s*:\\s*(\\S*)\\s*$');
  const HyphenRE = new RegExp('-(\\w)', 'g');
  const CapitalRE = new RegExp('[:upper:]', 'g');
  override function accept(value, node:LzNode, attribute:String) {
    var props = value.split(',');
    var result = {};
    for (var i = 0, len = props.length; i < len; i++) {
      var prop = props[i];
      var parts = prop.match(this.PropRE);
      if (parts.length = 3) {
        var attr = parts[1].replace(this.HyphenRE, function (m, p) { return p[1].toUpperCase(); });
        result[attr] = parts[2];
      }
    }
    return result;
  }
  override function present(value, node:LzNode, attribute:String) {
    var props = [];
    for (var attr in value) {
      var prop = attr.replace(this.CapitalRE, function (m, p) { return '-' + p[1].toLowerCase(); });
      props.push(prop + ': ' + value[attr]);
    }
    return props.join(', ');
  }
}

lz.Type.addType('css', new $lz$class_CSSDeclarationPresentationType());


// TODO?: add token: TokenPresentationType,
// script: ScriptPresentationType




