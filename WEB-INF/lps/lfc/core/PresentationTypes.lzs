/**
 * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @access public
 * @topic LZX
 */

/**
 * A presentation type is a specification of how to map a Javascript type to
 * and from a String representation.
 *
 * If an inherited class does not implement present(),
 * PresentationType.present() will be used.
 *
 * @access private
 */
class PresentationType {
  static function accept(value) {
    return value;
  }
  static function present(value) {
    return String(value);
  }
};

/**
 * Default presentation type
 *
 * If no type is specified, we just pass the value straight through,
 * for backward compatibility.
 *
 * NOTE [2009-01-15 ptw] This is never what you want, it exists only
 * for backwards compatibility.  After 4.2, make this issue a
 * deprecation warning if it is invoked.
 *
 * @access private
 */
class DefaultPresentationType extends PresentationType {
  static var accept = PresentationType.accept;
  static function present(value) {
    return value;
  }
}


/**
 * String presentation type
 *
 * @access private
 */
class StringPresentationType extends PresentationType {
  static function accept(value) {
    return String(value);
  }
  static var present = PresentationType.present;
}

/**
 * Boolean presentation type
 *
 * @access private
 */
class BooleanPresentationType extends PresentationType {
  static function accept(value) {
    // NOTE: [2009-01-13 ptw] Boolean("false") would not do what we
    // expect (a non-empty string is considered true).
    switch (value.toLowerCase()) {
      case "": case "0": case "false":
        return false;
      default:
        return true;
    }
  }
  static var present = PresentationType.present;
}

/**
 * Number presentation type
 *
 * @access private
 */
class NumberPresentationType extends PresentationType {
  static function accept(value) {
    // NOTE [2009-03-02 ptw] Only required for swf8 whose Number
    // does not understand Infinity
    if ($swf8) {
      switch (value) {
        case "Infinity": return Infinity;
        case "-Infinity": return (- Infinity);
      }
    }
    return Number(value);
  }
  static var present = PresentationType.present;
}

/**
 * Color presentation type
 *
 * @access private
 */
class ColorPresentationType extends PresentationType {
  static function accept(value) {
    // handle 'transparent' semaphore from compiler (for canvas)
    if (value == -1) {
        return null;
    }
    return LzColorUtils.hextoint(value);
  }
  static function present(value) {
    // look up color names
    var ctab = lz.colors;
    for (var name in ctab) {
      if (ctab[name] === value) {
        return name;
      }
    }

    return LzColorUtils.inttohex(value);
  }
}

/**
 * Expression presentation type
 *
 * Attempts to heuristicate a typed value.  If you want something more
 * accurate, specify a target type, don't rely on this!
 *
 * NOTE: [2009-01-14 ptw] This could should be expanded to use JSON,
 * and so handle Date, Array, and Object (or perhaps a introduce
 * JSONPresentationType)
 *
 * @access private
 */
class ExpressionPresentationType extends PresentationType {
  static function accept(value) {
    switch (value) {
      case "undefined": return void 0;
      case "null": return null;
      case "false": return false;
      case "true": return true;
      case "NaN": return 0/0;
      // NOTE [2009-03-02 ptw] Only required for swf8 whose Number
      // does not understand Infinity
      case "Infinity": return Infinity;
      case "-Infinity": return (- Infinity);
      case "":
        // Should this return the empty string, or null?  The empty
        // string is more JSON-like, null is what Adam proposed in
        // 'Laszlo XML DOM Data Type Strictness - RFC'
        return "";
    }
    // Adam's RFC calls for us to heuristicate color values, but JSON
    // would simply serialize them as numbers.  If you want to parse
    // color names, you should use the color type.
    if (! isNaN(value)) { return Number(value); }
    return String(value);
  }
  // Presentation is just the default string conversion.  JSON would
  // be better because it would preserve the type (distinguish between
  // literals and strings, e.g., `null` vs. `"null"`)
  static var present = PresentationType.present;
}

/**
 * Size presentation type
 *
 * @access private
 */
class SizePresentationType extends PresentationType {
  static function accept(value) {
    // sizeExpression can be null
    if (value == "null") { return null; }
    // TODO: handle percentage values?
    return Number(value);
  }
  static var present = PresentationType.present;
}
