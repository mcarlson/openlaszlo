/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
 * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights
 *            Reserved.  Use is subject to license terms.
 *
 * @access public
 * @topic LZX
 * @subtopic Debugging
 */


/**
 * The Debug Console interface
 *
 * This abstract class defines the protocol between the debugger and the console
 *
 * @access private
 */
class LzDebugConsole {

  // Messages that will be displayed once a real console is
  // instantiated.  Messages are either LzMessage's that can be output
  // using .toString() or .toHTML(), depending on the destination (log
  // file or console, respectively), or text (that is already
  // formatted HTML, sent via addHTMLText).
  var saved_msgs:Array;

  /**
   * The lz.view on the canvas that represents the debugger console
   * (if any, otherwise null)
   *
   * @access private
   */
  function canvasConsoleWindow () {
    return null;
  }

  /**
   * Adds literal output to the console, ensuring HTML markup is
   * properly escaped.
   *
   * @param msg: Will be coerced to a String if it is not
   *
   * @access private
   */
  /** @access private */
  function addText (msg) {
    var str;
    try {
      if (msg && msg['toHTML'] is Function) {
        str = msg.toHTML();
      } else {
        str = String(msg)['toHTML']();
      }
    } catch (e) {
      str = '' + msg;
    };
    if ($dhtml) {
      // `ant lztest` depends on rhino output
      if (navigator.platform == 'rhino') {
        try {
          print(str);
          return;
        } catch (e) {};
      }
    }
    this.addHTMLText(str);
  };

  /**
   * Clears the console
   * @access private
   */
  function clear () {};

  /**
   * Ensures the console output is visible
   * @access private
   */
  function ensureVisible () {};

  /**
   * Adds output to the console, potentially marking it with a font or
   * color to indicate that it is input, not output.
   *
   * @param String str: what to echo
   * @param Boolean newLine: whether to echo a trailing newline,
   * default true
   *
   * @access private
   */
  function echo (str, newLine:Boolean=true) {};

  /**
   * Add HTML output to the console
   *
   * @param msg: Will be coerced to a String if it is not.  HTML
   * markup will be interpreted as markup, as opposed to being
   * escaped.
   */
  function addHTMLText (msg) {};

  /**
   * Make a 'presentation' of an object
   *
   * Inform the debugger UI of the connection between a representation
   * and and object ID.  The UI returns a (possibly updated/encoded)
   * representation that, when passed to `addHTMLText` will allow the
   * UI to recover the object by ID from the debugger (say for
   * inspection, or evaluation).
   *
   * @param String rep: The representation of the object
   * @param Number id: the id of the object
   * @param Object attrs: Additional attributes of the presentation,
   * e.g., 'type' or 'color'
   * @return String: the encoded representation (most likely as an
   * HTML link).
   *
   * @access private
   */
  function makeObjectLink (rep:String, id, attrs=null):String { return undefined; };

  /**
   * Simple "path" expressions will only have symbols, `.`, or `[numbers]`
   * @access private
   */
  const SimpleExprPattern = new RegExp('^\\s*([$_A-Za-z][$\\w]*)((\\s*\\.\\s*[$_A-Za-z][$\\w]*)|(\\s*\\[\\s*\\d+\\s*\\]))*\\s*$');
  /**
   * Now pull out just the element 'selectors', so you can walk down them
   * @access private
   */
  const ElementPattern = new RegExp('([$_A-Za-z][$\\w]*)|(\\d+)', 'g');

  /** @access private */
  function isSimpleExpr(expr:String):Boolean {
    return (expr.match(this.SimpleExprPattern));
  }

  /** @access private */
  function evalSimpleExpr(expr:String) {
    #pragma "throwsError=true"
    var parts = expr.match(this.ElementPattern);
    var val = globalValue(parts[0]) || Debug.environment[parts[0]];
    for (var i = 1, l = parts.length; i < l; i++) {
      val = val[parts[i]];
    }
    return val;
  }

  /**
   * Evaluate an expression and call Debug.displayResult on the result
   * (or Debug.error if the evaluation causes an error).
   *
   * The bootstrap version assumes the platform does not have an
   * evaluator.  It evaluates simple member/index paths 'by hand',
   * otherwise it punts.  Platform-specific bridges override this
   * method to use either the platform evaluator, or, if tethered,
   * the remote server to compile/load/eval the expression.
   *
   * @access private
   */
  function doEval (expr:String) {
    if (this.isSimpleExpr(expr)) {
      var simple = true;
      try {
        var val = this.evalSimpleExpr(expr);
        // If we got no value, maybe the expression was not simple
        if (val === void 0) {
          simple = false;
        }
      } catch (e) {
        // If we get an error, surely the expression must not be simple
        simple = false;
      }
    }
    if (simple) {
      Debug.displayResult(val);
    } else {
      Debug.warn("Unable to evaluate %s", expr);
    } 
  }
};


/**
 * Bootstrap debug UI
 *
 * This is the interface of the core debugger to whatever console is
 * available in the runtime.  At bootstrap, we provide a primitive to
 * the DHTML debugger display.  Other runtimes will replace the
 * bootstrap with a more appropriate one.
 *
 * @access private
 */
class LzBootstrapDebugConsole extends LzDebugConsole {

  function LzBootstrapDebugConsole () {
    this.saved_msgs = new Array;
  }

  /**
   * Doc'd on interface
   * Bootstrap version
   * @access private
   */
  override function echo (str, newLine:Boolean=true) {
    this.addHTMLText('<i>' + str + '</i>' + (newLine?'\n':''));
  }

  /**
   * Doc'd on interface
   * Bootstrap version
   * @access private
   */
  override function addHTMLText (msg) {
    this.saved_msgs.push(msg);
  };

  /**
   * Doc'd on interface
   * Bootstrap version
   * @access private
   */
  override function makeObjectLink (rep:String, id, attrs=null):String {
    // TODO: [2008-08-19 ptw] Seems like a reasonable thing to encode
    // the ID here as a hint, but maybe that is not appropriate for
    // the most primitive console?
    if (id != null) {
      return '<a title="#' + id + '">' + rep + '</a>';
    }
    return rep;
  }

  /**
   * Doc'd on interface
   * Bootstrap version
   * @access private
   */
  override function doEval (expr:String) {
    // Bootstrap implementation
    try {
      super.doEval(expr);
    } catch (e) {
      Debug.error(e);
    }
  }
};

/**
 * Bootstrap debug Logger
 *
 * This is the interface of the core debugger to whatever logger is
 * available in the runtime.  At bootstrap, we provide a primitive
 * logger to the server (for SWF) or to the browser console if it
 * exists (for DHTML).  Other runtimes may replace the
 * bootstrap with a more appropriate one.
 *
 * @access private
 */
class LzBootstrapDebugLogger {
  if ($as2) {
    var url:String;
  }

if ($as3) {
  /** @access private */
  function log (msg) { trace (msg); }
} else {
  /**
   * Doc'd on real definition
   * Bootstrap version
   * @access private
   *
   * @devnote This implementation of log does not depend on any of
   * the LFC working and hence can be used from startup on.
   */
  function log (msg) {
#pragma "warnUndefinedReferences=false"
    if ($as2) {
      // send URL to LzServlet: lzt=eval lz_log=true lz_msg=$MSG
      var url = this['url'];
      if (! url) {
        url = _root._url; // LzBrowser.getLoadURL();
        var q = url.indexOf("?");
        if (q >= 0) {
          url = url.substring(0, q);
        }
        this.url = url;
      }
      url += "?lz_log=true&lzt=eval&lz_load=false&lz_script="+encodeURIComponent(String(msg));
      // Flash-specific call -- 5 is magic?!
      loadVariables(url, 5);
    } else {
      // Log to runtime console, if it exists
      if (('console' in global) && (typeof console.log == 'function')) {
        var fn = 'log';
        try {
          if (msg instanceof LzError) {
            fn = 'error';
          } else if (msg instanceof LzWarning) {
            fn = 'warn';
          } else if (msg instanceof LzInfo) {
            fn = 'info';
          } else if (msg instanceof LzDebug) {
            fn = 'debug';
          }
          if (typeof console[fn] != 'function') {
            fn = 'log';
          }
          if ((console[fn].length == 0) && ((msg instanceof LzMessage) || (msg instanceof LzSourceMessage))) {
            // Firebug console takes multiple arguments and knows how to
            // present arguments that are objects properly
            console[fn].apply(console, msg.toArray());
            return;
          } 
        } catch (e) {}
        // Other consoles are not so smart...
        console[fn](msg.toString());
      }
    }
  }
};

};

/**
 * Bootstrap debug service
 * @access private
 */
dynamic class LzBootstrapDebugService {
  /**
   * Configurable names for debug annotations.  See
   * org.openlaszlo.sc.Function.  NOTE:  These values are duplicated
   * in LzRuntime because Class.lzs needs them before this is loaded.
   */
  public const FUNCTION_NAME = 'displayName';
  public const FUNCTION_FILENAME = '_dbg_filename';
  public const FUNCTION_LINENO = '_dbg_lineno';

  /** Backtrace stack
   * @access private
   */
  var backtraceStack:Array = [];
  /** Backtrace for uncaught errors
   * @access private
   */
  var uncaughtBacktraceStack:Array = null;

  /** @access private */
  var log_all_writes:Boolean = false;
  /** @access private */
  var logger:LzBootstrapDebugLogger;
  /** @access private */
  var console:LzDebugConsole;

  /** @access private */
  var window:*;

  /** Any amendments to the environment for debug evaluator, initially
   * just _, __, and ___.  Could put things like write, format, inspect.
   * @access private
   */
  var environment = {};

  /** @access private */
  function LzBootstrapDebugService (logger:LzBootstrapDebugLogger=null,
                                    console:LzDebugConsole=null) {
    if (logger == null) {
      logger = new LzBootstrapDebugLogger();
    }

    if (console == null) {
      console = new LzBootstrapDebugConsole();
    }
    // Copy these from the initial Debug object
    var copy = {backtraceStack: true, uncaughtBacktraceStack: true};
    for (var k in copy) {
      this[k] = Debug[k];
    }

    // Automatically enable logging if there is a javascript console
    // log function
    if ($js1) {
      this.log_all_writes = (global['console']) && (typeof global.console['log'] == 'function');
    }

    this.logger = logger;
    this.console = console;
  }

  /**
   * @access private
   */
  function ensureVisible () { }

  /**
   * Log a message to the runtime logger
   *
   * @param String message:  The message to send to the logger
   *
   * @access private
   */
  function log (...args) {
    return this.logger.log.apply(this.logger, args);
  }

  /**
   * Trampoline to runtime console
   * @access private
   */
  function makeObjectLink(...args) {
    return this.console.makeObjectLink.apply(this.console, args);
  }

  /**
   * Callback for console doEval
   * @access private
   */
  function displayResult (result=(void 0)):void {
    if (result !== (void 0)) {
      this.__write(result);
    }
  };

  /**
   * Doc'd on real definition
   * Bootstrap version
   * @access private
   */
  function __write (msg) {
    if (this.log_all_writes) {
      this.logger.log(msg);
    }
    this.console.addText(msg);
  };

  /**
   * Doc'd on real definition
   * Bootstrap version
   * @access private
   */
  function debug (...args) {
    this.__write('DEBUG: ' + args.join(' '));
  };

  /**
   * Doc'd on real definition
   * Bootstrap version
   * @access private
   */
  function info (...args) {
    this.__write('INFO: ' + args.join(' '));
  };

  /**
   * Doc'd on real definition
   * Bootstrap version
   * @access private
   */
  function warn (...args) {
    this.__write('WARNING: ' + args.join(' '));
  };

  /**
   * Doc'd on real definition
   * Bootstrap version
   * @access private
   */
  function error (...args) {
    this.__write('ERROR: ' + args.join(' '));
  };

  /**
   * Deprecation message.
   * @param lznode obj: The object the deprecated method is being called
   * on (usually `this`).
   * @param Function method: The method being called (usually
   * arguments.callee)
   * @param Function method: The replacement method
   * @access private
   */
  function deprecated (obj, method, replacement) {
    Debug.info("%w.%s is deprecated.  Use %w.%s instead", obj, method, obj, replacement);
  }

  /**
   * Read-only message.
   * @param lznode obj: The object the read-only attribute is on.
   * @param String attribute: The read-only attribute name.
   * @param * value: The value attempting to be set.
   *
   * @devnote Only a warning since setting a read-only value is ignored
   *
   * @access private
   */
    function readOnly (obj, attribute, value) {
      Debug.warn("%w.%s is read-only.  %w ignored", obj, attribute, value);
  }

  /**
   * Evaluate a closure in context, reporting errors
   *
   * @param String fileName: The source file
   * @param Number lineNumber: The source line
   * @param Function closure: The closure to evaluate
   * @param Object context: The context to evaluate the closure in
   *
   * @access private
   */
  function evalCarefully (fileName, lineNumber, closure, context) {
#pragma "warnUndefinedReferences=false"
    try {
      return closure.call(context);
    } catch(e) {
      $reportSourceWarning(fileName, lineNumber, e);
    }
  };

  /**
   * Evaluate a closure in context, ignoring errors
   *
   * @param Function closure: the closure to evaluate
   * @param Object context: the context to evaluate the closure in
   * @param * errval: the value to return if there is an error
   *
   * @access private
   */
  function ignoringErrors (closure, context, errval) {
#pragma "warnUndefinedReferences=false"
    try {
      return closure.call(context);
    } catch(e) {
      return errval;
    }
  };

  /** @access private */
  LzBootstrapDebugService.prototype._dbg_name = function () {
    if (this === Debug) { return '#Debug'; } else return null;
  }
};

if ($as3) {
  // In AS3, Debug is constructed once at load time in debugger/platform/swf9/LzDebug.as
} else {
/***
 * @devnote As soon as we have the LzBootstrapDebugService, we install it.
 * This will get overridden by the full debugger when it loads
 *
 * @access private
 */
var Debug = new LzBootstrapDebugService();

/**
 * @access private
 * To catch swf 'trace()' calls
 */
function trace (...args) { Debug.info.apply(Debug, args); }

}

/**
 * Compiler support for debugger warnings.  These presently pollute
 * the global environment, because you need a toe-hold somewhere.
 * N.B. we need to declare the functions as function expressions, 
 * because that's the only way right now to get the script compiler to
 * put them at the top level in the as3 intermediate .as files, outside
 * of the LFCApplication.
 */

/** Bootstrap version of base warning function
 * @access private
 */
var $reportSourceWarning = function $reportSourceWarning (filename, lineNumber, msg, fatal) {
#pragma "warnUndefinedReferences=false"
  var warning = filename + '@' + lineNumber + ': ' + msg + '\n';
  Debug[fatal?'error':'warn'](warning);
};

// Each of the warnings that the compile may call maintains a flag to
// avoid recursing (e.g., when the debugger has a bug).

// TODO: [2003-01-08 ptw] Consider a fall-back mechanism for getting
// debugger bugs reported.

/** @access private */
var $reportedError = null;

/** @access private */
var $reportException = function $reportException (fileName, lineNumber, e) {
// prevent compiler from reporting global assignment warning for $reportedError
#pragma "warnGlobalAssignments=false"
  if (e !== $reportedError) {
    $reportedError = e;
    $reportSourceWarning(fileName, lineNumber, e, true);
  }
}

/** @access private */
var $reportUndefinedObjectProperty = function (filename, lineNumber, propertyName) {
#pragma "warnUndefinedReferences=false"
  if (! arguments.callee._dbg_recursive_call) {
    arguments.callee._dbg_recursive_call = true;
    $reportSourceWarning(filename, lineNumber, "undefined object does not have a property '" + propertyName + "'", true);
    arguments.callee._dbg_recursive_call = false;
  }
};
$reportUndefinedObjectProperty._dbg_recursive_call = false;

/** @access private */
var $reportUndefinedProperty = function (filename, lineNumber, propertyName) {
#pragma "warnUndefinedReferences=false"
  if (! arguments.callee._dbg_recursive_call) {
    arguments.callee._dbg_recursive_call = true;
    $reportSourceWarning(filename, lineNumber, "reference to undefined property '" + propertyName + "'", false);
    arguments.callee._dbg_recursive_call = false;
  }
};
$reportUndefinedProperty._dbg_recursive_call = false;

/** @access private */
var $reportUndefinedVariable = function (filename, lineNumber, variableName) {
#pragma "warnUndefinedReferences=false"
  if (! arguments.callee._dbg_recursive_call) {
    arguments.callee._dbg_recursive_call = true;
    $reportSourceWarning(filename, lineNumber, "reference to undefined variable '" + variableName + "'", true);
    arguments.callee._dbg_recursive_call = false;
  }
};
$reportUndefinedVariable._dbg_recursive_call = false;

/** @access private */
var $reportNotFunction = function (filename, lineNumber, name, value) {
#pragma "warnUndefinedReferences=false"
  if (! arguments.callee._dbg_recursive_call) {
    arguments.callee._dbg_recursive_call = true;
    var msg = "call to non-function";
    if (typeof name == "string")
      msg += " '" + name + "'";
    msg += " (type '" + typeof value + "')";
    if (typeof value == "undefined") {
      msg = "call to undefined function";
      if (typeof name == "string")
        msg += " '" + name + "'";
    }
    $reportSourceWarning(filename, lineNumber, msg, true)
      arguments.callee._dbg_recursive_call = false;
  }
};
$reportNotFunction._dbg_recursive_call = false;

/** @access private */
var $reportUndefinedMethod = function (filename, lineNumber, name, value) {
#pragma "warnUndefinedReferences=false"
  if (! arguments.callee._dbg_recursive_call) {
    {
      arguments.callee._dbg_recursive_call = true;

      var msg = "call to non-method";
      if (typeof name == "string")
        msg += " '" + name + "'";
      msg += " (type '" + typeof value + "')";
      if (typeof value == "undefined") {
        msg = "call to undefined method";
        if (typeof name == "string")
          msg += " '" + name + "'";
      }
      $reportSourceWarning(filename, lineNumber, msg, true);
    }
    {
      arguments.callee._dbg_recursive_call = false;
    }
  }
};
$reportUndefinedMethod._dbg_recursive_call = false;
