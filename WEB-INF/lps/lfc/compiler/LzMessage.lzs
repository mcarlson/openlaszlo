/**
 * support for debug messages
 *
 * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 */


/**
 * This will be replaced by a more complete definition if the debugger
 * is included
 *
 * @access private
 */
class LzBootstrapMessage {
  var message = '';
  var length = 0;

  function LzBootstrapMessage (message = null) {
    if (message != null) {
      this.appendInternal('' + message, message);
    }
  }

 function appendInternal (str:String, obj = null) {
    this.message += str;
    this.length = this.message.length;
  }

  function append (...str) {
    var len = str.length;
    for (var i = 0; i < len; i++) {
      this.appendInternal(String(str[i]));
    }
  }

  // Implements String interface (this is the only one we need early
  // on, see LzDebugMessage)
  /** @access private */
  function indexOf (key) { return this.message.indexOf(key); }

  // TODO: [2008-05-08 ptw] (LPP-5934) When toString is declared
  // public, remove the swf9 special-case
  if ($swf9) {
    prototype.toString = function () { return this.message; }
  } else {
    function toString () {
      return this.message;
    }
  }

  function toHTML () {
    // TODO: [2008-05-08 ptw] (LPP-5934) When toString is declared
    // public, remove the swf9 special-case
      return this['toString']().toHTML();
  }

  /**
   * @access private
   * XML escape
   */
  static function xmlEscape (ts) {
    if (ts && ((typeof(ts) == "string") || (ts instanceof String))) {
      var outstr = "";
      var tlen = ts.length;
      for (var i = 0; i < tlen; i++) {
        var c = ts.charAt(i);
        if (c == '<') {
          outstr += "&lt;";
        } else if (c == '>') {
          outstr += "&gt;";
        } else if (c == '&') {
          outstr += "&amp;";
        } else {
          outstr += c;
        }
      }
      return outstr;
    } else {
      return ts;
    }
  };
};

if ($swf9) {
    if ($debug) {
        // we don't need to do this bootstrapping rebinding of LzMessage in swf9, LzMessage is declared in
        // debugger/LzMessage.lzs
    } else {
        class LzMessage extends LzBootstrapMessage {
            function LzMessage (message:String=null) {
                super(message);
            }

            /**
             * Propagate this
             * @access private
             */
            static var xmlEscape = LzBootstrapMessage.xmlEscape;
        }
    }
} else {
  var LzMessage = LzBootstrapMessage;
}


/**
 * Convert a String to HTML for display in the Debugger by escaping
 * the HTML characters in the String.
 * @access private
 */
String.prototype.toHTML = function () {
  return LzMessage.xmlEscape(this);
};

