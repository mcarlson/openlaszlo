/**
 * support for debug messages
 *
 * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 */


/**
 * This will be replaced by a more functional definition if the debugger
 * is included (one that maintains a correspondence between objects
 * and their representation in the message)
 *
 * @access private
 */
class LzBootstrapMessage {
  var message = '';
  public var length = 0;

  /** @access private */
  function LzBootstrapMessage (message = null) {
    if (message != null) {
      this.appendInternal('' + message, message);
    }
  }

  /** @access private */
  function appendInternal (str:String, obj = null) {
    this.message += str;
    this.length = this.message.length;
  }

  /** @access private */
  function append (...str) {
    var len = str.length;
    for (var i = 0; i < len; i++) {
      this.appendInternal(String(str[i]));
    }
  }

  /// These methods implement the String interface (since we are not
  /// allowed to subclass String, apparently

  // TODO: [2006-04-17 ptw] When javascript has getters and setters:
  // function get length () { return this.message.length; };
  // function set length (length) { this.message.length = length;
  // return this.length; };
  // For now, we just have to be careful to kepp the length field
  // accurate


  /** @access private */
  public function charAt (index) { return this.message.charAt(index); }
  /** @access private */
  public function charCodeAt (index) { return this.message.charCodeAt(index); }
  /** @access private */
  public function indexOf (key) { return this.message.indexOf(key); }
  /** @access private */
  public function lastIndexOf (key) { return this.message.lastIndexOf(key); }
  /** @access private */
  public function toLowerCase ():LzMessage {
    return new LzMessage(this.message.toLowerCase());
  };
  /** @access private */
  public function toUpperCase ():LzMessage {
    return new LzMessage(this.message.toUpperCase());
  };
  /**
   * @devnote NOTE: [2008-11-24 ptw] You might think we should
   * trampoline to this.message.toString(), but in at least one JS
   * engine, toString may be called before message has been
   * initialized. By the standard String.toString and String.valueOf
   * return the same value.
   *
   * @access private
   */
  public function toString () { return this.message || ''; };
  /**
   *  @devnote NOTE: [2008-11-24 ptw] You might think we should
   * trampoline to this.message.valueOf(), but in at least one JS
   * engine, valueOf may be called before message has been
   * initialized. By the standard String.toString and String.valueOf
   * return the same value.
   *
   * @access private
   */
  public function valueOf () { return this.message || ''; };
  /** @access private */
  public function concat (...args):LzMessage {
    return new LzMessage(this.message.concat.apply(this.message, args));
  }
  /** @access private */
  public function slice (...args):String { return this.message.slice.apply(this.message, args); }
  /** @access private */
  public function split (...args):String { return this.message.split.apply(this.message, args); }
  /** @access private */
  public function substr (...args):String { return this.message.substr.apply(this.message, args); }
  /** @access private */
  public function substring (...args):String { return this.message.substring.apply(this.message, args); }

  /// End of String interface


  // Our extension
  /** @access private */
  function toHTML () {
    // TODO: [2008-05-08 ptw] (LPP-5934) When toString is declared
    // public, remove the swf9 special-case
    return this['toString']().toHTML();
  }

  /**
   * @access private
   */
  static const xmlEscapeChars:Object = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&apos;'};

  /**
   * @access private
   * XML escape
   */ 
  static function xmlEscape (input:*):* {
    if (input && ((typeof(input) == "string") || (input is String))) {
      const escChars:Object = LzBootstrapMessage.xmlEscapeChars;
      var len:int = input.length;
      var output:String = "";
      for (var i:int = 0; i < len; i++) {
        var code:Number = input.charCodeAt(i);
        if ( code < 32 ){
          output += "&#x" + code.toString(16) + ";";
        } else {
          var c:String = input.charAt(i);
          output += (escChars[c] || c);
        }
      }
      return output;
    } else {
      return input;
    }
  };
};

if ($as3) {
    if ($debug) {
        // we don't need to do this bootstrapping rebinding of LzMessage in as3, LzMessage is declared in
        // debugger/LzMessage.lzs
    } else {
        /** @access private */
        class LzMessage extends LzBootstrapMessage {
            function LzMessage (message:String=null) {
                super(message);
            }

            /**
             * Propagate this
             * @access private
             */
            static var xmlEscape = LzBootstrapMessage.xmlEscape;
        }
    }
} else {
  /** @access private */
  var LzMessage = LzBootstrapMessage;
}


/**
 * Convert a String to HTML for display in the Debugger by escaping
 * the HTML characters in the String.
 * @access private
 */
String.prototype.toHTML = function () {
  return LzMessage.xmlEscape(this);
};

if ($as2) {
// make unenumerable in AS2 style
ASSetPropFlags(String.prototype, ["toHTML"], 1, 0);
} else if ($as3) {
// make unenumerable in AS3 style
String.prototype.setPropertyIsEnumerable("toHTML", false);
} else {
// can't make unenumerable in dhtml
}
