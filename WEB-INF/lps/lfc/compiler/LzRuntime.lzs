/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access private
  * @topic LZX
  * @subtopic Runtime
  */

/**
 * Modules
 * TODO [2006-03-12 ptw] if the LFC is shared this needs to be multiplexed
 */
var $modules = {};

/**
 * Define runtime module
 */
if ($as3) {
$modules.runtime = global;
} else {
$modules.runtime = this;
}

if ($as3) {

} else {

/**
 * Define LZ module
 * TODO: [2006-03-21 ptw] Make this an object that inherits from
 * runtime so that we do not pollute the runtime module
 */
$modules.lz = $modules.runtime;

/**
 * Define USER module
 * TODO: [2006-03-21 ptw] Make this an object that inherits from
 * LZ so that we do not pollute the LZ module
 */
$modules.user = $modules.lz;
}
/**
 * Define global
 * TODO [2006-03-12 ptw] if the LFC is shared this needs to be multiplexed
 */
if ($as3) {
  // Shadow table `global`, used to support `globalValue`.  Cf.,
  // compiler.NodeModel.buildIdBinderBody
  // TODO: [2008-10-21 ptw] Use flex.utils.Dictionary if you can
  // figure out the appropriate incantation
  var global = {};
} else {
var global = $modules.user;
if ($debug) {
  // Define a debug object, since backtracing will look for it.  We
  // could add some primitive debug commands here to debug the class
  // infrastructure, if necessary, now that even the base debug
  // service relies on classes.
  var Debug = {
  backtraceStack: [],
  uncaughtBacktraceStack: null
  };
  /** Max depth allowed
   * @access private
   */
  Debug.backtraceStack.maxDepth = 100;
  /**
    * Expose this to the DHTML debugger
    * The application and debugger share their parent.
    */
  window.parent.$modules = $modules;
}
}

if ($as3) {
  if ($debug) {
    /**
     * Class used for as3-only runtime support
     *
     * @access private
     */
    class $lzsc$runtime {
      /**
       * Copied from debug/LzCompiler because I don't know how to make
       * that accessible in swf9
       *
       * @access private
       */
      static var sourceWarningHistory = [];

      /**
       * Copied from debug/LzCompiler because I don't know how to make
       * that accessible in swf9
       *
       * @access private
       */
      static function $reportSourceWarning (filename, lineNumber, msg, fatal) {
        var warning = new (fatal?LzError:LzWarning)(filename, lineNumber, msg);
        var warningString = warning.toString();
        if (sourceWarningHistory[warningString]) {
          return;
        }
        sourceWarningHistory [warningString] = true;

        Debug.freshLine();
        // Logs and adds
        Debug.__write(warning);
      }

      /**
       * Report an exception to the debug window
       *
       * @param String fileName: The source file
       * @param Number lineNumber: The source line
       * @param Object e: exception received
       *
       * @access private
       */
      static function reportException (fileName, lineNumber, e) {
        $reportSourceWarning(fileName, lineNumber, e.name + ": " + e.message, true);
      }
    }
  }
}

if ($as2) {
var encodeURIComponent = escape;
}

/**
 * @access private
 */
var __ES3Globals = {
    Array: Array,
    Boolean: Boolean,
    Date: Date,
    Function: Function,
    Math: Math,
    Number: Number,
    Object: Object,
    RegExp: RegExp,
    String: String,
    Error: Error,
    EvalError: EvalError,
    RangeError: RangeError,
    ReferenceError: ReferenceError,
    SyntaxError: SyntaxError,
    TypeError: TypeError,
    URIError: URIError
};

/*
 * Map string to global value, since swf9 runtime does not support any
 * kind of eval()
 *
 * N.B. we need to declare the function globalValue() as a 'var', 
 * because that's the only way right now to get the script compiler to
 * put it at the top level in the as3 intermediate .as files, outside
 * of the LFCApplication.
 */
var globalValue = function (name:String) {
  // Semi-kludge:  We name our tag classes <tagname>.  Since <> are
  // not valid symbol constituents, there is no confusion here
  if (name.charAt(0) == '<' && name.charAt(name.length-1) == '>') {
    return lz[name.substring(1, name.length-1)];
  }
  return this[name] || global[name] || __ES3Globals[name];
};

