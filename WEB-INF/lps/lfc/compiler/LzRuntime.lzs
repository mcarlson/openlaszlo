/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access private
  * @topic LZX
  * @subtopic Runtime
  */

if ($swf9) {
} else { 
/**
  * DHTML/SWF compatibility
  *
  * @todo 2006-04-07 ptw Remove when _root is eradicated from .lzs
  */
window._root = window;
}
/**
 * Modules
 * TODO [2006-03-12 ptw] if the LFC is shared this needs to be multiplexed
 */
var $modules = {};

/**
 * Define runtime module
 */
if ($swf9) {
$modules.runtime = global;
} else {
$modules.runtime = this;
}

if ($swf9) {

} else {

/**
 * Define LZ module
 * TODO: [2006-03-21 ptw] Make this an object that inherits from
 * runtime so that we do not pollute the runtime module
 */
$modules.lz = $modules.runtime;

/**
 * Define USER module
 * TODO: [2006-03-21 ptw] Make this an object that inherits from
 * LZ so that we do not pollute the LZ module
 */
$modules.user = $modules.lz;
}
/**
 * Define global
 * TODO [2006-03-12 ptw] if the LFC is shared this needs to be multiplexed
 */
if ($swf9) {
} else {
var global = $modules.user;
if ($debug) {
  // Define a debug object, since backtracing will look for it.  We
  // could add some primitive debug commands here to debug the class
  // infrastructure, if necessary, now that even the base debug
  // service relies on classes.
  var Debug = {
  backtraceStack: [],
  uncaughtBacktraceStack: null
  };
  /** Max depth allowed
   * @access private
   */
  Debug.backtraceStack.maxDepth = 100;
  /**
    * Expose this to the DHTML debugger
    * The application and debugger share their parent.
    */
  window.parent.$modules = $modules;
}
}

if ($as2) {
var encodeURIComponent = escape;
}

/*
 * Map string to global value, since swf9 runtime does not support any
 * kind of eval()
 *
 * N.B. we need to declare the function globalValue() as a 'var', 
 * because that's the only way right now to get the script compiler to
 * put it at the top level in the swf9 intermediate .as files, outside
 * of the LFCApplication.
 */

var  globalValue = function (name) {
  // Semi-kludge:  We name our tag classes <tagname>.  Since <> are
  // not valid symbol constituents, there is no confusion here
  if (name.charAt(0) == '<' && name.charAt(name.length-1) == '>') {
    return lz[name.substring(1, name.length-1)];
  }
  // TODO: [2008-09-16 ptw] This does not work for built-in classes in
  // swf9 :(
  return this[name] || global[name];
}
