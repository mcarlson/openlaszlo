/* -*- mode: JavaScript; c-basic-offset: 2; -*- */

/**
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access private
  * @topic LZX
  * @subtopic Runtime
  */

/**
 * Modules
 * TODO [2006-03-12 ptw] if the LFC is shared this needs to be multiplexed
 */
var $modules = {};

/**
 * Define runtime module
 */
if ($as3) {
$modules.runtime = global;
} else {
$modules.runtime = this;
}

if ($as3) {

} else {

/**
 * Define LZ module
 * TODO: [2006-03-21 ptw] Make this an object that inherits from
 * runtime so that we do not pollute the runtime module
 */
$modules.lz = $modules.runtime;

/**
 * Define USER module
 * TODO: [2006-03-21 ptw] Make this an object that inherits from
 * LZ so that we do not pollute the LZ module
 */
$modules.user = $modules.lz;
}
/**
 * Define global
 * TODO [2006-03-12 ptw] if the LFC is shared this needs to be multiplexed
 */
if ($as3) {
  // Shadow table `global`, used to support `globalValue`.  Cf.,
  // compiler.NodeModel.buildIdBinderBody
  // TODO: [2008-10-21 ptw] Use flex.utils.Dictionary if you can
  // figure out the appropriate incantation
  var global = {};
} else {
  var global = $modules.user;
}

if ($as2) {
var encodeURIComponent = escape;
var decodeURIComponent = unescape;
}

/**
 * @access private
 */
var __ES3Globals = {
    Array: Array,
    Boolean: Boolean,
    Date: Date,
    Function: Function,
    Math: Math,
    Number: Number,
    Object: Object,
    RegExp: RegExp,
    String: String,
    Error: Error,
    EvalError: EvalError,
    RangeError: RangeError,
    ReferenceError: ReferenceError,
    SyntaxError: SyntaxError,
    TypeError: TypeError,
    URIError: URIError
};

/*
 * Map string to global value, since swf9 runtime does not support any
 * kind of eval()
 *
 * N.B. we need to declare the function globalValue() as a 'var', 
 * because that's the only way right now to get the script compiler to
 * put it at the top level in the as3 intermediate .as files, outside
 * of the LFCApplication.
 */
var globalValue = function (name:String) {
  if ($as3) {
    #passthrough {
      import flash.utils.getDefinitionByName;
    }#
  }
  // Semi-kludge:  We name our tag classes <tagname>.  Since <> are
  // not valid symbol constituents, there is no confusion here
  if (name.charAt(0) == '<' && name.charAt(name.length-1) == '>') {
    return lz[name.substring(1, name.length-1)];
  } else if (name in this) {
    return this[name];
  } else if (name in global) {
    return global[name];
  } else if (name in __ES3Globals) {
    return __ES3Globals[name];
  } else if ($as3) {
    try {
      return getDefinitionByName(name);
    } catch (e:ReferenceError) {
    }
  }
  return void 0;
};

// Runtime support for `subclassof`
var $lzsc$issubclassof = function (one:Class, other:Class) {
  if ($as3) {
    #passthrough {
      import flash.utils.describeType;
      import flash.utils.getDefinitionByName;
    }#
    if (one === other) return true;
    // The hard way
    var factory:XML = describeType(one).elements('factory')[0];
    // Look at superclasses and interfaces
    var elements = ['extendsClass', 'implementsInterface'];
    for (var i in elements) {
      var superclassnames:XMLList = factory.elements(elements[i]).attribute('type');
      for (var j in superclassnames) {
        try {
          var superclass = getDefinitionByName(superclassnames[j]);
          if (superclass === other) return true;
        } catch (e:ReferenceError) {
          // interstitials may not be present
        }
      }
    }
    return false;
  } else {
    return (one === other) || (one.prototype is other);
  }
}
