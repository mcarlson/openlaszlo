/**
  *
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @affects lzurl
  * @topic LFC
  * @subtopic Helpers
  * @access public
  */

/**
  * <para>Parses the protocol, host, port, path, file and query properties for 
  * the specified URL.</para>
  * <example><![CDATA[
  *     <canvas height="220" debug="true">
  *     <debug x="0" y="0" height="200" width="650"/>
  *     <script>
  *         var urlstring = 'http://localhost:8080/lps/lzurl_example.lzx?lzt=swf';
  *         var url = new lz.URL(urlstring);
  *
  *         // list each part of this url
  *         Debug.debug("protocol: %w", url.protocol);
  *         Debug.debug("host: %w", url.host);
  *         Debug.debug("port: %w", url.port);
  *         Debug.debug("path: %w", url.path);
  *         Debug.debug("file: %w", url.file);
  *         Debug.debug("query: %w", url.query);
  *         
  *         // list the url
  *         Debug.debug("Complete URL: %w", url);
  *        
  *         // Make it secure
  *         url.protocol = 'https';
  *         url.port = 8443;
  *         Debug.debug("Secure URL: %w", url);
  *         
  *         // Change the query string
  *         url.query = 'lzt=source';
  *         Debug.debug("New path: %w", url);
  *     </script>
  * </canvas>
  * ]]></example>
  *
  *
  * http://www.ietf.org/rfc/rfc2396.txt specifies the syntax for a URI
  *
  * @devnote We also need to handle these cases that OpenLaszlo allows
  * which aren't real URLs:
  * http:foo.html
  * http:/foo/bar.html
  * http:foo.ksp?q=12
  * http:/foo.ksp?q=12
  * http:/foo/bar.ksp?q=12
  * 
  */
public class LzURL {

    var protocol :String = null;
    var host :String = null;
    var port :String = null;
    var path :String = null;
    var file :String = null;
    var query :String = null;
    var fragment :String = null;

    /** @access private */
    var _parsed :String = null;

    /** 
      * @param String url: URL to parse
      * @access public 
      */
    public function LzURL (url:String? = null) {
        if (url != null) {
            this.parseURL( url );
        }
    }

    /**
     * Parses the protocol, host, port, path, file ,query and fragment properties for 
     * the specified URL.  
     * 
     * @param String url: URL to parse
     */
    public function parseURL (url:String) :void {
        if (this._parsed == url) return;
        this._parsed = url;

        // Look for protocol marker "protocol:[//host]"
        var i0:int = 0;
        var i1:int = url.indexOf(":");

        // Look for query or fragment char, which delimits end of host/path
        // "blah/barf/searchme?btnI=1&q=laszlosystems.com#foobar;bax"

        var iquery:int = url.indexOf("?", i0);
        var ifrag:int = url.indexOf("#", i0);
        var iopt:int = url.length;

        if (ifrag != -1) {
            iopt = ifrag;
        } 

        if (iquery != -1) {
            iopt = iquery;
        }

        if (i1 != -1) {
            this.protocol = url.substring(i0, i1);
            // Check if the prefix is "http://<HOST>" or  "http:PATH"
            if (url.substring(i1+1, i1+3) == "//" ) {
                // it's a prefix of the form "HTTP://HOST"
                //  parse out host[:port]
                // Parse host string (e.g., host:port)
                i0 = i1+3; // skip "://"
                i1 = url.indexOf("/", i0);
                if (i1 == -1) {
                    // There is only a host field, no path e.g.:  http://www.foo.com[?query][#fragment]
                    i1 = iopt;
                }
                var hostPort:String = url.substring(i0, i1);
                var i:int = hostPort.indexOf(":");
                if (i == -1 ) {
                    this.host = hostPort;
                    this.port = null;
                } else {
                    this.host = hostPort.substring(0,i);
                    this.port = hostPort.substring(i+1);
                }
            } else {
                // skip the ':'
                i1++;
            }
            i0 = i1;
        } 

        //http://www.ics.uci.edu/pub/ietf/uri/#Related
        //                      ^ i0          ^ i1
        // Parse path, including leading and trailing slash

        i1 = iopt;
        this._splitPath(url.substring(i0, i1));

        if (ifrag != -1) {
            this.fragment = url.substring(ifrag+1, url.length);
        } else {
            ifrag = url.length;
        }

        if (iquery != -1) {
            this.query = url.substring(iquery+1, ifrag);
        }
    }

    /** split out the path and file portion of a url path
        split out the "path" from the "filename"
        examples:
        ""                       := null, null
        "/"                      := "/", null
        "/foo"                   := "/" , "foo"
        /foo/bar                 := "/foo/", "bar"
        /foo/bar/baz/foo.html    := "/foo/bar/baz/", "foo.html"
        /foo/bar/                := "/foo/bar/", null
        foo.html                := null, "foo.html"
        @access private
    */
    private function _splitPath (pathfile:String) :void {
        if (pathfile == "") {
            return;
        }
    
        var ls:int = pathfile.lastIndexOf("/");
        if (ls != -1) {
            // case "/", "/foo", "/foo/bar", "/foo/bar/";
            this.path = pathfile.substring(0,ls+1);
            this.file = pathfile.substring(ls+1,pathfile.length);
            if (this.file == "") {
                this.file = null;
            }
            return;
        }

        this.path = null;
        this.file = pathfile;
    }

    /** @access private */ 
    function dupe () :LzURL {
        //make this function fast, because it is called by lz.Browser.toAbsoluteURL
        //which is called frequently by the loader
        var o:LzURL = new LzURL();
        o.protocol = this.protocol;
        o.host = this.host;
        o.port = this.port;
        o.path = this.path;
        o.file = this.file;
        o.query = this.query;
        o.fragment = this.fragment;
        return o;
    }

    /**
     * Returns this URL as a string
     */
    public function toString () :String {
        var out:String = "";

        if (this.protocol != null) {
            out += this.protocol + ":";
            if (this.host != null) {
                out += "//" + this.host;
                if (null != this.port &&  lz.Browser.defaultPortNums[this.protocol] != this.port ) {
                    out += ":" + this.port;
                }
            }
        }
        if (this.path != null) {
            out += this.path;
        }

        if (null != this.file) {
            out += this.file;
        }
        if (null != this.query) {
            out += "?" + this.query;
        }

        if (null != this.fragment) {
            out += "#" + this.fragment;
        }
    
        //Debug.write("orig: "+ this._parsed + ", Parsed: " + out );
        return out;
    }
    

    /**
     * Returns URL merged with DEFAULTS as an lz.URL
     * @param LzURL url: base URL
     * @param LzURL defaults: default URL
     * @return LzURL: the merged URL
     */
    static function merge (url:LzURL, defaults:LzURL) :LzURL {
        var m:LzURL = new LzURL();
        var tocopy:Object = {protocol:true, host:true, port:true,
                                path:true, file:true, query:true, fragment: true};
        for (var key:String in tocopy) {
            m[key] = url[key] != null ? url[key] : defaults[key];
        }
        
        return m;
    }
}
lz.URL = LzURL;  // publish
