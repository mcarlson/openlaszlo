/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @affects lzcommand
  * @access public
  * @topic LFC
  * @subtopic Views
  */

/**
  * <example class="program" id="command-1">
  * &lt;canvas height="130" debug="true"&gt;
  *   &lt;command onselect="Debug.write('the enter key was pressed');" 
  *             key="['Enter']" /&gt;
  * 
  * &lt;/canvas&gt;
  * </example>
  * 
  * <p>Sample applications that use the <tagname>command</tagname> tag:</p>
  * <ul>
  *     <li> <a href="${demos}weather/weather.lzx">Weather</a></li>
  *     <li> <a href="${demos}contacts/contacts.lzx">Contacts</a></li>
  * 
  * </ul>
  * Also, see <xref linkend="LzKeys"/>.
  * 
  * @devnote A command is an object that sends an event in response to keyboard input.
  * @shortdesc An element that sends events in response to keyboard input.
  * @lzxname command
  */
class LzCommand extends LzNode {

/** @access private
  * @modifiers override 
  */
static var tagname = 'command';
/** @access private */
  static var attributes = new LzInheritedHash(LzNode.attributes);

/**
  * true if the command is currently active.
  * The default is <i>true</i>.
  * @type Boolean
  */
var active = true;

/** array of keys (strings) that, when pressed together,
  * cause the onselect event of the command to be sent. For example:
  * setAttribute('key', ['a', 'shift']) or setKeys(['j', 'control'])
  * @type [String]?
  */
var keys = null;
function $lzc$set_key(v) { this.setKeys(v); }

/**
  * If the command is active, this event is sent
  * when the keys array are pressed simultaneously.
  * @lzxtype event
  */
var onselect = LzDeclaredEvent;

/** @access private */
function LzCommand ( parent:LzNode? = null, attrs:Object? = null, children:Array? = null, instcall:Boolean  = false){
  super(parent, attrs, children, instcall);
}

/**
  * This registers the given key array so that the command is executed when the
  * key array is pressed.
  * @param [String] k: An array of keys, given as strings. 
  */
function setKeys ( k ){
    this.keys = k;
    lz.Keys.callOnKeyCombo( this , k );
}

/**
  * Sends the command's onselect event.
  * @param any d: this optional parameter is passed to the onselect event
  */
function execute ( d ){
    if ( this.active ){
        if (this.onselect.ready) this.onselect.sendEvent( d );
    }
}

/**
 * Mapping from key names to display strings used by keysToString
 */
static var DisplayKeys = {control:"Ctrl", shift:"Shift", alt:"Alt"};

/**
  * This is a utility method that returns a string that describes the key 
  * combination that causes this command to be invoked.
  * 
  * @return String: A string containing the key combination that causes this
  * command to be invoked.
  */
function keysToString ( ) {
  var s= "";
  var keys = this.keys;
  if (keys) {
    var dk = LzCommand.DisplayKeys;
    var k = "";
    var l= keys.length - 1;
    for (var i = 0; i < l; i++) {
        k = keys[i];
        if (k in dk) k = dk[k];
        s = s + k + "+"
    }
    k = keys[i];
    if (k in dk) k = dk[k];
    s = s + k;
  }
  return s;
}

}; // End of LzCommand
lz[LzCommand.tagname] = LzCommand;

