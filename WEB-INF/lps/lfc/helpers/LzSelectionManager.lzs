/**
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @affects lzselectionmanager
  * @access public
  * @topic LFC
  * @subtopic Helpers
  * @lzxname selectionmanager
  */

/**
  * <p>Selection managers manage selection among a series of objects. They
  * enable standard control and shift click modifiers to aid range
  * selection. Selection managers provide methods to manipulate, add to
  * and clear the selection.  For example:</p>
  *
  * <example><![CDATA[
  * <canvas>
  *
  *   <dataset name="fruits">
  *     <fruit>Oranges</fruit>
  *     <fruit>Apples</fruit>
  *     <fruit>Bananas</fruit>
  *     <fruit>Grapes</fruit>
  *     <fruit>Kiwis</fruit>
  *     <fruit>Papayas</fruit>
  *     <fruit>Watermelon</fruit>
  *     <fruit>Strawberries</fruit>
  *     <fruit>Cherries</fruit>
  *   </dataset>
  *
  *   <simplelayout/>
  *
  *   <text>Select a series of items below. The control and shift-click modifiers
  *   help select ranges.</text>
  *
  *   <view name="fruitlist">
  *     <selectionmanager name="selector" toggle="true"/>
  *     <simplelayout/>
  *
  *     <view name="listitem"
  *           datapath="fruits:/fruit"
  *           onclick="parent.selector.select(this);">
  *       <text name="txt" datapath="text()"/>
  *
  *       <method name="setSelected" args="amselected">
  *         if (amselected) {
  *           var txtColor = 0xFFFFFF;
  *           var bgcolor = 0x999999;
  *         } else {
  *           var txtColor = 0x000000;
  *           var bgcolor = 0xFFFFFF;
  *         }
  *         this.setAttribute('bgcolor', bgcolor);
  *         this.txt.setAttribute('fgcolor', txtColor);
  *       </method>
  *     </view>
  *
  *     <method name="deleteSelected">
  *       var csel = this.selector.getSelection();
  *       for (var i = csel.length - 1; i >= 0; --i) {
  *         csel[i].destroy();
  *       }
  *       this.selector.clearSelection();
  *     </method>
  *   </view>
  *   <button onclick="fruitlist.deleteSelected();">Delete selection</button>
  * </canvas>
  * ]]></example>
  *
  * @shortdesc Manages selection among a series of objects.
  * @lzxname selectionmanager
  *
  * @devnote TODO: [20080930 anba] (LPP-6080) uncomment typing in method signatures
  */
public dynamic class LzSelectionManager extends LzNode {

    /** @access private */
    function LzSelectionManager (parent:LzNode? = null, attrs:Object? = null, children:Array? = null, instcall:Boolean = false) {
        super(parent, attrs, children, instcall);
    }

    /** @access private
      * @modifiers override
      */
    static var tagname :String = 'selectionmanager';

    /** @access private */
    static var attributes :Object = new LzInheritedHash(LzNode.attributes);

    /** The name of the method to call on an object when an object's
      * selectedness changes. The method is called with a single Boolean
      * argument. The default value for this field is <code>setSelected</code>.
      * (This feature is not available for <tagname>dataselectionmanager</tagname>.)
      * @type String
      * @lzxtype string
      */
    var sel :String = "setSelected";

    /** A hash of currently selected objects (by UID)
      * @access private
      * @type Object
      */
    var selectedHash :Object;

    /** An array that represents the current selection
      * @access private
      * @type Array
      */
    var selected :Array;

    /** If true, a re-selected element will lose the selection
      * @type Boolean
      * @lzxtype boolean
      */
    var toggle :Boolean;

    /** @type *
      * @access private
      */
    var lastRangeStart :*;

    /** @access private */
    override function construct (parent, args) {
        super.construct(parent, args);
        this.__LZsetSelection([]);
    }

    /** @access private */
    override function destroy () {
        this.__LZsetSelection([]);
        super.destroy();
    }

    /********************************************/
    /* generic functions for selection managers */
    /********************************************/

    /**
      * Adds an object to the current selection
      * @param any d: object to select
      * @param LzView o: view for object, may be <code>null</code>
      * @access private
      */
    private function __LZaddToSelection (d:*, o:LzView) :void {
        if (d != null && ! this.__LZisSelected(d)) {
            this.selected.push(d);
            this.__LZsetSelected(d, o, true);
        }
    }

    /**
      * Removes an object from the current selection
      * @param any d: object to unselect
      * @param LzView o: view for object, may be <code>null</code>
      * @access private
      */
    private function __LZremoveFromSelection (d:*, o:LzView) :void {
        var i:int = this.__LZindexOf(d);
        if (i != -1) {
            this.selected.splice(i, 1);
            this.__LZsetSelected(d, o, false);
        }
    }

    /**
      * Some runtimes don't support <code>Array.prototype.indexOf</code>
      * @param any d: element to search
      * @return int: index of <param>d</param> in <attribute>selected</attribute>
      * @access private
      */
    private function __LZindexOf (d:*) :int {
        var sela:Array = this.selected;
        for (var i:int = sela.length - 1; i >= 0; --i) {
            if (sela[i] === d) return i;
        }
        return -1;
    }

    /**
      * Sets the current selection to <param>sela</param> and unselects
      * all objects in <param>unsel</param>. Both, <param>sela</param> and
      * <param>unsel</param>, must be subsets of the current selection.
      * @param Array sela: the new selection, {sela &#8838; selected}
      * @param Array unsel: objects to be unselected, {unsel &#8838; selected}
      * @access private
      */
    private function __LZupdateSelection (sela:Array, unsel:Array) :void {
        this.__LZsetSelection(sela);
        for (var i:int = unsel.length - 1; i >= 0; --i) {
            var d:* = unsel[i];
            this.__LZsetSelected(d, this.__LZgetView(d), false);
        }
    }

    /**
      * Selects the range returned by <method>createRange</method> from
      * <param>s</param> to <param>e</param>
      * @param any s: The object that was at top of the selection stack
      * @param LzView e: The newly selected view
      * @access private
      */
    private function __LZselectRange (s:*, e:LzView) :void {
        var range:Array = this.createRange(s, e);
        if (range != null) {
            var split:Object = this.__LZsplitRange(range);
            this.__LZupdateSelection(split.unchanged, split.removed);
            this.lastRangeStart = s;
            var newsel:Array = split.added;
            for (var i:int = newsel.length - 1; i >= 0; --i) {
                var d:* = newsel[i];
                this.__LZaddToSelection(d, this.__LZgetView(d));
            }
        } else {
            this.clearSelection();
            this.lastRangeStart = s;
        }
    }

    /**
      * Returns sublist of <param>list</param> between <param>start</param> and
      * <param>end</param>, including both elements. If <param>start</param>
      * occurs before <param>end</param>, the sublist starts with
      * <param>start</param> and includes all following elements up to
      * <param>end</param>. If <param>end</param> occurs before
      * <param>start</param>, the sublist starts with <param>end</param> and
      * includes all preceding elements up to <param>start</param>.
      * @param Array list: array used as input
      * @param any start: starting element of sublist
      * @param any end: ending element of sublist
      * @return Array: sublist of <param>list</param> or <code>null</code> if
      * <param>start</param> or <param>end</param> wasn't found
      * @access private
      */
    function __LZgetSubList (list:Array, start:*, end:*) :Array {
        var st:int = -1;
        var en:int = -1;
        for (var i:int = list.length - 1; i >= 0 && (st == -1 || en == -1); --i) {
            if (list[i] === start) st = i;
            if (list[i] === end) en = i;
        }
        var sublist:Array = null;
        if (st != -1 && en != -1) {
            if (en < st) {
                sublist = list.slice(en, st + 1);
                sublist.reverse();
            } else {
                sublist = list.slice(st, en + 1);
            }
        }
        return sublist;
    }

    /**********************************************************************/
    /* implementation specific functions, must be overriden in subclasses */
    /**********************************************************************/

    /**
      * Returns the selection-object for a view
      * @param LzView o: input view
      * @return any: selection-object for view
      * @access private
      */
    function __LZgetObject (o:LzView) :* {
        return o;
    }

    /**
      * Returns the view for a selection-object
      * @param any d: input selection-object
      * @return LzView: view for selection-object
      * @access private
      */
    function __LZgetView (d:*) :LzView {
        return d;
    }

    /**
      * Sets <attribute>selected</attribute> to <param>sela</param>
      * @param Array sela: the new selection
      * @access private
      */
    function __LZsetSelection (sela:Array) :void {
        var selh:Object = {};
        for (var i:int = sela.length - 1; i >= 0; --i) {
            selh[sela[i].__LZUID] = true;
        }
        this.selectedHash = selh;
        this.selected = sela;
        this.lastRangeStart = null;
    }

    /**
      * Returns the selectedness for <param>d</param>
      * @param any d: input selection-object
      * @return Boolean: <code>true</code> if <param>d</param> is selected
      * @access private
      */
    function __LZisSelected (d:*) :Boolean {
        return (this.selectedHash[d.__LZUID] == true);
    }

    /**
      * Makes the given object selected or unselected.
      * @param any d: object to make selected
      * @param LzView o: view for <param>d</param>, may be <code>null</code>
      * @param Boolean sel: <code>true</code> if selected
      * @access private
      */
    function __LZsetSelected (d:*, o:LzView, sel:Boolean) :void {
        if (sel) {
            this.selectedHash[o.__LZUID] = true;
        } else {
            delete this.selectedHash[o.__LZUID];
        }
        o[this.sel](sel);
    }

    /**
      * Partitions the range and current selection into a triple of:
      * <ol>
      * <li>elements which are in the range and currently selected</li>
      * <li>elements which are in the range and not currently selected</li>
      * <li>elements which are not in the range but currently selected</li>
      * </ol>
      * @param Array range: input range array
      * @return Object: [{selected &#8745; range}, {range \ selected}, {selected \ range}]
      * @access private
      * @devnote only added this function because a generic approach
      * requires O(n*m) whereas this runs in O(n+m)
      */
    function __LZsplitRange (range:Array) :Object {
        var sela:Array = this.selected;
        var selh:Object = this.selectedHash;
        var rhash:Object = {};
        var unchanged:Array = [], added:Array = [], removed:Array = [];
        for (var i:int = range.length - 1; i >= 0; --i) {
            var o:LzView = range[i];
            if (selh[o.__LZUID]) {
                unchanged.push(o);
                rhash[o.__LZUID] = true;
            } else {
                added.push(o);
            }
        }
        for (var i:int = sela.length - 1; i >= 0; --i) {
            var o:LzView = sela[i];
            if (! rhash[o.__LZUID]) {
                removed.push(o);
            }
        }
        return {unchanged: unchanged, added: added, removed: removed};
    }

    /**
      * Creates the range for all objects between <param>s</param>
      * and <param>e</param>
      * @param any s: starting point for the range-selection
      * @param LzView e: ending point for the range-selection
      * @return Array: range from <param>s</param> to <param>e</param>
      * @access private
      * @devnote This function should possibly be made public, consider
      * range-selection in a 2-dimensional space, e.g. a table with cells
      * where you can select each cell. In that case, range-selection solely
      * based on the subviews-array won't work.
      */
    function createRange (s:*, e:LzView) :Array {
        return this.__LZgetSubList(s.immediateparent.subviews, s, e);
    }

    /********************************************/
    /* public interfaces for selection managers */
    /********************************************/

    /**
      * Tests for selectedness of input.
      * @param LzView o: The view to test for selectedness.
      * @return Boolean: The selectedness of the input view.
      */
    /*public*/ function isSelected (o /*:LzView*/) :Boolean {
        return this.__LZisSelected(this.__LZgetObject(o));
    }

    /**
      * Called with a new view to be selected.
      * @param LzView o: The new view to make selected
      */
    /*public*/ function select (o /*:LzView*/) /*:void*/ {
        var d:* = this.__LZgetObject(o);
        var issel:Boolean = this.__LZisSelected(d);
        if (issel && (this.toggle || this.isMultiSelect(o))) {
            this.unselect(o);
        } else {
            if (this.selected.length > 0 && this.isRangeSelect(o)) {
                var s:* = this.lastRangeStart || this.selected[0];
                this.__LZselectRange(s, o);
            } else {
                if (! this.isMultiSelect(o)) {
                    var i:int = (issel ? this.__LZindexOf(d) : -1);
                    var sela:Array = this.selected;
                    this.__LZupdateSelection(i != -1 ? sela.splice(i, 1) : [], sela);
                }
                this.__LZaddToSelection(d, o);
            }
        }
    }

    /**
      * Unselects the given view.
      * @param LzView o: The view to make unselected
      */
    /*public*/ function unselect (o /*:LzView*/) /*:void*/ {
        this.__LZremoveFromSelection(this.__LZgetObject(o), o);
    }

    /**
      * Unselects any selected objects.
      */
    /*public*/ function clearSelection () /*:void*/ {
        this.__LZupdateSelection([], this.selected);
    }

    /**
      * Returns an array representing the current selection.
      * @return Array: An array representing the current selection.
      */
    /*public*/ function getSelection () :Array {
        return this.selected.concat();
    }

    /**
      * Determines whether the additional selection should be multi-selected or
      * should replace the existing selection
      * @param LzView o: The newly selected view
      * @return Boolean: If <code>true</code>, multi select. If
      * <code>false</code>, don't multi select
      */
    /*public*/ function isMultiSelect (o /*:LzView*/) /*:Boolean*/ {
        return lz.Keys.isKeyDown( "control" );
    }

    /**
      * Determines whether the additional selection should be range-selected or
      * should replace the existing selection
      * @param LzView o: The newly selected view
      * @return Boolean: If <code>true</code>, range select. If
      * <code>false</code>, don't range select
      */
    /*public*/ function isRangeSelect (o /*:LzView*/) /*:Boolean*/ {
        return lz.Keys.isKeyDown( "shift" );
    }
} // End of LzSelectionManager
lz[LzSelectionManager.tagname] = LzSelectionManager;  // publish
