/**
  * LaszloLayout.lzs 
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic LFC
  * @subtopic Controllers
  * @affects lzlayout
  * @access public
  */
  
/**
  * <p>A layout is used to automatically distribute, align, or
  * otherwise arrange the subviews of the view that contains it (it
  * arranges the views that are it's siblings). Using a layout
  * obviates the need to precisely position the views of an
  * application and allows an application to resize or reconfigure
  * gracefully according to the constraints of its container.</p>
  *
  * <p>The layout class is a null layout &#x2014; it does not arrange
  * it's siblings. It is the base class that other layouts extend.
  * <classname>simplelayout</classname> is a basic extension of the
  * layout class. The example below illustrates using a simple
  * layout to distribute views along the y axis.</p>
  *
  * <example title="Using a simple layout to arrange views"><programlisting><![CDATA[
  *  <canvas height="60">
  *    <view bgcolor="#DDFFFF">
  *      <text>Without a layout, it can be difficult</text>
  *      <text x="2" y="5">to manually position your views</text>
  *    </view>
  *    <view y="25" bgcolor="#FFDDFF">
  *      <simplelayout axis="y" />
  *      <text>A layout makes</text>
  *      <text>positioning simple and automatic</text>
  *    </view>
  *  </canvas>
  * ]]></programlisting></example>
  *
  * <p>Layouts are so important, there is a shorthand for specifying them
  * using the <xref linkend="LzView.__ivars__.layout" /> attribute
  * of <xref linkend="LzView" />.  The previous example could be more
  * compactly specified:</p>
  *
  * <example title="Using the layout attribute to specify a layout"><programlisting><![CDATA[
  * <canvas height="35">
  *   <view layout="class: simplelayout; axis: y">
  *     <text>A layout makes</text>
  *     <text>positioning simple and automatic</text>
  *   </view>
  * </canvas>
  * ]]></programlisting></example>
  *
  * <p>Because <xref linkend="lz.simplelayout" /> is the default
  * layout, the above example could also have used just <code>layout="axis:
  * y"</code>.</p>
  * 
  * <p>Layouts, like constraints and animators, affect specific
  * attributes of a view. Views can have more than one layout, as long
  * as each set of attributes associated with a layout does not
  * overlap with any of the other sets.</p>
  * 
  * @shortdesc Abstract layout base class.
  * @lzxname layout
  */

dynamic class LzLayout extends LzNode {


/** @access private
 * Just used to effect a type cast of immediateparent to LzView 
 */
    var vip:LzView = null;

  /** @access private */
  function LzLayout ( parent:* , attrs:* , children:* = null, instcall:*  = null) {
      super(parent,attrs,children,instcall);
  }  

/** @access private
  * @modifiers override 
  */
  static var tagname = 'layout';
/** @access private */
  static var attributes = new LzInheritedHash(LzNode.attributes);

  /** @access private */
  var initDelegate;

  /**
   * Set to true if layout is locked from updates.
   *
   * @devnote locked is set to 2 in the prototype of the layout. This
   * is a special signal that the layout is locked temporarily until
   * it resolves its references
   *
   * @type Boolean
   */
  var locked = 2;
  /**
   * Setter for locked
   * Unlock the layout once update is done.
   *
   * @access private
   */
  function $lzc$set_locked ( locked ) {
      if ( this.locked == locked ) return;
      if ( locked ){
          this.lock();
      } else {
          this.unlock();
      }
  }


  /**
   * Array of the views this layout controls. Used by subclasses of
   * <code>layout</code> to implement their arrangement algorithm by
   * adjusting the appropriate attribute of each view.
   *
   * @type [LzView]
   * @access public
   */
  var subviews = null;

  /** A delegate used to update the layout.
    * @type LzDelegate
    */
  var updateDelegate;
  
  /** An array of all the delegates used by the layout
    * @type LzDelegate
    */
  var delegates;

/**
  * @param view: A view above this one that the Layout should apply to. Note:
  * this may not ultimately be the same as the view that it will eventually be
  * attached to, due to placement.
  * @param args: Constructor arguments.
  *
  * @access private
  */
override  function construct ( view , args) {
    super.construct.apply(this, arguments);
    this.subviews = new Array;

    this.vip = (this.immediateparent cast LzView);

    // view.layouts: If it doesn't already exist, layouts create an array
    //in the view that it attaches to that hold the list of layouts attached
    //to the view.
    if ( this.vip.layouts == null ){
        this.vip.layouts = [ this ];
    } else {
        this.vip.layouts.push( this );
    }

    this.updateDelegate = new LzDelegate( this , "update" );

    this.delegates = [ this.updateDelegate ];

    // register for unlock when parent inits, or unlock if already inited
    if (this.immediateparent.isinited) {
        this.__parentInit();
    } else {
        this.initDelegate = new LzDelegate( this , "__parentInit", this.immediateparent, "oninit" );
        this.delegates.push(this.initDelegate);
    }

}

/**
  * @access private
  */
override function constructWithArgs ( args ) {
    //all layouts need to know when their view adds/deletes a subview
    this.delegates.push( new LzDelegate (  this, "gotNewSubview",
                                        this.immediateparent,"onaddsubview" ));
    //this is never called b/c removeSubview is not implemented yet
    this.delegates.push( new LzDelegate (  this, "removeSubview",
                                    this.immediateparent, "onremovesubview" ));

    var vsl = this.vip.subviews.length;

    for (var i = 0; i < vsl; i++){
        this.gotNewSubview( this.vip.subviews[i] );
    }

}


/**
  * @access private
  */
override function destroy () {
    this.releaseLayout();
    super.destroy();
}


/**
  * Reset any held parameters (such as kept sizes that may have changed) and
  * before updating.
  *
  * @access public
  *
  * @param Any e: The event data that is passed by the delegate that called this
  * funciton. This is usually unused, since more than one type of delegate can
  * call reset.
  */
function reset( e = null ) {
    if ( this.locked ) { return; }
    //defalt behavior on reset is to update
    this.update( e );
}

/**
  * Called whenever a new subview is added to the layout. This is called both
  * in the layout constructor and when a new subview is called after layout
  * has been created. This is only called if the view's "ignorelayout" option is
  * not set.  Subclasses may override this method to decide whether or
  * not to add a particular view to the <code>subviews</code> array.
  *
  * @access public
  * @param LzView sd: The subview to add.
  */
function addSubview( sd ) {
    if ( sd.getOption( 'layoutAfter' ) ){
        //this wants to get inserted in a specific place in the layout
        this.__LZinsertAfter( sd , sd.getOption( "layoutAfter" ) );
    } else {
        this.subviews.push ( sd );
    }
}

/**
  * Called whenever the layout discovers a new subview. Checks to see if view
  * should be added by inspecting the view's "ignorelayout" option.
  *
  * @access private
  * @param sd: The subview to add.
  */
function gotNewSubview( sd ) {
    if ( ! sd.getOption( 'ignorelayout' ) ){
        this.addSubview( sd );
    }
}

/**
  * Called when a subview is removed. This is not well tested.
  *
  * @access public
  * @param LzView sd: The subview to be removed.
  */
function removeSubview( sd ) {
    for ( var i = this.subviews.length-1; i >= 0; i-- ){
        if ( this.subviews[ i ] == sd ){
            this.subviews.splice( i , 1 );
            break;
        }
    }

    this.reset();
}

/**
  * Called when a subview is to be ignored by the layout. By default, most
  * layouts include all the subviews of a given view.
  *
  * @access public
  * @param LzView s: The subview to ignore.
  */
function ignore( s ) {
    //default behavior on addSubview is to reset
    for (var i = this.subviews.length - 1; i >= 0; i-- ){
        if ( this.subviews[ i ] == s ){
            this.subviews.splice( i , 1 );
            break;
        }
    }
    this.reset();
}

/**
  * Lock the layout from processing updates. This allows the layout to register
  * for events that it generates itself. Unfortunately, right now all subclass
  * routines that can generate calls that may result in the layout calling
  * itself should check the lock before processing. Failure to do so is not
  * catastrophic, but it will slow down your program.
  */
function lock ( ) {
    this.locked = true;
}


/**
  * Unlock the layout once update is done.
  *
  * @param Any e: Ignored. <code>unlock</code> accepts an argument as
  * a convenience so that it can be used as an event handler method.
  */
function unlock (e=null ) {
    this.locked = false;
    this.reset()
}

/**
  * @access private
  */
function __parentInit (v=null){
    if ( this.locked == 2){
        if (this.isinited) {
            this.unlock();
        } else {
            new LzDelegate( this , "unlock", this, "oninit" );
        }
    }
}

/**
  * Remove the layout from the view and unregister the delegates that the layout
  * uses.
  */
function releaseLayout ( ) {
    if (this.delegates) {
        for ( var i = this.delegates.length - 1;  i >= 0; i -- ){
            this.delegates[ i ] .unregisterAll();
        }
    }
    if (this.immediateparent && this.vip.layouts) {
        for ( var i = this.vip.layouts.length -1 ; i >= 0 ; i-- ){
            if ( this.vip.layouts[ i ] == this ){
                this.vip.layouts.splice( i , 1 );
            }
        }
    }
}


/**
  * Reorder the second subview given  to this function so that it immediately
  * follows the first. Doesn't touch the placement of the first subview given
  *
  * @access public
  *
  * @param LzView sub1: The reference subview which the second subview should
  * follow in the layout order. Alternatively, can be "first" or "last"
  * @param LzView sub2: The subview to be moved after the reference subview.
  */
function setLayoutOrder ( sub1 , sub2 ){
    for (var i2 = this.subviews.length -1; i2 >= 0 ; i2-- ){
        if ( this.subviews[ i2 ] === sub2 ){
            this.subviews.splice( i2, 1 );
            break;
        }
    }
    // check if sub2 was found
    if (i2==-1) {
        if ($debug) Debug.warn('second argument for setLayoutOrder() is not a subview')
        return;
    }

    if ( sub1 == "first" ){
        this.subviews.unshift( sub2 );
    } else if ( sub1 == "last" ){
        this.subviews.push( sub2 );
    } else {
        for (var i = this.subviews.length -1; i >= 0 ; i-- ){
            if ( this.subviews[ i ] === sub1 ){
                this.subviews.splice( i+1 , 0 , sub2 );
                break;
            }
        }
        // check if sub1 was found
        if (i==-1) {
            if ($debug) {
                if (sub1 == sub2) {
                    Debug.warn('%w is the same as %w', sub1, sub2)
                } else {
                    Debug.warn('first argument for setLayoutOrder() is not a subview')
                }
            }
            // put sub2 back
            this.subviews.splice(i2, 0, sub2);
        }
    }
    this.reset();
    return;
}

/**
  * Swap the positions of the two subviews within the layout
  * @access public
  *
  * @param LzView sub1: The reference subview which the second subview should
  * follow in the layout order.
  * @param LzView sub2: The subview to be moved after the reference subview.
  */
function swapSubviewOrder ( sub1 , sub2 ){
    //this will cause problems if sub1 or sub2 are not subviews
    var s1p = -1;
    var s2p = -1;

    for (var i = this.subviews .length -1; i >= 0 && ( s1p < 0 || s2p < 0 );
                   i-- ){
        if ( this.subviews[ i ] === sub1 ){
            s1p = i;
        } 
        if ( this.subviews[ i ] === sub2 ){
            s2p = i;
        }
    }

    if (s1p >= 0 && s2p >= 0) {
        this.subviews[ s2p ] = sub1;
        this.subviews[ s1p ] = sub2;
    } else if ($debug) {
        Debug.warn('Invalid subviews for swapSubviewOrder()');
    }

    this.reset();
    return;
}

/**
  * @access private
  */
function __LZinsertAfter ( newsub , oldsub ){
    for ( var i = this.subviews.length -1 ; i >= 0; i-- ){
        if ( this.subviews[ i ] == oldsub ){
            this.subviews.splice( i , 0 , newsub );
        }
    }
}

/**
  * <p>Update is called whenever the layout needs to be updated.</p>
  *
  * <p>In the <code>layout</code> class, update does nothing.
  * Subclasses of layout override this method to implement their
  * layout algorithm.  For best performance, any update method should
  * check first to see if the layout is <code>locked</code> and return
  * immediately if so.  This will avoid redundant updates when a
  * layout is in transition.</p>
  *
  * @param Any e: The event data that caused this update.  Typically
  * unused since various events may cause an update.
  *
  * @access public
  */
function update(e=null) {
}



/**
  * @access private
  */
override function toString (){
    return "LzLayout for view " + this.immediateparent;
}

}


lz[LzLayout.tagname] = LzLayout;  // publish
