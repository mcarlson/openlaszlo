<?xml version="1.0"?>
<!DOCTYPE project [
    <!ENTITY build_opt SYSTEM "file:../../../build-tools/build-opt.xml">
]>

<!--  build.xml                                                             -->

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

<project name="lfc" default="build">
  <description>
      This is the build file for the LFC library.
  </description>

  &build_opt;


  <target name="init" depends="build-opt">
    <tstamp/>

    <echo message="JAVA_OPTS=${JAVA_OPTS}" />

    <property file="${LPS_HOME}/build.properties"/>
    <condition property="JAVA_DEBUG" value="" else="-ea">
        <equals arg1="${build.debug}" arg2="off" />
    </condition>
    
    <condition property="JAVA_OPTS" value="${env.JAVA_OPTS}" else="">
        <isset property="env.JAVA_OPTS"/>
    </condition>
    <property name="sc.dir"     value="${LPS_HOME}/WEB-INF/lps/server/sc"/>

    <echo message="JAVA_OPTS=${JAVA_OPTS}" />
  </target>

  <target name="clean" depends="init">
      <delete failonerror="false">
          <fileset dir="build" />
          <fileset dir="." includes="*.lzl" />
      </delete>
  </target>
  
    <!-- Expects the $library, $args, $source, and $excludes properties to be set from outside -->
    <target name="lzl" description="Build a .lzl library from source" >
        <!-- TODO: add a check for uptodate [bshine 5.14.06] --> 
        <!-- Oh my, this should be done by directly invoking java. 
        Doing it through exec'ing bash is very very old school, and
        slow. We don't need to launch another JVM here. 
        [bshine 5.14.06] -->
        <echo message="Compiling ${library}"/>
        <exec executable="bash" failonerror="true">
            <env key="JAVA_OPTS" value="${JAVA_OPTS}" />
            <arg line="${sc.dir}/bin/lfcbuilder ${args} -o ${library}.lzl ${source}"/>
        </exec>
    </target>
  
  
<!-- We want to build the cross-product of [swf6, swf7, swf8] with [ regular, debug, profile ] -->
<target name="build" description="Build all the lfc versions requested in build.properties"
    depends="init">
    <dependset>
      <targetfileset dir="build/cache"/>
      <srcfileset dir="${sc.dir}" includes="*.py"/>
    </dependset>

    <script language="javascript"><![CDATA[
        var dobuild = function(v, flavor, args) {
            var myant = lfc.createTask("ant");
            myant.setTarget("lzl");

            var libprop = myant.createProperty();
            libprop.setName("library");
            libprop.setValue("LFC" + v + flavor);

            var argsprop = myant.createProperty();
            argsprop.setName("args"); 
            argsprop.setValue("--runtime=swf" + v + " " + args);

            var sourceprop = myant.createProperty();
            sourceprop.setName("source");
            sourceprop.setValue("LaszloLibrary.as");        

            var excludesprop = myant.createProperty();
            excludesprop.setName("excludes");
            excludesprop.setValue("lzpreloader.as"); 
            
            myant.execute();
        }
        
        var swfruntimes = [5, 6, 7, 8];
        
        var warningTask = lfc.createTask("echo");
        var buildDebug = lfc.getProperty("build.lfc.runtime.debug");
        var buildProfile = lfc.getProperty("build.lfc.runtime.profile");

        for (var s in swfruntimes) {
            var v = swfruntimes[s]; 
            
            // Check whether the options tell us to build this runtime at all
            var buildThisRuntime = lfc.getProperty("build.lfc.runtime.swf" + v);
            if (buildThisRuntime != null) { 
            
                dobuild(v, "", "");
                
                if (buildDebug) {
                    dobuild(v, "-debug", "--option nameFunctions '-D$debug=true'");
                }
                
                if (buildProfile) {
                    dobuild(v, "-profile", "-p");
                }
                
            } else {
                warningTask.setMessage("WARNING: Skipping LFC" + v);        
                warningTask.execute();
            }
        }
    ]]> </script>
</target>
  
  <target name="doc">
  </target>

  <target name="all"
          description="Clean, build, (no doc here)"
          depends="clean,build"/>
</project>
