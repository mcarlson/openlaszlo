/**
 *
 * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @affects lzcssstyle lzcssstylerule
 * @access public
 * @topic LFC
 * @subtopic CSS
 */

/**
 * <p>This service provides style information.</p>
 * <p>This implements Interface ViewCSS (introduced in DOM Level 2)
 * from here: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-ViewCSS
 * </p>
 */
class LzCSSStyleRule {
  /** @access private */
  var selector;
  /** @access private */
  var properties;

  if ($debug) {
    // In debug mode, the constructor fills these in
//     LzCSSStyleRule.prototype[Debug.FUNCTION_FILENAME] = null;
//     LzCSSStyleRule.prototype[Debug.FUNCTION_LINENO] = null;
    // Don't really want to have to make this class dynamic just for
    // that...  So, we cheat.
    var _dbg_filename:String = null;
    var _dbg_lineno:Number = 0;

    function LzCSSStyleRule(selector, properties, source:String, line:Number) {
      this.selector = selector;
      this.properties = properties;
      // You will find out if these are the wrong names
      this[Debug.FUNCTION_FILENAME] = source;
      this[Debug.FUNCTION_LINENO] = line;
    };
  } else {
    function LzCSSStyleRule(selector, properties) {
    this.selector = selector;
    this.properties = properties;
    };
  }



  //No rule has a specificity of zero
  /** @access private */
  var specificity = 0;

  /** @access private */
  var parsed = null;

  /** @access private */
  var _lexorder

  // this is inlined in __compareSpecificity() - keep in sync
  function getSpecificity () {
    // Only calculate this once. Store it after we've calculated it once.
    // No rule has a specificity of 0
    if ( !this.specificity ) {
      var s = 0;
      var p = this.parsed;

      //need to treat compound selectors differently
      if ( p.type == LzCSSStyle._sel_compound ){
        for ( var i = 0, l = p.length; i < l; i++ ){
          s += LzCSSStyle.getSelectorSpecificity( p[ i ] );
        }
      } else {
        s = LzCSSStyle.getSelectorSpecificity( p );
      }
      this.specificity = s;
      //Debug.write( 'specificity for' , this , this.specificity );
    }

    return this.specificity;
  };

  /** @access private */
  var _dbg_name = function () {
    function pname (rp) {
      var rptn = rp['tagname'];
      var rpi = rp['id'];
      var rpa = rp['attrname'];
      if (! (rptn||rpi||rpa)) { return '*'; }
      return (rptn?rptn:'')+(rpi?('#'+rpi):'')+(rpa?('['+rpa+'='+rp.attrvalue+']'):'');
    }
    var rp = this.parsed;
    if (rp['length']) {
      var n = '';
      for (var i = 0; i < rp.length; i++) {
        n += pname(rp[i]) + ' ';
      }
      n = n.substring(0, n.length-1);
    } else {
      var n = pname(rp);
    }
    return n;
  };

  function equal (that) {
    function equal (pa, pb) {
      return ((pa['tagname'] == pb['tagname']) &&
              (pa['id'] == pb['id']) &&
              (pa['attrname'] == pb['attrname']) &&
              (pa['attrvalue'] == pb['attrvalue']));
    }
    var rap = this.parsed;
    var rbp = that.parsed;
    if (rap['length'] != rbp['length']) {
      return false;
    }
    if (rap['length']) {
      for (var i = rap.length - 1; i >= 0; i--) {
        if (! equal(rap[i], rbp[i])) {
          return false;
        }
      }
    }
    if (! equal(rap, rbp)) {
      return false;
    }
    var aprops = this.properties;
    var bprops = that.properties;
    for (var ak in aprops) {
      if (aprops[ak] !== bprops[ak]) { return false; }
    }
    for (var bk in bprops) {
      if (aprops[bk] !== bprops[bk]) { return false; }
    }
    return true;
  };

};                                // End of LzCSSStyleRule
lz.CSSStyleRule = LzCSSStyleRule; // publish

class LzCSSStyleDependencies {
  var count:Number = 0;
  var deps;

  function LzCSSStyleDependencies () {
    this.deps = {};
  }

  function gather (node, attr) {
    if (! (attr in this.deps)) {
      this.deps[attr] = [ node ];
      this.count++;
    }
    var nodes = this.deps[attr];
    for (var i = 0, l = nodes.length; i < l; i++) {
      if (node === nodes[i]) {
        return;
      }
    }
    this.deps[attr].push(node);
    this.count++;
  }
}

class LzCSSStyleClass {

  function LzCSSStyleClass () {};

  function getComputedStyle ( node ){
    var csssd = new LzCSSStyleDeclaration( );
    csssd.setNode( node );
    return csssd;
  };

  // Hand-inlined in LzNode/__LZstyleBindAttribute
  // Must be kept in sync
  function getPropertyValueFor (node, pname) {
    var pc = node['__LZPropertyCache'] || this.getPropertyCache(node);
    if (pname in pc) {
      return pc[pname];
    }
    if ($debug) {
      // Fix for LPP-3024: if we're in debug mode, warn when CSS lookup
      // results in a null or undefined value. [bshine 08.03.2007]
      Debug.warn("No CSS value found for node %#w for property name %s", node, pname);
    }
    // Cache negative values lazily
    return pc[pname] = (void 0);
  };

  function getPropertyCache ( node ) {
    if (!node) return {};
    var pc = node['__LZPropertyCache'];
    if ( pc ) { return pc; }
    // The cache is initialized from the parent, then our rules are
    // added.
    var ip = node.immediateparent;
    // Apparently there can be orphan nodes that get styled?
    if ((! ip ) || (ip === canvas)) {
      var ipc = {};
    } else {
      var ipc = ip['__LZPropertyCache'] || this.getPropertyCache(ip);
    }
    var rules = node['__LZRuleCache'] || this.getRulesCache(node);

    // If we have no rules, we just share the parent cache
    if (rules.length == 0) {
      return node.__LZPropertyCache = ipc;
    }

    // If we have rules, copy the parent cache and add the properties
    // our rules define
    var pc = {};
    for (var k in ipc) { pc[k] = ipc[k]; }
    // Process the rules from least to most specific, so the
    // most-specific win
    for (var i = rules.length - 1; i >= 0; i--)  {
      var props = rules[i].properties;
      for (var pname in props) {
        pc[pname] = props[pname];
      }
    }
    return node.__LZPropertyCache = pc;
  };

  // Will we ever use this cache more than once?
  //
  // Yes, if we fix this...
  // TODO: [2010-04-27 ptw] (LPP-8945) Dynamic CSS rules need better caching
  function getRulesCache (node) {
    var rules = node['__LZRuleCache'];
    if (rules) { return rules; }
    rules = new Array();
    var tryRules = new Array();
    // Repeat for rules, tag rules, attr rules, id rules; accumulating
    // the rules that might apply (which are filtered more carefully in
    // the second pass).

    /**
     * NOTE: [2008-09-08 ptw] These rules are gathered in approximate
     * specificity order, to minimize the cost of the sort below.  Take
     * great care if you muck with this code that you don't screw that
     * up!
     */
    // Ensure the rule cohorts are in order
    if (this._rulenum != this._lastSort) {
      this._sortRules();
    }

    // Gather the id rules that could apply
    var id = node['id'];
    // Does this node have an id with rules?
    if (id) {
      var ir = this._idRules;
      if (id in ir) {
        tryRules = tryRules.concat(ir[id]);
      }
    }

    // Gather the attribute rules that could apply
    var ar = this._attrRules;
    for (var k in ar) {
      // Does this node have that attribute? NOTE: [2010-08-19 ptw]
      // We'd like to ask `k in node` but this does not work for as3,
      // so we approximate.  This is why attributes have to at least
      // be initialized to `null` in applyArgs
      if (node[k] !== (void 0)) {
        // Get the rules for that attribute for all possible values
        // (since value is dynamically matched)
        var attrrules = ar[k];
        // Get the ruleset for each value
        for (var val in attrrules) {
          var rs = attrrules[val];
          // Is this an attribute with rules?
          if (rs is Array) {
            // This rules could be compound and/or dynamic, so we have
            // to collect them and compute current applicability later
            tryRules = tryRules.concat(rs);
          }
        }
      }
    }

    // Gather the tag rules that could apply
    var cr = this._tagRules;
    for (var tn in cr) {
      var c = lz[tn];
      // Can we filter these any further here?
      if (c && (node is c)) {
        tryRules = tryRules.concat(cr[tn]);
      }
    }

    // * rules end up here
    var rr = this._rules;
    for (var i = rr.length - 1; i >= 0; i--) {
      tryRules.push(rr[i]);
    }

    // The dependencies for the applicability of this rule cache.  If
    // any of these dependencies change, the rules cache needs to be
    // recomputed.
    var deps = new LzCSSStyleDependencies();

    // Now winnow the rules by applicability, at the same time, see if
    // any sorting is needed
    var sortNeeded = false;
    var lastSpecificity = Infinity;
    for ( var i = 0, l = tryRules.length; i < l; i++ ) {
      var r = tryRules[ i ];
      if (! sortNeeded) {
        var rs = r.specificity;
        if ((! rs) || (rs >= lastSpecificity)) {
          sortNeeded = true;
        } else {
          lastSpecificity = rs;
        }
      }
      var rp = r.parsed;
      var rpt = rp.type;
      var compound = (rpt == this._sel_compound);
      // Quick test for compound _not_ applying:  If the last selector
      // is not applicable, no need to even try.  It will either apply
      // to our parent (already cached) or a child, but not us.
      if (compound) {
        // Look at the last selector
        rp = rp[rp.length - 1];
        rpt = rp.type;
      }
      var rptn = rp.tagname;
      // Classes get defined lazily, way after rules are parsed, so
      // we have to look this up each time. But NOTE, in the
      // optimization below, we only check the class if there is a
      // TAGNAME.
      var rpc = rptn ? lz[rptn] : null;
      var rpi = rp['id'];
      var rpa = rp['attrname'];
      // Optimized test for applicability: we can ignore type because
      // if a rule has a class, id, or attrname, they have to apply,
      // and a 'star' rule has none of those
      if (((! rptn) || (rpc && node is rpc)) &&
          ((! rpi) || (node['id'] == rpi))) {
        if (! compound) {
          if (! rpa) {
            // No attr selector, done
            rules.push(r);
          } else {
            // TODO: [2010-04-26 ptw] (LPP-8941) CSS dynamic attribute
            // comparison needs to be able to test for the existence
            // of an attribute efficiently
//             try {
              // `name` is not a dynamic attribute, but if the node
              // otherwise has the attribute...  NOTE: [2010-08-19
              // ptw] We'd like to ask `k in node` but this does not
              // work for as3, so we approximate.  This is why
              // attributes have to at least be initialized to `null`
              // in applyArgs
              if ((rpa != 'name') && (node[rpa] !== (void 0))) {
                // ...note the applicability dependency on this node
                // and attribute
                deps.gather(node, rpa);
              }
              // Only add the rule to the cache if it is _currently_ applicable
              // TODO: [2010-04-26 ptw] (LPP-8940) CSS dynamic attribute
              // comparison needs to use presentAttribute
              if ((node[rpa] + '') == rp.attrvalue) {
                rules.push(r);
              }
//             } catch (e) {
//               // ignore error accessing non-existent attribute
//             }
          }
        } else {
          // Last selector applies, so verify that the whole rule
          // applies.  (Need to go back to original rule to do this.)
          // At the same time, we accumulate any dependencies that
          // could change the applicability of the compound rule.
          if (this._compoundSelectorApplies( r.parsed, node, deps )) {
            rules.push(r);
          }
        }
      }
    }

    if (sortNeeded) {
      //     if ($debug) {
      //       var s = "";
      //       for (var i = 0, l = rules.length; i < l; i++) {
      //         s += rules[i].specificity + ' ';
      //       }
      //       Debug.debug("Sorting %w (%s)", rules, s);
      //     }
      rules.sort(this.__compareSpecificity);
      //   } else if ($debug) {
      //     Debug.debug("Saved a sort! %w", rules);
    }

    node.__LZRuleCache = rules;
    // Note style dependencies
    if (deps.count > 0) {
        node.__LZCSSDependencies = deps.deps;
    }
    // Debug.info('found rules %w for %w, binders %w', rules, node, deps);
    return rules;
  };


  function getSelectorSpecificity ( parsedsel ) {
    switch ( parsedsel.type ){
      case (this._sel_tag ):
      case (this._sel_star ):
        return 1;

      case (this._sel_id ):
        return 100;

      case (this._sel_attribute ):
        return 10;

      case (this._sel_tagAndAttr ):
        return 11;
    }
  };

  /** @access private */
  function __compareSpecificity (rA, rB) {
    // Specificity is stored when the rule is parsed
    var specificityA = rA.specificity;
    var specificityB = rB.specificity;

    // Simplest case: they have different specificity
    if ( specificityA != specificityB ) {
      return (specificityA < specificityB) ? 1 : -1;
    }

    // Ties that involve tag selectors are broken by comparing the
    // specificity of the classes of the tags
    var rap = rA.parsed;
    var rbp = rB.parsed;
    var lexorder = (rA._lexorder < rB._lexorder ) ? 1 : -1;

    // Simple rules have no length
    if ((! rap['length']) && (! rbp['length'])) {
      // Simple tag rules have a class name property
      var ratn = rap['tagname'];
      var rbtn = rbp['tagname'];

      // Simpler case: Not tag rules, or the classes are the same
      if ((! ratn) || (! rbtn) || (ratn == rbtn)) {
        return lexorder;
      }

      // Simple case: Neither compound
      //  Push comes to shove -- the classes had better exist now
      var rac = lz[ratn];
      var rbc = lz[rbtn];
      // Subclass test
      // TODO: [2008-09-09 ptw] Will this work in JS2?
      // We really want to test the subclass relationship of rac and rbc
      if (rac && rbc) {
        if (rac subclassof rbc) { return -1; }
        if (rbc subclassof rac) { return 1; }
      }
      // The classes are not comparable, default
      return lexorder;
    }

    // Hard case: Compound rule must be examined step-by-step
    for ( var i = 0; i < rap.length; i++ ) {
      var rapi = rap[i];
      var rbpi = rbp[i];
      // if we get here, it means that two rules have the same
      // specificity but different numbers of descendants?
      if ( !rapi || !rbpi ) {
        //       if ($debug) {
        //         Debug.debug("%s: %w <=> %w", arguments.callee, rA, rB);
        //       }
        // Punt to lexical order
        break;
      }
      //  Classes get defined lazily, way after rules are
      //  parsed, so we have to defer evaluating them
      var ratn = rapi['tagname'];
      var rbtn = rbpi['tagname'];
      if ( ( ratn && rbtn ) && ( ratn != rbtn ) ) {
        //  Push comes to shove -- the classes had better exist now
        var rac = lz[ratn];
        var rbc = lz[rbtn];
        // Subclass test
        // TODO: [2008-09-09 ptw] Will this work in JS2?
        // We really want to test the subclass relationship of rac and rbc
        if (rac && rbc) {
          if (rac subclassof rbc) { return -1; }
          if (rbc subclassof rac) { return 1; }
        }
        // The classes are not comparable, keep going
      }
    }
    // Last ditch
    return lexorder;
  };


  /** @access private */
  function _printRuleArray (arr) {
    if ($debug) {
      for (var i = 0; i < arr.length; i++) {
        Debug.write(i, arr[i]);
      }
    }
  };

  /**
   * The optimized applicability test is inlined in
   * getPropertyValueFor(), make sure they stan in sync
   * @access private
   */
  function _compoundSelectorApplies (parsedsel , startnode, deps) {
    // loop through selectors, ensuring each applies to the current node or a parent
    for (var node = startnode, i = parsedsel.length - 1; i >= 0 && node !== canvas; i--, node = node.parent) {
      // Components of a parsed compound rule are parsed
      var rp = parsedsel[i];
      var rptn = rp.tagname;
      // Classes get defined lazily, way after rules are parsed, so
      // we have to look this up each time. But NOTE, in the
      // optimization below, we only check the class if there is a
      // TAGNAME.
      var rpc = rptn ? lz[rptn] : null;
      var rpi = rp['id'];
      var rpa = rp['attrname'];
      // look up the nodes to see if this selector applies to the
      // current node or a parent
      while (node !== canvas) {
        // Optimized test for applicability: we can ignore type because
        // if a rule has a class, id, or attrname, they have to apply,
        // and a 'star' rule has none of those
        //
        // NB: The old code tested for a compound selector in a
        // compound selector, but that can't really happen, can it?
        if (((! rptn) || (rpc && node is rpc)) &&
            ((! rpi) || (node.id == rpi))) {
          if (!rpa) {
            // No attr selector, match
            if ( i == 0 ){
              // Total match
              return true;
            } else {
              // Match next rule in the compound (next step in outer
              // for loop)
              break;
            }
          } else {
            // TODO: [2010-04-26 ptw] (LPP-8941) CSS dynamic attribute
            // comparison needs to be able to test for the existence
            // of an attribute efficiently
//             try {
              // `name` is not a dynamic attribute, but if the node
              // otherwise has the attribute...  NOTE: [2010-08-19
              // ptw] We'd like to ask `k in node` but this does not
              // work for as3, so we approximate.  This is why
              // attributes have to at least be initialized to `null`
              // in applyArgs
              if ((rpa != 'name') && (node[rpa] !== (void 0))) {
                // Note the applicability dependency on this node and attribute
                deps.gather(node, rpa);
              }
              // Check if the rule is currently applicable
              // TODO: [2010-04-26 ptw] (LPP-8940) CSS dynamic attribute
              // comparison needs to use presentAttribute
              if ((node[rpa] + '') == rp.attrvalue) {
                // Match
                if ( i == 0 ){
                  // Total match
                  return true;
                } else {
                  // Match next rule in the compound (next step in outer
                  // for loop)
                  break;
                }
              }
//             } catch (e) {
//               // ignore error accessing non-existent attribute
//             }
          }
        }
        // We didn't match on this node
        if (node === startnode) {
          // If the selector can't be anchored here, then exit.  If it
          // applied in a parent, it will have already been examined
          // and cached
          return false;
        }
        // Go up a node and try to match again
        // TODO: [2008-09-06 ptw] parent, not immediateparent?
        node = node.parent;
      }
    }
    // Got to the canvas or end of the rule without a match
    return false;
  };

  /** @access private */
  var _sel_unknown = 0;
  /** @access private */
  var _sel_star = 1;
  /** @access private */
  var _sel_id = 2;
  /** @access private */
  var _sel_tag = 3;
  /** @access private */
  var _sel_compound = 4;
  /** @access private */
  var _sel_attribute = 5;
  /** @access private */
  var _sel_tagAndAttr = 6;

  /** @access private */
  var _rules = new Array();

  /** optimization for selectors which use [&lt;attr&gt;=&lt;value&gt;]
   * @access private */
  var _attrRules = {};

  /** optimization for selectors which use #id
   * @access private */
  var _idRules = {};

  /** optimization for selectors which use tagname
   * @access private */
  var _tagRules = {};

  /** @access private */
  var _rulenum = 0;

  /** @access private */
  var _lastSort = -1;

  function _sortRules () {
    function deleteDuplicates (sortedRules) {
      for (var i:Number = sortedRules.length - 2; i >= 0; i--) {
        if (sortedRules[i].equal(sortedRules[i + 1])) {
          //           if ($debug) {
          //             Debug.debug("Removing duplicate: %w == %w",
          //                         sortedRules[i], sortedRules[i + 1]);
          //           }
          sortedRules.splice(i + 1, 1);
        }
      }
      return sortedRules;
    }

    if (this._rulenum != this._lastSort) {
      this._rules.sort(this.__compareSpecificity);
      deleteDuplicates(this._rules);
      for (var k in this._attrRules) {
        var ars = this._attrRules[k];
        for (var v in ars) {
          ars[v].sort(this.__compareSpecificity);
          deleteDuplicates(ars[v]);
        }
      }
      for (var k in this._idRules) {
        this._idRules[k].sort(this.__compareSpecificity);
        deleteDuplicates(this._idRules[k]);
      }
      for (var k in this._tagRules) {
        this._tagRules[k].sort(this.__compareSpecificity);
        deleteDuplicates(this._tagRules[k]);
      }

      this._lastSort = this._rulenum;
    }
  };

  /** @access private */
  function _addRule ( r ) {
    //do some preprocessing to speed up lookups
    r._lexorder = this._rulenum++;

    var sel = r.selector;
    r.parsed = null;
    var lastsel;
    if ( sel is Array ){
      r.parsed = [];
      r.parsed.type = this._sel_compound;
      for ( var i = 0; i < sel.length; i++ ){
        r.parsed.push( this._parseSelector( sel[ i ] ) );
      }
      lastsel = r.parsed[ r.parsed.length -1 ];
    } else {
      r.parsed = this._parseSelector( sel );
      lastsel = r.parsed;
    }

    // Cache this now
    r.getSpecificity();

    // Sort rules into different cohorts to reduce the number of rules
    // we have to test for applicability in getRulesCache
    if ( ( lastsel.type === this._sel_attribute ||
           lastsel.type === this._sel_tagAndAttr ) ) {
      // Since an attr rule is higher specificity than a tag rule, we
      // put attr+tag rules here and filter on the attr first.
      var attr = lastsel.attrname;
      var atab = this._attrRules[ attr ];
      if ( ! atab ) { atab = this._attrRules[ attr ] = {}; }
      var val = lastsel.attrvalue;
      var vtab = atab[val];
      if (! vtab ) { vtab = atab[val] = []; }
      vtab.push(r);
    } else if (lastsel.type == this._sel_id) {
      var id = lastsel.id;
      if ( !this._idRules[ id ] ) { this._idRules[ id ] = []; }
      this._idRules[ id ].push( r );
    } else if (lastsel.type == this._sel_tag) {
      var tag = lastsel.tagname;
      if ( !this._tagRules[ tag ] ) { this._tagRules[ tag ] = []; }
      this._tagRules[ tag ].push( r );
    } else {
      // * rules end up here
      this._rules.push( r );
    }
  };

  /** @access private */
  function _parseSelector ( sel ) {
    switch ( typeof ( sel ) ){
      case "object":
        if (sel.simpleselector) {
          sel.type = this._sel_tagAndAttr;
          sel.tagname = sel.simpleselector;
        } else {
          sel.type = this._sel_attribute;
        }
        return sel;
        break;
      case "string":
        return this._parseStringSelector( sel );
        break;
    }
  };

  /** @access private */
  function _parseStringSelector ( sel ) {
    var parsed = { };
    if ( sel == "*" ) {
      parsed.type = this._sel_star;
    } else {
      var index = sel.indexOf("#");
      if (index >= 0) {
        // Assumption: there should only be one # in a selector
        parsed.id =  sel.substring(index + 1);
        parsed.type =  this._sel_id;
      } else {
        parsed.type =  this._sel_tag;
        parsed.tagname = sel;
      }

    }

    return parsed;
  };
};                              // End of LzCSSStyleClass

var LzCSSStyle = new LzCSSStyleClass ();
lz.CSSStyle = LzCSSStyleClass;  // publish



/** These objects implement
 * Interface CSSStyleDeclaration (introduced in DOM Level 2) from
 * http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
 */
class LzCSSStyleDeclaration {

  function LzCSSStyleDeclaration (){ };

  /** @access private */
  var _node = null;

  function getPropertyValue ( pname ){
    return LzCSSStyle.getPropertyValueFor( this._node , pname );
  };

  function setNode ( node ){
    this._node = node;
  };

};                              // End of LzCSSStyleDeclaration
lz.CSSStyleDeclaration = LzCSSStyleDeclaration; // publish
