/**
 * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @affects lzinstantiator
 * @access private
 * @topic LZX
 * @subtopic Runtime
 */

/**
 * <p><code>lz.Instantiator</code> is the single instance of the class
 * <code>lz.InstantiatorService</code>.</p>
 *
 * <p>The instantiator is responsible for timing the creation and
 * initialization of Laszlo applications. Because of Laszlo's
 * declarative style, applications must be instantiated in two passes
 * -- one where all of the objects are created and another where all
 * of the references are resolved. This ensures that order rarely
 * matters in an lzx file, and allows objects to refer to one another
 * without making the programmer worry about initialization order or
 * messy callbacks.</p>
 *
 * <p>If an OpenLaszlo application is slow to instantiate, LzNodes
 * supply the <xref linkend="LzNode.__ivars__.initstage"/>
 * attribute. The instantiator also has a few exposed methods and
 * attributes that can be used to control the instantiation behavior
 * of a Laszlo app.</p>
 *
 * @shortdesc Instatiation service.
 *
 * @access private
 */
public dynamic final class LzInstantiatorService extends LzEventable {

    /** @access private */
    var checkQDel :LzDelegate = null;

    /**
     * The instantiator service.  Also available as the global
     * <code>lz.Instantiator</code>.
     *
     * @type LzInstantiatorService
     * @keywords readonly
     * @devnote this should be a public getter to enforce readonly
     */
    static const LzInstantiator:LzInstantiatorService;

    /** @access private
     * @devnote AS3 does not allow private constructors, so we need the
     * error
     */
    function LzInstantiatorService () {
        super();
        //    if (LzInstantiatorService.LzInstantiator) {
        //      throw new Error("There can be only one LzInstantiator");
        //    }
        this.checkQDel = new LzDelegate( this, "checkQ" );
    }

    // Create the singleton
    LzInstantiatorService.LzInstantiator = new LzInstantiatorService();

    /** @access private */
    var halted :Boolean = false;
    /** @access private */
    var isimmediate :Boolean = false;
    /** @access private */
    var isdatareplicating :Boolean = false;
    /** @access private */
    var istrickling :Boolean = false;
    /** @access private */
    var isUpdating :Boolean = false;
    /** @access private */
    var safe :Boolean = true;
    /**
     * The length of time in miliseconds to spend
     * synchronously creating nodes before allowing an idle event to pass.
     * By default this is 500.
     * @type Number
     * @devnote empirical sweet spot at half second
     * @access private
     */
    var timeout :Number = 500;
    /** @access private */
    var makeQ :Array = [];
    /** @access private */
    var trickleQ :Array = [];
    /** @access private */
    var tricklingQ :Array = [];
    /** @access private */
    var datareplQ :Array = null;
    /** @access private */
    var dataQ :Array = [];
    /** @access private */
    var syncNew :Boolean = true;
    /**
     * The length of time to spend creating initstage=
     * "late" nodes before allowing an idle event to pass. By default this
     * is 10 miliseconds.
     * @type Number
     * @acess private
     */
    var trickletime :Number = 10;

    /**
     * @access private
     */
    function setSafeInstantiation (isSafe:Boolean) :void {
        this.safe = isSafe;
        if (this.instanceQ.length) {
            this.timeout = Infinity;
        }
    }

    /**
     * Instantiate the child array for a view. This will be instantiated
     * immediately, normally, or on the trickly depending on the state of the
     * service
     * @access private
     * @param LzNode v: The view to instantiate children for.
     * @param [LzNode] children: An array of children to create.
     * @access private
     */
    function requestInstantiation (v:LzNode, children:Array) :void {
        if (this.isimmediate) {
            this.createImmediate( v, children.concat() );
        } else {
            var c:Array = this.newReverseArray( children );
            if (this.isdatareplicating) {
                // add in reversed order
                this.datareplQ.push( c, v );
            } else if (this.istrickling) {
                this.tricklingQ.push( v, c );
            } else {
                this.makeQ.push( v, c );
                this.checkUpdate();
            }
        }
    }

    /**
     * @access private
     */
    function enableDataReplicationQueuing (rman:* /*LzReplicationManager*/) :void {
        if (this.isdatareplicating) {
            this.dataQ.push(this.datareplQ);
        } else {
            this.isdatareplicating = true;
        }
        this.datareplQ = [];
        if ($debug) {
            // add replication-manager
            this.datareplQ.push(rman);
        }
    }

    /**
     * @access private
     */
    function clearDataReplicationQueue (rman:* /*LzReplicationManager*/) :void {
        var drq:Array = this.datareplQ;
        if (this.dataQ.length > 0) {
            this.datareplQ = this.dataQ.pop();
        } else {
            this.isdatareplicating = false;
            this.datareplQ = null;
        }

        if ($debug) {
            // check integrity in debug-mode
            if (drq.shift() !== rman) {
                Debug.error("%w.clearDataReplicationQueue: expected %w", this, rman);
            }
        }

        // if ($debug) this.traceQ();

        // Find offset where to add new nodes. This is only important
        // when there are already pending nodes (of the same replication manager)
        // in the makeQueue, or the new nodes will be initiated in the
        // wrong order (LPP-495).
        var cpar:LzNode = rman.cloneParent;
        var mq:Array = this.makeQ;
        var mqlen:int = mq.length;
        var offset:int = mqlen;
        for (var i:int = 0; i < mqlen; i += 2) {
            if (mq[i].parent === cpar) {
                // found match, add all nodes before this entry
                offset = i;
                break;
            }
        }
        // (0, offset) are already the first two args of splice
        drq.push(0, offset);
        // datareplQ is a FIFO, but makeQ is a LIFO struct, so reverse
        drq.reverse();
        // NOTE: [20081226 anba] don't use Array.prototype.splice,
        // the context will be wrong, see flash player bug (FP-1250)
        mq.splice.apply(mq, drq);

        this.checkUpdate();
    }

    /**
     * @access private
     */
    function newReverseArray (arr) :Array {
        // return arr.concat().reverse();
        var n:int = arr.length;
        var a:Array = Array(n);
        for (var i:int = 0, j:int = n - 1; i < n;) {
            a[i++] = arr[j--];
        }
        return a;
    }

    /**
     * @access private
     */
    function checkUpdate () :void {
        if (! (this.isUpdating || this.halted)) {
            this.checkQDel.register( lz.Idle, "onidle" );
            this.isUpdating = true;
        }
    }

    /**
     * @access private
     *
     * N.B.: [hqm 2008-03] This gets an event timer arg from the onidle event, which we ignore
     */
    function checkQ (ignoreme = null) :void {
        if (! this.makeQ.length) {
            if (! this.tricklingQ.length) {
                if ( !this.trickleQ.length) {
                    this.checkQDel.unregisterAll();
                    this.isUpdating = false;
                    return;
                } else {
                    var p:LzNode = this.trickleQ.shift();
                    var c:Array = this.trickleQ.shift();
                    this.tricklingQ.push( p, this.newReverseArray( c ) );
                }
            }
            this.istrickling = true;
            this.makeSomeViews( this.tricklingQ, this.trickletime );
            this.istrickling = false;
        } else {
            canvas.creatednodes += this.makeSomeViews( this.makeQ,
                                                       this.timeout );
            if (canvas.updatePercentCreatedEnabled) {
                canvas.updatePercentCreated();
            }
        }
    }

    /**
     * @access private
     */
    function makeSomeViews (cq:Array, otime:Number) :int {
        var itime:Number = ((new Date()).getTime());
        var num:int = 0;
        while (((new Date()).getTime()) - itime < otime && cq.length) {
            //take rightmost element of last list in list
            var len:int = cq.length;
            var larr:Array = cq[len-1];
            var par:LzNode = cq[len-2];
            var parDone:Boolean = false;
            // Don't bother with children of deleted parents
            if (par['__LZdeleted'] || (larr[0] && larr[0]['__LZdeleted'])) {
                cq.length -= 2;
                continue;
            }
            // Use try/finally to make sure we unwind properly in the face
            // of an error
            try {
                if ($profile) {
                    // Charge asynchronous time to parent views
                    var pq:Array = [];
                    for (var i:int = 0; i <= len - 2; i += 2) {
                        var nm:* = cq[i]['_profile_instantiator_name'] || 'unknown';
                        if (nm) {
                            Profiler.event(nm, 'calls');
                            pq.push(nm);
                        }
                    }
                }
                // Make leaves
                while (( (new Date()).getTime() - itime < otime)) {
                    // Check for new leaves
                    if (len != cq.length) { break; }
                    // Check for done
                    if (! larr.length) { parDone = true; break; }
                    var c:Object = larr.pop();
                    // FIXME: [2005-03-24 ptw] Somehow there are undefined
                    // entries on the queue?
                    if (c) {
                        par.makeChild( c, true );
                        num++;
                    }
                }
            } finally {
                // Unwind parent view 'calls'
                if ($profile) {
                    while (pq.length) { 
                        Profiler.event(pq.pop(), 'returns'); 
                    }
                }
            }
            // Clear from queue
            if (parDone) {
                cq.length = len - 2;
                par.__LZinstantiationDone();
            }
        }

        return num;
    }

    /**
     * @access private
     */
    function trickleInstantiate (v:LzNode, children:Array) :void {
        this.trickleQ.push( v, children );
        this.checkUpdate();
    }

    /**
     * @access private
     */
    function createImmediate (v:LzNode, children:Array) :void {
        var c:Array = this.newReverseArray( children );
        var wasimmediate:Boolean = this.isimmediate;
        this.isimmediate = true;
        this.makeSomeViews( [ v, c ], Infinity );
        this.isimmediate = wasimmediate;
    }

    /**
     * @access private
     */
    function completeTrickle (v:LzNode) :void {
        if (this.tricklingQ[ 0 ] == v) {
            var wasimmediate:Boolean = this.isimmediate;
            this.isimmediate = true;
            this.makeSomeViews( this.tricklingQ, Infinity );
            this.isimmediate = wasimmediate;
            this.tricklingQ = [];
        } else {
            var tq:Array = this.trickleQ;
            var tql:int = tq.length;
            for (var i:int = 0; i < tql; i += 2) {
                if (tq[ i ] == v) {
                    var dchil:Array = tq[ i + 1 ];
                    tq.splice( i, 2 );
                    this.createImmediate( v, dchil );
                    return;
                }
            }
        }
    }

  if ($debug) {
    /**
     * @access private
     */
    function traceQ () :void {
        Debug.info( "****start trace" );
        var mq:Array = this.makeQ;
        for (var i:int = 0; i < mq.length; i += 2) {
            var par:LzNode = mq[i];
            var larr:Array = mq[i + 1];
            var s:String = "";
            for (var k:int = 0; k < larr.length; k++) {
                s += larr[ k ]['class'].tagname + " |";
            }
            Debug.write( "%w : |%s >>> %s", par, s, par.getUID() );
        }
        Debug.info( "****trace done" );
    }
  }

    /**
     * Stops the instantiatior until <code>resume</code> is called.
     */
    function halt () :void {
        this.isUpdating = false;
        this.halted = true;
        this.checkQDel.unregisterAll();
    }

    /**
     * Restarts the instantiatior after it is stopped with <code>halt</code>
     */
    function resume () :void {
        this.halted = false;
        this.checkUpdate();
    }

    /**
     * Used by Krank to instantiate all views before kranking
     * @param limit:number limits time spent draining
     * @return boolean true when done
     * @access private
     */
    function drainQ (limit:Number) :Boolean {
        var to:Number = this.timeout;
        var tt:Number = this.trickletime;
        var h:Boolean = this.halted;

        this.timeout = limit;
        this.trickletime = limit;
        this.halted = false;
        this.isUpdating = true;
        this.checkQ();

        this.halted = h;
        this.timeout = to;
        this.trickletime = tt;
        return (! this.isUpdating);
    }

} // End of LzInstantiatorService

/**
 * lz.Instantiator is a shortcut for <link linkend="LzInstantiatorService.LzInstantiator">lz.InstantiatorService.LzInstantiator</link>
 * @type LzInstantiatorService
 */
lz.Instantiator = LzInstantiatorService.LzInstantiator;
