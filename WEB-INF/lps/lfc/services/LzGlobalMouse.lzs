/**
 *
 * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @affects lzglobalmouse
 * @access public
 * @topic LFC
 * @subtopic Services
 */

/**
 * <p>The <code>LzGlobalMouse</code> service sends events any time the
 * mouse button state changes, even if mouse events are locked using
 * the <classname>LzModeManager</classname> API. The LzGlobalMouse is
 * also useful for detecting when the mouse button goes up or down on
 * a non-clickable view.</p>
 *
 * <example><programlisting><![CDATA[
 * <canvas height="100">
 *   <simplelayout inset="10" spacing="10"/>
 *
 *   <checkbox>Lock mouse events
 *     <handler name="onvalue">
 *       if (this.value){
 *         LzModeManager.globalLockMouseEvents();
 *       }
 *     </handler>
 *
 *     <handler name="onclick" reference="LzGlobalMouse" args="who">
 *       //need to use LzGlobalMouse, since we don't get clicks if we're
 *       //checked. Note: LzGlobalMouse sends its events before the view
 *       //receives the events, so we can just unlock it here, and the
 *       //checkbox can do its normal onclick handling.
 *       if (this.value &amp;&amp; who == this){
 *         LzModeManager.globalUnlockMouseEvents();
 *       }
 *     </handler>
 *   </checkbox>
 *
 *   <button>click me!</button>
 *
 *   <text resize="true">
 *     <method name="showEvent" args="what, who">
 *       this.format("%s: %w", what, who);
 *     </method>
 *
 *     <handler name="onmouseover" reference="<em>LzGlobalMouse</em>" args="who">
 *       this.showEvent("mouseover" , who);
 *     </handler>
 *     <handler name="onmouseout" reference="<em>LzGlobalMouse</em>" args="who">
 *       this.showEvent("mouseout" , who);
 *     </handler>
 *
 *     <handler name="onmousedown" reference="<em>LzGlobalMouse</em>" args="who">
 *       this.showEvent("mousedown" , who);
 *     </handler>
 *     <handler name="onmouseup" reference="<em>LzGlobalMouse</em>" args="who">
 *       this.showEvent("mouseup" , who);
 *     </handler>
 *
 *     <handler name="onclick" reference="<em>LzGlobalMouse</em>" args="who">
 *       this.showEvent("mouseclick" , who);
 *     </handler>
 *   </text>
 * </canvas>
 * ]]></programlisting></example>
 *
 * <p>Use the LzGlobalMouse service in conjunction with <classname>LzModeManager</classname>'s event lock.</p>
 *
 * @shortdesc Application-wide control of and information about the mouse.
 * @see mode example
 *
 * @devnote The global mouse service sends onmouse*** and onclick events when the mouse
 * rollover or button state changes.  The argument sent with the events is the
 * view that was clicked. If no view was clicked, the argument is null.
 */
public class LzGlobalMouseService extends LzMiniNode {
  /**
   * The global mouse service.  Also available as the global
   * <code>LzGlobalMouse</code>.
   *
   * @type LzGlobalMouseService
   * @keywords readonly
   * @devnote this should be a public getter to enforce readonly
   */
  static var LzGlobalMouse:LzGlobalMouseService;

  /** @access private
   * @devnote AS3 does not allow private constructors, so we need the
   * error
   */
  function LzGlobalMouseService() {
    //    if (LzGlobalMouseService.LzGlobalMouse) {
    //      throw new Error("There can be only one LzGlobalMouse");
    //    }
  }
  LzGlobalMouseService.LzGlobalMouse = new LzGlobalMouseService;

  /** Sent whenever the mouse moves
   * @access public
   * @lzxtype event
   */
  var onmousemove = LzDeclaredEvent;

  /** Sent whenever the mouse button goes up
   * @access public
   * @lzxtype event
   */
  var onmouseup = LzDeclaredEvent;

  /** Sent whenever the mouse button goes up outside the view where it
   * first went down
   * @access public
   * @lzxtype event
   */
  var onmouseupoutside = LzDeclaredEvent;

  /** Sent whenever the mouse enters a view
   * @access public
   * @lzxtype event
   */
  var onmouseover = LzDeclaredEvent;

  /** Sent whenever the mouse leaves a view
   * @access public
   * @lzxtype event
   */
  var onmouseout = LzDeclaredEvent;

  /** Sent whenever the mouse button goes down
   * @access public
   * @lzxtype event
   */
  var onmousedown = LzDeclaredEvent;

  /** Sent whenever the mouse is dragged in to a view
   * @access public
   * @lzxtype event
   */
  var onmousedragin = LzDeclaredEvent;

  /** Sent whenever the mouse is dragged out of a view
   * @access public
   * @lzxtype event
   */
  var onmousedragout = LzDeclaredEvent;

  /** Sent whenever the mouse button is clicked
   * @access public
   * @lzxtype event
   */
  var onclick = LzDeclaredEvent;

  /** @access private */
  var __movecounter = 0;

  /** @access private */
  function __mouseEvent (eventname, view) {
    if (eventname == 'onmousemove') { this.__movecounter++; }
    var ev = this[eventname];
    if (ev) {
      if (ev.ready) { ev.sendEvent(view); }
    } else if ($debug) {
      Debug.debug("Unknown mouse event %s", eventname);
    }
  }
}

/**
 * @shortdesc Alias for <link linkend="LzGlobalMouseService">LzGlobalMouseService.LzGlobalMouse</link>
 */
var LzGlobalMouse = LzGlobalMouseService.LzGlobalMouse;
