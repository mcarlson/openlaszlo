/**
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @affects lzbrowser
  * @access public
  * @topic LFC
  * @subtopic Services
  */

/**
  * <p><code>lz.Focus</code> is the single instance of the class
  * <code>lz.FocusService</code>.</p>
  *
  * <p>This service manages the keyboard focus.  At any time, at most one view
  * has the keyboard focus.  This is the view that receives key events
  * when a key is pressed.</p>
  * <p>
  * See <a href="${dguide}input-devices.html">The Software Developer's Guide</a> for a discussion of keyboard focus.
  * </p>
  * <p>Note that the view.getNextSelection() and view.getPrevSelection() methods can be overridden to change the tab order</p>
  *
  * @shortdesc Handles keyboard focus.
  */
public dynamic final class LzFocusService extends LzEventable {

    /** Sent when the focus changes, with the argument being the view
     * that was just focused. If nothing is focused, this event is sent with null.
     * @access public
     * @lzxtype event
     */
    var onfocus :LzDeclaredEventClass = LzDeclaredEvent;

    /** Sent when the last focusable object has been reached.
     * @access public
     * @lzxtype event
     */
    var onescapefocus :LzDeclaredEventClass = LzDeclaredEvent;

    /** A reference to the last view that held the focus
     * @type LzView
     * @keywords readonly
     */
    var lastfocus :LzView = null;
    /** @access private */
    var csel :LzView = null;
    /** @access private */
    var cseldest :LzView = null;

    /** The focus service. Also available as the global
     * <code>lz.Focus</code>.
     *
     * @type LzFocusService
     * @keywords readonly
     * @devnote this should be a public getter to enforce readonly
     */
    public static const LzFocus:LzFocusService;

    /** @access private
     * @devnote AS3 does not allow private constructors, so we need the
     * error
     */
    function LzFocusService () {
        super();
        //    if (LzFocusService.LzFocus) {
        //      throw new Error("There can be only one LzFocus");
        //    }
        this.upDel = new LzDelegate(this, "gotKeyUp", lz.Keys, "onkeyup");
        this.downDel = new LzDelegate(this, "gotKeyDown", lz.Keys, "onkeydown");
        // This must be registered here after both lz.Focus and lz.Keys are initted
        this.lastfocusDel = new LzDelegate(lz.Keys, "gotLastFocus", this, "onescapefocus");
    }

    // Create the singleton
    LzFocusService.LzFocus = new LzFocusService();

    /** @access private */
    var upDel :LzDelegate;
    /** @access private */
    var downDel :LzDelegate;
    /** @access private */
    var lastfocusDel :LzDelegate;

    /** This attribute is set to true when the focus has moved
     * because the user has hit the next or prev focus key (usually 'tab' and
     * 'shift-tab'.) If the focus moves due to mouse-click the value is set to
     * false. If the focus moves through programmatic control, the value is
     * unchanged from its last value.
     * @type Boolean
     * @keywords readonly
     */
    var focuswithkey :Boolean = false;

    /** @access private */
    var __LZskipblur :Boolean = false;
    /** @access private */
    var __LZsfnextfocus :* = -1;
    /** @access private */
    var __LZsfrunning :Boolean = false;

    /**
     * @access private
     */
    function gotKeyUp (kC) :void {
        if (this.csel && this.csel.onkeyup.ready)
            this.csel.onkeyup.sendEvent( kC );
    }

    /**
     * @access private
     */
    function gotKeyDown (kC) :void {
        if (this.csel && this.csel.onkeydown.ready)
            this.csel.onkeydown.sendEvent( kC );
        if (kC == lz.Keys.keyCodes.tab) {
            if (lz.Keys.isKeyDown( 'shift' )) {
                this.prev();
            } else {
                this.next();
            }
        }
    }

    /**
     * Called from lz.ModeManager#handleMouseEvent() on "onmousedown"
     * @access private
     */
    function __LZcheckFocusChange (v:LzView) :void {
        if (v.focusable) {
            this.setFocus( v, false );
        }
    }

    /**
     * Set the focus to the given view.  If this is not the currently
     * focused view, an onblur event is sent to the currently focused view,
     * and an onfocus event is sent to the new view. When setFocus is called as the
     * result of an onblur or onfocus event, all the delegates registered for the
     * event run before the next setFocus call is made. While it is not an error
     * for multiple responders to call setFocus as the result of the same onfocus
     * or onblur event, only one of the calls will be executed.
     *
     * The state of the view may be unknown during the blur/focus process. When
     * a view loses focus, its blurring variable is set to true during the
     * process.
     *
     * @param LzView newsel: The view to focus or null to clear focus
     */
    function setFocus (newsel:LzView, fwkey:* = null) :void {
        //undocumented attribute focuswithkey. If the second argument to this
        //method is defined, it sets the value of this.focuswithkey to the given
        //value.

        if (this.__LZsfrunning) {
            // another focus-change is currently running, 
            // remember new selection and return
            this.__LZsfnextfocus = newsel;
            return;
        }

        if (this.cseldest == newsel) {
            // don't change focus if focused view didn't change
            return;
        }

        var prevsel:LzView = this.csel;
        if (prevsel && !prevsel.shouldYieldFocus()) {
            // current selection does not allow a focus change
            return;
        }

        if (newsel && !newsel.focusable) {
            newsel = this.getNext(newsel);
            if (this.cseldest == newsel) {
                // don't change focus if focused view didn't change
                return;
            }
        }

        if (prevsel) {
            // Give the view warning that it will be losing focus
            prevsel.blurring = true;
        }

        // acquire focus lock
        this.__LZsfnextfocus = -1;
        this.__LZsfrunning = true;
        this.cseldest = newsel;

        if (fwkey != null) {
            this.focuswithkey = !!fwkey; //coerce to boolean
        }

        // check skipblur-flag to prevent multiple "onblur" events
        if (! this.__LZskipblur) {
            this.__LZskipblur = true;
            if (prevsel && prevsel.onblur.ready) {
                prevsel.onblur.sendEvent( newsel );
                var next:* = this.__LZsfnextfocus;
                if (next != -1) {
                    // we've been called again because of dispatching "onblur"
                    if (next && !next.focusable) {
                        next = this.getNext(next);
                    }
                    if (next != newsel) {
                        // but only re-set focus if selection did change
                        this.__LZsfrunning = false;
                        this.setFocus( next );
                        return;
                    }
                }
            }
        }

        //now focus changes
        this.lastfocus = prevsel;
        this.csel = newsel;
        this.__LZskipblur = false;

        if (prevsel) {
            // The focus is changed.
            prevsel.blurring = false;
        }


        // canvas.accessible && dhtml
        if ($dhtml && canvas.accessible) {
            if (newsel && newsel.sprite != null) {
                newsel.sprite.aafocus();
            }
        }

        if (newsel && newsel.onfocus.ready) {
            newsel.onfocus.sendEvent( newsel );
            var next:* = this.__LZsfnextfocus;
            if (next != -1) {
                // we've been called again because of dispatching "onfocus"
                if (next && !next.focusable) {
                    next = this.getNext(next);
                }
                if (next != newsel) {
                    // but only re-set focus if selection did change
                    this.__LZsfrunning = false;
                    this.setFocus( next );
                    return;
                }
            }
        }

        if (this.onfocus.ready) {
            this.onfocus.sendEvent( newsel );
            var next:* = this.__LZsfnextfocus;
            if (next != -1) {
                // we've been called again because of dispatching "onfocus" (global)
                if (next && !next.focusable) {
                    next = this.getNext(next);
                }
                if (next != newsel) {
                    // but only re-set focus if selection did change
                    this.__LZsfrunning = false;
                    this.setFocus( next );
                    return;
                }
            }
        }

        // release focus lock
        this.__LZsfrunning = false;
    }

    /**
     * Remove the focus from the currently focused view (if there is one).
     * An 'onblur' event is first sent to the view.
     */
    function clearFocus () :void {
        this.setFocus( null );
    }

    /**
     * Get the currently focused view.
     * @return LzView: The view that has the focus, or null if none does.
     */
    function getFocus () :LzView {
        return this.csel;
    }

    /**
     * Move the focus to the next focusable view.
     */
    function next () :void {
        this.genMoveSelection( 1 );
    }

    /**
     * Move the focus to the previous focusable view.
     */
    function prev () :void {
        this.genMoveSelection( -1 );
    }

    /**
     * Returns the next focusable view.
     * @param LzView focusview: optional starting view. By default focusview
     * is the current focus.
     * @return LzView: The view that would be the next focus.
     */
    function getNext (focusview:LzView = null) :LzView {
        return this.moveSelSubview( focusview || this.csel, 1, false );
    }

    /**
     * Returns the previous focusable view.
     * @param LzView focusview: optional starting view. By default focusview
     * is the current focus.
     * @return LzView: The view that would be the focus if you shift tabbed
     */
    function getPrev (focusview:LzView = null) :LzView {
        return this.moveSelSubview( focusview || this.csel, -1, false );
    }

    /**
     * @access private
     */
    function genMoveSelection (movedir:int) :void {
        var sel:LzView = this.csel;
        var check:LzView = sel;
        while (sel && check != canvas) {
            if (! check.visible) {
                sel = null;
            }
            check = check.immediateparent;
        }

        if (sel == null) {
            sel = lz.ModeManager.getModalView();
        }
        
        var meth:String = "get" + (movedir == 1 ? "Next" : "Prev") + "Selection";
        var v:LzView = sel ? sel[meth]() : null;
        if (v == null) {
            v = this.moveSelSubview( sel, movedir, true );
        }
        if (lz.ModeManager.__LZallowFocus( v )) {
            this.setFocus( v, true );
        }
    }

    /**
     * Append those of v and its descendants that are focusable, to accum.
     * Always include 'include', and include focus traps but don't descend
     * into them unless this is the outermost call (and top=true).
     *
     * @access private
     */
    function accumulateSubviews (accum:Array, v:LzView, includep:LzView, top:Boolean) :void {
        // Always include the current view, even if it's not focusable,
        // since its index is used to find a focusable neighbor.
        if (v == includep || (v.focusable && v.visible))
            accum.push(v);
        // Don't descend into focus traps, except always consider children
        // of the outermost call.
        if (top || (!v.focustrap && v.visible))
            for (var i:int = 0; i < v.subviews.length; i++)
                this.accumulateSubviews(accum, v.subviews[i], includep, false);
    }

    /**
     * Return an item in the same focus group as v, either preceding it (mvdir==-1)
     * or following it (mvdir==1) in preorder.
     *
     * @access private
     */
    function moveSelSubview (v:LzView, mvdir:int, sendEsc:Boolean) :LzView {
        // Find the closest parent that doesn't cross a focus trap boundary.
        var root:LzView = v || canvas;
        // If v is a focus trap, make sure that we at least step up to its
        // parent, in order to tab to its siblings.
        // I don't think this is right, but I'm not 100% sure, so leaving comment
        // when do you have focustrap="true" and focusable="true" ?  -sa
        //  if (root.focustrap && root.immediateparent)
        //     root = root.immediateparent;

        // canvas.immediateparent == canvas.  No other cycles should be
        // present (although this will catch others of length one).
        while (!root.focustrap && root.immediateparent
               && root != root.immediateparent)
            root = root.immediateparent;
        // collect selectable children into focusgroup
        var focusgroup:Array = [];
        // TODO: [20081006 anba] this is slow, we need to come up with a faster alternative
        this.accumulateSubviews(focusgroup, root, v, true);

        // set index to the index of v within the current focus group.
        var index:int = -1;
        var fglen:int = focusgroup.length;
        var escape:Boolean = false;
        for (var i:int = 0; i < fglen; ++i) {
            if (focusgroup[i] === v) {
                escape = (mvdir == -1 && i == 0) || (mvdir == 1 && i == fglen - 1);
                index = i;
                break;
            }
        }

        if (sendEsc && escape) {
            this.onescapefocus.sendEvent();
        }

        // If the current focus group doesn't include v, mvdir==1 should select
        // the first item and mvdir==-1 should select the last item.  index==-1
        // and mvdir==1 will already work for the first case.  Fix the second:
        if (index == -1 && mvdir == -1)
            index = 0;
        // remember this is no modular arithmetic in a mathematical sense,
        // so we need to add 'focusgroup.length'
        index = (index + mvdir + fglen) % fglen;
        return focusgroup[index];
    }
}
lz.FocusService = LzFocusService;  // publish

/**
  * lz.Focus is a shortcut for <link linkend="LzFocusService">LzFocusService.LzFocus</link>
  * This service manages the keyboard focus. At any time, at most one view has the keyboard focus. This is the view that receives key events when a key is pressed.
  *
  * @shortdesc Handles keyboard focus.
  */
lz.Focus = LzFocusService.LzFocus;
