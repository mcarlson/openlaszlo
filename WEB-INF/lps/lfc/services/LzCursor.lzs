 /**
 *
 * @copyright Copyright 2001-2008, 2010 Laszlo Systems, Inc.  All Rights Reserved.
 *            Use is subject to license terms.
 *
 * @affects lzcursor
 * @access public
 * @topic LFC
 * @subtopic Services
 */

/**
 * <p><code>lz.Cursor</code> is the single instance of the class
 * <code>lz.CursorService</code>.</p>
 *
 * <p>This example shows how the cursor can be set on a view so that
 * it will change when the mouse is over that view:</p>
 *
 * <example title="Setting the cursor for a view">
 * &lt;canvas height="30"&gt;
 *   &lt;resource name="waitcursor" src="resources/lzwaitcursor_rsc.swf"/&gt;
 *   &lt;view bgcolor="yellow" cursor="waitcursor"&gt;
 *     &lt;text&gt;Roll over to change the cursor&lt;/text&gt;
 *   &lt;/view&gt;
 * &lt;/canvas&gt;
 * </example>
*
* <p>This example changes the cursor for 1/2 second when the button is
 * clicked:</p>
*
* <example title="Changing the cursor with lz.Cursor">
 * &lt;canvas height="30"&gt;
 *   &lt;resource name="waitcursor" src="resources/lzwaitcursor_rsc.swf"/&gt;
 *   &lt;button text="Click me to change the cursor for 1/2 second"&gt;
 *     &lt;handler name="onclick"&gt;
 *       lz.Cursor.setCursorGlobal('waitcursor');
 *       var del = new LzDelegate(lz.Cursor, 'unlock');
 *       lz.Timer.addTimer(del, 500);
 *     &lt;/handler&gt;
 *   &lt;/button&gt;
 * &lt;/canvas&gt;
 * </example>
 * @access public
 * @shortdesc LzCursorService provides methods for changing the mouse cursor.
 */
public final class LzCursorService extends LzEventable {
    /** The cursor service.  Also available as the global
     * <code>lz.Cursor</code>.
     *
     * @type LzCursorService
     * @keywords readonly
     * @devnote this should be a public getter to enforce readonly
     */
    public static const LzCursor:LzCursorService;

    /** @access private
     * @devnote AS3 does not allow private constructors, so we need the
     * error
     */
    public function LzCursorService () {
        super();
        // if (LzCursorService.LzCursor) {
        //  throw new Error("There can be only one LzCursor");
        // }
    }

    // Create the singleton
    LzCursorService.LzCursor = new LzCursorService();

    /**
     * Shows or hides the hand cursor for all clickable views.
     * @param Boolean show: true shows the hand cursor for buttons, false hides it
     */
    function showHandCursor (show:Boolean) :void {
        LzMouseKernel.showHandCursor(show);
    }

    /**
     * Sets the cursor to a resource
     * @param String resource: The resource to use as the cursor.
     */
    function setCursorGlobal (resource:String) :void {
        LzMouseKernel.setCursorGlobal(resource);
    }

    /**
     * Prevents the cursor from being changed until unlock is called.
     */
    function lock () :void {
        LzMouseKernel.lock();
    }

    /**
     * Restores the default cursor.
     */
    function unlock () :void {
        LzMouseKernel.unlock();
    }

    /**
     * Restores the default cursor if there is no locked cursor on
     * the screen.
     */
    function restoreCursor () :void {
        LzMouseKernel.restoreCursor();
    }

}
lz.CursorService = LzCursorService;  // publish

/**
 * lz.Cursor is a shortcut for <link linkend="LzCursorService.LzCursor">lz.CursorService.LzCursor</link>
 * @type LzCursorService
 */
lz.Cursor = LzCursorService.LzCursor;
