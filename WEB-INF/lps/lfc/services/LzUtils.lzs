/**
  * LzUtils.lzs
  *
  * @copyright Copyright 2007-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Services
  * @author Max Carlson &lt;max@openlaszlo.org&gt;
  */

// Global class with static methods for processing colors - required by the compiler for attribute type="color" conversion
class LzColorUtils {
    /** @access public
      * Converts a string to an a rgb.0a floating point 
      */
    static function stringToColor(s:*) {
        if (typeof s != 'string') return s;

        // look up color names
        if (lz.colors[s] != null) return lz.colors[s];

        // look in global scope
        if (global[s] != null) return global[s];

        // look up rgb values
        if (s.indexOf('rgb') != -1) return LzColorUtils.fromrgb(s);

        // Handle strings in the format '0xffffff' - see lzpix 
        var n = Number(s);

        if (isNaN(n)) {
            return s;
        } else {
            // this results in too many warnings (ultimately from the compiler):
            // stringToColor <- hextoint <- convertColor
            // ...
            //if ($debug) Debug.warn('LzColorUtils.stringToColor() was passed the string "%s" - please pass a numeric value instead.', s);
            return n;
        }
    }

    /** @access public
      * Converts a CSS rgba(r,g,b,a) string to a rgb.0a floating point
      */
    static function fromrgb(s:String) {
        if (typeof s != 'string') return s;
        if (s.indexOf('rgb') == -1) return LzColorUtils.stringToColor(s);

        var parts = s.substring(s.indexOf('(') + 1, s.indexOf(')')).split(',');

        var color = (parts[0] << 16) + (parts[1] << 8) + (parts[2] * 1);

        if (parts.length > 3) {
            color += parts[3] * .01;
        }

        if (typeof color == 'number') return color;

        if ($debug) {
            Debug.warn('invalid color string: ' + s);
        }
        return 0;
    }

    /** @access public
      * Converts a decimal number to hexadecimal with padding
      */
    static function dectohex(n:*, p:int = 0) {
        if (typeof n != 'number') return n;

        n = n & 0xffffff;
        var hex = n.toString(16);
        var pad = p - hex.length;
        while (pad > 0) {
            hex = '0' + hex;
            pad--;
        }
        return hex;
    }

    /** @access public
      * Converts a floating point rgb.0a to a CSS rgba(r,g,b,a) string 
      */
    static function torgb(s:*) {
        if (typeof s == 'string' && s.indexOf('rgb') != -1) return s

        var n = LzColorUtils.inttohex(s); 
        if (typeof n != 'string') return n;

        // catch cases like 'purple' or 0
        if (typeof s == 'number' || lz.colors[s] != null) s = n;

        // expand #036 or #0369
        if (s.length < 6) {
            s = '#' + s.charAt(1) + s.charAt(1) + 
                s.charAt(2) + s.charAt(2) + 
                s.charAt(3) + s.charAt(3) + 
                (s.length > 4 ? s.charAt(4) + s.charAt(4) : '');
        } 

        // #003366 or #00336699
        return (s.length > 7 ? 'rgba(' : 'rgb(' ) + 
            parseInt(s.substring(1, 3), 16) + ',' +
            parseInt(s.substring(3, 5), 16) + ',' +
            parseInt(s.substring(5, 7), 16) + 
            (s.length > 7 ? ',' + parseInt(s.substring(7), 16) : '') +
        ')';
    }

    /** @acess public
     * Converts a 24-bit rgb value to HSV
     * See http://en.wikipedia.org/wiki/HSL_color_space
     */
    static function tohsv(rgb) {
      var r = (rgb >> 16 & 0xff)/0xff, g = (rgb >> 8 & 0xff)/0xff, b = (rgb & 0xff)/0xff;
      var min = Math.min(r, Math.min(g, b)), max = Math.max(r, Math.max(g, b));
      var v = max;
      var delta = max - min;
      if( delta == 0 ) {
        return {h: 0, s: 0, v: v};
      }
      var s = delta / max;
      if ( r == max ) {
        // between yellow & magenta
        var h = ( g - b ) / delta;
      } else if ( g == max ) {
        // between cyan & yellow
        var h = 2 + (( b - r ) / delta);
      } else {
        // between magenta & cyan
        var h = 4 + (( r - g ) / delta);
      }
      h *= 60;                  // degrees
      if( h < 0 ) { h += 360; }
      return {h: h, s: s, v: v};
    }

    /** @acess public
     * Converts HSV to a 24-bit rbg value
     * See http://en.wikipedia.org/wiki/HSL_color_space
     */
    static function fromhsv(h, s, v) {
      var t = h / 60;
      var ti = Math.floor(t);
      var hi = ti % 6;
      var f = t - ti;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);
      var r, g, b;
      switch (hi) {
        case 0:
          r = v; g = t; b = p; break;
        case 1:
          r = q; g = v; b = p; break;
        case 2:
          r = p; g = v; b = t; break;
        case 3:
          r = p; g = q; b = v; break;
        case 4:
          r = t; g = p; b = v; break;
        case 5:
          r = v; g = p; b = q; break;
      }
      return ((r * 0xff) << 16) | ((g * 0xff) << 8) | (b * 0xff);
    }

    /** @access private
      * Handles conversion of colors from the compiler
      */
    static function convertColor(s:*) {
        // null values must be returned as-is
        if (s == 'null' || s == null) return null;
        return LzColorUtils.hextoint(s);
    }

    /** @access public
      * Converts a CSS #RRGGBBAA string to a rgb.0a floating point 
      */
    static function hextoint(s:*) {
        var n = LzColorUtils.stringToColor(s);
        if (typeof n != 'string') return n;

        var hex = s;

        // trim '#'
        hex = hex.slice(1);

        var alpha = 0;
        if (hex.length > 6) {
            alpha = parseInt(hex.slice(6), 16) / 25500;
            hex = hex.slice(0,6);
        }

        var n = parseInt(hex, 16);
        switch (hex.length) {
            case 3:
                return (((n & 0xf00) << 8 | (n & 0xf0) << 4 | (n & 0xf)) * 17) + alpha;
            case 6:
                return n + alpha;
            default:
                break;
        }

        if ($debug) {
            Debug.warn('invalid color string: ' + s);
        }
        return 0;
    }

    /** @access public
      * Converts a floating point rgb.0a to a CSS color name (if
      * appropriate) or #RRGGBBAA string
      */
    static function inttohex(n:*, p:int = 6) {
        var s = LzColorUtils.stringToColor(n);
        if (typeof s != 'number') return s;

        // default to 6 characters of padding
        return '#' + LzColorUtils.dectohex(s, p);
    }
}

class LzUtilsClass {
    /* @access private */
    var __SimpleExprPattern;
    /* @access private */
    var __ElementPattern;

    function LzUtilsClass() {
        this.__SimpleExprPattern = new RegExp('^\\s*([$_A-Za-z][$\\w]*)((\\s*\\.\\s*[$_A-Za-z][$\\w]*)|(\\s*\\[\\s*\\d+\\s*\\]))*\\s*$');
        // Now pull out just the element 'selectors', so you can walk down them 
        this.__ElementPattern = new RegExp('([$_A-Za-z][$\\w]*)|(\\d+)', 'g');
    }
    // ***** color *****

    // For back compatibility
    var color = {
            // For back compatibility
        hextoint: function hextoint (value) {
            if ($debug) Debug.warn('lz.Utils.color.hextoint() is deprecated.  Use LzColorUtils.hextoint() instead.');
            return LzColorUtils.hextoint(value);
        }

        ,inttohex: function inttohex (c) {
            if ($debug) Debug.warn('lz.Utils.color.inttohex() is deprecated.  Use LzColorUtils.inttohex() instead.');
            return LzColorUtils.inttohex(c);
        }

        ,torgb: function torgb (s) {
            if ($debug) Debug.warn('lz.Utils.color.torgb() is deprecated.  Use LzColorUtils.torgb() instead.');
            return LzColorUtils.torgb(s);
        }
    }

    /** @access public
      * Converts a CSS #RRGGBBAA string to a rgb.0a floating point 
      * @deprecated  Use LzColorUtils.hextoint() instead
      */
    public function hextoint(s:*) {
        if ($debug) Debug.deprecated(this, arguments.callee, LzColorUtils.hextoint);
        return LzColorUtils.hextoint(s);
    }

    /** @access public
      * Converts a floating point rgb.0a to a CSS #RRGGBBAA string
      * @deprecated  Use LzColorUtils.inttohex() instead
      */
    public function inttohex(n:*, p:int = 6) {
        if ($debug) Debug.deprecated(this, arguments.callee, LzColorUtils.inttohex);
        return LzColorUtils.inttohex(n, p);
    }

    /** @access public
      * Converts a decimal number to hexadecimal with padding
      */
    public function dectohex(n:*, p:int = 0) {
        return LzColorUtils.dectohex(n, p);
    }

    /** @access public
      * Converts a string to an a rgb.0a floating point 
      * @deprecated  Use LzColorUtils.stringToColor() instead
      */
    public function stringToColor(s:*) {
        if ($debug) Debug.deprecated(this, arguments.callee, LzColorUtils.stringToColor);
        return LzColorUtils.stringToColor(s);
    }

    /** @access public
      * Converts a floating point rgb.0a to a CSS rgba(r,g,b,a) string 
      * @deprecated  Use LzColorUtils.torgb() instead
      */
    public function torgb(s:*) {
        if ($debug) Debug.deprecated(this, arguments.callee, LzColorUtils.torgb);
        return LzColorUtils.torgb(s);
    }

    /** @access public
      * Converts a CSS rgba(r,g,b,a) string to a rgb.0a floating point
      * @deprecated  Use LzColorUtils.fromrgb() instead
      */
    public function fromrgb(s:String) {
        if ($debug) Debug.deprecated(this, arguments.callee, LzColorUtils.fromrgb);
        return LzColorUtils.fromrgb(s);
    }

    /** @access public
      * alias to lz.colors
      * @deprecated  Use lz.colors instead
      */
    var colornames = lz.colors;

    // Unpack a javascript list from a string, giving each item the appropriate type 
    function __unpackList(argstr:String, scope = null) {
        if (argstr == '') return [];
        if (scope == null) scope = canvas;
        var args = argstr.split(',');
        // cast arguments to type
        for (var i = 0; i < args.length; i++) {
            var a = args[i];
            if (a == '') continue;

            // strip whitespace
            while (a.charAt(0) == ' ') {
                a = a.substring(1, a.length);
            }

            var n = parseFloat(a);
            if (! isNaN(n)) {
                //number
                args[i] = n;
                //Debug.write('found number', args[i], a);
            } else if (a.indexOf("'") != -1) {
                // TODO - handle "
                var s = a.indexOf("'") + 1;
                var e = a.lastIndexOf("'");
                args[i] = a.substring(s, e);
                //Debug.write('found string', args[i], a);
            } else if (a == 'true' || a == 'false'){
                args[i] = a == 'true';
                //Debug.write('found boolean', args[i], a);
            } else if (scope[a]) {
                args[i] = scope[a];
                //Debug.write('found property', args[i], a);
            }
        }
        //Debug.write('__unpackList', argstr, args);
        return args;
    }

    /** @access public
      * 'eval' a method or property from a javascript string.
      */
    function safeEval(js:String) {
        // 'new' if the string begins with 'new '
        if (js.indexOf('new ') == 0) return this.safeNew(js);

        //Debug.write('safeEval', js);
        var s = js.indexOf('(')
        var argstr = null;
        if (s != -1) {
            var e = js.indexOf(')')
            argstr = (js.substring(s + 1, e))
            js = js.substring(0, s);
        }

        // Find the scope for a path expression.  
        // Simple "path" expressions will only have symbols, `.`, or `[numbers]`
        var scope = null, val;
        if (js.match(this.__SimpleExprPattern)) {
            var parts = js.match(this.__ElementPattern)
            val = globalValue(parts[0]);
            for (var i = 1, l = parts.length; i < l; i++) {
                scope = val;
                val = val[parts[i]];
                //Debug.write('found val', val);
            }
            //Debug.write('final val', val, scope);
        }

        if (argstr == null) {
            //Debug.write('no args, found val', val);
            return val;
        }

        var args = lz.Utils.__unpackList(argstr, scope);

        //Debug.write('found val', val,'in', scope, 'args', args);  
        // return values don't work for global scopes in swf9, e.g. 'lz.Browser.getVersion()' - see LPP-7008
        if (val) {
            var result = val.apply(scope, args);
            //Debug.write('result', result);
            return result;
        }
    }

    /** @access public
      * 'new' an object from a javascript string.  Must begin with 'new '.
      */
    function safeNew(js:String) {
        var orig = js;

        // strip 'new '
        var newpos = js.indexOf('new ');
        if (newpos == -1) return js;
        js = js.substring(newpos + 4);

        var s = js.indexOf('(')
        if (s != -1) {
            var e = js.indexOf(')')
            var args = (js.substring(s + 1, e));
            js = js.substring(0, s);
        }

        var obj = globalValue(js);
        if (! obj) return;

        var args = lz.Utils.__unpackList(args);
        // nasty... but at least it goes to 11!
        var size = args.length;
        if (size == 0) {
            return new obj();
        } else if (size == 1) {
            return new obj(args[0]);
        } else if (size == 2) {
            return new obj(args[0], args[1]);
        } else if (size == 3) {
            return new obj(args[0], args[1], args[2]);
        } else if (size == 4) {
            return new obj(args[0], args[1], args[2], args[3]);
        } else if (size == 5) {
            return new obj(args[0], args[1], args[2], args[3], args[4]);
        } else if (size == 6) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5]);
        } else if (size == 7) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        } else if (size == 8) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
        } else if (size == 9) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
        } else if (size == 10) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
        } else if (size == 11) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]);
        } else {
            if ($debug) Debug.warn('Too many arguments', args)
        }
    }
}

/**
 * @shortdesc Alias for <link linkend="LzUtilsClass">LzUtilsClass</link>
 */
lz.Utils = new LzUtilsClass();

/**
 * @deprecated
 * @shortdesc Alias for <link linkend="LzUtilsClass">LzUtilsClass</link>
 * Use lz.Utils instead.
 */
var LzUtils:LzUtilsClass = lz.Utils;
