/**
  * LzUtils.lzs
  *
  * @copyright Copyright 2007-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @topic Services
  * @author Max Carlson &lt;max@openlaszlo.org&gt;
  */

class ColorUtilsClass {
    // For back compatibility
    function hextoint (value) {
        Debug.info("LzUtils.color.hextoint is deprecated, use lz.Utils.hextoint");
        return lz.Utils.hextoint(value);
    }

    function inttohex (c) {
        Debug.info("LzUtils.color.inttohex is deprecated, use lz.Utils.inttohex");
        return lz.Utils.inttohex(c);
    }

    function torgb (s) {
        Debug.info("LzUtils.color.torgb is deprecated, use lz.Utils.torgb");
        return lz.Utils.torgb(s);
    }
}

class LzUtilsClass {
    // ***** color *****

    // For back compatibility
    var color = new ColorUtilsClass();

    // Converts a CSS #RRGGBBAA string to a rgb.0a floating point 
    public function hextoint(s:*) {
        var n = lz.Utils.stringToColor(s);
        if (typeof n != 'string') return n;

        var hex = s;

        // trim '#'
        hex = hex.slice(1);

        var alpha = 0;
        if (hex.length > 6) {
            alpha = parseInt(hex.slice(6), 16) / 25500;
            hex = hex.slice(0,6);
        }

        var n = parseInt(hex, 16);
        switch (hex.length) {
            case 3:
                return (((n & 0xf00) << 8 | (n & 0xf0) << 4 | (n & 0xf)) * 17) + alpha;
            case 6:
                return n + alpha;
            default:
                break;
        }

        if ($debug) {
            Debug.warn('invalid color string: ' + s);
        }
        return 0;
    }

    // Converts a floating point rgb.0a to a CSS #RRGGBBAA string
    public function inttohex(n:*, p:*) {
        var s = lz.Utils.stringToColor(n);
        if (typeof s != 'number') return s;

        // default to 6 characters of padding
        return '#' + this.dectohex(s, 6);
    }

    // Converts a decimal number to hexadecimal with padding
    public function dectohex(n:*, p:*) {
        if (typeof n != 'number') return n;
        p = p ? p : 0;

        n = n & 0xffffff;
        var hex = n.toString(16);
        var pad = p - hex.length;
        while (pad > 0) {
            hex = '0' + hex;
            pad--;
        }
        return hex;
    }

    // Converts a string to an a rgb.0a floating point 
    public function stringToColor(s:*) {
        if (typeof s != 'string') return s;

        // look up color names
        if (lz.Utils.colornames[s] != null) return lz.Utils.colornames[s];

        // look up rgb values
        if (s.indexOf('rgb') != -1) return this.fromrgb(s);

        // Handle strings in the format '0xffffff' - see lzpix 
        var n = Number(s);
        return isNaN(n) ? s : n;
    }

    // Converts a floating point rgb.0a to a CSS rgba(r,g,b,a) string 
    public function torgb(s:*) {
        if (typeof s == 'string' && s.indexOf('rgb') != -1) return s

        var n = lz.Utils.inttohex(s); 
        if (typeof n != 'string') return n;

        // catch cases like 'purple' or 0
        if (typeof s == 'number' || lz.Utils.colornames[s] != null) s = n;

        // expand #036 or #0369
        if (s.length < 6) {
            s = '#' + s.charAt(1) + s.charAt(1) + 
                s.charAt(2) + s.charAt(2) + 
                s.charAt(3) + s.charAt(3) + 
                (s.length > 4 ? s.charAt(4) + s.charAt(4) : '');
        } 

        // #003366 or #00336699
        return (s.length > 7 ? 'rgba(' : 'rgb(' ) + 
            parseInt(s.substring(1, 3), 16) + ',' +
            parseInt(s.substring(3, 5), 16) + ',' +
            parseInt(s.substring(5, 7), 16) + 
            (s.length > 7 ? ',' + parseInt(s.substring(7), 16) : '') +
        ')';
    }

    // Converts a CSS rgba(r,g,b,a) string to a rgb.0a floating point
    public function fromrgb(s:String) {
        if (typeof s != 'string') return s;
        if (s.indexOf('rgb') == -1) return this.stringToColor(s);

        var parts = s.substring(s.indexOf('(') + 1, s.indexOf(')')).split(',');

        var color = (parts[0] << 16) + (parts[1] << 8) + (parts[2] * 1);

        if (parts.length > 3) {
            color += parts[3] * .01;
        }

        if (typeof color == 'number') return color;

        if ($debug) {
            Debug.warn('invalid color string: ' + s);
        }
        return 0;
    }

    /**
      * CSS color names from
      * http://www.w3.org/TR/2001/WD-css3-color-20010305.  These match the
      * names in the compiler.
      * @access public
      */
    var colornames = {
        black: 0x000000
        ,green: 0x008000
        ,silver: 0xC0C0C0
        ,lime: 0x00FF00
        ,gray: 0x808080
        ,olive: 0x808000
        ,white: 0xFFFFFF
        ,yellow: 0xFFFF00
        ,maroon: 0x800000
        ,navy: 0x000080
        ,red: 0xFF0000
        ,blue: 0x0000FF
        ,purple: 0x800080
        ,teal: 0x008080
        ,fuchsia: 0xFF00FF
        ,aqua: 0x00FFFF
    }

    // Unpack a javascript list from a string, giving each item the appropriate type 
    function __unpackList(argstr, scope) {
        if (scope == null) scope = canvas;
        var args = argstr.split(',');
        // cast arguments to type
        for (var i = 0; i < args.length; i++) {
            var a = args[i];

            // strip whitespace
            while (a.charAt(0) == ' ') {
                a = a.substring(1, a.length);
            }

            var n = parseFloat(a);
            if (! isNaN(n)) {
                //number
                args[i] = n;
                //Debug.write('found number', args[i], a);
            } else if (a.indexOf("'") != -1) {
                // TODO - handle "
                var s = a.indexOf("'") + 1;
                var e = a.lastIndexOf("'");
                args[i] = a.substring(s, e);
                //Debug.write('found string', args[i], a);
            } else if (a == 'true' || a == 'false'){
                args[i] = a == 'true';
                //Debug.write('found boolean', args[i], a);
            } else if (scope[a]) {
                args[i] = scope[a];
                //Debug.write('found property', args[i], a);
            }
        }
        return args;
    }

    // 'eval' a method from a javascript string.  Starts looking for references in the canvas.
    function safeEval(js, arglist = null) {
        var scope = canvas;
        //Debug.write('callMethod', js);
        var s = js.indexOf('(')
        if (s != -1) {
            var e = js.indexOf(')')
            var args = (js.substring(s + 1, e))
            js = js.substring(0, s);
        }

        var path = js.split('.');
        for (var i = 0; i < path.length; i++) {
            var n = path[i];
            if (i == 0 && ! scope[n]) {
                // look in global scope if canvas lookup fails
                scope = global;
            }
            var lastscope = scope;
            scope = scope[n];
            //Debug.write('found', n, 'in scope', scope);  
        }

        var args = arglist == null ? lz.Utils.__unpackList(args) : arglist;

        //Debug.write('found scope', scope, 'args', args, 'for path', path);  
        return scope.apply(lastscope, args);
    }

    // Flash needs help referencing global classes :(
    var __as2globalclasses = {Number: Number, String: String, Boolean: Boolean, Date: Date, Array: Array, Object: Object, Function: Function};

    function __findClass(classname) {
        // short-circuting || would be much better - see LPP- 
        var obj = lz.Utils.__as2globalclasses[classname];
        if (obj) return obj;
        obj = global[classname];
        if (obj) return obj;
        obj = canvas[classname];
        if (obj) return obj;
        obj = lz[classname];
        if (obj) return obj;
    }

    // 'new' an object from a javascript string.  Must begin with 'new '.
    function safeNew(js, arglist = null) {
        var orig = js;

        // strip 'new '
        var newpos = js.indexOf('new ');
        if (newpos == -1) return js;
        js = js.substring(newpos + 4);

        var s = js.indexOf('(')
        if (s != -1) {
            var e = js.indexOf(')')
            var args = (js.substring(s + 1, e));
            js = js.substring(0, s);
        }

        var obj = lz.Utils.__findClass(js);
        if (! obj) return;

        var args = arglist == null ? lz.Utils.__unpackList(args) : arglist;
        // nasty... but at least it goes to 11!
        var size = args.length;
        if (size == 0) {
            return new obj();
        } else if (size == 1) {
            return new obj(args[0]);
        } else if (size == 2) {
            return new obj(args[0], args[1]);
        } else if (size == 3) {
            return new obj(args[0], args[1], args[2]);
        } else if (size == 4) {
            return new obj(args[0], args[1], args[2], args[3]);
        } else if (size == 5) {
            return new obj(args[0], args[1], args[2], args[3], args[4]);
        } else if (size == 6) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5]);
        } else if (size == 7) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        } else if (size == 8) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
        } else if (size == 9) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
        } else if (size == 10) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
        } else if (size == 11) {
            return new obj(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10]);
        }
    }

}

/**
 * @shortdesc Alias for <link linkend="LzUtilsClass">LzUtilsClass</link>
 */
lz.Utils = new LzUtilsClass();

/**
 * @deprecated
 * @shortdesc Alias for <link linkend="LzUtilsClass">LzUtilsClass</link>
 * Use lz.Utils instead.
 */
var LzUtils:LzUtilsClass = lz.Utils;
