/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @affects lzcontextmenu
  * @topic LFC
  * @subtopic Views
  */

/**
  * 
  * <p>
  * The <tagname>LzContextMenu</tagname> represents a context (right-click) menu.
  * </p>
  *
  * @shortdesc A contextual menu
  */
class LzContextMenu extends LzNode {

function LzContextMenu (del:LzDelegate = null) {
    this.kernel = new LzContextMenuKernel(this);

    this.items = [];
    // set callback
    this.setDelegate(del);
}

/** @access private
  * @modifiers override 
  */
static var tagname = 'contextmenu';

/**
  * @lzxtype event
  */
var onmenuopen:LzDeclaredEventClass = LzDeclaredEvent;

var kernel:LzContextMenuKernel = null;
var items:Array = null;


/**
  * Sets the delegate which will be called when the menu is opened
  * @param LzDelegate delegate: delegate which is executed when item is selected. An
  * onmenuopen event is also sent.
  * 
  * @access public
  */
function setDelegate (delegate:LzDelegate) :void {
    this.kernel.setDelegate(delegate);
}

/**
  * Adds a menu items into a menu
  * @param LzContextMenuItem item: LzContextMenuItem to install on this menu
  * @access public
  */
function addItem (item:LzContextMenuItem) :void {
    this.items.push(item);
    this.kernel.addItem(item);
}

/**
  * Removes Flash-installed default menu items
  * @access public
  */
function hideBuiltInItems () :void {
    this.kernel.hideBuiltInItems();
}

/**
  * Shows Flash-installed default menu items
  * @access public
  */
function showBuiltInItems () :void {
    this.kernel.showBuiltInItems();
}

/**
  * Remove all custom items from a menu
  * @access public
  */
function clearItems () :void {
    this.items = [];
    this.kernel.clearItems();
}

/**
  * Return list of custom items
  * @access public
  */
function getItems () :Array {
    return this.items;
}

/**
  * create a new menu item for a LzContextMenu
  * @param String title: menu item name
  * @param function callback:  delegate to execute when item is selected
  * @access public
  */
function makeMenuItem (title:String, callback:*) :LzContextMenuItem {
  var item:LzContextMenuItem = new LzContextMenuItem(title, callback);
  return item;
}

}; // End of LzContextMenu
lz[LzContextMenu.tagname] = LzContextMenu;  // publish



/**
  * <p>
  * The class <tagname>LzContextMenuItem</tagname> represents a menu item within a context menu.
  * </p>
  * 
  * @shortdesc A menu item within a context menu
  */
class LzContextMenuItem extends LzNode {

function LzContextMenuItem (title:String, del:*) {
    this.kernel = new LzContextMenuItemKernel(this, title, del);
};

/** @access private
  * @modifiers override 
  */
static var tagname = 'contextmenuitem';

var onselect:LzDeclaredEventClass = LzDeclaredEvent;

var kernel:LzContextMenuItemKernel = null;


/**
  * LzContextMenuItem.setDelegate
  * Sets the delegate which will be called when the menu item is selected
  * @param LzDelegate delegate: delegate which is executed when item is 
  * selected. An onselect event is also sent.
  * 
  * @access public
  */
function setDelegate (delegate:*) :void {
    this.kernel.setDelegate(delegate);
}

/**
  * LzContextMenuItem.setCaption
  * Sets the text string which is displayed for the menu item
  * @param String caption: text string to display
  * @access public
  */
function setCaption (caption:String) :void {
    this.kernel.setCaption(caption);
}

/**
  * LzContextMenuItem.getCaption
  * Gets the text string which is displayed for the menu item
  * @access public
  */
function getCaption () :String {
    return this.kernel.getCaption();
}

/**
  * LzContextMenuItem.setEnabled
  * @param boolean val: if false, menu item is grayed out and will not respond to clicks
  * @access public
  */
function setEnabled (val:Boolean) :void {
    this.kernel.setEnabled(val);
}

/**
  * LzContextMenuItem.separatorBefore
  * Draw a horizontal separator line before this item in the menu
  * @param boolean val: sets visibility of separator line
  * @access public
  */

function setSeparatorBefore (val:Boolean) :void {
    this.kernel.setSeparatorBefore(val);
}

/**
  * LzContextMenuItem.setVisible
  * Sets the visibility of the menu item
  * @param boolean val: sets visibility
  * @access public
  */
function setVisible (val:Boolean) :void {
    this.kernel.setVisible(val);
}

}; // End of LzContextMenuItem
lz[LzContextMenuItem.tagname] = LzContextMenuItem;  // publish
