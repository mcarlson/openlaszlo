/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @affects lzcontextmenu
  * @topic LFC
  * @subtopic Views
  */

/**
  * 
  * <p>
  * The <tagname>LzContextMenu</tagname> represents a context (right-click) menu.
  * </p>
  *
  * @shortdesc A contextual menu
  */
class LzContextMenu extends LzNode {

function LzContextMenu (del=null) {
    this.kernel = new LzContextMenuKernel(this);

    this.items = [];
    this.setDelegate(del);
}

//var onselect = LzDeclaredEvent;
/**
  * @lzxtype event
  */
var onmenuopen = LzDeclaredEvent;

var kernel:LzContextMenuKernel = null;
var items:Array = null;


/**
  * Sets the delegate which will be called when the menu is opened
  * @param LzDelegate delegate: delegate which is executed when item is selected. An
  * onmenuopen event is also sent.
  * 
  * @access public
  */
function setDelegate (delegate) {
    this.kernel.setDelegate (delegate);
}

/**
  * Adds a menu items into a menu
  * @param LzContextMenuItem item: LzContextMenuItem to install on this menu
  * @access public
  */
function addItem (item) {
    this.items.push(item);
    this.kernel.addItem (item);
}

/**
  * Removes Flash-installed default menu items
  * @access public
  */
function hideBuiltInItems () {
    this.kernel.hideBuiltInItems ();
}

/**
  * Remove all custom items from a menu
  * @access public
  */
function clearItems () {
    this.items = [];
}

/**
  * Return list of custom items
  * @access public
  */
function getItems () {
    return this.items;
}

/**
  * create a new menu item for a LzContextMenu
  * @param String title: menu item name
  * @param function callback:  delegate to execute when item is selected
  * @access public
  */
function makeMenuItem (title, callback) {
  var item = new LzContextMenuItem(title, callback);
  return item;
}

}; // End of LzContextMenu
lz.ContextMenu = LzContextMenu;  // publish



/**
  * <p>
  * The class <tagname>LzContextMenuItem</tagname> represents a menu item within a context menu.
  * </p>
  * 
  * @shortdesc A menu item within a context menu
  */
class LzContextMenuItem extends LzNode {

function LzContextMenuItem (title, del) {
    this.kernel = new LzContextMenuItemKernel(this, title, del);
};

var onselect = LzDeclaredEvent;

var kernel:LzContextMenuItemKernel = null;


/**
  * LzContextMenuItem.setDelegate
  * Sets the delegate which will be called when the menu item is selected
  * @param LzDelegate delegate: delegate which is executed when item is 
  * selected. An onselect event is also sent.
  * 
  * @access public
  */
function setDelegate (delegate) {
    this.kernel.setDelegate (delegate);
}

/**
  * LzContextMenuItem.setCaption
  * Sets the text string which is displayed for the menu item
  * @param String caption: text string to display
  * @access public
  */
function setCaption (caption) {
    this.kernel.setCaption (caption);
}

/**
  * LzContextMenuItem.getCaption
  * Gets the text string which is displayed for the menu item
  * @access public
  */
function getCaption () {
    return this.kernel.getCaption();
}


/**
  * LzContextMenuItem.setEnabled
  * @param boolean val: if false, menu item is grayed out and will not respond to clicks
  * @access public
  */
function setEnabled (val) {
    this.kernel.setEnabled (val);
}

/**
  * LzContextMenuItem.separatorBefore
  * Draw a horizontal separator line before this item in the menu
  * @param boolean val: sets visibility of separator line
  * @access public
  */

function setSeparatorBefore (val) {
    this.kernel.setSeparatorBefore (val);
}

/**
  * LzContextMenuItem.setVisible
  * Sets the visibility of the menu item
  * @param boolean val: sets visibility
  * @access public
  */
function setVisible (val) {
    this.kernel.setVisible (val);
}

}; // End of LzContextMenuItem
lz.ContextMenuItem = LzContextMenuItem;  // publish
