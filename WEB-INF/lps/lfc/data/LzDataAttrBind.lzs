/**
  *
  * @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access private
  * @topic LFC
  * @subtopic Data
  */
  
/** @access private */
dynamic class LzDataAttrBind extends LzDatapointer {

function LzDataAttrBind ( ndpath:LzDatapath, attr:String, path:String, type:String ){
    super (ndpath);
    this.type = type;
    this.setAttr = attr;
    this.pathparent = ndpath;
    this.node = ndpath.immediateparent;
    this.setXPath( path );

    this.rerunxpath = true; // From LzDatapointer
    if ( ndpath.__LZdepChildren == null ){
        ndpath.__LZdepChildren = [ this ];
    } else {
        ndpath.__LZdepChildren.push( this );
    }
}


// prototype.rerunxpath = true; // Override value defined in LzDatapointer

/** @access private */
var $pathbinding :Boolean = true;
/** @access private */
var setAttr :String;
/** @access private */
var pathparent :LzDatapath;
/** @access private */
var node :LzNode;
/** @access private */
var type :String;
/** @access private */
var __LZlast:int = -1;

/**
  * @access private
  */
override function __LZsendUpdate (upd:Boolean = false, upp:Boolean = false) :Boolean {
    var pchg:Boolean = this.__LZpchanged;
    var result:Boolean = super.__LZsendUpdate(upd, upp);
    if ( result ) {
        var data:* = this.data;
        var node:LzNode = this.node;
        var attr:String = this.setAttr;
        // "this test is necessary or properties can get set to
        // undefined"
        if (data == null) { data = null; }
        // NOTE: [2009-04-21 ptw] Not all $path bindings will result
        // in a String value, hence the above.  This is a little
        // sketchy, because most presentation types expect strings
        // here...
        var newvalue = lz.Type.acceptTypeValue(this.type, data, node, attr);
        if (pchg ||
                // Avoid updating if the value is not changing, to
                // minimize event cascades
                (node[ attr ] !== newvalue) ||
                // But we always update if the target is being inited, to
                // make sure the value is set correctly (and events
                // propagated) if the binding is being called to
                // initialize the target
                (! node.inited) ||
                // NOTE: [2009-04-22 ptw] (per a.bargull) this is
                // necessary if the $path is constrained to the
                // data-node's attributes (xpath @*), because you can't
                // use a simple identity test in that case.
                (this.parsedPath.operator == "attributes")) {
            node.setAttribute(attr, newvalue);
        }
    }
    return result;
}

/**
  * @access private
  */
override function destroy () {
    if (this.__LZdeleted) return;
    var dca:Array = this.pathparent.__LZdepChildren;

    if (dca != null) {
        for (var i:int = 0; i < dca.length; i++) {
            if ( dca [ i ] === this ){
                dca.splice( i , 1 );
                break;
            }
        }
    }

    super.destroy();
}

/**
  * @access private
  */
override function setDataContext (dc, implicit:Boolean = false) :void {
    super.setDataContext(dc || this.pathparent, implicit);
}

/**
  * @access private
  */
override function updateData() {
    this.__LZupdateData();
}

/**
  * @devnote: the function signature must match LzDatapath#__LZupdateData(Boolean)
  * @access private
  */
function __LZupdateData (recursive:Boolean = false) :void {
    //this code is largely copied from LzDatapath, but it's slightly different
    var ppdo = this.parsedPath.operator;
    if (ppdo != null) {
        var dat = this.node.presentAttribute(this.setAttr, this.type)
        //Debug.write('__LZupdateData', this.node, this.setAttr, this.type, dat, this.data);
        if (this.data != dat) {
            if (ppdo == "name") {
                this.setNodeName( dat );
            } else if (ppdo == "text") {
                this.setNodeText( dat );
            } else if (ppdo == "attributes") {
                this.p.$lzc$set_attributes( dat );
            } else {
                //remove the "attributes." from the operator
                this.setNodeAttribute( ppdo.substring( 11 ) , dat );
            }
        }
    }
}


/** @access private */
override function __LZHandleMultiNodes ( n:Array ) :LzReplicationManager { 
     var pp:LzParsedPath = this.parsedPath;
     if (pp && pp.aggOperator == 'last') {
       this.__LZlast = n.length;
       // you must provide a datacontext
       this.__LZHandleSingleNode( n[0] );
       return null;
     } else {
         return super.__LZHandleMultiNodes( n );
     }
}

/** @access private */
override function __LZgetLast () :int { 
    return this.__LZlast != -1 ? this.__LZlast : super.__LZgetLast();
}

/** @access private */
override function runXPath () :Boolean {
     this.__LZlast = -1;//don't forget clear value!
     return super.runXPath();
}


override function toString () /*:String*/ { 
    return 'binder ' + this.xpath;
}

if ($debug) {
     LzDataAttrBind.prototype._dbg_name = function () {
        return Debug.formatToString("%w.%s=\"$path{%w}\"", this.node, this.setAttr, this.xpath);
    }
}

} // End of LzDataAttrBind
