/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access private
  * @topic LFC
  * @subtopic Data
  */

/**
  * <p>Use the <tagname>connectiondatasource</tagname> tag to declare the
  * datasets that handle will handle the incoming data from a
  * <tagname>connection</tagname>. Unlike the
  * 
  * <tagname>connection</tagname> tag, the
  * <tagname>connectiondatasource</tagname> tag can be declared in
  * libraries.</p>
  * 
  * <p>You can use the connection datasource to send messages and receive the list
  * of connected users.</p>
  * 
  * <example title="Sending and receiving asynchronous messages" >
  * &lt;canvas debug="true" height="200" width="400"&gt;
  *   &lt;debug y="60"/&gt;
  * 
  *   &lt;connection authenticator="anonymous"&gt;
  *     &lt;handler name="onconnect"&gt;
  *       Debug.write("persistent connection established");
  *     &lt;/handler&gt;
  *     &lt;handler name="ondisconnect"&gt;
  *       Debug.write("persistent connection closed");
  *     &lt;/handler&gt;
  * 
  *   &lt;/connection&gt;
  * 
  *   &lt;connectiondatasource name="mycd"&gt;
  *     &lt;dataset name="dsetMessage" /&gt;
  *     &lt;dataset name="dsetXML" /&gt;
  *   &lt;/connectiondatasource&gt;
  * 
  *   &lt;!-- Datapointer to listen for persistent connection messages --&gt;
  *   &lt;datapointer xpath="mycd:dsetMessage:/*[1]"&gt;
  *     &lt;handler name="ondata"&gt;
  *       var from = this.xpathQuery('/from[0]/@name');
  *       var mesg = this.xpathQuery('/text()');
  *       Debug.write("got message (from " + from + "): '"+ mesg + "'");
  *     &lt;/handler&gt;
  *   &lt;/datapointer&gt;
  * 
  *   &lt;!-- Datapointer to listen for persistent connection XML messages --&gt;
  *   &lt;datapointer xpath="mycd:dsetXML:/*[1]"&gt;
  *     &lt;handler name="ondata"&gt;
  *       var mesg = this.xpathQuery('/myxml/text()');
  *       Debug.write("got xml mesg: '" + mesg + "'");
  *     &lt;/handler&gt;
  *   &lt;/datapointer&gt;
  * 
  *   &lt;!-- Datapointer to listen for result of sendMessage call. --&gt;
  *   &lt;datapointer xpath="mycd:sendMessageDset:/*[1]"&gt;
  *     &lt;handler name="ondata" args="d"&gt;
  *       Debug.write("d", d);
  *     &lt;/handler&gt;
  *     &lt;handler name="onerror" args="dset"&gt;
  *       Debug.write("error sending message: " + dset.errorstring);
  *     &lt;/handler&gt;
  * 
  *   &lt;/datapointer&gt;
  * 
  *   &lt;!-- Datapointer to listen for result of sendXML call. --&gt;
  *   &lt;datapointer xpath="mycd:sendXMLDset:/*[1]"&gt;
  *     &lt;handler name="ondata" args="d"&gt;
  *       Debug.write("d", d);
  *     &lt;/handler&gt;
  * 
  *     &lt;handler name="onerror" args="dset"&gt;
  *         Debug.write("error sending XML: " + dset.errorstring);
  *     &lt;/handler&gt;
  *   &lt;/datapointer&gt;
  *   
  *   &lt;view x="10" y="10" layout="class: simplelayout; axis: x; spacing: 10"&gt;
  *     &lt;button onclick="connection.connect()" text="connect" /&gt;
  *     &lt;button onclick="connection.disconnect()" text="disconnect" /&gt;
  * 
  *     &lt;button&gt;send hello
  *       &lt;handler name="onclick"&gt;
  *         mycd.sendMessage("*", "hello, world", "dsetMessage");
  *       &lt;/handler&gt;
  *     &lt;/button&gt;
  * 
  *     &lt;button&gt;send XML
  *       &lt;handler name="onclick"&gt;
  * 
  *       &lt;![CDATA[
  *           mycd.sendXML("*", "&lt;myxml&gt;hello, xml&lt;/myxml&gt;", "dsetXML");
  *       ]]&gt;
  *       &lt;/handler&gt;
  *     &lt;/button&gt;
  *   &lt;/view&gt;
  * &lt;/canvas&gt;
  * 
  * </example>
  * 
  * <p>See <i>The Persistent Connection</i> document for more information on the
  * connection datasource and the persistent connection.</p>
  * 
  * <h2>Sample-Apps</h2>
  * <p>Sample applications that use the &lt;connectiondatasource&gt; tag are:</p>
  * <ul>
  *     <li> <a href="${demos}chat/chat.lzx?lzt=html">Chat</a></li>
  * </ul>
  * 
  * <seealso>
  * <classes>connection</classes>
  * </seealso>
  * 
  * @shortdesc The connection datasource to receive and send messages through the
  *            persistent connection.
  * @lzxname connectiondatasource
  */

class LzConnectionDatasource extends LzDatasource {

/** @access private
  * @modifiers override 
  */
static var tagname = 'connectiondatasource';
  static var attributes = new LzInheritedHash(LzDatasource.attributes);

/**
  * @access private
  */
function construct (parent, args )
{
    super.construct.apply(this, arguments);

    // result datasets
    this.sendMessageDset = new LzDataset(this, { name: "sendMessageDset" } );
    this.sendXMLDset     = new LzDataset(this, { name: "sendXMLDset" } );
    this.getListDset     = new LzDataset(this, { name: "getListDset" } );
    this.sendMessageDset.queuerequests = true;
    this.sendXMLDset.queuerequests = true;
}

/**
  * @access private
  */
function init ()
{
    // TODO: [2003-09-29 pkang] check that connection is LzConnection.
    if ( connection == null ) {
        Debug.warn("connection has not been defined in the canvas.");
        return;
    }

    this.__LZisSecure   = connection.__LZisSecure;
    this.__LZsecurePort = connection.__LZsecurePort;

    this.sendMessageDset.secure = this.__LZisSecure; 
    this.sendMessageDset.secureport = this.__LZsecurePort;
    this.sendXMLDset.secure = this.__LZisSecure;
    this.sendXMLDset.secureport = this.__LZsecurePort;
    this.getListDset.secure = this.__LZisSecure;
    this.getListDset.secureport = this.__LZsecurePort;

    // Name of connection datasource defined after construct, so wait til init
    // to register with connection manager.
    if ( connection != null ) {
        connection.__LZregisterDatasource(this);
    }
}

/**
  * Called by LzDataset.
  * @access private
  */
function processRawData (dset, data)
{
    dset.setData(data.childNodes);
}

function getNewLoader (proxied) {
    if ( ! _root.$dataloaders ){
        _root.attachMovie("empty", "$dataloaders", 4242);
        var mc = _root.$dataloaders;
        mc.dsnum = 1;
    }

    _root.$dataloaders.attachMovie( "empty", 
                                   "dsloader" + _root.$dataloaders.dsnum,
                                   _root.$dataloaders.dsnum );
    var newloadermc = _root.$dataloaders[ "dsloader" + 
                                          _root.$dataloaders.dsnum ];
    _root.$dataloaders.dsnum++;
    
    //_root.Debug.write("dataset timeout", this.timeout);

    return new LzLoader( this, { attachRef : newloadermc ,
                                       timeout : this.timeout,
                                       proxied: proxied} );
}



function getLoaderForDataset ( forset, proxied ) {
    var tloader = forset.getOption( "dsloader" );

    if (typeof(forset.timeout) != "undefined" && forset.timeout != null) {
        tloader.timeout = forset.timeout;
    }

    // If there is no loader, or if the loader changed it's proxied
    // flag, make a new loader.
    if ( !tloader){
        tloader = this.getNewLoader(proxied);
        tloader.queuing = forset.queuerequests;
        forset.setOption( 'dsloader' , tloader );
        forset.setOption( 'dsloadDel' , 
                          new _root.LzDelegate( forset , "gotRawData" ,
                                                tloader , "ondata" ) );
        forset.setOption( 'dserrorDel' , 
                          new _root.LzDelegate( forset , "gotError" ,
                                                tloader , "onerror" ) );
        forset.setOption( 'dstimeoutDel' , 
                          new _root.LzDelegate( forset , "gotTimeout" ,
                                                tloader , "ontimeout" ) );
    }
    
    var secure = forset.secure;
    if (secure == null) {
        if (this.src.substring(0, 5) == "https") {
            secure = true;
        }
    }

    if (secure) {
        tloader.baserequest = _root.LzBrowser.getBaseURL( secure, forset.secureport );
        //_root.Debug.write('basereq ' + tloader.baserequest);
    }

    tloader.secure = secure;
    if (secure) {
        tloader.secureport = forset.secureport;
    }
    
    return tloader;
}

/**
  * @param LzDataset dset: passed by dataset calling parent
  * @access private
  */
function doRequest (dset) 
{
    var params = dset.getParams();
    var reqLoader = this.getLoaderForDataset(dset, true);

    // We don't want to cache requests
    reqLoader.doCacheRequest = false;

    var obj = {};
    for ( var k in params.d ) {
        var v = params.d[k];
        var key = v[0];
        var val = v[1];
        obj[key] = val;
    }

    //obj.url = LzBrowser.getBaseURL(forset.secure, forset.secureport );

    reqLoader.request(obj);
}


/**
  * Send a message. The results are returned in the datasource's sendMessageDset
  * dataset. The format of the message sent looks like:
  * 
  * <pre extract="false">
  * &lt;from name="name" /&gt;
  * message
  * </pre>
  * 
  * @param String to: name(s), e.g., "victor,sam", or "*" for all users
  * @param String mesg: message to send. This string will be XML escaped.
  * @param String dest: destination connection dataset
  */
function sendMessage (to, mesg, dest)
{
    connection.__LZsendMessage(to, mesg, dest, this.sendMessageDset);
}

/**
  * Send arbitrary XML. Result returned in the datasource's sendXMLDset.
  * The results are returned in the datasource's sendXMLDset dataset.
  * 
  * @param String to: name(s), e.g., "victor,sam", or "*" for all users
  * @param String xml: arbitrary XML message
  * @param String dest: destination connection dataset
  */
function sendXML (to, xml, dest)
{
    connection.__LZsendXML(to, xml, dest, this.sendXMLDset);
}

/**
  * Send arbitrary XML to users only (no agents). Result returned in
  * the datasource's sendXMLDset dataset.
  * 
  * @param String to: user name(s), e.g., "victor,sam", or "*" for all users
  * @param String xml: arbitrary XML message
  * @param String dest: destination connection dataset
  */
function sendUserXML (to, xml, dest)
{
    connection.__LZsendUserXML(to, xml, dest, this.sendXMLDset);
}

/**
  * Send arbitrary XML to agents only (no users). Result returned in
  * the datasource's sendXMLDset dataset.
  * 
  * @param String to: agent name(s), e.g., "victor,sam", or "*" for all users
  * @param String xml: arbitrary XML message
  */
function sendAgentXML (to, xml)
{
    connection.__LZsendAgentXML(to, xml, this.sendXMLDset);
}

/**
  * Verify which users are connected. Result returned in the datasource's 
  * getListDset dataset.
  * 
  * @param String users: name(s), e.g., "victor,sam", or "*" for all users
  */
function getList (users)
{
    connection.__LZgetList(users, this.getListDset);
}

/**
  * Get string representation of connection datasource.
  * @return String: representation of this object
  * @access private
  */
function toString() {
    return "LzConnectionDatasource '" + this.name + "'";
}

}; // End of LzConnectionDatasource
