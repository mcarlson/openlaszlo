/**
  *
  * @copyright Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access private
  * @topic LFC
  * @subtopic Data
  */

/**
  * @access private
  */
class LzParsedPath {

  /** 
    * The xpath for this LzParsedPath
    * 
    * @access private
    */
  var path:String = null;
  
  /** 
    * Array containing selector-operations for this LzParsedPath
    * 
    * @access private
    */
  var selectors:Array = null;
  
  /** 
    * Pointer to the dataset (if part of the path) otherwise null
    * (currently only used for "new"-datasets, see deprecated message)
    * 
    * @access private
    * @deprecated may lead to memory leaks (LPP-4214)
    */
  var context:* = null;
  
  /** 
    * Name of the dataset (if part of the path)
    * 
    * @access private
    */
  var dsetname:String = null;
  
  /** 
    * Name of the datasource (if part of the path)
    * 
    * @access private
    */
  var dsrcname:String = null;
  
  /** 
    * Array containing the path to the local-dataset
    * 
    * @access private
    */
  var islocaldata:Array = null;
  
  /* Parsing information */
  
  /** 
    * One of: "name", "text", "serialize", "attributes" 
    * or "attributes.xxx" with 'xxx' as an attribute-name
    * 
    * @access private
    */
  var operator:String = null;
  
  /** 
    * One of: "position" or "last" 
    * 
    * @access private
    */
  var aggOperator:String = null;
  
  /** 
    * true if terminal operator is a attribute-selector, otherwise false
    * 
    * @access private
    */
  var hasAttrOper:Boolean = false;
  
  /** 
    * true if path contains a attribute-predicate
    * 
    * @access private
    */
  var hasOpSelector:Boolean = false;
  
  /** 
    * true if path contains ".." or "//", otherwise false
    * 
    * @access private
    */
  var hasDotDot:Boolean = false;
  
  /** 
    * Return the context for this LzParsedPath
    * Should be used instead of accessing directly the deprecated field context. 
    *
    * @access private
    */
  function getContext (dp:LzDatapointer) {
      if (this.context != null) {
          return this.context;
      } else {
          if (this.islocaldata != null) {
              return dp.getLocalDataContext(this.islocaldata);
          } else {
              if (this.dsrcname != null) {
                  return (canvas[ this.dsrcname ])[ this.dsetname ];
              } else {
                  if (this.dsetname != null) {
                      return canvas.datasets[ this.dsetname ];
                  }
              }
          }
      }
      return null;
  }

function LzParsedPath (pa:String, node:*) {
    this.path = pa;
    this.selectors = [];
    
    var sourceindex = pa.indexOf( ":/" );

    if ( sourceindex > -1 ){
        //we have a dset and possible dsource
        var sourceparts = pa.substring( 0 , sourceindex ).split( ":" );
        if ( sourceparts.length > 1 ){
            var dsrc = LzParsedPath.trim( sourceparts[ 0 ] );
            var dset = LzParsedPath.trim( sourceparts[ 1 ] );
            if (dsrc == 'local') {
                this.islocaldata = dset.split('.');
            } else {
                //TODO: [20080321-anba] do we still support datasources?
                //we have a datasource and a dataset
                if ($debug) {
                    if ((canvas[ dsrc ])[ dset ] == null) {
                      Debug.error( "couldn't find dataset for %w (canvas[%#w][%#w])", pa, dsrc, dset );
                    }
                }
                this.dsrcname = dsrc;
                this.dsetname = dset;
            }
        } else {
            var name = LzParsedPath.trim( sourceparts[ 0 ] );
            if ( name == "new" ){
                //Debug.write( "setting to anondset" );
                this.context = new AnonDatasetGenerator( this );
        /*    } else if ( name == "localdata" ) {
                this.context = node.getLocalDataContext();
                Debug.write('found local dataset 2', this.context);
                this.islocaldata = true; 
        */
            } else {
                if ($debug) {
                    if (canvas.datasets[ name ] == null) {
                      Debug.error( "couldn't find dataset for %w (canvas.datasets[%#w])", pa, name );
                    }
                }
                this.dsetname = name;
            }
        }

        var rest = pa.substring( sourceindex + 2 );
    } else {
        var rest = pa;
    }

    // Too simple - see lpp-737
    // var nodes = rest.split( "/" );

    var nodes = [];
    var currnode = '';
    var instring = false;
    var escape = false;
    for (var i = 0; i < rest.length; i++) {
        var c = rest.charAt(i);
        if (c == '\\' && escape == false) {
            escape = true;
            continue;
        } else if (escape == true) {
            escape = false;
            currnode += c;
            continue;
        } else if (instring == false && c == "/") {
            // only count slashes as new nodes if we're not inside a string 
            // literal

            nodes.push(currnode);
            currnode = '';
            continue;
        } else if (c == "'") {
            instring = instring ? false : true;   
        }
        currnode += c;
    }
    nodes.push(currnode);
            

    if (nodes != null) {
        for ( var i = 0 ; i < nodes.length ; i++ ){
            var cnode = LzParsedPath.trim( nodes[ i ] );

            if ( i == nodes.length - 1 ){
                //could be terminal operator...
                if ( cnode.charAt( 0 ) == "@" ){
                    //attribute
                    this.hasAttrOper = true;
                    if ( cnode.charAt(1) == "*" ){
                        this.operator = "attributes";
                    } else {
                        this.operator = "attributes."  + 
                            cnode.substring( 1, cnode.length );
                    }
                    continue;
                } else if ( cnode.charAt( cnode.length -1 ) == ")" ){
                    //name, text , serialize
                    if ( cnode.indexOf( "last" ) > -1 ){
                        this.aggOperator = "last";
                    } else if ( cnode.indexOf( "position" ) > -1 ){
                        this.aggOperator = "position";
                    } else if ( cnode.indexOf( "name" ) > -1 ){
                        this.operator = "name";
                    } else if ( cnode.indexOf( "text" ) > -1 ){
                        this.operator = "text";
                    } else if ( cnode.indexOf( "serialize" ) > -1 ){
                        this.operator = "serialize";
                    } else if ($debug) {
                        Debug.warn( "Unknown operator: '%s'", cnode);
                    }
                    continue;
                } else if ( cnode == "" ){
                    //this is a trailing slash -- it should be ignored
                    continue;
                }
            }

            //parse predicates
            var preds = cnode.split( '[' );
            var n = LzParsedPath.trim( preds[ 0 ] );
            this.selectors.push ( n =="" ? "/" : n );

            if ( n =="" || n==".." ){
                this.hasDotDot = true;
            }
            if (preds != null) {
                for ( var j = 1; j < preds.length ; j++ ){
                    var pred = LzParsedPath.trim( preds[ j ] );
                    pred = pred.substring( 0, pred.length-1);
                    //Debug.write( 'predicate ' + pred );

                    if ( LzParsedPath.trim ( pred ).charAt( 0 ) == '@'){
                        //Debug.write( 'found predicate ' + pred ); 
                        var attrpred = pred.split( '=' );
                        var a;
                        var tattr = attrpred.shift().substring(1);

                        if ( attrpred.length > 0 ){
                            var aval = LzParsedPath.trim( attrpred.join( '=' ) );
                            aval = aval.substring( 1 , aval.length-1);
                            a = { pred : 'attrval' ,
                                  attr : LzParsedPath.trim( tattr ),
                                  val :  LzParsedPath.trim( aval  )};
                        } else {
                            a = { pred : 'hasattr',
                                  attr : LzParsedPath.trim( tattr )};
                        }

                        //Debug.write( a.pred , a.attr , a.val );
                        this.selectors.push( a );
                        this.hasOpSelector = true;
                    } else {
                        //we have an offset

                        var a = pred.split("-");
                        //Debug.write( 'offset ' + a );
                        a[ 0 ] = LzParsedPath.trim( a[ 0 ] );


                        if ( a[ 0 ] == "" ){
                            a[ 0 ] = 1;
                        }

                        if ( a[ 1 ] != null ){
                            a[ 1 ] = LzParsedPath.trim( a[ 1 ] );
                        }

                        if (  a[ 1 ] == "" ){
                            a[ 1 ] = Infinity;
                        } else if ( a.length == 1 ){
                            a[ 1 ] = a [ 0 ];
                        }

                        a.pred = "range";
                        this.selectors.push( a );
                    } 
                }
            }
        }
    }
}

/**
  * @access private
  */
static function trim (s:String):String {
    var st:Number = 0;
    var dotrim:Boolean = false;
    while (s.charAt( st ) == " ") {
        st++;
        dotrim = true;
    }

    var len:Number = s.length - st;

    while (s.charAt( st + len - 1 ) == " ") {
        len--;
        dotrim = true;
    } 

    return dotrim ? s.substr( st , len ) : s;
}
/**
  * @access private
  */
public function toString (  ){
    return  "Parsed path for path: " + this.path;
}

/**
  * TODO: [20080321-anba] only used for 'test/lfc/data/testdatapointer.lzx'? Deprecate and remove?
  * 
  * @access private
  */
function debugWrite (  ){
    if ($debug) {
        Debug.write( this );
        Debug.write( "  c:" + this.context + "|");
        Debug.write( "  n:" + this.selectors.join('|') + "|");
        Debug.write( "  d:" + this.operator + "|");
        Debug.write( "  " );
    }
}

} // End of LzParsedPath


/**
  * @access private
  */
class AnonDatasetGenerator extends LzEventable {

    /**
      * @access private
      */
    var pp:LzParsedPath = null;

    /**
      * @access private
      */
    var __LZdepChildren :Array = null;

    /**
      * @access private
      */
    var onDocumentChange :LzDeclaredEventClass = LzDeclaredEvent;

    /**
     * @access private
     */
    var onerror :LzDeclaredEventClass = LzDeclaredEvent;

    /**
     * @access private
     */
    var ontimeout :LzDeclaredEventClass = LzDeclaredEvent;

    /**
      * TODO: [20080321-anba] Where is this property used? Can it be removed?
      * 
      * @access private
      */
    var noncontext:Boolean = true;

    /**
      * @access private
      */
    function AnonDatasetGenerator (pp:LzParsedPath) {
        super();
        this.pp = pp;
    }

    /** 
      * This is the shared interface with datapointer
      * @access private
      */
    function getContext () {
        //@devnote: this creates an anonymous dataset
        var d:LzDataset = new LzDataset(null, {name: null});

        var ppsel:Array = this.pp.selectors;
        if (ppsel != null) {
            var dp:LzDatapointer = d.getPointer();
            for (var i:int = 0; i < ppsel.length; i++) {
                if (ppsel[ i ] == "/") continue;
                //TODO: test selector-type?
                dp.addNode( ppsel[ i ] );
                dp.selectChild();
            }
        }

        return d;
    }

    /** 
      * This is the shared interface with datapointer
      * @access private
      */
    function getDataset () {
        // we only create one-way datasets, so we can't provide this information
        return null;
    }

} // End of AnonDatasetGenerator
