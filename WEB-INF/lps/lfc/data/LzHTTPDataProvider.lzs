/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @access public
  * @topic LFC
  * @subtopic Data
  */


/**
  * <p>
  * <class>lz.HTTPDataProvider</class> implements the DataProvider interface, to support HTTP data requests.
  * </p>  
  * <p>
  * Requests are submitted using the <method>doRequest</method>, passing a  request
  * object of type <class>lz.HTTPDataRequest</class>. And instance of <class>lz.HTTPDataProvider</class> is the default
  * data provider for the runtime, and is what is used by <class>lz.dataset</class> to load data.
  * </p>
  * <p>
  * <event>onstatus</event>: Sent to a datarequest to update the status of the request.</p>
  *
  * @shortdesc DataProvider which implements HTTP request transport
  * @lzxname httpdataprovider
  *
  */
class LzHTTPDataProvider extends LzDataProvider {

    function LzHTTPDataProvider () {
        super();
    }  

    /** @access private
      * @param LzHTTPDataRequest dreq: The data request
      */
    function makeLoader (dreq:LzHTTPDataRequest) :LzHTTPLoader {
        var proxied:Boolean = dreq.proxied;
        // If there is no loader, or if the loader changed it's proxied
        // flag, make a new loader.
        var tloader:LzHTTPLoader = new LzHTTPLoader(this, proxied);
        dreq.loader = tloader;
        tloader.loadSuccess = this.loadSuccess;
        tloader.loadError   = this.loadError;
        tloader.loadTimeout = this.loadTimeout;

        tloader.setProxied(proxied);

        // TODO [hqm 2007-08] This code below to deal with secureport is likely broken, 
        // I need to understand what is the behavior of "secureport"
        /*************/
        // TODO [pbr 2008-08-04] dreq.secure will never be null
        var secure:Boolean = dreq.secure;
        if (secure == null) {
            if (dreq.src.substring(0, 5) == "https") {
                secure = true;
            }
        }
        
        tloader.secure = secure;
        if (secure) {
            tloader.baserequest = lz.Browser.getBaseURL(secure, dreq.secureport);
            tloader.secureport = dreq.secureport;
        }
        /*************/
    
        return tloader;
    }

    /**
     * Interrupts any load in progress for the given dataset.
     * @param LzDataRequest dreq: The data request for which to interrupt the load.
     * @access public
     */
    override function abortLoadForRequest (dreq:LzDataRequest) :void {
        (dreq cast LzHTTPDataRequest).loader.abort();
    }

    /**
     * @access public
     */
    override function doRequest (dreq:LzDataRequest) :void {
        var httpdreq = dreq cast LzHTTPDataRequest;
        
        // dreq.src can be null if the dataset is loaded from initialdata
        if (! httpdreq.src)
            return;

        //build request
        var proxied:Boolean = httpdreq.proxied;
        
        // Check for previously created loader, we can reuse it
        // TODO [hqm 2007-08] If multirequests is true, we make a new loader
        // for each request. Is this correct? 
        var tloader:LzHTTPLoader = httpdreq.loader;
        if (tloader == null || httpdreq.multirequest == true || httpdreq.queuerequests == true) {
            tloader = this.makeLoader( httpdreq );
        }

        tloader.dataRequest = httpdreq;

        tloader.setQueueing(httpdreq.queuerequests);
        tloader.setTimeout(httpdreq.timeout);

        tloader.setOption('serverproxyargs', httpdreq.serverproxyargs);
        tloader.setOption('cacheable',       httpdreq.cacheable == true);
        tloader.setOption('timeout',         httpdreq.timeout);
        tloader.setOption('trimwhitespace',  httpdreq.trimwhitespace == true);
        tloader.setOption('nsprefix',        httpdreq.nsprefix == true);
        tloader.setOption('sendheaders',     httpdreq.getresponseheaders == true);
        tloader.setOption('parsexml',        httpdreq.parsexml);

        if (httpdreq.clientcacheable != null) {
            tloader.setOption('ccache',      httpdreq.clientcacheable);
        }

        var headers:Object = {};
        var headerparams:LzParam = httpdreq.requestheaders;
        if (headerparams != null) {
            var headernames:Array = headerparams.getNames();
            for (var i:int = 0; i < headernames.length; i++) {
                var key:String = headernames[i];
                var val:String = headerparams.getValue(key);
                if (proxied) {
                    // Pass this to makeProxiedURL
                    headers[key] = val;
                } else {
                    // SOLO request, set these directly using the LzHTTPLoader API
                    tloader.setRequestHeader(key, val);
                }
            }
        }

        var qparams:LzParam = httpdreq.queryparams;

        // Default assume we are posting query data (key-value pairs)
        var hasquerydata:Boolean = true;

        // If an explicit post body content arg wasn't supplied, make
        // a url-form-encoded string from the queryparams data.
        var postbody:String = httpdreq.postbody;
        if (postbody == null && qparams != null) {
            // Convert queryparams table into a URL-encoded query-style string
            var sep:String = '';
            var q:String = '';
            
            var names:Array = qparams.getNames();
            for (var i:int = 0; i < names.length; ++i) {
                var name:String = names[i];
                q += sep + name + '=' + encodeURIComponent(qparams.getValue(name));
                sep = '&';
            }

            postbody = q;
        } else {
            //We are asking the swf8 runtime to treat this as raw data, as best it can
            hasquerydata = false;
        }

        tloader.setOption('hasquerydata', hasquerydata);

        var lzurl:LzURL = new LzURL(httpdreq.src);

        // For GET requests, merge in params data with URL query 
        if (httpdreq.method == "GET") {
            if (lzurl.query == null) {
                lzurl.query = postbody;
            } else {
                if (postbody != null) {
                    lzurl.query += ("&" + postbody);
                }
            }
            postbody = null;
        }

        var cachebreak:String = "__lzbc__=" + (new Date()).getTime();

        // [LPP-5368] If this is a SOLO POST request, with an empty
        // POST body, put the 'cache-breaking' arg into this post
        // body. This prevents the case of an empty POST body, which
        // would cause the Flash player to turn it into a GET request.
        //
        // We are going to go ahead and do this for all platforms, not
        // just SWF, in order to make things more consistent for the
        // app developer; they will get this magic arg added across
        // all platforms.
        if (!proxied && (httpdreq.method == "POST") && (postbody == null || postbody == '')) {
            postbody = cachebreak;
        }

        // convert url back to string
        var url:String;
        if (proxied) {
            // TODO [hqm 2007-08-03] make the API for makeProxiedURL take an explicit host arg,
            // so we can set the proxy from user code
            url = tloader.makeProxiedURL(httpdreq.proxyurl, lzurl.toString(), httpdreq.method, "xmldata" , headers, postbody);

            // We need to move the proxy string query data to the
            // postbody; can't leave it in the URL string since it
            // could be arbitrarily long.
            var marker:int = url.indexOf('?');
            var uquery:String = url.substring(marker + 1, url.length);
            var url_noquery:String = url.substring(0, marker);
            url = url_noquery + '?' + cachebreak;
            postbody = uquery;
        }  else {
            // break the browser cache by adding a unique string to the url
            if (! httpdreq.clientcacheable) {
                if (httpdreq.method == "GET") {
                    // GET case: add to url query portion
                    if (lzurl.query == null) {
                        lzurl.query = cachebreak;
                    } else {
                        lzurl.query += ("&" + cachebreak);
                    }
                }
            }

            url = lzurl.toString();
        }
   
        httpdreq.loadstarttime = (new Date()).getTime();

        httpdreq.status = LzDataRequest.LOADING;
        tloader.open ( proxied ? "POST" : httpdreq.method, url, /* username */ null, /* password */ null);
        tloader.send (/* content */ postbody);
    }

    /**
     * callback function for LzHTTPLoader
     * @param loader The loader which received the data
     * @param data can be an LzDataElement or String
     * @access private
     */
    function loadSuccess (loader:LzHTTPLoader, data:*) :void { 
        var dreq:LzHTTPDataRequest = loader.dataRequest;
        dreq.status = LzDataRequest.SUCCESS;
        loader.owner.loadResponse( dreq, data );
    }

    /**
     * callback function for LzHTTPLoader
     * @param loader The loader which received the data
     * @param data can be an LzDataElement or String
     * @access private
     */
    function loadError (loader:LzHTTPLoader, data:*) :void { 
        var dreq:LzHTTPDataRequest = loader.dataRequest;
        dreq.status = LzDataRequest.ERROR;
        loader.owner.loadResponse( dreq, data );
    }

    /**
     * callback function for LzHTTPLoader
     * @param loader The loader which received the data
     * @param data can be an LzDataElement or String
     * @access private
     */
    function loadTimeout (loader:LzHTTPLoader, data:*) :void { 
        var dreq:LzHTTPDataRequest = loader.dataRequest;
        dreq.loadtime = (new Date()).getTime() - dreq.loadstarttime;
        dreq.status = LzDataRequest.TIMEOUT;
        dreq.onstatus.sendEvent( dreq );
    }

    /**
     * @access private
     */
    function setRequestError (dreq:LzHTTPDataRequest, msg:String) :void {
        dreq.error = msg;
        dreq.status = LzDataRequest.ERROR;
    }

    /**
     * @access private
     * @param LzHTTPDataRequest dreq:
     * @param LzDataElement data:
     */
    function loadResponse (dreq:LzHTTPDataRequest, data:*) :void {
        dreq.loadtime = (new Date()).getTime() - dreq.loadstarttime;
        dreq.rawdata = dreq.loader.getResponse();

        if (data == null) {
            this.setRequestError(dreq, "client could not parse XML from server");
            dreq.onstatus.sendEvent( dreq );
            return;
        }

        var proxied:Boolean = dreq.proxied;

        if (! dreq.parsexml) {
            // TODO [hqm 2008-07] Currently, if parsexml == false, we just return the raw
            // data, we do not attempt to parse out the headers (i.e.,
            // do not assume the response is wrapped in
            // <resultset><body>...</body></resultset>)
            //
            // We might change this at some point and make the server
            // return all proxied responses wrapped up in that format,
            // but it is not being done now for RPC and other raw data users.
            dreq.onstatus.sendEvent( dreq );
            return;
        } else if (proxied && data.childNodes[0].nodeName == "error") {
            this.setRequestError(dreq, data.childNodes[0].attributes['msg']);
            dreq.onstatus.sendEvent( dreq );
            return;
        }

        // build a hashtable of header values. 
        // If the header is repeated, construct a list to hold
        // all its values.
        var headers:LzParam = new lz.Param();
        var content:LzDataElement = null;
        
        if (proxied) {
            // For proxied requests, we get back an XML wrapper
            // <resulset><body>DATA</body><headers>HEADERS</headers></resultset>
            // extract the headers and body below:
            var hos:Array = (data.childNodes.length > 1 && data.childNodes[1].childNodes) ? data.childNodes[1].childNodes : null;
            // get proxy metadata (header, etc) info if any
            if (hos != null) {
                for (var i:int = 0; i < hos.length; i++) {
                    var h:LzDataElement = hos[i];
                    if (h.attributes) headers.addValue(h.attributes.name, h.attributes.value);
                }
            }
            if (data.childNodes[0].childNodes) content = data.childNodes[0].childNodes[0];
        } else {
            var hos:* = dreq.loader.getResponseHeaders();
            if (hos) {
                headers.addObject(hos);
            }
            // SOLO requests are raw XML data
            content = data;
        }

        dreq.xmldata = content;
        dreq.responseheaders = headers;
        dreq.onstatus.sendEvent( dreq );
    }
}

lz.HTTPDataProvider = LzHTTPDataProvider;  // publish
