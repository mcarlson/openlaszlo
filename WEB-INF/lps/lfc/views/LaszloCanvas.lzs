/**
  *
  * @copyright Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
  *            Use is subject to license terms.
  *
  * @affects lzcanvas
  * @access public
  */
 

/**
  * <p>The canvas is the container for all views within an application.</p>
  *
  * <p>The <classname>lz.canvas</classname> class represents the viewable
  * area of the application.  There is one instance of
  * <classname>lz.canvas</classname>, named <varname>canvas</varname>.  The
  * canvas contains all views within an application.</p>
  * 
  * <p>The <tagname>canvas</tagname> tag is the document root of an LZX
  * application file.  It contains class, resource, and font definitions,
  * library includes, and view and other instances.</p>
  * 
  * <p>See the <a
  * href="${dguide}program-structure.html#program-structure.canvas-tag">Guide</a>
  * for a complete discussion of the <tagname>canvas</tagname> tag.</p>
  *
  * @see LzView
  * @lzxname canvas
  * @shortdesc The top-most view in a Laszlo application.
  * @topic LFC
  * @subtopic Views
  * @access public
  * @initarg Boolean accessible: Specifies if this application is intended to be accessible
  * @initarg Boolean history: Specifies if this application is intended to use history
  * @initarg Boolean debug: If true, the application is compiled with debugging enabled.
  * @initarg Number width: Specifies the width of the canvas
  * @initarg Number height: Specifies the height of the canvas
  * See the <a href="${dguide}debugging.html">Debugging</a> chapter of
  * the Guide for more information about debugging.
  */
dynamic class LzCanvas extends LzView {

  static var tagname = 'canvas';


/**
  * @access private
  * @modifiers override
  */
/** @access private */
  static var attributes = new LzInheritedHash(LzView.attributes);

    /**
      * @access private
      */
    var updatePercentCreatedEnabled:Boolean = true;

    /**
      * @access private
      */
    var resourcetable:*;
    /**
      * @access private
      */
    var _lzinitialsubviews:Array = [];
    /**
      * @access private
      */
    var totalnodes:*;
    /**
      * @access private
      */
    var framerate:*;
    /**
      * @access private
      */
    var creatednodes:*;

    /* These are passed in by the compiler as attributes */
    /**
      * Compiled in proxied value
      * @access private
      */
    var __LZproxied;
    /** Whether to embed fonts in the compiled application.
      * @type Boolean
      * @keywords final
      */
    var embedfonts;
    /** A String specifying the LPS build revision and the build directory: e.g. "4075 /Users/maxcarlson/openlaszlo/legals"
      * @type String
      * @keywords final
      */
    public var lpsbuild;
    /** A String specifying the date and time of the LPS build. "2007-03-05T15:33:42-0800"
      * @type String
      * @keywords final
      */
    public var lpsbuilddate;
    /** A String specifying the date and time of the application build. "2008-09-12T14:15:12Z"
      * @type String
      * @keywords final
      */
    public var appbuilddate;
    /** A String describing the target runtime. "dhtml" | "swf7" | "swf8" are currently supported. Others are in development.
      * @type String
      * @keywords final
      */
    public var runtime;

    /**
      * For onmouseup event
      * @access private
      */
    var __LZmouseupDel:LzDelegate;
    /**
      * For onmousedown event
      * @access private
      */
    var __LZmousedownDel:LzDelegate;
    /**
      * For onmousemove event
      * @access private
      */
    var __LZmousemoveDel:LzDelegate;    

    /** @access private */
    var __LZDefaultCanvasMenu :LzContextMenu;

    /**
     * <p>
     * <varname>httpdataprovider</varname> is bound to the system default HTTP DataProvider.   
     * </p>  
     * This will be an instance of <classname>LzHTTPDataProvider</classname>, which implements HTTP request
     * transport. The default  value of the <varname>canvas.defaultdataprovider</varname> is initially set to point
     * to this same object. 
     * @access public
     */

    var httpdataprovider = null;


    /**
     * <p>
     * <varname>defaultdataprovider</varname> is bound to the system default DataProvider.
     * </p>  
     * By default, this will be an instance of <classname>LzHTTPDataProvider</classname>, which will also be pointed to by
     * the <varname>canvas.httpdataprovider</varname>.
     * @access public
     */

    var defaultdataprovider = null;

    /**
      * @access private
      * LzCanvas 
      * 
      * @param Object args: a hash of arguments specifying the way the
      * canvas was compiled, e.g. {__LZproxied: "true", bgcolor:
      * 16777215, embedfonts: true, fontname:
      * "Verdana,Vera,sans-serif", fontsize: 11, fontstyle: "plain",
      * height: "100%", lpsbuild: "8763
      * /Users/maxcarlson/openlaszlo/trunk", lpsbuilddate:
      * "2008-04-17T18:17:33-0700", lpsrelease: "Yodel Production",
      * lpsversion: "4.2a2", runtime: "swf8", width: "100%"}
      *
      * @devnote The parameter pattern has to match LzNode, since we
      * claim to be a subclass of LzNode.
      */
    function LzCanvas ( parent = null, args = null, children = null, async = null) {
      super(parent, args, children, async);
      this.datasets = {};
      // Canvas can't change size
      // Override values defined in LzView
      this.__LZcheckwidth = null;
      this.__LZcheckheight = null;
      this.hassetwidth  = true;
      this.hassetheight = true;
    }

    /**
      * @access private
      * LzCanvas 
      * @param LzView parent: Parent view to attach to
      * @param Object args: Initialization args
      */
    override function construct (parent , args) {
        this.__makeSprite(null);

        // TODO [hqm 2008-04] how can we make this consistent across runtimes ? 
        if ($swf9) {
            var capabilities = LzSprite.capabilities;
        } else {
            var capabilities = LzSprite.prototype.capabilities;
        }

        // TODO: [2006-05-19 ptw] The original did not do this, should we?
        // super(null, args);
        // No, we can't.  But you have to be aware that if you futz with
        // LzNode or LzView, you have to consider whether you will have to
        // change the canvas constructor too, since it _pretends_ to be a
        // view!
    
        // Note canvas start
        if ($profile) {
            Profiler.event('start: #canvas');
        }
        this.immediateparent = this;
        this.datapath = new LzDatapath(this);

        this.mask = null;

        if (args.accessible) {
            if (capabilities.accessibility == true) {
                // turn on focusrect if canvas.accessible is true
                this.sprite.setAccessible(args.accessible);
            } else if ($debug) {
                Debug.warn("This runtime doesn't support accessibility.");
            }
        }

        if ((typeof(args.history) == "undefined") || args.history == null) {
            var historyarg = lz.Browser.getInitArg('history');
            if (historyarg != null) {
                this.history = (historyarg == "true"); // convert string to boolean
            }
        } else if (args.history) {
            this.history = true;
        }

        if (this.history && capabilities.history != true) {
            if ($debug) {
                Debug.warn("This runtime doesn't support history.");
            }
            this.history = false;
        }

        this.viewLevel = 0;
        this.resourcetable = {};

        // percentcreated support
        this.totalnodes = 0;
        this.creatednodes = 0;
        this.percentcreated = 0;

        this.framerate = 30;

        if ((typeof(args.proxied) == "undefined") || args.proxied == null) {
            // Default to the 'baked in' value set by the compiler
            var lzproxied_query_arg = (args.__LZproxied == "true");
            // Override with the lzproxied query arg supplied at runtime, if present.
            var proxyarg = lz.Browser.getInitArg('lzproxied');
            if (proxyarg != null) {
                lzproxied_query_arg = (proxyarg == "true"); // convert string to boolean
            }
            this.proxied = lzproxied_query_arg;
        } else {
            this.proxied = (args.proxied == true);
        }

        // If no explicit proxyurl defined, set the default proxyurl to our app baseurl
        if (typeof(args.proxyurl) == "undefined") {
            this.proxyurl = lz.Browser.getBaseURL( ).toString();
        } 

        delete args.proxied;

        // Default to arg values
        var width = args.width;
        var height = args.height;
        var bgcolor = args.bgcolor;
        delete args.width;
        delete args.height;
        delete args.bgcolor;

        if (capabilities.readcanvassizefromsprite == true) {
            if (this.sprite.width) {
                width = this.sprite.width;
            }
            if (this.sprite.height) {
                height = this.sprite.height;
            }
            if (this.sprite.bgcolor) {
                bgcolor = this.sprite.bgcolor;
            }
        } else {
            // read from init args
            if (lz.Browser.getInitArg('width') != null) {
                width = lz.Browser.getInitArg('width');
            }

            if (lz.Browser.getInitArg('height') != null) {
                height = lz.Browser.getInitArg('height');
            }

            if (lz.Browser.getInitArg('bgcolor') != null) {
                bgcolor = lz.Browser.getInitArg('bgcolor');
            }
        }

        this.__canvaswidthratio = null;
        this.width = Number(width);
        if (isNaN(this.width)) {
            if (width.charAt(width.length-1) == '%') {
                var percent = Number(width.substr(0, width.length-1));
                this.__canvaswidthratio = percent/100;
                if (capabilities.scalecanvastopercentage != true) {
                    // some runtimes already scale the viewport size, so take the reported size literally to avoid scaling twice
                    this.__canvaswidthratio = 1;
                }
            } else {
                if ( $debug ){
                    Debug.warn('ignored bad value %#w for canvas width', width);
                }
                this.width = 400;
            }
        }

        this.__canvasheightratio = null;
        this.height = Number(height);
        if (isNaN(this.height)) {
            if (height.charAt(height.length-1) == '%') {
                var percent = Number(height.substr(0, height.length-1));
                this.__canvasheightratio = percent/100;
                if (capabilities.scalecanvastopercentage != true) {
                    // some runtimes already scale the viewport size, so take the reported size literally to avoid scaling twice
                    this.__canvasheightratio = 1;
                }
            } else {
                if ( $debug ){
                    Debug.warn('ignored bad value %#w for canvas height', height);
                }
                this.height = 400;
            }
        }

        if ($swf9) {
            // Set the canvas width/height to good initial values.
            // TODO: ensure these can be read correctly from the embed tag
            this.sprite.setWidth(this.width);
            this.sprite.setHeight(this.height);
        }
        if (this.__canvasheightratio != null || this.__canvaswidthratio != null) {
            // register for window resize events
            LzScreenKernel.setCallback(this, '__windowResize');
        }

        this.bgcolor = lz.Utils.hextoint(bgcolor);

        this.lpsversion = args.lpsversion + "." + this.__LZlfcversion;
        delete args.lpsversion;

        // Set applyArgs ordering kludges.
        this.__LZdelayedSetters = LzView.__LZdelayedSetters;
        this.earlySetters = LzView.earlySetters;

        if (!this.version){
            this.version = this.lpsversion;
        }

        this.isinited = false;
        this._lzinitialsubviews = [];

        this.datasets = {};
        global.canvas = this;
        this.parent = this;
        this.makeMasked();

        this.__LZmouseupDel = new LzDelegate( this , "__LZmouseup", lz.GlobalMouse, 'onmouseup');// called on global mouseup
        this.__LZmousedownDel = new LzDelegate( this , "__LZmousedown", lz.GlobalMouse, 'onmousedown');// called on global mousedown
        this.__LZmousemoveDel = new LzDelegate( this , "__LZmousemove", lz.GlobalMouse, 'onmousemove');// called on global mousemove

        // Create the default dataprovider
        this.defaultdataprovider = this.httpdataprovider = new LzHTTPDataProvider();

        if ($svg) {
            //not for svg
        } else {
            this.buildDefaultMenu();
        }

        this.id = lz.Browser.getAppID();
    }

/**
  * Sends onmouseup event
  * @access private
  */
function __LZmouseup(e) {
    if (this.onmouseup.ready) this.onmouseup.sendEvent()
}

/**
  * Sends onmousemove event
  * @access private
  */
function __LZmousemove(e) {
    if (this.onmousemove.ready) this.onmousemove.sendEvent()
}

/**
  * Sends onmousedown event
  * @access private
  */
function __LZmousedown(e) {
    if (this.onmousedown.ready) this.onmousedown.sendEvent()
}

/**
  * Overridden to pass true for "isroot" to LzSprite constructor
  * @access private
  */
override function __makeSprite(args) {
    this.sprite = new LzSprite(this, true);
}

var onmouseleave = LzDeclaredEvent;

/** Sent whenever the number of created nodes changes 
  * @lzxtype event
  */
var onpercentcreated = LzDeclaredEvent;
/** Sent whenever the mouse moves 
  * @lzxtype event */
var onmousemove = LzDeclaredEvent;
/** Sent after oninit
  * @lzxtype event */
var onafterinit = LzDeclaredEvent;

/** version number of the LPS that generated this application (for .lzo files,
  * this is the version number of the server that generated the optimized file, not the one 
  * that served it).
  * @type Number
  * @keywords final
  */
var lpsversion;

/** release of the LPS that generated this application (for .lzo files,
  * this is the release of the server that generated the optimized file, not the one that 
  * served it).
  * @type String
  * @keywords final
  */
var lpsrelease;

/**
  * The lpsversion of this lzx application.
  * @type Number
  * @lzxtype string
  * @lzxdefault "1.1"
  * @modifiers deprecated final
  */
var version = null;

/** @access private */
var __LZlfcversion = "0";

/** If true, requests for data and media are proxied through LPS server.
  * if false, requests are made directly to target URLs. 
  * if inherit, inherit from lzproxied query arg.
  *
  * @lzxtype booleanLiteral | "inherit"
  * @lzxdefault "inherit"
  */
var proxied = true;

/** If present, specifies the default timeout in milliseconds for data load requests
  * @type Number
  * @lzxtype numberExpression
  */
var dataloadtimeout = 30000;

/** If present, specifies the default timeout in milliseconds for media load requests
  * @type Number
  * @lzxtype numberExpression
  */
var medialoadtimeout = 30000;

/** If present, specifies the default timeout in milliseconds for media errors.  An error occurs when no bytes have been received.  This is used in Flash to detect media loads that have failed due to the security policy.
  * @type Number
  * @lzxtype numberExpression
  */
var mediaerrortimeout = 2000;

/** A number from 0-1 that represents the
  * percentage of the app that has been instantiated.
  * @type Number
  */
var percentcreated;

/** Dictionary of all named datasets.
  * @type Object
  */
var datasets = null;

/**
  * Compares two version strings.
  * @access private
  * @param ver: A version string
  * @param over: Another version string. If omitted, defaults to the version of
  * of the app.
  * @return: -1, 0 , 1 to indicate whether the ver parameter preceeds, matches,
  * or succeeds the second parameter (respectively)
  */
function compareVersion ( ver , over = null ){ 

    if ( over ==null ){
        over = this.lpsversion;
    }

    if ( ver == over ) return 0; 

    var ver1 = ver.split( '.' );
    var ver2 = over.split( '.' );

    var i = 0; 
    while( i < ver1.length || i < ver2.length ){
        var my = Number( ver1[ i ] )|| 0; 
        var oth = Number( ver2[ i++ ] )|| 0; 
        if ( my < oth ) {
            return -1;
        }else if ( my > oth ) {
            return 1;
        }
    }
    return 0;
}

/**
  * The canvas setResource function is redefined to throw an error when
  * called.
  * @access private
  */
override function $lzc$set_resource( v ) {

    if ($swf9) {
        //
    } else {
        Object.error("You can't set a resource for the canvas.");
    }
}


/**
  * @access private
  */
override function toString (){
    return "This is the canvas";
}

/**
  * @access private
  * only called from the snippet loader
  */
function initDone (){
    //reorder initial subviews so preloaded stuff is first
    var sva = new Array;
    var isv = this._lzinitialsubviews;

    for ( var i = 0; i < isv.length; i++ ){
        var isi = isv[i];
        if ( isi['attrs'] && isi.attrs['initimmediate'] ){
            sva.push( isi );
        }
    }

    for ( var i = 0; i < isv.length; i++ ){
        var isi = isv[i];
        if ( ! ( isi['attrs'] && isi.attrs['initimmediate'] ) ){
            sva.push( isi );
        }
    }

    // Done with that
    this._lzinitialsubviews = [];

    //this.isinited = false;
    //Debug.write('LzCanvas.initDone');
    lz.Instantiator.requestInstantiation(  this, sva );
}


/**
  * @access private
  * @devnote Note that canvas functions that need to happen when the app is
  * loaded should go here, so they will be invoked in kranked apps too.
  * (By the root resolver in LaszloLibrary).
  */
override function init (){
    // Canvas-only: This is so the canvas sprite knows when to show its children and 
    this.sprite.init(true);

    if ($swf9) {
        //trace("LzCanvas.init called");
        // cheapo debugger printing
        sprite.addChild(lzconsole.consoletext);
        sprite.addChild(lzconsole.consoleinputtext);
        //lzconsole.write("elapsed time "+getTimer()+" msec");
    }

    // start up history
    if (this.history == true) {
        // Tell lz.History we're ready to send events
        lz.History.__start(this.id); 
    }
}

/**
  * @access private
  */
var deferInit = true;

/**
  * @access private
  */
override function __LZinstantiationDone (){

    if (this.deferInit) {
        this.deferInit = false;
        return;
    }

    this.percentcreated = 1;
    this.updatePercentCreatedEnabled = false;
    if (this.onpercentcreated.ready) this.onpercentcreated.sendEvent( this.percentcreated ); 
   lz.Instantiator.resume();
    this.__LZcallInit();
}

/**
  * @access private
  */
function updatePercentCreated (){
    this.percentcreated = Math.max( this.percentcreated ,
                                    this.creatednodes / this.totalnodes );
    this.percentcreated = Math.min( .99 , this.percentcreated );
    if (this.onpercentcreated.ready) this.onpercentcreated.sendEvent( this.percentcreated );
}

/**
  * @access private
  */
function initiatorAddNode ( e , n ){
    this.totalnodes += n;
    this._lzinitialsubviews.push( e );
}

/**
  * @access private
  * @devnote N.B.: replaces LzNode.__LZcallInit, so must be kept in sync with that
  */
override function __LZcallInit ( an = null ){
    //trace("lzcancas __LZcallinit isinited", this.isinited);
    // Canvas-only:  Don't bother with preventSubInit
    if (this.isinited) return;

    //do this now, so that others know that they're too late
    this.isinited = true;

    this.__LZresolveReferences();

    // Install computed initializations
    var sl = this.subnodes;
    if (sl) {
        var i = 0;
        var l = sl.length;
        while(i < l){
            var s = sl[ i++ ];
            //remember next one too
            var t = sl[ i ]
                if ( s.isinited || s.__LZlateinit ) continue;
            s.__LZcallInit( );
            //if the next one is not where it was, back up till we find it or to
            //the beginning of the array
            if ( t != sl[ i ] ){
                // When does this ever happen?
                //             Debug.warn('subnodes array changed after %w -> sl[%d]: %w', t, i, sl[i]);
                while ( i > 0 ){
                    if ( t == sl[ --i ] ) break;
                }
            }
        }
    }

    // Register in the source locator table, if debugging
    if ($debug) {
        if (this.__LZsourceLocation) {
            LzNode.sourceLocatorTable[this.__LZsourceLocation] = this;
        }
    }

    this.init();

    if (this.oninit.ready) this.oninit.sendEvent( this );
    if (this.onafterinit.ready) this.onafterinit.sendEvent( this );
    if (this.datapath && this.datapath.__LZApplyDataOnInit) {
        this.datapath.__LZApplyDataOnInit();
    }
    
    // Canvas-only: Note _canvas_ end, stop startup profiler
    if ($profile) {
        Profiler.event('done: #canvas');
        // Default is to start the Profiler ASAP, and stop it in
        // canvas.init, so you can profile startup time.  If that is
        // not what you want, you can start/stop/pause/resume in your
        // app around things you want to profile.
        Profiler.stop();
    }
}



/**
  * @access private
  */
override function $lzc$set_width(v) {
    if ( $debug ){
        Debug.error( "You cannot set the width on the canvas." );
    }
}

/**
  * @access private
  */
function isProxied ( ){
    return this.proxied;
}

/**
  * @access private
  */
override function $lzc$set_x(v) {
    if ( $debug ){
        Debug.error( "You cannot set the X coordinate on the canvas." );
    }
}

/**
  * @access private
  */
override function $lzc$set_height(v) {
    if ( $debug ){
        Debug.error( "You cannot set the height on the canvas." );
    }
}

/**
  * @access private
  */
override function $lzc$set_y(v) {
    if ( $debug ){
        Debug.error( "You cannot set the Y coordinate on the canvas." );
    }
}

/**
  * Install default menu items for the right-mouse-button 
  * @param LzContextMenu cmenu: LzContextMenu to install on this view
  */
function setDefaultContextMenu ( cmenu ){
    this.setContextMenu(cmenu);
    this.sprite.setDefaultContextMenu( cmenu );
}

/**
  * Build the default righ-click menu object
  * @access private
  */
function buildDefaultMenu () {
    this.__LZDefaultCanvasMenu = new LzContextMenu();
    this.__LZDefaultCanvasMenu.hideBuiltInItems();
    
    var defaultMenuItem:LzContextMenuItem = new LzContextMenuItem("About OpenLaszlo...",
                                                new LzDelegate(this, '__LZdefaultMenuItemHandler'));
    this.__LZDefaultCanvasMenu.addItem(defaultMenuItem);
    
    if (this.proxied) {
        var viewSourceMenuItem:LzContextMenuItem = new LzContextMenuItem("View Source",
                                                    new LzDelegate(this, '__LZviewSourceMenuItemHandler'));
        this.__LZDefaultCanvasMenu.addItem(viewSourceMenuItem);
    }
    
    // Install the default menu onto MovieClip, so it shows up everywhere by default
    this.setDefaultContextMenu(this.__LZDefaultCanvasMenu);
}

/**
  * @access private
  */
function __LZdefaultMenuItemHandler (item:LzContextMenuItem) {
    // load a url 
    lz.Browser.loadURL("http://www.openlaszlo.org", "lz_about");
}

/**
  * @access private
  */
function __LZviewSourceMenuItemHandler (item:LzContextMenuItem) {
    // view source for this app
    // /examples/components/edittext_example.lzx
    var url = lz.Browser.getBaseURL() + "?lzt=source";
    lz.Browser.loadURL(url, "lz_source");
}

/**
  * Compute version info as a string
  * @access public
  */
static function versionInfoString () :String {
  return (
    'URL: ' + lz.Browser.getLoadURL() + '\n' +
    'LPS\n' +
    '  Version: ' + canvas.lpsversion + '\n' +
    '  Release: ' + canvas.lpsrelease + '\n' +
    '  Build: ' + canvas.lpsbuild + '\n' +
    '  Date: ' + canvas.lpsbuilddate + '\n' +
    'Application\n' +
    '  Date: ' + canvas.appbuilddate + '\n' +
    'Target: ' + canvas.runtime + '\n' +
    'Runtime: ' + lz.Browser.getVersion() + '\n' +
    'OS: ' + lz.Browser.getOS() + '\n');
}

/**
  * Callback for LzScreenKernel window resize events
  * @access private
  */
function __windowResize(size) {
    if (this.__canvaswidthratio != null) {
        this.width = Math.floor(size.width * this.__canvaswidthratio);
        if (this.onwidth.ready) this.onwidth.sendEvent(this.width);
        this.sprite.setWidth(this.width);
        //trace('new width', this.width, 'height', this.height);
    }

    if (this.__canvasheightratio != null) {
        this.height = Math.floor(size.height * this.__canvasheightratio);
        if (this.onheight.ready) this.onheight.sendEvent(this.height);
        this.sprite.setHeight(this.height);
        //trace('new height', this.height, 'width', this.width);
    }
}

} // End of LzCanvas
lz[LzCanvas.tagname] = LzCanvas;  // publish
