<project name="schema" default="build">

<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->

  <description>
      This is the build file for the LPS schema.
      It currently does not try to build the docs. [bshine 5.24.06]
  </description>

  <!-- Define contrib tasks -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <property environment="env"/>

  <target name="init">
    <tstamp/>
    <property name="build" value="./build"/>
    <property name="rnc" value="lzx.rnc"/>
    <property name="docrng" value="lzxdoc.rng"/>
    <property name="rng" value="lzx.rng"/>
    <property name="dtd" value="lzx.dtd"/>
    <property name="xsd" value="lzx.xsd"/>
    <property name="html" value="lzx-reference.html"/>
    <property name="python.exec" value="python" />
    <mkdir dir="build"/>
    
    <uptodate property="rng.uptodate" value="false" targetfile="build/lzx.direct.rng">
        <srcfiles dir=".">
            <include name="strip-docs.xsl,strip-private.xsl"/>
            <include name="lzx.rnc"/>
        </srcfiles>
    </uptodate>

    <uptodate property="dtd.uptodate" value="false" srcfile="${rng}" targetfile="${dtd}">
    </uptodate>
    
    <uptodate property="xsd.uptodate" value="false" srcfile="${rnc}" targetfile="${xsd}"/>
    
  </target>

  <target name="rng" depends="init" unless="rng.uptodate"
          description="Generate RNG schema file">  
      <sequential>
        <java fork="true"
              jar="${env.LZ_VENDOR_ROOT}/trang.jar">
          <classpath>
            <pathelement path="${java.class.path}"/>
          </classpath>
          <arg value="${rnc}"/>
          <arg value="build/lzx.direct.rng"/>
        </java>
      </sequential>

    <style in="build/lzx.direct.rng" out="${rng}" style="strip-docs.xsl"/>
    <style in="build/lzx.direct.rng" out="${docrng}" style="strip-private.xsl"/>
    <!-- this depends on a newer version of jing -->
    <!--java fork="true"
	  classname="com.thaiopensource.relaxng.output.Driver">
      <classpath>
        <pathelement location="${LZ_VENDOR_ROOT}/trang.jar" />
        <pathelement path="${java.class.path}"/>
      </classpath>
      <arg value="${docrng}"/>
      <arg value="build/lzx.rnc"/>
    </java-->
  </target>

  <target name="dtd" 
          description="Generate DTD" depends="rng"
          unless="skip.dtd">
      <exec executable="${python.exec}" taskname="rng2dtd" failonerror="true" >
        <arg value="rng2dtd.py"/>
        <arg value="${rng}"/>
        <arg value="-o"/>
        <arg value="${dtd}"/>
      </exec>
  </target>

  <target name="clean" 
          description="Remove generated schema files" depends="init">
    <delete dir="${build}"/>
    <delete file="${docrng}"/>
    <delete file="${rng}"/>
    <delete file="${xsd}"/>
    <delete file="${dtd}"/>
    <delete quiet="true">
      <fileset dir="." defaultexcludes="no" includes="**/*~"/>
      <fileset dir="." defaultexcludes="no" includes="**/*.pyc"/>
    </delete>
  </target>

    
  <target name="build" 
          description="Build generated schema files" depends="rng,dtd"
          unless="xsd.uptodate">
          <java fork="true" failonerror="true"
            jar="${env.LZ_VENDOR_ROOT}/trang.jar"
            output="log.trang">
               <classpath>
                   <pathelement path="${java.class.path}"/>
                </classpath>
              <arg value="${rnc}"/>
              <arg value="${xsd}"/>
          </java>
          <delete file="log.trang"/>
  </target>

  <target name="doc"
          description="Generate docs (none)"/>

  <target name="test"
          description="Run schema related tests (none)"/>

  <target name="all" 
          description="Clean, build, NO doc, and test" 
          depends="clean,build,test"/>
</project>
