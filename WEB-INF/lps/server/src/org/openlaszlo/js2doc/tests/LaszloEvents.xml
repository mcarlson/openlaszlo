<?xml version="1.0" encoding="UTF-8"?><js2doc buildoptions="debug profile" runtimeoptions="dhtml swf7 swf8 swf9"><unit id="test.LaszloEvents.js" path="WEB-INF/lps/server/src/org/openlaszlo/js2doc/tests/LaszloEvents.js"><doc><text>LaszloEvents.lzs</text><tag name="copyright"><text>Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.
            Use is subject to license terms.</text></tag><tag name="affects"><text>lzevent lzdelegate</text></tag></doc></unit><property id="LzDelegate" name="LzDelegate" unitid="test.LaszloEvents.js"><doc><text>A delegate is essentially a closure.</text></doc><class><property id="LzDelegate.prototype" name="prototype"><object><property id="LzDelegate.prototype.initialize" name="initialize"><function><parameter name="context" type="Object"><doc><text>reference to object which will be called</text></doc></parameter><parameter name="functionName" type="String"><doc><text>name of the method to call (a string)</text></doc></parameter><parameter name="eventSender" type="Object"><doc><text>optional; the sender of the event to register the
 new delegate for.</text></doc></parameter><parameter name="eventName" type="String"><doc><text>Optional, but required if eventSender is used; The name
 of the event to register the new delegate for.</text></doc></parameter></function></property><property id="LzDelegate.prototype.execute" name="execute"><doc><text>Executes the named method in the given context with the given data. Returns
 the result of the call.</text></doc><function><parameter name="sd"><doc><text>The data with which to call the method.</text></doc></parameter><returns type="Object"><doc><text>The value returned by the method call.</text></doc></returns></function></property><property id="LzDelegate.prototype.register" name="register"><doc><text>Registers the delegate for the named event in the given context. <b>NB:</b>
 This is the primary way in which events are created. Published events do
 not generally exist as objects (with some exceptions) until delegates are
 created for them.</text></doc><function><parameter name="eventSender" type="Object"><doc><text>The object which publishes the event.</text></doc></parameter><parameter name="eventName" type="String"><doc><text>The name (string) of the event to register for.</text></doc></parameter></function></property><property id="LzDelegate.prototype.unregisterAll" name="unregisterAll"><doc><text>Unregisters the delegate for all of the events it is registered for.</text></doc><function/></property><property id="LzDelegate.prototype.unregisterFrom" name="unregisterFrom"><doc><text>Unregisters the delegate for the given event</text></doc><function><parameter name="event" type="LzEvent"><doc><text>The event to unregister the delegate from.
                      (e.g.  myview.onmouseup)</text></doc></parameter></function></property><property id="LzDelegate.prototype.disable" name="disable"><doc><text>Disables the delegate until enable method is called.</text></doc><function/></property><property id="LzDelegate.prototype.enable" name="enable"><doc><text>Enables a delegate that has been disabled</text></doc><function/></property><property access="private" id="LzDelegate.prototype.toString" name="toString"><function/></property><property access="private" id="LzDelegate.prototype._dbg_name+debug" includebuilds="debug" name="_dbg_name"><doc><text>If debugging, add an informative name</text></doc><function/></property></object></property><property id="LzDelegate.__nextID" name="__nextID" value="1"/><property id="LzDelegate.__ivars__" name="__ivars__"><object><property id="LzDelegate.__ivars__.lastevent" name="lastevent" value="0.0"/><property id="LzDelegate.__ivars__.enabled" name="enabled" value="true"/><property id="LzDelegate.__ivars__.event_called" name="event_called" value="false"/></object></property></class></property><property id="LzEvent" name="LzEvent" unitid="test.LaszloEvents.js"><class><property id="LzEvent.prototype" name="prototype"><object><property id="LzEvent.prototype.initialize" name="initialize"><doc><text>An event is an object which stores delegates. When it is called, it
 calls all of its delegates in turn. Due to the dynamic (and lazy) nature
 of event instantiation, events store themselves in their containing object
 in two ways: first, in slot equivalent to their name (<i>view[eventName]</i>
 = event) and second, in an array in the containing object (which it will
  create if it doesn't exist) called <i>_events</i></text></doc><function><parameter name="eventSender" type="Object"><doc><text>The owner of this event</text></doc></parameter><parameter name="eventName" type="String"><doc><text>The name of this event.</text></doc></parameter><parameter name="d"/></function></property><property id="LzEvent.prototype.addDelegate" name="addDelegate"><doc><text>Adds the given delegate to the event's delegate list. Although this listed
 as a public function it should rarely be called explicitly -- it is used
 exclusively by <b><i>LzDelegate</i>.register</b></text></doc><function><parameter name="d" type="LzDelegate"><doc><text>The delegate to add to the list of delegates called by the event.</text></doc></parameter></function></property><property id="LzEvent.prototype.sendEvent" name="sendEvent"><doc><text>Sends the event, passing its argument as the data to all the called
 delegates</text></doc><function><parameter name="sd"><doc><text>The data to send with the event.</text></doc></parameter></function></property><property id="LzEvent.prototype.removeDelegate" name="removeDelegate"><doc><text>Removes the delegate from the delegate list. In practice, this is rarely
 called explicitly, since it does not update the delegate's list of stored
 events. Right now, this is called only by <b><i>LzDelegate</i>.
 unregisterAll</b> Delegates should support a simple unregister command, that
 unregisters them for a single event, but to date, that has not proven
 necessary</text></doc><function><parameter name="d" type="LzDelegate"><doc><text>The delegate to remove from the delegateList.</text></doc></parameter></function></property><property id="LzEvent.prototype.clearDelegates" name="clearDelegates"><doc><text>Removes all delegates from call list</text></doc><function/></property><property id="LzEvent.prototype.getDelegateCount" name="getDelegateCount"><doc><text>Returns the number of delegates registered for the event</text></doc><function><returns type="Number"><doc><text>The number of delegates registered for the event.</text></doc></returns></function></property><property id="LzEvent.prototype.toString" name="toString"><function/></property><property access="private" id="LzEvent.prototype._dbg_name+debug" includebuilds="debug" name="_dbg_name"><doc><text>If debugging, add an informative name</text></doc><function/></property></object></property><property id="LzEvent.__ivars__" name="__ivars__"><object><property id="LzEvent.__ivars__.locked" name="locked" value="false"/></object></property></class></property></js2doc>
