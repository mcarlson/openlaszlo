/* -*- mode: Java; c-basic-offset: 2; -*- */

/**
 * Library output
 *
 * @author ptw@openlaszlo.org
 *
 * Outputs schema and script for a library
 */

package org.openlaszlo.compiler;

import java.io.*;
import java.net.*;
import java.util.*;

import org.jdom.Element;

import org.openlaszlo.sc.ParseTreePrinter;
import org.openlaszlo.sc.ScriptCompiler;
import org.openlaszlo.sc.JavascriptCompressor;
import org.openlaszlo.sc.Compiler;
import org.openlaszlo.utils.*;

/** Accumulates code, XML, and assets to a Library object file.
 *
 * Properties documented in Compiler.getProperties.
 */
class LibraryWriter extends IntermediateWriter {

  LibraryWriter(Properties props, OutputStream stream,
                CompilerMediaCache cache,
                boolean importLibrary,
                CompilationEnvironment env,
                Element root) {


    super(props, stream, cache, importLibrary, env, root);

    try {
      this.out = new PrintStream(new java.util.zip.GZIPOutputStream(mStream));
    } catch (Exception e) {
      throw new ChainedException(e);
    }
    this.root = root;
  }

  /** For an lzo library, we do not want to create a DHTMLCompiler and compile to JS1, we
      just want to output the lzs code to our library */
  void open(boolean compilingSnippet) {
  }

  /**
   * Sets the canvas for the app
   *
   * @param canvas
   *
   */
  // TODO: [[2007-01-30 ptw] This should become an error
  void setCanvas(Canvas canvas, String canvasConstructor) {
  }

  private void exportInterface() {
    out.println(mEnv.getSchema().toLZX());
  }

  private String libraries() {
    StringWriter writer = new StringWriter();
    PrintWriter out = new PrintWriter(writer);
    String indent = "";
    for (Iterator i = includes.keySet().iterator(); i.hasNext(); ) {
      File library = (File)i.next();
      if (! autoIncludes.containsKey(library)) {
        String path = adjustResourcePath(library.getPath());
        out.println(indent + path);
        indent = "  ";
      }
    }
    String result = writer.toString();
    if (result.length() > 0) {
      return " includes=\"" + result.substring(0, result.length()-1) + "\"";
    }
    return "";
  }

  void exportIncludes() {
    Set implicit = new HashSet();
    for (Iterator i = autoIncludes.keySet().iterator(); i.hasNext(); ) {
      File key = (File)i.next();
      if (! implicit.contains(key)) {
        Set subIncludes = (Set)autoIncludes.get(key);
        if (subIncludes != null) {
          // An auto-include will not have been parsed for sub-includes?
          implicit.addAll(subIncludes);
        }
        String path = adjustResourcePath(key.getPath());
        out.println("<include href='" + path + "' />");
      }
    }
  }

  public void close() throws IOException {
    //Should we emit javascript or SWF?
    //boolean emitScript = mEnv.isLibrary();

    if (mCloseCalled) {
      throw new IllegalStateException("LibraryWriter.close() called twice");
    }

    try {
      Properties props = (Properties)mProperties.clone();

      ToplevelCompiler.getLibraries(mEnv, root, null, autoIncludes, includes);

      out.println("<!-- This is a binary library.  Not meant for human consumption. -->");
      out.println("<!-- DO NOT EDIT THIS FILE.  Edit the source and recompile with `-c` -->");
      out.println("<library" + libraries() + ">");
      exportAttributes();
      exportIncludes();
      exportInterface();
      exportResources();
      exportScript();
      out.println("</library>");

    } catch (Exception e) {
      throw new ChainedException(e);
    } finally {
      out.close();
    }

    mCloseCalled = true;
  }

}

/**
 * @copyright Copyright 2008, 2009, 2010 Laszlo Systems, Inc.  All Rights
 * Reserved.  Use is subject to license terms.
 */
