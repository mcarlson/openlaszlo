/* ****************************************************************************
 * Parser.jjt
 *
 * Copyright (c) 2002-2008 Laszlo Systems, Inc.
 * All Rights Reserved.
 *
 * This software is the proprietary information of Laszlo Systems, Inc.
 * Use is subject to license terms.
 *
 * ****************************************************************************/

/* J_LZ_COPYRIGHT_BEGIN *******************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* J_LZ_COPYRIGHT_END *********************************************************/

options {
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  JAVA_UNICODE_ESCAPE = false;
  MULTI=true;
  NODE_DEFAULT_VOID=true;
  NODE_PACKAGE = "org.openlaszlo.sc.parser";
  NODE_SCOPE_HOOK=true;
  VISITOR=false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)

package org.openlaszlo.sc.parser;

import org.openlaszlo.sc.CompilerException;

public class Parser {
    static boolean allowIn = true;

    /** Save the source location. */
    void jjtreeOpenNodeScope(Node n) {
        Token t = getToken(1);
        if (t!= null) {
            SimpleNode sn = (SimpleNode) n;
            sn.setBeginLocation(token_source.pathname,
                                t.beginLine, t.beginColumn);
            // See tokenmanager.html in the javacc documentation.
            if (t.specialToken != null) {
                Token s = t.specialToken;
                while (s.specialToken != null) {
                    s = s.specialToken;
                }
                StringBuffer b = new StringBuffer();
                while (s != null) {
                    b.append(s.image);
                    s = s.next;
                }
                sn.setComment(b.toString());
            }
        }
    }

    /** Dummy routine, required because NODE_SCOPE_HOOK is true. */
    void jjtreeCloseNodeScope(Node n) {
        //Token t = getToken(1);
        //if (t!= null) {
        //    SimpleNode sn = (SimpleNode) n;
        //    sn.setEndLocation(t.endLine, t.endColumn);
        //}
    }
}
PARSER_END(Parser)

TOKEN_MGR_DECLS :
{
   public String pathname;
   int beginLine;
}

/* Whitespace */

SKIP: {
  " " | "\t" | "\r" | "\f"
| < "#" ([" ", "\t"])* "file" ([" ", "\t"])* > : FILENAME
| < "#" ([" ", "\t"])* "line" ([" ", "\t"])* > : LINE_NUMBER
}

<FILENAME> SKIP: {
  < (~["\n","\r"])+ >
  {pathname = image.toString();} : DEFAULT
}

<LINE_NUMBER> SKIP: {
   < (["0"-"9"])+ >
   {
     try {
       beginLine = Integer.parseInt(image.toString());
     } catch(NumberFormatException e) {
       throw new RuntimeException(e.getMessage());
     }
   } : LINE_DIRECTIVE
}

<LINE_DIRECTIVE> SKIP: {
  "\n" : AFTER_LINE_DIRECTIVE
| <~[]>
}

<AFTER_LINE_DIRECTIVE> SKIP: {
  <~[]>
  {
    input_stream.adjustBeginLineColumn(beginLine - 1, 1);
    input_stream.backup(1);
  } : DEFAULT
}

SPECIAL_TOKEN: {
  <EOL: (["\n","\r"])+ >
}

/* comments */

MORE: {
  "//" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN: {
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" >
  { input_stream.backup(1); } : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN: {
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE: {
  < ~[] >
}

/* reserved words */

TOKEN: {
  < BREAK: "break" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DELETE: "delete" >
| < DO: "do" >
| < ELSE: "else" >
| < FINALLY: "finally" >
| < FOR: "for" >
| < FUNCTION: "function" >
| < IF: "if" >
| < IN: "in" >
| < INSTANCEOF: "instanceof" >
| < NEW: "new" >
| < RETURN: "return" >
| < SWITCH: "switch" >
| < THIS: "this" >
| < THROW: "throw" >
| < TRY: "try" >
| < TYPEOF: "typeof" >
| < VAR: "var" >
| < VOID: "void" >
| < WHILE: "while" >
| < WITH: "with" >

// Future
| < CLASS: "class" >
| < CONST: "const" >
| < DEBUGGER: "debugger" >
| < DYNAMIC: "dynamic" >
| < ENUM: "enum" >
| < EXPORT: "export" >
| < EXTENDS: "extends" >
| < FINAL: "final" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INTERFACE: "interface" >
| < INTERNAL: "internal" >
| < OVERRIDE: "override" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < SUPER: "super" >

// JS2
| < IS: "is" >
| < CAST: "cast" >

// Our extensions
| < INHERITS: "inherits" >      // obsolete
| < MIXIN: "mixin" >            // obsolete
| < TRAIT: "trait" >


// These are not supposed to be keywords
| < TRUE: "true" >
| < FALSE: "false" >
| < NULL: "null" >
}

/* literals */

TOKEN: {
  < DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| < OCTAL_LITERAL: "0" (["0"-"7"])* >
| < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ (<EXPONENT>)?
  >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < STRING_LITERAL:
        "\""
        (   (~["\"","\\","\n","\r"])
        | <ESCAPE_SEQUENCE>
        )*
        "\""
      | "'"
        (   (~["'","\\","\n","\r"])
        | <ESCAPE_SEQUENCE>
        )*
        "'"
  >
|   // any single char can be escaped although "n","t","b","r","f","v"
    // have special meanings
    // The Octal escapes are not in the spec, but rhino accepts them;
    // the x and u specs ensure they are valid
  < #ESCAPE_SEQUENCE:
      "\\"
        ( (~["0"-"7","x","u"])
        | (["0"-"3"])? (["0"-"7"])? ["0"-"7"]
        | ["x"] ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]
        | ["u"] ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]
        )
  >
| < UNTERMINATED_STRING_LITERAL:
        "\""
        (   (~["\"","\\","\n","\r"])
        | <ESCAPE_SEQUENCE>
        )*
        (["\n","\r"])?
      | "'"
        (   (~["'","\\","\n","\r"])
        | <ESCAPE_SEQUENCE>
        )*
        (["\n","\r"])?
  >
}

/* identifiers */

TOKEN: {
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER: ["a"-"z", "A"-"Z", "$", "_"] >
| < #DIGIT: ["0"-"9"] >
}

/* punctuation */

TOKEN: {
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* operators */

TOKEN: {
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SEQ: "===" >
| < SNE: "!==" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

void Literal() #Literal : {Token t;}
{  t = <DECIMAL_LITERAL>
     {jjtThis.setDecimalValue(t.image);}
|  t = <OCTAL_LITERAL>
     {jjtThis.setOctalValue(t.image);}
|  t = <HEX_LITERAL>
     {jjtThis.setHexValue(t.image);}
|  t = <FLOATING_POINT_LITERAL>
    {jjtThis.setFloatingPointValue(t.image);}
|  t = <STRING_LITERAL>
     {jjtThis.setStringValue(t.image.substring(1,t.image.length()-1));}
|  t = <TRUE>
     {jjtThis.setBooleanValue(true);}
|  t = <FALSE>
     {jjtThis.setBooleanValue(false);}
|  t = <NULL>
     {jjtThis.setNullValue();}
|  t = <UNTERMINATED_STRING_LITERAL>
     { throw new ParseException(t, "unterminated string: " + t.image.substring(0, t.image.length()-1)); }
}

void StringLiteral() #Literal : {Token t;}
{
   t = <STRING_LITERAL>
     {jjtThis.setStringValue(t.image.substring(1,t.image.length()-1));}
|  t = <UNTERMINATED_STRING_LITERAL>
     { throw new ParseException(t, "unterminated string: " + t.image.substring(0, t.image.length()-1)); }
}

void NumericLiteral() #Literal : {Token t;}
{  t = <DECIMAL_LITERAL>
     {jjtThis.setDecimalValue(t.image);}
|  t = <OCTAL_LITERAL>
     {jjtThis.setOctalValue(t.image);}
|  t = <HEX_LITERAL>
     {jjtThis.setHexValue(t.image);}
|  t = <FLOATING_POINT_LITERAL>
     {jjtThis.setFloatingPointValue(t.image);}
}

Token IdentifierOrAS3Keyword() #void : {Token t;}
{
  // Newer AS3 keywords are allowed as identifiers, other
  // keywords (like public, private, protected) apparently are not
  ( t=<IDENTIFIER>
  | t=<INTERNAL>
  | t=<FINAL>
  | t=<STATIC>
  | t=<OVERRIDE>
  | t=<DYNAMIC>
  | t=<IS>
  | t=<CAST>
  )
    {return t;}
}

ASTIdentifier Identifier() #Identifier : {Token t;}
{
  ( t=IdentifierOrAS3Keyword() )
    {jjtThis.setName(t.image); return jjtThis;}
}

void IdentifierOrKeyword() #Identifier : {Token t;}
{
  ( t=IdentifierOrAS3Keyword()
  | t=<CLASS>
  | t=<EXTENDS>
  | t=<IMPLEMENTS>
  | t=<INHERITS>
  | t=<WITH>
  | t=<INTERFACE>
  | t=<TRAIT>
  | t=<MIXIN>
  )
    {jjtThis.setName(t.image);}
}


/* Grammar */

/* Expressions */

void PrimaryExpression() #void : {}
{
    (("this") #ThisReference)
|   Identifier()
|   Literal()
|   ArrayLiteral()
|   ObjectLiteral()
|   "(" Expression() ")"
//|   AllocationExpression()
|   FunctionExpression()
}

void PrimarySuffix() #void : {}
{
    (("[" Expression() "]") #PropertyValueReference)
|   (("." IdentifierOrKeyword()) #PropertyIdentifierReference)
}

void Arguments() #FunctionCallParameters: {}
{
    "(" [ArgumentList()] ")"
}

void ArgumentList() #void : {}
{
    AssignmentExpression() ("," AssignmentExpression())*
}

void ArrayLiteral() #ArrayLiteral : {}
{
  // This is tricky, because [] doesn't contain an empty expression,
  // but [,] contains two.  Easiest to treat them as separate cases.
  LOOKAHEAD("[" "]") "[" "]"
 |  "[" [AssignmentExpression()] #EmptyExpression(jjtree.nodeArity()==0)
        ("," [AssignmentExpression()] #EmptyExpression(jjtree.nodeArity()==0))* "]"
}

void ObjectLiteral() #ObjectLiteral : {}
{
    "{" [PropertyNameAndValue() ("," PropertyNameAndValue())*] "}"
}

void PropertyNameAndValue() #void : {}
{
    (Identifier() | StringLiteral() | NumericLiteral()) ":" AssignmentExpression()
}

// A member expression is any number of '.' and '[' expressions
void MemberExpression() #CallExpression(>1) : {}
{
  PrimaryExpression() ((LOOKAHEAD("." | "[") PrimarySuffix())*)
}

// A new expression ends with the first argument list
void NewExpression() #NewExpression : {}
{
  "new" MemberExpression()  ([LOOKAHEAD("(") Arguments()] #EmptyExpression(jjtree.nodeArity()==0))
}

// Whereas a call expression allows intermingled '.', '[', and '(' expressions
void CallExpression() #CallExpression(>1) : {}
{
  PrimaryExpression() (PrimarySuffix() | Arguments())*
  | NewExpression() (PrimarySuffix() | Arguments())*
  | SuperCallExpression()
}

void SuperCallExpression() #SuperCallExpression : {}
{
  "super" ([ LOOKAHEAD("." Identifier() ("." | "("))
            "." Identifier()
           ] #EmptyExpression(jjtree.nodeArity()==0))
          ([ LOOKAHEAD("." Identifier(), { "apply".equals(getToken(2).image) || "call".equals(getToken(2).image) })
            "." Identifier()
           ] #EmptyExpression(jjtree.nodeArity()==0))
          Arguments()
}

void PostfixOp() #Operator : {Token t;}
{
  ("++" | "--")
    {jjtThis.setOperator(getToken(0).kind);}
}

void PostfixExpression() #PostfixExpression(>1) : {}
{
    CallExpression() [PostfixOp()]
}

void UnaryOp() #Operator : {Token t;}
{
  ("delete" | "void" | "typeof" | "++" | "--" | "+" | "-" | "~" | "!")
    {jjtThis.setOperator(getToken(0).kind);}
}

void UnaryExpression() #UnaryExpression(>1) : {}
{
    PostfixExpression()
|   UnaryOp() UnaryExpression()
}

void MulOp() #Operator : {Token t;}
{
  ("*" | "/" | "%")
    {jjtThis.setOperator(getToken(0).kind);}
}

void MultiplicativeExpression() #BinaryExpressionSequence(>1) : {}
{
    UnaryExpression() (MulOp() UnaryExpression())*
}

void AddOp() #Operator : {Token t;}
{
  ("+" | "-")
    {jjtThis.setOperator(getToken(0).kind);}
}

void AdditiveExpression() #BinaryExpressionSequence(>1) : {}
{
    MultiplicativeExpression()(AddOp() MultiplicativeExpression())*
}

void ShiftOp() #Operator : {Token t;}
{
  ("<<" | ">>" | ">>>")
    {jjtThis.setOperator(getToken(0).kind);}
}

void ShiftExpression() #BinaryExpressionSequence(>1) : {}
{
    AdditiveExpression()(ShiftOp() AdditiveExpression())*
}

JAVACODE boolean getAllowIn() {
  return allowIn;
}

JAVACODE void setAllowIn(boolean newVal) {
  allowIn = newVal;
}

void RelOp() #Operator : {Token t;}
{
  ("<" | ">" | "<=" | ">=" | "instanceof" | "is" | "cast" | LOOKAHEAD({getAllowIn()}) "in")
    {jjtThis.setOperator(getToken(0).kind);}
}

void RelationalExpression() #BinaryExpressionSequence(>1) : {}
{
    ShiftExpression() (RelOp() ShiftExpression())*
}

void EqualOp() #Operator : {Token t;}
{
  ("==" | "!=" | "===" | "!==")
    {jjtThis.setOperator(getToken(0).kind);}
}

void EqualityExpression() #BinaryExpressionSequence(>1) : {}
{
    RelationalExpression() (EqualOp() RelationalExpression())*
}

void BitwiseANDOp() #Operator : {Token t;}
{
  "&"
    {jjtThis.setOperator(getToken(0).kind);}
}

void BitwiseANDExpression() #BinaryExpressionSequence(>1) : {}
{
    EqualityExpression() (BitwiseANDOp() EqualityExpression())*
}

void BitwiseXOROp() #Operator : {Token t;}
{
  "^"
    {jjtThis.setOperator(getToken(0).kind);}
}

void BitwiseXORExpression() #BinaryExpressionSequence(>1) : {}
{
    BitwiseANDExpression() (BitwiseXOROp() BitwiseANDExpression())*
}

void BitwiseOROp() #Operator : {Token t;}
{
  "|"
    {jjtThis.setOperator(getToken(0).kind);}
}

void BitwiseORExpression() #BinaryExpressionSequence(>1) : {}
{
    BitwiseXORExpression() (BitwiseOROp() BitwiseXORExpression())*
}

void LogicalANDExpression() #AndExpressionSequence(>1) : {}
{
    BitwiseORExpression() ("&&" BitwiseORExpression())*
}

void LogicalORExpression() #OrExpressionSequence(>1) : {}
{
    LogicalANDExpression() ("||" LogicalANDExpression())*
}

void ConditionalExpression() #ConditionalExpression(>1) : {}
{
    LogicalORExpression() ["?" Expression() ":" ConditionalExpression()]
}

void AssignmentOperator() #Operator : {Token t;}
{
    ("=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=")
      {jjtThis.setOperator(getToken(0).kind);}
}

void AssignmentExpression() #AssignmentExpression(>1) : {}
{
    ConditionalExpression() [AssignmentOperator() AssignmentExpression()]
|   ("#beginAttribute" AssignmentExpression() "#endAttribute")
}

// Check that priority is ok, check with assigment
SimpleNode Expression() #ExpressionList(>1) : {}
{
  AssignmentExpression() ("," AssignmentExpression())*
  {return jjtThis;}
}


// Statements

void ToplevelStatement() #void : {}
{
    EmptyStatement()
 |  VariableStatement()
 |  ExpressionStatement()
 |  IterationStatement()
 |  ContinueStatement()
 |  BreakStatement()
 |  ReturnStatement()
 |  WithStatement()
 |  SwitchStatement()
 |  ThrowStatement()
 |  TryStatement()
}

void Statement() #Statement : {}
{
    // Lookahead so that "{" starts a Block, not an ObjectLiteral
    LOOKAHEAD("{") Block()
 |  LOOKAHEAD(Identifier() ":") LabeledStatement()
 |  ToplevelStatement()
 |  IfStatement()
}

void Block() #void : {}
{
   LOOKAHEAD(3)
   "{" "}" #StatementList
 | LOOKAHEAD(2) "{" "#beginContent" [StatementList()] "#endContent" "}"
 | LOOKAHEAD(2) "{" "#beginAttributeStatements" [StatementList()] "#endAttributeStatements" "}"
 | "{" [StatementList()] "}"
}

void VariableStatement() #VariableStatement : {}
{
    "var" VariableDeclarationList() Sc()
}

void VariableDeclarationList() #VariableDeclarationList(>1) : {}
{
    VariableDeclaration() ("," VariableDeclaration())*
}

void VariableDeclaration() #VariableDeclaration : { ASTIdentifier id; ASTIdentifier.Type type; }
{
    id = Identifier() [type = TypeAndInitializer() { id.setType(type); }]
}

ASTIdentifier.Type TypeAndInitializer() #void : { ASTIdentifier.Type type = null; }
{
  (
    ":" type = TypeIdentifier() [Initializer()]
  | Initializer()
  ) {
    return type;
  }
}

ASTIdentifier.Type TypeIdentifierOrVoid() #void : { ASTIdentifier.Type type = null; }
{
  (
    "void" {type = null;}
  | type = TypeIdentifier()
  ) {
    return type;
  }
}

ASTIdentifier.Type TypeIdentifier() #void : { Token t; ASTIdentifier.Type type = new ASTIdentifier.Type(); }
{
  (
    t = <IDENTIFIER>    {type.typeName = t.image;}
      [ NotNullable()   {type.notnullable = true; }
      | Nullable()      {type.nullable = true; }
      ]
  ) {
    return type;
  }
}

void Nullable() #void : {}
{
   "?"
}

void NotNullable() #void : {}
{
   "!"
}

void Initializer() #void : {}
{
 //    "=" Expression()
     "=" AssignmentExpression()
}

void EmptyStatement() #void : {}
{
    ";"
}

void ExpressionStatement() #void : {}
{
    Expression() Sc()
}

// Optional semicolon predicate
JAVACODE boolean optionalSc(Token tok)
{
  return (tok.kind == SEMICOLON)
    || ((tok.specialToken != null) &&
        ((tok.specialToken.kind == EOL) ||
         (tok.specialToken.kind == SINGLE_LINE_COMMENT)))
    || (tok.kind == EOF)
    || (tok.kind == RBRACE);
}

// Required 'optional semicolon'
JAVACODE void Sc()
{
    Token tok = getToken(1);
    if (tok.kind == SEMICOLON) {
       tok = getNextToken();
    } else if (!optionalSc(tok)) {
      throw generateParseException();
    }
}

void IfStatement() #IfStatement : {}
{
  /*
   * The disambiguating algorithm of JavaCC automatically binds dangling
   * else's to the innermost if statement.  The LOOKAHEAD specification
   * is to tell JavaCC that we know what we are doing.
   */
   "if" "(" Expression() ")" Statement() [LOOKAHEAD(1) "else" Statement()]
}

void IterationStatement() #void : {}
{
     ("while" "(" Expression() ")" Statement()) #WhileStatement
 |   ("do" Statement() "while" "(" Expression() ")") #DoWhileStatement
 |   LOOKAHEAD("for" "(" Expression() ";") ForStatement()
 |   LOOKAHEAD("for" "(" ";") ForStatement()
 |   LOOKAHEAD("for" "(" "var" VariableDeclarationList() ";") ForVarStatement()
 |   LOOKAHEAD(3) ForInStatement()
 |   LOOKAHEAD(3) ForVarInStatement()
}

void ForStatement() #ForStatement : {}
{
     "for" "(" ({ setAllowIn(false); } [Expression()] { setAllowIn(true); }) #EmptyExpression(jjtree.nodeArity()==0) ";"
               ([Expression()]) #EmptyExpression(jjtree.nodeArity()==0) ";"
               ([Expression()]) #EmptyExpression(jjtree.nodeArity()==0) ")"
         Statement()
}

void ForVarStatement() #ForVarStatement : {}
{
     "for" "(" "var"  ({ setAllowIn(false); } VariableDeclarationList() { setAllowIn(true); }) #VariableStatement ";"
               ([Expression()]) #EmptyExpression(jjtree.nodeArity()==0) ";"
               ([Expression()]) #EmptyExpression(jjtree.nodeArity()==0) ")"
         Statement()
}

void ForInStatement() #ForInStatement : {}
{
     "for" "(" { setAllowIn(false); } Expression() { setAllowIn(true); } "in" Expression() ")" Statement()
}

void ForVarInStatement() #ForVarInStatement : {}
{
     "for" "(" "var" Identifier() ({ setAllowIn(false); } [Initializer()] { setAllowIn(true); }) #EmptyExpression(jjtree.nodeArity()==0) "in" Expression() ")" Statement()
}

void ContinueStatement() #ContinueStatement : {}
{
    "continue" [Identifier()] Sc()
}

void BreakStatement() #BreakStatement : {}
{
    "break" [Identifier()] Sc()
}

void ReturnStatement() #ReturnStatement : {}
{
     // Choose return with no value over gobbling the next expression
     // in the case of an implicit ;
     "return" ([LOOKAHEAD( { (! optionalSc(getToken(1))) } ) Expression()]) #EmptyExpression(jjtree.nodeArity()==0) Sc()
}

void WithStatement() #WithStatement : {}
{
    "with" "(" Expression() ")" Statement()
}

void SwitchStatement() #SwitchStatement : {}
{
   "switch" "(" Expression() ")"
     "{" (CaseClause())* [DefaultClause() (CaseClause())*] "}"
}

void CaseClause() #CaseClause : {}
{
   "case" Expression() ":" [StatementList()]
}

void DefaultClause() #DefaultClause : {}
{
   "default" ":" [StatementList()]
}

void LabeledStatement() #LabeledStatement : {}
{
   Identifier() ":" Statement()
}

void ThrowStatement() #ThrowStatement : {}
{
   "throw" Expression() Sc()
}

void TryStatement() #TryStatement : {}
{
   "try" Block() (CatchClause() [FinallyClause()] | FinallyClause())
}

void CatchClause() #CatchClause : {}
{
   "catch" "(" Identifier() ")" Block()
}

void FinallyClause() #FinallyClause : {}
{
   "finally" Block()
}

// Function declaration

void FunctionDeclaration() #FunctionDeclaration : {ASTFormalParameterList formals; ASTIdentifier.Type type;}
{
    "function" Identifier()
    formals = FormalParameterList()
    [":" type = TypeIdentifierOrVoid() { formals.setReturnType(type); }]
    Block()
}

void FunctionExpression() #FunctionExpression : {ASTFormalParameterList formals; ASTIdentifier.Type type;}
{
    "function" (Identifier())?
    formals = FormalParameterList()
    [":" type = TypeIdentifierOrVoid() { formals.setReturnType(type); }]
    Block()
}

ASTFormalParameterList FormalParameterList() #FormalParameterList : {}
{
     "(" [FormalParameters()] ")" 
     { return jjtThis; }
}

void FormalParameters() : {}
{
   FormalParameter() ("," FormalParameter())*
}

void FormalParameter() #void : {ASTIdentifier id; ASTIdentifier.Type type;}
{
    id = Identifier() [":" type = TypeIdentifier() { id.setType(type); }]
}

// Program structuring/

SimpleNode Program() #Program : {}
{
  (Directive())* <EOF>
  { return jjtThis; }
}

void ModifiedDefinition() #ModifiedDefinition : {}
{
  Modifiers(jjtThis) (FunctionDeclaration() | ClassDefinition())
}

void Directive() #void : {}
{
  // Lookahead so that 'function' begins a function declaration,
  // not a function expression.
  LOOKAHEAD(ModifiedDefinition())
  ModifiedDefinition()
| LOOKAHEAD("{") DirectiveBlock()
| (ToplevelStatement()) #Statement
| LOOKAHEAD(2) IncludeDirective() Sc()
| PragmaDirective() Sc()
| IfDirective()
}

void DirectiveBlock() #DirectiveBlock: {}
{
  "{" (Directive())* "}"
}

SimpleNode StatementList() #StatementList : {Token t;}
{
    ( LOOKAHEAD(ModifiedDefinition()) ModifiedDefinition() | Statement() | PragmaDirective())+
      { return jjtThis; }
}

SimpleNode IncludeDirective() #IncludeDirective : {Token t;}
{
  "#include" /*NoLineBreak()*/ StringLiteral()
  {return jjtThis;}
}

SimpleNode PragmaDirective() #PragmaDirective : {Token t;}
{
  "#pragma" /*NoLineBreak()*/ StringLiteral()
  {return jjtThis;}
}

SimpleNode IfDirective() #IfDirective : { Token t;}
{
  "if" "(" Expression() ")" DirectiveBlock()
  [LOOKAHEAD(1) "else" ( DirectiveBlock() | IfDirective() # DirectiveBlock(1) )]
  {return jjtThis;}
}

JAVACODE void NoLineBreak()
{
  // TBD: verify that the next token isn't a line break
}

SimpleNode ClassProperty() #ModifiedDefinition : {}
{
  Modifiers(jjtThis) (FunctionDeclaration() | VariableStatement())
  {return jjtThis; }
}

SimpleNode TraitsList() #TraitsList : {Token t;}
{
   Identifier() ("," Identifier())*
     { return jjtThis; }
}

void ClassOrTrait() #Identifier : {Token t;}
{
  "class" {jjtThis.setName("class");}
| "trait" {jjtThis.setName("trait");}
| "mixin" {jjtThis.setName("trait");}
}

void ClassDirective() #void : {}
{
   LOOKAHEAD(ClassProperty()) ClassProperty()
 | LOOKAHEAD("{") ClassDirectiveBlock()
 | (ToplevelStatement()) #Statement
 | PragmaDirective() Sc()
 | ClassIfDirective()
}

void ClassDirectiveBlock() #ClassDirectiveBlock: {}
{
  "{" (ClassDirective())* "}"
}

SimpleNode ClassIfDirective() #ClassIfDirective : { Token t;}
{
  "if" "(" Expression() ")" ClassDirectiveBlock()
  [LOOKAHEAD(1) "else" ( ClassDirectiveBlock() | ClassIfDirective() #ClassDirectiveBlock(1) )]
  {return jjtThis;}
}

SimpleNode ClassDefinition() #ClassDefinition : {Token t;}
{
   ClassOrTrait() Identifier()

   ["extends" Identifier() ] #EmptyExpression(jjtree.nodeArity()==0)
   [("inherits" | "with" ) TraitsList() ] #EmptyExpression(jjtree.nodeArity()==0)
   "{" (
        ClassDirective()
       )* "}"
  {return jjtThis;}
}

void Modifiers(ASTModifiedDefinition mod): { Token t; }
{
 (
  LOOKAHEAD(2)
  (
    t = <IDENTIFIER>
     {mod.setToken(t).setNamespace(t.image); }
  | t = "public"
     {mod.setToken(t).setAccess(ASTModifiedDefinition.PUBLIC_ACCESS);}
  | t = "protected"
     {mod.setToken(t).setAccess(ASTModifiedDefinition.PROTECTED_ACCESS);}
  | t = "internal"
     {mod.setToken(t).setAccess(ASTModifiedDefinition.INTERNAL_ACCESS);}
  | t = "private"
     {mod.setToken(t).setAccess(ASTModifiedDefinition.PRIVATE_ACCESS);}
  | t = "static"
     {mod.setToken(t).setStatic(true);}
  | t = "final"
     {mod.setToken(t).setFinal(true);}
  | t = "dynamic"
     {mod.setToken(t).setDynamic(true);}
  | t = "override"
     {mod.setToken(t).setOverride(true);}
  )
 )*
}
