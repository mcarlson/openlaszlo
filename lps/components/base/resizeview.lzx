<library>
    <include href="utils/layouts/stableborderlayout.lzx"/>

    <class name="resizeview_x">
        <attribute name="left" type="string"/>
        <attribute name="middle" type="string"/>
        <attribute name="right" type="string"/>
        <attribute name="frame"
            setter="this.frame=frame;
                    if (this['onframe']) this.onframe.sendEvent(frame)"/>
        <method event="oninit">
            // if this view has a height, then the child views should
            // be constrained to that height, otherwise they will be sized
            // to the height of their resource
            if (hassetheight) {
                var f = function (){
                    this.setAttribute( "height" , this.immediateparent.height);
                }
                var d = [  this , 'height' ];
                leftview.applyConstraint( 'height' , f , d );
                middleview.applyConstraint( 'height' , f , d );
                rightview.applyConstraint( 'height' , f , d );
            }
        </method>
        <view name="leftview" stretches="height">
            <attribute name="frame" value="${parent.frame}"/>
            <method event="onconstruct">
                this.setResource(parent.left);
            </method>
        </view>
        <view name="middleview" stretches="both">
            <attribute name="frame" value="${parent.frame}"/>
            <method event="onconstruct">
                this.setResource(parent.middle);
            </method>
        </view>
        <view name="rightview" stretches="height">
            <attribute name="frame" value="${parent.frame}"/>
            <method event="onconstruct">
                this.setResource(parent.right);
            </method>
        </view>
        <stableborderlayout name="sbl" axis="x"/>
    </class>

    <class name="resizeview_y">
        <attribute name="top" type="string"/>
        <attribute name="middle" type="string"/>
        <attribute name="bottom" type="string"/>
        <attribute name="frame"
            setter="this.frame=frame;
                    if (this['onframe']) this.onframe.sendEvent(frame)"/>
        <method event="oninit">
            // if this view has a height, then the child views should
            // be constrained to that height, otherwise they will be sized
            // to the height of their resource
            if (hassetwidth) {
                var f = function (){
                    this.setAttribute( "width" , this.immediateparent.width);
                }
                var d = [  this , 'width' ];
                topview.applyConstraint( 'width' , f , d );
                middleview.applyConstraint( 'width' , f , d );
                bottomview.applyConstraint( 'width' , f , d );
            }
        </method>
        <view name="topview" stretches="width">
            <attribute name="frame" value="${parent.frame}"/>
            <method event="onconstruct">
                this.setResource(parent.top);
            </method>
        </view>
        <view name="middleview" stretches="both">
            <attribute name="frame" value="${parent.frame}"/>
            <method event="onconstruct">
                this.setResource(parent.middle);
            </method>
        </view>
        <view name="bottomview" stretches="width">
            <attribute name="frame" value="${parent.frame}"/>
            <method event="onconstruct">
                this.setResource(parent.bottom);
            </method>
        </view>
        <stableborderlayout name="sbl" axis="y"/>
    </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
