<library>
    <include href="base/basecomponent.lzx" />

    <!--- an abstract class for components that represent a value for data -->
    <class name="basevaluecomponent" extends="basecomponent">
        <!--- the value that this item represents. When selected,
        the parent selection group's value will be set to this value.
        Most subclasses require you to call getValue() to get the
        value of the attribute.  -->
        <attribute name="value" value="null"/>
        <!--- The type of value of the item. Default is none,
             which will attempt to heuristicate the type from the
             value. -->
        <attribute name="type" value="" type="string" />

        <!--- returns the value that is represented by this component
        -->
        <method name="getValue">
            return this.value == null ? this.text : this.value;
        </method>

        <!--- TODO: [2008-11-14 ptw] There needs to be a simpler way
             to declare simple dependencies like this in LZX
             @access private
        -->
        <method name="$lzc$getValue_dependencies" args="...ignore">
          return [this, 'value'];
        </method>

        <!--- Set `value` according to `type` from a String

              Called by datapath to set the value for a data binding,
              but can be used in general to set a typed value from a
              string representation.

              @param String data: the string representation of `value` (according to `type`). -->
        <method name="applyData" args="data">
          this.acceptAttribute('value', this.type, data);
        </method>

        <!--- Return `value` according to `type` as a String

              Called by a datapath to retrieve the value for a data
              binding, but can be used in general to get a string
              representation of a typed value.

              @return String: the string representation of `value` (according to `type`)
        -->
        <method name="updateData">
          return this.presentAttribute('value', this.type);
        </method>
        <!--- TODO: [2008-11-14 ptw] There needs to be a simpler way
             to declare simple dependencies like this in LZX
             @access private
        -->
        <method name="$lzc$updateData_dependencies" args="who, self">
          // Our dependencies are just the dependencies of
          // presentAttribute on our value and type
          return this.$lzc$presentAttribute_dependencies(who, self, 'value', this.type);
        </method>

        <doc>
          <tag name="shortdesc"><text>an abstract class for components which represent data</text></tag>
          <text>
            <p>
            This abstract class provides a value attribute with data binding to a specific
            valuedatapath.
            </p>
          </text>
        </doc>
    </class>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
