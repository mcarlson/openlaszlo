<!--
 $Id$
-->

<library>

<!--
  Simple time measurement framework
-->

<text id="measurements" multiline="true" resize="true" font="monospace" selectable="true">
    <attribute name="visible" value="false"/>
    <attribute name="width" value="$once{canvas.width}"/>
    <attribute name="height" value="$once{canvas.height}"/>
    <method name="write" args="s">
        if (!this.visible) this.setAttribute('visible', true);
        this.setAttribute('text', this.text + ( s + "\n" ));
    </method>
</text>

<script>
  //---
  // Meter
  //
  // A meter is used to to accumulate a count, total, max, min, and
  // mean^2 of a set of data points.  These accumulated values can be
  // used to report number, total, average and deviation of the data
  // set.
  //
  // @param String name: the name of the meter
  // @param String units: the units of the meter
  //---
  function Meter (name:String="", units:String="") {
    this.name = name;
    this.units = units;
    this.count = 0;
    this.total = 0.0;
    this.meanSquared = 0.0;
    this.max = 0;
    this.min = Infinity;
  }

  //---
  // Accumulate a value, which will increment the count of events and
  // update max, min, and the running mean^2
  //---
  Meter.prototype.accumulate = function (amount) {
    <![CDATA[
    var count = this.count + 1;
    var total = this.total;
    var meanSquared = this.meanSquared;

    // We accumulate a running mean^2, which minimizes overflow but
    // sacrifices numerical stability for small variances, so sez jga.
    this.count = count;
    this.total = total + amount;
    this.meanSquared += amount * amount;
    //      (meanSquared / count) * (count - 1.0)
    //      + (amount / count) * amount;

    if (amount > this.max) {
      this.max = amount;
    }
    if (amount < this.min) {
      this.min = amount;
    }
    ]]>
  }

  //---
  // Subtract overhead
  //--
  Meter.prototype.subtractOverhead = function (overhead) {
    with (this) {
      total -= overhead.total;
      meanSquared -= overhead.meanSquared;
      min -= overhead.min;
      max -= overhead.max;
    }
  }

  //---
  // pad or trim a string to a specified length
  //
  // @param String str: the string to pad
  // @param Integer len: the desired width, if negative pad on the left
  // @param Integer dec: ensure dec characters to the right of '.', padding with 0.
  //---
  Meter.prototype.pad = function (str='', len=null, dec=null, pad=' ', sign='-', radix=10, force=false) {
    <![CDATA[
    // TODO: [2006-03-01 ptw] Stolen from LzFormat, share when that is ported.
    var num = typeof(str) == 'number';
    // coerce to be string
    if (num) {
      if (dec != null) {
        var precision = Math.pow(10, (- dec));
        str = Math.round(str/precision)*precision;
      }
      str = Number(str).toString(radix);
      if (sign != '-') {
        if (str.indexOf('-') != 0) {
          if (str != 0) {
            str = sign + str;
          } else {
            // ' 0' not '+0'
            str = ' ' + str;
          }
        }
      }
    } else {
      str = '' + str;
    }
    var strlen = str.length;
    // enforce precision
    if (dec != null) {
      if (num) {
        var decimal = str.lastIndexOf('.');
        if (decimal == -1) {
          var decimals = 0;
          if (force || (dec > 0)) {
            str += '.';
          }
        } else {
          var decimals = strlen - (decimal + 1);
        }
        if (decimals < dec) {
          for (var i = decimals; i < dec; i++) str += '0';
        } else {
          // Hide float roundoff errors
          str = str.substring(0, decimal + dec + 1);
        }
      } else {
        str = str.substring(0, dec);
      }
    }
    // enforce minimum width
    strlen = str.length;
    if (! len) {
      len = 0;
    }
    var left = false;
    if (len < 0) {
      len = (- len);
      left = true;
    }
    if (strlen >= len) {
      return str;
    }
    if (left) {
      for (var i = strlen; i < len; i++) str = str + ' ';
    } else {
      sign = null;
      if (pad != ' ') {
        if (isNaN(str.substring(0, 1))) {
          sign = str.substring(0, 1);
          str = str.substring(1);
        }
      }
      for (var i = strlen; i < len; i++) str = pad + str;
      if (sign != null) {
        str = sign + str;
      }
    }
    return str;
    ]]>
  }

  //---
  // String version of a meter.  The name, mean, sigma, range and
  // count.
  //---
  Meter.prototype.toString = function () {
   with (this) {
     var mean = total / count;
     return pad(name, -30) + ': ' +
       pad(mean, 8, 2) + units + ' ' +
       // This should be greek small letter sigma (&#x3C3;), meaning
       // 'standard deviation', but it is not supported in Flash 5 so I
       // am using plus-minus sign (&#xB1;) instead.
       '&#xB1;' +
       pad(Math.sqrt((meanSquared - ((total /count) * total)) / (count-1)), 8, 2) +
       // This is the range and number of samples
       ' ' + '[' + pad(min, null, 2) + '..' + pad(max, null, 2) + ']' +
       '/' + count;
    }
  }

  //---
  // Measure the cost of an operation
  //
  // @param object targets: A hashmap of functions to measure.  If
  // there is a member with the key 'empty', it is used to calculate
  // the measurement overhead (which is subtracted from the time of all
  // other targets).
  //
  // @param integer iterations: Number of iterations of the inner loop
  // of each target.  Short operations need to be iterated sufficiently
  // that the microsecond clock can measure them.  Default 
  // Measurement.defaultIterations.
  //
  // @param integer trials: Number of trials to average over.
  // Measurements are repeated to reduce the perturbation due to
  // garbage collection or other asynchronous operations in the
  // runtime.  Default Measurement.defaultTrials.
  //
  // @param boolean background: Whether or not to run the trials in
  // the idle loop (to avoid "Player running slowly").  Default
  // Measurement.defaultRunInBackground.
  //--
  function Measurement (targets, iterations=Measurement.defaultIterations, trials=Measurement.defaultTrials, background=Measurement.defaultRunInBackground) {
    measurements.write("iterations = "+this.iterations);

    // Measure each target trials times
    this.meters = {};
    for (var key in targets) {
      this.meters[key] = new Meter(key, 'us');
    }
    this.scale = 1000; // microseconds
    this.count = 0;
  }

  Measurement.defaultTrials = 100;
  Measurement.defaultIterations = 200;
  Measurement.defaultRunInBackground = true;

  Measurement.prototype.run = function () {
    if (this.runInBackground) {
      this.background();
    } else {
      this.foreground();
    }
  }

  Measurement.prototype.foreground = function () {
    <![CDATA[
    this.delegate = null;
    while (this.measureStep());
    ]]>
  }

  Measurement.prototype.background = function () {
    this.delegate = new LzDelegate(this, 'measureStep' ,
                                   lz.Idle , "onidle" );
  }

  Measurement.prototype.measureStep = function () {
    <![CDATA[
    with (this) {
      if (count < trials) {
        for (var key in targets) {
          var target = targets[key];
          var start = (new Date()).getTime();
          target();
          var end = (new Date()).getTime();
          meters[key].accumulate((end - start)*scale/iterations);
        }
        this.count++;
        return true;
      }
      // Stop background loop
      if (delegate != null) {
        delegate.unregisterAll();
      }
      var overhead = meters['empty'];
      delete targets['empty'];
      measurements.write(overhead.toString());
      for (var key in targets) {
        if (overhead != null) {
            // meters[key].subtractOverhead(overhead);
        }
        // Report results
        measurements.write(meters[key].toString());
      }
      return false;
    }
    ]]>
  }

</script>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
