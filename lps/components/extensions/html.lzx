<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2007-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->


<library>
  <switch>
    <when runtime="dhtml">
    </when>
    <otherwise>
<script when="immediate">
// proxy object for browser lz.embed.iframemanager
lz.embed.iframemanager = new LzInheritedHash();
lz.embed.iframemanager.owners = new LzInheritedHash();
lz.embed.iframemanager.create = function(owner, name, scrollbars) {
    lz.Browser.callJS('lz.embed.iframemanager.create', function (id) { 
        lz.embed.iframemanager.owners[id] = owner;
        owner.setiframeid(id); 
    }, canvas.id, name, scrollbars);
}
lz.embed.iframemanager.setPosition = function(id, x, y, width, height, v, z) {
    lz.Browser.callJS('lz.embed.iframemanager.setPosition', null, id, x, y, width, height, v, z);
}
lz.embed.iframemanager.setSrc = function(id, src, history) {
    lz.Browser.callJS('lz.embed.iframemanager.setSrc', null, id, src, history);
}
lz.embed.iframemanager.setVisible = function(id, v) {
    lz.Browser.callJS('lz.embed.iframemanager.setVisible', null, id, v);
}
lz.embed.iframemanager.bringToFront = function(id) {
    lz.Browser.callJS('lz.embed.iframemanager.bringToFront', null, id);
}
lz.embed.iframemanager.sendToBack = function(id) {
    lz.Browser.callJS('lz.embed.iframemanager.sendToBack', null, id);
}
lz.embed.iframemanager.scrollBy = function(id, x, y) {
    lz.Browser.callJS('lz.embed.iframemanager.scrollBy', null, id, x, y);
}
lz.embed.iframemanager.__gotload = function(id) {
    if (lz.embed.iframemanager.owners[id]) lz.embed.iframemanager.owners[id].__gotload();
}
lz.embed.iframemanager.__destroy = function(id) {
    lz.Browser.callJS('lz.embed.iframemanager.__destroy', null, id);
}
</script>
</otherwise>
</switch>

<class name="html" extends="view">
    <attribute name="widthoffset" type="number" value="0"/>
    <attribute name="heightoffset" type="number" value="0"/>
    <attribute name="scrollbars" type="boolean" value="true"/>
    <attribute name="loading" type="boolean" value="false"/>
    <attribute name="appendto" value="null"/>
    <attribute name="ready" value="false"/>
    <attribute name="history" value="true"/>

    <attribute name="target" value="null"/>
    <attribute name="framename" value="" type="string"/>
    <event name="onload"/>
    <event name="onready"/>
    <setter name="target" args="t">
        if (t == null) return;
        this.target = t;
        if (this['_posdel']) {
            this._posdel.unregisterAll();
        } else {
            this._posdel = new LzDelegate(this, '__updatepos'); 
        }
        this._posdel.register(this.target, 'onwidth');
        this._posdel.register(this.target, 'onheight');
        this._posdel.register(this.target, 'onx');
        this._posdel.register(this.target, 'ony');
        //Debug.write(t);
        this.__updatepos(null);
        if (this['ontarget']) this.ontarget.sendEvent(t);
    </setter>

    <attribute name="visible" type="boolean" value="true"/>
    <setter name="visible" args="v">
        this.visible = v;
        if (this['iframeid']) lz.embed.iframemanager.setVisible(this.iframeid, v);
        if (this['onvisible']) this.onvisible.sendEvent(v);
    </setter>

    <attribute name="src" type="text"/>
    <event name="onsrc"/>
    <setter name="src" args="s">
        this.src = s;
        this.setAttribute('loading', true);
        if (this['iframeid']) {
            lz.embed.iframemanager.setSrc(this.iframeid, s, this.history);
        } else {
            this.srcset = s;
        }
        this.onsrc.sendEvent(s);
    </setter>

    <!--- @access private -->
    <handler name="oninit">
        if (this['target'] == null) {
            this.setAttribute('target', this.parent);
        }
        if ($dhtml) {
            var i = lz.embed.iframemanager.create(this, this.framename, this.scrollbars, this.sprite.__LZdiv, 0, canvas);
        } else {
            var i = lz.embed.iframemanager.create(this, this.framename, this.scrollbars);
        }
        if (i) this.setiframeid(i);
    </handler>

    <!--- @access private -->
    <method name="__updatepos" args="ignore">
        if (! this['iframeid']) return;

        if ($dhtml) {
            var x = 0;
            var y = 0;
            var z = this.sprite.getZ();
        } else {
            var x = this.getAttributeRelative("x", canvas);
            var y = this.getAttributeRelative("y", canvas);
            var z = this.target.sprite.getZ();
        }
        var width = this.width;
        var height = this.height;
        lz.embed.iframemanager.setPosition(this.iframeid, x, y, width, height, this.visible, z);
    </method>
    <!--- @access private -->
    <method name="setiframeid" args="id">
        //Debug.write('setiframeid', id, this)
        this.iframeid = id;
        if (this['isfront']) this.bringToFront();
        if (this['srcset']) lz.embed.iframemanager.setSrc(id, this.srcset, this.history);
        this.__updatepos(null);
        if ($dhtml) {
            this.setAttribute('clickable', true);
        }
        this.setAttribute('ready', true);
    </method>
    <method name="__gotload">
        this.setAttribute('loading', false);
        this.__updatepos(null);
        this.onload.sendEvent();
    </method>
    <method name="bringToFront">
        super.bringToFront();
        if (this['isfront'] == true || ! this['iframeid']) return;
        this.isfront = true;
        if ($dhtml) {
            lz.embed.iframemanager.setZ(this.iframeid, this.sprite.getZ());
        } else {
            lz.embed.iframemanager.bringToFront(this.iframeid);
        }
    </method>
    <method name="sendToBack">
        super.sendToBack();
        if (this['isfront'] == false || ! this['iframeid']) return;
        this.isfront = false;
        if (this['iframeid']) lz.embed.iframemanager.sendToBack(this.iframeid);
        if ($dhtml) {
            lz.embed.iframemanager.setZ(this.iframeid, this.sprite.getZ());
        } else {
            lz.embed.iframemanager.sendToBack(this.iframeid);
        }
    </method>
    <method name="scrollBy" args="x, y">
        if (this['iframeid']) lz.embed.iframemanager.scrollBy(this.iframeid, x, y);
    </method>
    <!--- @keywords private -->
    <method name="destroy">
        if (this['iframeid']) lz.embed.iframemanager.__destroy(this.iframeid);
        <!-- TODO: remove when cleanup is automatic -->
        if (this._posdel) {
            this._posdel.unregisterAll();
        }
        super.destroy();
    </method>
    <switch>
        <when runtime="dhtml">
        <attribute name="_mouseisdown" value="false"/>
        <handler name="onmouseover" reference="lz.GlobalMouse" args="e">
            <![CDATA[
            if (! this['iframeid']) return;
            if (e == this && this._mouseisdown == false) {
                LzMouseKernel.disableMouseTemporarily();
            }
            ]]>
        </handler>
        <handler name="onmousedown" reference="lz.GlobalMouse" args="e">
            if (e == this) this._mouseisdown = true;
        </handler>
        <handler name="onmouseup" reference="lz.GlobalMouse" args="e">
            if (e == this) this._mouseisdown = false;
        </handler>
        </when>
    </switch>
</class>
</library>
