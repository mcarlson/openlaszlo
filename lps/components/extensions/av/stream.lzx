<?xml version="1.0" encoding="UTF-8" ?>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2006 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<library>

<class name="stream" extends="node">

    <!--- the url of the stream, maybe be relative URL, 
          for example: http://localhost/myvideo.flv, or simply myvideo.flv
          when type="rtmp" the url is always relative the the rtmpconnection -->
    <attribute name="url" value="" type="string" setter="setUrl(url)"/>

    <!--- @keywords private -->
    <event name="onurl"/>

    <!--- protocol "rtmp" or "http" (default: http)-->
    <attribute name="type" value="http" type="string"/>

    <!--- total length (in seconds) of stream currently playing -->
    <attribute name="totaltime" value="0" type="number"/>
    
    <!--- current time of stream currently playing (in seconds) -->
    <attribute name="playtime" value="0" type="number"/>
    
    <!--- the current frames per second for playing video -->
    <attribute name="fps" type="number" value="0"/>

    <!--- true if playing, false if paused or not started yet -->
    <attribute name="playing" value="false"/>

    <!--- current time of stream being recorded (in seconds) -->
    <attribute name="recordtime" value="0" type="number"/>
    
    <!--- mode: 'playback' or 'record' -->
    <attribute name="mode" value="" type="string"/>
    
    <!--- when true, print extra info to the debugger -->
    <attribute name="debug" value="false"/>
   
    <!--- rtmp streamname (without .flv suffix) -->
    <attribute name="streamname" value="" type="string"/>

    <!-- 
          private attributes 
    -->
    <!--- reference to the Flash NetConnection object
          @keywords private -->
    <attribute name="_nc" value="null"/>
    
    <!--- reference to the Flash NetStream object
          @keywords private -->
    <attribute name="_stream" value="null"/>

    <!--- @keywords private -->
    <attribute name="_playtimedel" value="null"/>

    <!--- @keywords private -->
    <attribute name="_pendingstream" value="" type="string"/>
    
    <!--- @keywords private -->
    <attribute name="_recordtimedel" value="null"/>
    
    <!--- @keywords private -->
    <attribute name="_basetime" value="0" type="number"/>

    <!--- set up to publish a stream, type: "record" or "publish"
        @keywords private -->
    <method name="_publishSetup" args="type"> <![CDATA[     
     //Debug.write('record', streamname);
        if ($debug) {
            if (this.type != 'rtmp') 
                Debug.warn('type must be rtmp to '+type+' %w', this);
        }
        if (!this._stream) this._createStream();

        if (parent instanceof videoview &&  parent.cam != null) {
                this._stream.attachVideo(parent.cam._cam);
        }
        this._stream.attachAudio(Microphone.get());

        if (this.streamname == "") {
            if (this.url != "") {
                this.streamname = _namefromurl(this.url);
            } else {
                // make up temporary name
            }
        }
    ]]>
    </method>

    <!-- start sending a live stream to the server -->
    <method name="broadcast">
        this._publishSetup("broadcast");
        Debug.write('publish', this.streamname);
        this._stream.publish(this.streamname);
    </method>

    <!-- start recording -->
    <method name="record"> <![CDATA[    
        this._publishSetup("record");
        this._stream.publish(this.streamname, "record");
        Debug.write('publish', this.streamname);

        this._basetime = (new Date).getTime();
        //Debug.write('basetime = ', this._basetime);
        if (!this._recordtimedel) {
            this._recordtimedel = new LzDelegate(this, "_updateRecordTime");
        }
        this._recordtimedel.unregisterAll();
        this._recordtimedel.register(LzIdle, "onidle")
        setAttribute('mode', 'record');
        ]]> 
    </method>

    <!--- @keywords private -->
    <method name="_updateRecordTime">
        this.setAttribute("recordtime",
            ((new Date).getTime() - this._basetime)/1000);
    </method>

    <!-- TODO: do we really want both stop and pause? -->
    <method name="stop">
        if (this.mode == "record") {
            this._stream.publish(false);
            this._recordtimedel.unregisterAll();
        } else {
            this._stream.play(false);
        }
    </method>

    <!--- find or create the Flash NetConnection object
          @keywords private -->
    <method name="_findnc">
        if (this._nc) return;
        switch (this.type) {
            case 'http':
                if (!this['_nullnc']) {
                    // keep one of these around for any http stream 
                    // we need (weird flash thing that we need a 
                    // null NetConnection)
                    stream.prototype._nullnc = new NetConnection();
                    this._nullnc.connect(null);
                }
                this._nc = this._nullnc;
                break;
            case 'rtmp':
                    if (rtmpconnection == undefined) {
                        Debug.write('rtmpconnection must be included');
                    } 
                    this._nc = rtmpconnection.prototype._default._nc;
                break;
            default:
                if ($debug) Debug.write('unexpected protocol for url: ',
                        this.url.toString(), this);
        }
    </method>

    <!--- create Flash NetStream object
          @keywords private -->
    <method name="_createStream">
        if (!url) {
            if ($debug) Debug.write("can't create stream w/ no url", this);
            return;
        }
        if (this._stream) return;

        this.setAttribute('_stream', new NetStream(this._nc));
 
        this._stream.t = this;  
        this._stream.onStatus = function(info) {
                var t = this.t;
                if (t.debug) _root.Debug.write('ns status', info);
                switch (info.code) {
                    case "NetStream.Buffer.Empty":
                        var newbuftime = t._stream.bufferTime + 1;
                        t._stream.setBufferTime(newbuftime);
                         //_root.Debug.write('newbuffertime =',newbuftime);
                        break;
                    case "NetStream.Buffer.Full":
                        if (t._pendingstream != "") {
                            t.setAttribute('streamname', t._pendingstream);
                            //Debug.write('streamname', t.streamname);
                            t._pendingstream = "";
                        }
                        break;
                    case "NetStream.Play.Start":
                      
                       if(t._pendingstream != ""){
                            //v.show();
                       }
                        break;
                };
            };

        this._stream.onPlayStatus = function(info) {
                var t = this.t;
                 //_root.Debug.write('onPlayStatus ', info);
                 if (info.code == "NetStream.Play.Complete") {
                    //correct for valid Buffer.Empty
                    var newbuftime = t._stream.bufferTime - 1;
                    t._stream.setBufferTime(newbuftime);
                     //_root.Debug.write('newbuffertime =',newbuftime);
                 }
        }
        this._stream.onMetaData = function(info) {
            var t = this.t;
            for (var propName in info) {
                //_root.Debug.write(propName + " = " + info[propName]);
                if (propName == "duration") {
                    t.setAttribute('totaltime', info[propName]);
                }
            }
        };
    </method>
    
   <!--- play stream at this.url  -->
   <method name="play" args="start, pause"> <![CDATA[
       if (this.debug) Debug.write('play', this.url, this.type);
       if (this._stream) this._stream.play(false);
       
       // start must be undefined for a live stream
       this._basetime = start == undefined ? 0 : start;;
       this.setAttribute("playtime", this._basetime);

       var isnew = false;
        if (!this._stream) {
            isnew = true;
            this._createStream();
        }
        if (parent instanceof videoview && (this.mode == 'record' || isnew)) {
            // if we were recording or this is a new stream, then
            // we need to attach the stream to the videoview surface in order
            // to see it
            Debug.write('attachVideo', this._stream, parent);
            var vid =  parent.__LZmovieClipRef.__lzvideo;
            vid.attachVideo(this._stream);

            // set up delegate to update the playtime attribute
            if (!this._playtimedel) {
                this._playtimedel = new LzDelegate(this, "_updatePlayTime");
            }
            this._playtimedel.unregisterAll();
            this._playtimedel.register(LzIdle, "onidle");
            this.setAttribute("playtime", 0);
        }
                 
        //Debug.write('stream=',this._stream);
        
        /** TODO: when to do this? 
            
            // call function in server-side main.asc
            var t = this;  // for use in closure
            this.onResult = function(streamLength) {
                //_root.Debug.write('onresult = ', streamLength);
                t.setAttribute('totaltime',streamLength);
            };
            rtc._nc.call("getLength", this, name);
            //Debug.write('call getLength ', name, " nc=",rtc._nc);
           
       **/



        //var sname = _namefromurl(this.url);
        var sname = this.url;
        Debug.write('start = ',start);
        if (pause) {
            this._stream.play(sname, start, 0);
            if (playing) this.setAttribute('playing', false);
            if (this.type == 'http') {
                // *** this doesn't work
                this._stream.pause(true);
            }
        } else {
            Debug.write('play', sname, typeof(sname));
            if (start == undefined) {
                // for a live stream, we need to omit the second param
                // for a recorded stream it will default to 0
                this._stream.play(sname);
            } else {
                this._stream.play(sname, start);
            }
            this.setAttribute('playing', true);
        }
        if (this.type == 'rtmp') this._pendingstream = sname;
        setAttribute('mode', 'playback');
        if (this.debug) {
            Debug.write('play', sname, typeof(sname), start);
        }
    ]]>
    </method>

    <!--- @keywords private -->
    <method name="_updatePlayTime">
        // don't update if new stream about to start
        if (this._pendingstream == "") {
            this.setAttribute("playtime", this._stream.time + this._basetime);
            this.setAttribute("fps", this._stream.currentFps);
        } 
    </method>
    <!--- pause video (calling while paused will toggle to play) 
          this does nothing when you record -->
    <method name="pause">
         if (this.mode == 'record') return;
         this._stream.pause();
         this.setAttribute('playing', !this.playing);
    </method>

    <method name="init">
        super.init();
        if (this.url != "") this._setUrl();
    </method>

    <!--- if type is rtmp then
          return the url w/o the .flv suffix if there was one 
         @keywords private -->
    <method name="_namefromurl" args="fromurl"> <![CDATA[   
        var sname = fromurl;
            /**
            Debug.write('sname=', sname, 
                'suffix=',sname.substr(-4));
            **/
        if (this.type == 'rtmp' && sname.substr(-4) == '.flv') {
            sname = sname.slice(0,-4);
        }
        return sname;
        ]]>
    </method>

    <!--- do whatever necessary setup for a new url
          based on the value of this.url
        @keywords private -->
    <method name="_setUrl">
        this._findnc();
          
        if (this.type == 'rtmp') {
            // rtmp server appends the .flv (so we need to remove it)
            var sname = _namefromurl(this.url);
            // call function in server-side main.asc
            var t = this;  // for use in closure
            this.onResult = function(streamLength) {
                //_root.Debug.write('onresult = ', streamLength);
                t.setAttribute('totaltime',streamLength);
            };
            this._nc.call("getLength", this, sname);
        }
    </method>


    <!--- setter for 'url' attribute -->
    <method name="setUrl" args="newurl"> <![CDATA[
        var old = this['url'];
        this.url = newurl;
        if ((!this.isinited) || (old == newurl)) return;
        this._setUrl();
        if (this.url != "") {   // changing the url
            // TODO: if another URL is playing, maybe clear it?
        }
        if (this.onurl) this.onurl.sendEvent(url);
        ]]> 
    </method>
</class>



</library>
