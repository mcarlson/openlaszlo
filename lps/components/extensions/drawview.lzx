<!---

    @copyright Copyright 2001-2010 Laszlo Systems, Inc.  All Rights Reserved.
               Use is subject to license terms.

    @access public
    @affects lzdrawview
    @topic LFC
    @subtopic Views
  -->
<library>

  <interface name="drawview" extends="view">

    <doc>
      <tag name="shortdesc"><text>Adds procedural drawing APIs to view.</text></tag>
      <text>
        <p><tagname>drawview</tagname> adds procedural drawing APIs to <sgmltag class="element" role="LzView">&lt;view&gt;</sgmltag></p>

        <p><tagname>drawview</tagname> implements a subset of the WHATWG drawing APIs, which can be found at:
        <a href="http://www.whatwg.org/specs/web-apps/current-work/#the-canvas-element">http://www.whatwg.org/specs/web-apps/current-work/#the-canvas-element</a>
        </p>

        <example><programlisting class="code">
        &lt;canvas&gt;
            &lt;drawview width="200" height="300"&gt;
                &lt;handler name="oncontext"&gt;
                    this.moveTo(100, 100);
                    this.lineTo(100, 200);
                    this.quadraticCurveTo(150, 250, 200, 200);
                    this.closePath();

                    this.fillStyle = 0x0000ff;
                    this.globalAlpha = .5;
                    this.fill();

                    this.strokeStyle = 0xffff00;
                    this.lineWidth = 5;
                    this.stroke();

                    var g = this.createRadialGradient(75, 75, .7, 300, 300, 0)
                    this.globalAlpha = 0;
                    g.addColorStop(0, 0x000000);
                    this.globalAlpha = 1;
                    g.addColorStop(1, 0xffffff);
                    this.fillStyle = g;
                    this.fill();

                    this.strokeStyle = 0x000000;
                    this.lineWidth = 0;
                    this.stroke();

                    this.beginPath();
                    this.lineTo(75, 0);
                    this.lineTo(75, 75);
                    this.lineTo(0, 75);
                    this.lineTo(0, 0);
                    this.closePath();

                    var g = this.createLinearGradient(0, 0, 75, 75)
                    this.globalAlpha = 0;
                    g.addColorStop(0, 0x000000);
                    this.globalAlpha = 1;
                    g.addColorStop(1, 0xffffff);
                    this.fillStyle = g;
                    this.fill();
                &lt;/handler&gt;
            &lt;/drawview&gt;
        &lt;/canvas&gt;
        </programlisting></example>

        <p><classname>drawview</classname> extends <sgmltag class="element" role="LzView">&lt;view&gt;</sgmltag>,
        which is the fundamental visual class of LZX.</p>
      </text>
    </doc>

    <!--- Gives an alpha value that is applied to shapes and images
          before they are composited onto the canvas. The valid range of
          values is from 0.0 (fully transparent) to 1.0 (no additional
          transparency). If the attribute is set to values outside this range,
          it is ignored. When the context is created, the globalAlpha
          attribute initially has the value 1.0.
          @type Number
          @lzxtype number
          @lzxdefault 1.0
          @access public
    -->
    <attribute name="globalAlpha" value="1" type="number"/>

    <!--- Gives the default width of lines, in coordinate space units.
          Negative values are ignored.  0 draws hairlines in swf - lines that
          are always 1 pixel wide even when scaled.
          @type Number
          @lzxtype number
          @lzxdefault 1
          @access public
    -->
    <attribute name="lineWidth" value="1" type="number"/>

    <!--- Gives the default lineCap value for lines. Round for consistency between swf and dhtml.
          @type String
          @lzxtype "butt" | "round" | "square"
          @lzxdefault "round"
          @access public
    -->
    <attribute name="lineCap" value="round" type="string"/>

    <!--- Gives the default lineJoin value for lines. Round for consistency between swf and dhtml.
          @type String
          @lzxtype "round" | "bevel" | "miter"
          @lzxdefault "round"
          @access public
    -->
    <attribute name="lineJoin" value="round" type="string"/>

    <!--- Gives the default miterLimit value for lines.
          @type Number
          @lzxtype number
          @lzxdefault 3
          @access public
    -->
    <attribute name="miterLimit" value="3" type="number"/>

    <!--- Represents the colour to use for the lines around shapes.  Specified as a hexadecimal number (0xffffff) or a CSS string ('#ff00ff' or '#f0f').
        @type String
        @lzxtype string
        @lzxdefault "#000000"
        @access public
    -->
    <attribute name="strokeStyle" value="#000000" type="string"/>

    <!--- Represents the colour or style to use for the fill inside the shapes. Can be either a hexadecimal number (0xffffff), a CSS string ('#ff00ff' or '#f0f'), or a CanvasGradient/LzCanvasGradient.
        @type String
        @lzxtype string
        @lzxdefault "#000000"
        @access public
    -->
    <attribute name="fillStyle" value="#000000" type="string"/>

    <!--- If true, the bitmap result will be cached where possible.
      @access public
    -->
    <attribute name="cachebitmap" value="true" type="boolean"/>

    <!---
      Resets the list of subpaths to an empty list, and calls moveTo() with the point (0,0).
    -->
    <method name="beginPath"/>

    <!---
      Adds a straight line from the current position to the first point in the last subpath and marks the subpath as closed, if the last subpath isn't closed, and if it has more than one point in its list of points. If the last subpath is not open or has only one point, it does nothing.
    -->
    <method name="closePath"/>

    <!---
      Sets the current position to the given coordinate and creates a new subpath with that point as its first (and only) point. If there was a previous subpath, and it consists of just one point, then that subpath is removed from the path.
      @param Number x: x position to move to
      @param Number y: y position to move to
    -->
    <method name="moveTo" args="x, y"/>

    <!---
      Adds the given coordinate (x, y) to the list of points of the subpath, and connects the current position to that point with a straight line. It then sets the current position to the given coordinate (x, y).
      @param Number x: x position to draw to
      @param Number y: y position to draw to
    -->
    <method name="lineTo" args="x, y"/>

    <!---
      Adds the given coordinate (x, y) to the list of points of the subpath, and connects the current position to that point with a quadratic curve with control point (cpx, cpy). It then sets the current position to the given coordinate (x, y).
      @param Number cpx: curve control point's x position
      @param Number cpy: curve control point's y position
      @param Number x: x position to draw to
      @param Number y: y position to draw to
    -->
    <method name="quadraticCurveTo" args="cpx, cpy, x, y"/>

    <!---
      Adds the given coordinate (x, y) to the list of points of
      the subpath, and connects the two points with a bezier curve with control
      points (cp1x, cp1y) and (cp2x, cp2y). It then sets the current position to
      the given coordinate (x, y).

      @param Number cp1x: X value of control point 1
      @param Number cp1y: Y value of control point 1
      @param Number cp2x: X value of control point 2
      @param Number cp2y: Y value of control point 2
      @param Number x: X value of endpoint
      @param Number y: Y value of endpoint
    -->
    <method name="bezierCurveTo" args="cp1x, cp1y, cp2x, cp2y, x, y"/>

    <!---
      Fills each subpath of the current path in turn, using fillStyle, and using the non-zero winding number rule. Open subpaths are implicitly closed when being filled (without affecting the actual subpaths).
      Note that closePath() is called before the line is filled.
    -->
    <method name="fill" />

    <!---
      Strokes each subpath of the current path in turn, using the strokeStyle and lineWidth attributes.
    -->
    <method name="stroke" />

    <!---
      Clears drawing area
    -->
    <method name="clear" />

    <!---
      Takes four arguments, representing the start point (x0, y0) and end point (x1, y1) of the gradient, in coordinate space units, and returns an object representing a linear gradient initialised with that line.
      Linear gradients are rendered such that at the starting point on the canvas the colour at offset 0 is used, that at the ending point the color at offset 1 is used, that all points on a line perpendicular to the line between the start and end points have the colour at the point where those two lines cross. (Of course, the colours are only painted where the shape they are being painted on needs them.)

      @param Number x0: Starting x position
      @param Number y0: Starting y position
      @param Number x1: Ending x position
      @param Number y1: Ending y position
      @return LzCanvasGradient: Opaque class used to add color/offset/alpha steps - see LzCanvasGradient.addColorStop();
    -->
    <method name="createLinearGradient" args="x0, y0, x1, y1" />

    <!---
      Takes six arguments, the first three representing the start point (x0, y0) and rotation r0, and the last three representing the end point (x1, y1) and radius r1. The values are in coordinate space units.
      Rotation doesn't appear to work for radial gradients.  Even so, it can be set by specifying r0 in radians.  r1 is ignored.

      @param Number x0: Starting x position
      @param Number y0: Starting y position
      @param Number r0: Rotation of the gradient - not working
      @param Number x1: Ending x position
      @param Number y1: Ending y position
      @param Number r1: Ignored
      @return LzCanvasGradient: Opaque class used to add color/offset/alpha steps - see addColorStop();
    -->
    <method name="createRadialGradient" args="x0, y0, r0, x1, y1, r1" />

    <!---
      Adds an arc to the current path. The arc is a segment of a circle that has radius as given.
      The circle segment is determined by the two angles startAngle and endAngle and begins at the given coordinate (x,y).
      If clockwise is true, the arc is drawn clockwise from startAngle to endAngle, otherwise it is drawn counter-clockwise (anti-clockwise).

      @param Number x: Starting x position
      @param Number y: Starting y position
      @param Number radius: Radius
      @param Number startAngle: Angle to start in radians
      @param Number endAngle: Angle to end in radians
      @param Number clockwise: anticlockwise if true, clockwise otherwise
    -->
    <method name="arc" args="x, y, radius, startAngle, endAngle, clockwise" />

    <!---
      Rect creates a new subpath containing just the rectangle with top left coordinate (x, y), width w and height h.
      Based on mc.drawRect() - by Ric Ewing (ric@formequalsfunction.com)

      @param Number x: starting x position
      @param Number y: starting y position
      @param Number w: Width
      @param Number h: Height
      @param Number cornerRadius: Optional radius of rounding for corners (defaults to 0)
    -->
    <method name="rect" args="x, y, w, h, cornerRadius" />

    <!---
      Draws an oval at the origin x, y with a radius radius.  If yRadius is specified, radius is the x radius of the oval.
      Based on mc.drawOval() - by Ric Ewing (ric@formequalsfunction.com) - version 1.1 - 4.7.2002

      @param Number x: Starting x position
      @param Number y: Starting y position
      @param Number radius: The radius of the oval. If [optional] yRadius is defined, r is the x radius.
      @param Number yRadius: Optional y radius of the oval
    -->
    <method name="oval" args="x, y, radius, yRadius" />

  </interface> <!-- drawview -->

  <!-- these methods are shared across runtimes -->
  <script when="immediate"><![CDATA[
    mixin DrawviewShared {
        function DrawviewShared (parent:LzNode? = null, attrs:Object? = null, children:Array? = null, instcall:Boolean = false) {
            super(parent, attrs, children, instcall);
        }
        function lineTo(x,y) { }
        function moveTo(x,y) { }
        function quadraticCurveTo(cx, cy, px, py) {}

        function arc(x, y, radius, startAngle, endAngle, clockwise = false) {
            var sx:Number = x + radius*Math.cos(startAngle);
            var sy:Number = y + radius*Math.sin(2 * Math.PI - startAngle);
            startAngle *= 180/Math.PI;
            endAngle *= 180/Math.PI;
            var arc:Number = clockwise == true ? ((endAngle - startAngle) - 360): endAngle - startAngle;
            //move pen to the point along the circle at startAngle
            this.moveTo(sx, sy);
            //retain the center of the arc as the center point passed in.
            return this._drawArc(x, y, radius, arc, startAngle);
        }

        function rect(x, y, w, h, cornerRadius = 0) {
            // use shared method
            LzKernelUtils.rect(this, x, y, w, h, cornerRadius);
        }

        function oval(x, y, radius, yRadius = NaN) {
            // if only yRadius is undefined, yRadius = radius
            if (isNaN(yRadius)) {
                yRadius = radius;
            }
            const s:Number = (radius < 20 && yRadius < 20) ? 5 : 8;
            // covert to radians for our calculations
            const theta:Number = Math.PI/ (s / 2);
            // calculate the distance for the control point
            const xrCtrl:Number = radius/Math.cos(theta/2);
            const yrCtrl:Number = yRadius/Math.cos(theta/2);
            // start on the right side of the circle
            this.moveTo(x+radius, y);
            // init variables
            var angle:Number = 0, angleMid:Number, px:Number, py:Number, cx:Number, cy:Number;
            // this loop draws the circle in n segments
            for (var i:int = 0; i<s; i++) {
                // increment our angles
                angle += theta;
                angleMid = angle-(theta/2);
                // calculate our control point
                cx = x+Math.cos(angleMid)*xrCtrl;
                cy = y+Math.sin(angleMid)*yrCtrl;
                // calculate our end point
                px = x+Math.cos(angle)*radius;
                py = y+Math.sin(angle)*yRadius;
                // draw the circle segment
                this.quadraticCurveTo(cx, cy, px, py);
            }
            return {x:px, y:py};
        }

        function _drawArc(x:Number, y:Number, radius:Number, arc:Number, startAngle:Number, yRadius:Number = NaN) :Object {
            // if yRadius is undefined, yRadius = radius
            if (isNaN(yRadius)) {
                yRadius = radius;
            }
            // no sense in drawing more than is needed :)
            if (Math.abs(arc)>360) {
                arc = 360;
            }
            // Flash uses 8 segments per circle, to match that, we draw in a maximum
            // of 45 degree segments. First we calculate how many segments are needed
            // for our arc.
            const segs:Number = Math.ceil(Math.abs(arc)/45);
            // Init vars
            var bx:Number, by:Number;
            // if our arc is larger than 45 degrees, draw as 45 degree segments
            // so that we match Flash's native circle routines.
            if (segs > 0) {
                // Now calculate the sweep of each segment
                const segAngle:Number = arc/segs;
                // The math requires radians rather than degrees. To convert from degrees
                // use the formula (degrees/180)*Math.PI to get radians.
                const theta:Number = -(segAngle/180)*Math.PI;
                // convert angle startAngle to radians
                var angle:Number = -(startAngle/180)*Math.PI;
                var angleMid:Number, cx:Number, cy:Number;
                // Loop for drawing arc segments
                for (var i:int = 0; i<segs; i++) {
                    // increment our angle
                    angle += theta;
                    // find the angle halfway between the last angle and the new
                    angleMid = angle-(theta/2);
                    // calculate our end point
                    bx = x+Math.cos(angle)*radius;
                    by = y+Math.sin(angle)*yRadius;
                    // calculate our control point
                    cx = x+Math.cos(angleMid)*(radius/Math.cos(theta/2));
                    cy = y+Math.sin(angleMid)*(yRadius/Math.cos(theta/2));
                    // draw the arc segment
                    this.quadraticCurveTo(cx, cy, bx, by);
                }
            }
            // In the native draw methods the user must specify the end point
            // which means that they always know where they are ending at, but
            // here the endpoint is unknown unless the user calculates it on their
            // own. Lets be nice and let save them the hassle by passing it back.
            return {x:bx, y:by};
        }

        function distance(p0, p1) {
            // These would be useful generally, but put them inside the
            // function so they don't pollute the general namespace.
            var dx:Number = p1.x - p0.x;
            var dy:Number = p1.y - p0.y;
            return Math.sqrt(dx*dx+dy*dy);
        }

        function intersection(p0, p1, p2, p3) {
                // returns null if they're collinear and non-identical
                // returns -1 if they're collinear and identical
                var u:Number = (p3.x-p2.x)*(p0.y-p2.y) - (p3.y-p2.y)*(p0.x-p2.x);
                var d:Number = (p3.y-p2.y)*(p1.x-p0.x) - (p3.x-p2.x)*(p1.y-p0.y);
                if (d == 0) {
                    if (u == 0) {
                        return -1;//identical
                    } else {
                        return null;//non-identical
                    }
                }
                u /= d;
                return {x: p0.x + (p1.x-p0.x) * u,
                        y: p0.y + (p1.y-p0.y) * u};
        }

        function midpoint(p0, p1) {
            return {x: (p0.x+p1.x)/2, y: (p0.y+p1.y)/2};
        }
    }
  ]]></script>

  <!-- runtime-specific implementations -->
  <switch>
    <when runtime="dhtml">
      <script when="immediate"><![CDATA[

        // Classes that implement an interface must obey the LZX
        // tag->class mapping convention and must be dynamic
        dynamic class $lzc$class_drawview extends LzView with DrawviewShared {
            // Next two are part of the required LFC tag class protocol
            static var tagname = 'drawview';
            static var attributes = new LzInheritedHash(LzView.attributes);
            static var __colorcache = {};
            static var __rrfactors:Array = null;

            var globalAlpha = 1;
            var lineWidth = 1;
            var lineCap = 'round';
            var lineJoin = 'round';
            var miterLimit = 3;
            var strokeStyle = '#000000';
            var fillStyle = '#000000';

            private var __globalAlpha = null;
            private var __lineWidth = null;
            private var __lineCap = null;
            private var __lineJoin = null;
            private var __miterLimit = null;
            private var __strokeStyle = null;
            private var __fillStyle = null;

            function init() {
                super.init();
                this.createContext();
            }

            // called when the context has been created
            override function $lzc$set_context(context) {
                this.beginPath();
                if (this.context) {
                    this.__lineWidth = null;
                    this.__lineCap = null;
                    this.__lineJoin = null;
                    this.__miterLimit = null;
                    this.__fillStyle = null;
                    this.__strokeStyle = null;
                    this.__globalAlpha = null;
                }
                super.$lzc$set_context(context);
            }

            // hash of image resources for drawImage
            static var images = {};
            var __drawImageCnt = 0;

            function getImage(url) {
                var cache = lz.drawview.images;
                if (! cache[url]) {
                    var loadurl = url;
                    if (url.indexOf('http:') != 0 && url.indexOf('https:') != 0) {
                        loadurl = this.sprite.getResourceUrls(url)[0];
                    }
                    var img = new Image();
                    img.src = loadurl;
                    cache[url] = img;
                    if (loadurl != url) {
                        cache[loadurl] = img;
                    }
                }
                return cache[url];
            }

            function drawImage(image, x, y, w, h, r) {
                if ($debug) this.__checkContext();
                if (typeof image == 'string') {
                    image = this.getImage(image);
                }
                if (! (image && image.nodeType == 1 && image.nodeName == 'IMG')) {
                    if ($debug) {
                        Debug.warn("Invalid image for lz.drawview.drawImage(): %w", image);
                    }
                } else if (! image.complete) {
                    // TODO [20090308 anba] drawImage needs to be defered,
                    // maybe emit a debug-message to inform user
                    var fname = '__drawImage' + (this.__drawImageCnt++);
                    // create a closure to save arguments
                    this[fname] = function () {
                        // remove handler and delete closure
                        lz.embed.removeEventHandler(image, 'load', this, fname);
                        delete this[fname];
                        this.drawImage(image, x, y, w, h, r);
                    }
                    // defer until image is completely loaded
                    lz.embed.attachEventHandler(image, 'load', this, fname);
                } else {
                    var tr = r ? r : 0;
                    this.context.save();
                    this.clear();
                    var tx = x ? x : 0;
                    var ty = y ? y : 0;
                    this.context.translate(tx, ty);
                    this.context.rotate(tr);
                    this.context.drawImage(image, 0, 0, w, h);
                    this.context.restore();
                }
            }

            function __checkContext() {
                if ($debug) {
                    if (! this['context']) Debug.warn('this.context is not yet defined.  Please check for the presence of the context property before using drawing methods, and/or register for the oncontext event to find out when the property is available.');
                }
            }

            function beginPath() {
                this.__path = [[1,0,0]];
                this.__pathisopen = true;
            }

            function closePath() {
                if (this.__pathisopen) {
                    this.__path.push([0]);
                }
                this.__pathisopen = false;
            }

            function moveTo(x,y) {
                if (this.__pathisopen) {
                    this.__path.push([1, x,y]);
                }
            }

            function lineTo(x,y) {
                if (this.__pathisopen) {
                    this.__path.push([2, x,y]);
                }
            }

            function quadraticCurveTo(cpx, cpy, x, y) {
                if (this.__pathisopen) {
                    this.__path.push([3, cpx, cpy, x, y]);
                }
            }

            function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
                if (this.__pathisopen) {
                    this.__path.push([4, cp1x, cp1y, cp2x, cp2y, x, y]);
                }
            }

            function fill() {
                this.__playPath();
                this.context.fill();
            }

            function __updateFillStyle() {
                if (this.__fillStyle != this.fillStyle) {
                    if (this.fillStyle instanceof LzCanvasGradient) {
                        this.fillStyle.__applyFillTo(this.context);
                    } else {
                        var ccache = lz.drawview.__colorcache;
                        var fillStyleColor = ccache[this.fillStyle];
                        if (fillStyleColor == null) {
                            fillStyleColor = LzColorUtils.torgb(this.fillStyle);
                            ccache[this.fillStyle] = fillStyleColor;
                        }
                        this.context.fillStyle = fillStyleColor;
                    }
                    this.__fillStyle = this.fillStyle;
                }
            }

            function __updateStyles() {
                var styleNames = { lineWidth : '__lineWidth',
                                   lineCap : '__lineCap',
                                   lineJoin : '__lineJoin',
                                   miterLimit : '__miterLimit',
                                   globalAlpha : '__globalAlpha' };
                for (var name in styleNames) {
                    var intern = styleNames[name];
                    var style = this[name];
                    if (this[intern] != style) {
                        this.context[name] = style;
                        this[intern] = style;
                    }
                }

                if (this.__strokeStyle != this.strokeStyle) {
                    if (this.strokeStyle instanceof LzCanvasGradient) {
                        this.strokeStyle.__applyStrokeTo(this.context);
                    } else {
                        var ccache = lz.drawview.__colorcache;
                        var strokeStyleColor = ccache[this.strokeStyle];
                        if (strokeStyleColor == null) {
                            strokeStyleColor = LzColorUtils.torgb(this.strokeStyle);
                            ccache[this.strokeStyle] = strokeStyleColor;
                        }
                        this.context.strokeStyle = strokeStyleColor;
                    }
                    this.__strokeStyle = this.strokeStyle;
                }
            }

            function __playPath() {
                if (this.__path.length == 0) return;
                if ($debug) this.__checkContext();
                this.__updateStyles();
                this.__updateFillStyle();

                this.context.beginPath();
                for (var i = 0; i < this.__path.length; i += 1) {
                    var a = this.__path[i];
                    var n = a[0];
                    if (n == 0) {
                        this.context.closePath();
                    } else if (n == 3) {
                        this.context.quadraticCurveTo(a[1], a[2], a[3], a[4]);
                    } else if (n == 4) {
                        this.context.bezierCurveTo(a[1], a[2], a[3], a[4], a[5], a[6]);
                    } else if (n == 1) {
                        this.context.moveTo(a[1], a[2]);
                    } else if (n == 2) {
                        this.context.lineTo(a[1], a[2]);
                    }
                }
            }

            function clipPath() {
                if ($debug) {
                    Debug.warn('lz.drawview.clipPath() is not currently supported in DHTML.');
                }
            }

            function clipButton() {
                if ($debug) {
                    Debug.warn('lz.drawview.clipButton() is not currently supported in DHTML.');
                }
            }

            function stroke() {
                this.__playPath();
                this.context.stroke();
            }

            function clear() {
                if ($debug) this.__checkContext();
                this.context.clearRect(0, 0, this.width, this.height);
            }

            function clearMask() {
                if ($debug) {
                    Debug.warn('lz.drawview.clearMask() is not currently supported in DHTML.');
                }
            }

            function createLinearGradient(x0, y0, x1, y1) {
                return new LzCanvasGradient(this, [x0, y0, x1, y1], false);
            }

            function createRadialGradient(x0, y0, r0, x1, y1, r1) {
                return new LzCanvasGradient(this, [x0, y0, r0, x1, y1, r1], true);
            }

            function rotate(r) {
                this.context.rotate(r);
            }

            function translate(x, y) {
                this.context.translate(x, y);
            }

            function save() {
                this.__fillStyle = this.__strokeStyle = null
                this.context.save();
            }

            function restore() {
                this.__fillStyle = this.__strokeStyle = null
                this.context.restore();
            }

            function fillRect(x, y, w, h) {
                this.__updateFillStyle();
                this.context.fillRect(x, y, w, h);
            }
        } // End of drawview
        lz[$lzc$class_drawview.tagname] = $lzc$class_drawview;

        /**
          * <p>
          * The <tagname>LzCanvasGradient</tagname> is used by drawviews to describe a gradient fill.
          * </p>
          *
          * @shortdesc An object for describing gradient fills
          * @devnote LzCanvasGradient is an opaque object, which is used for assigning to
          * other attributes, e.g. fillStyle.  It is also used to add color stops.
          * An LzCanvasGradient is returned by drawview.createLinearGradient or
          * drawview.createRadialGradient.
          */
        class LzCanvasGradient {
            /** @access private */
            var __context = null;
            /** @access private */
            var __g = null;

            function LzCanvasGradient(c, args, isradial) {
                this.__context = c;
                if (isradial) {
                    this.__g = c.context.createRadialGradient.apply(c.context, args);
                } else {
                    this.__g = c.context.createLinearGradient.apply(c.context, args)
                }
            }

            /**
              * Adds a new stop to a gradient. gradients are rendered such that at the starting point the colour at offset 0 is used, that at the ending point the color at offset 1 is used.  globalAlpha is stored for each gradient step added.
              * @param Number o: The offset this stop used for placement in the gradient.  Gradients are rendered such that for the starting point the colour at offset 0 is used, that at the ending point the color at offset 1 is used and all colors between those offsets are blended.  Must be less than 0 or greater than 1.
              * @param Number c: The color to be used at this color.  A hexadecimal value, e.g. 0xffffff
              */
            function addColorStop(o, c) {
                var ccache = lz.drawview.__colorcache;
                var cstopColor = ccache[c];
                if (cstopColor == null) {
                    cstopColor = LzColorUtils.torgb(c);
                    ccache[c] = cstopColor;
                }
                var gAlpha = this.__context.globalAlpha;
                if (gAlpha != 1) {
                    // add globalAlpha (if there is no explicit alpha value)
                    cstopColor = this.torgba(cstopColor, gAlpha);
                }
                this.__g.addColorStop(o, cstopColor);
            }

            /**
            * @access private
            */
            function torgba (rgb, alpha) {
                if (rgb.indexOf("rgba") == -1) {
                    // remove "rgb(" and ")"
                    var rgba = rgb.substring(4, rgb.length - 1).split(',');
                    rgba.push(alpha);
                    return "rgba(" + rgba.join(',') + ")";
                } else {
                    // already in rgba() format
                    return rgb;
                }
            }

            /**
            * @access private
            */
            function __applyFillTo(scope) {
                scope.fillStyle = this.__g;
            }

            /**
            * @access private
            */
            function __applyStrokeTo(scope) {
                scope.strokeStyle = this.__g;
            }
        }
      ]]></script>
    </when>
    <otherwise>
      <!-- TODO [jgrandy 6/1/2007] <otherwise> should be <when runtime="as2"> but that isn't currently supported -->
      <script when="immediate"><![CDATA[

        // Classes that implement an interface must obey the LZX
        // tag->class mapping convention and must be dynamic
        dynamic class $lzc$class_drawview extends LzView with DrawviewShared {
            if ($as3) {
                #passthrough (toplevel:true) {
                import flash.geom.Matrix;
                import flash.geom.Rectangle;
                import flash.display.Bitmap;
                import flash.display.BitmapData;
                import flash.display.Graphics;
                import flash.display.Sprite;
                }#
            }
            // Next two are part of the required LFC tag class protocol
            static var tagname = 'drawview';
            static var attributes = new LzInheritedHash(LzView.attributes);
            static var __colorcache :Object = {};
            static var __rrfactors:Array = null;

            var globalAlpha :Number = 1;
            var lineWidth :Number = 1;
            var lineCap :String = 'round';
            var lineJoin :String = 'round';
            var miterLimit :Number = 3;
            var strokeStyle :* = '#000000';
            var fillStyle :* = '#000000';
            var __path :Array = [];
            var __pathisopen :Boolean = false;
            // whether to measure the width/height dimensions after redrawing
            var __measurewidth :Boolean = true;
            var __measureheight :Boolean = true;
            const __MOVETO_OP :int = 0;
            const __LINETO_OP :int = 1;
            const __QCURVE_OP :int = 2;

            var __drawcontainer = null;
            var __bitmapdata:BitmapData = null;
            var __bitmapcontainer = null;
            var __norebuild:Boolean = false;
            var __contexts :Array = null;

            // hash of image resources for drawImage
            static var images:Object = {};

            function $lzc$class_drawview (parent:LzNode? = null, attrs:Object? = null, children:Array? = null, instcall:Boolean = false) {
                super(parent, attrs, children, instcall);
            }

            override function construct(parent, args) {
                // default to bitmap caching on, unless clip = true
                if (args['cachebitmap'] == null && args['clip'] != true) args['cachebitmap'] = true;
                super.construct(parent, args);
                this.__contexts = [];
            }

            override function init () {
                super.init();
                this.rebuildBitmap();
                this.context = this.createContainer();
                this.beginPath();
                this.$lzc$set_context(this.context);
            }

            function beginPath() {
                this.__path = [];
                this.__pathisopen = true;
                this.context.moveTo(0, 0);
            }

            function closePath() {
                if (this.__pathisopen && this.__path.length > 1) {
                    var p = this.__path[0];
                    if (p[0] == this.__MOVETO_OP || p[0] == this.__LINETO_OP) {
                        var x:Number = p[1];
                        var y:Number = p[2];
                    } else if (p[0] == this.__QCURVE_OP) {
                        var x:Number = p[3];
                        var y:Number = p[4];
                    } else {
                        return;
                    }
                    //Debug.write('closePath', x, y);
                    this.lineTo(x, y);
                    this.__pathisopen = false;
                }
            }

            override function moveTo(x, y) {
                if (this.__pathisopen) {
                    this.__path.push([this.__MOVETO_OP, x, y]);
                }
            }

            override function lineTo (x, y) {
                if (this.__pathisopen) {
                    this.__path.push([this.__LINETO_OP, x, y]);
                }
            }

            override function quadraticCurveTo(cpx, cpy, x, y) {
                if (this.__pathisopen) {
                    this.__path.push([this.__QCURVE_OP, cpx, cpy, x, y]);
                }
            }

            const bezierCurveTo_error :Number = 10;

            function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
                var error:Number = this.bezierCurveTo_error;

                // Start from the cursor position, or (0, 0)
                var x0:Number = 0, y0:Number = 0;
                if (this.__path.length) {
                    var instr:Array = this.__path[this.__path.length - 1];
                    x0 = instr[instr.length - 2];
                    y0 = instr[instr.length - 1];
                }
                // The algorithm used is to recursively subdivide the cubic until
                // it's close enough to a quadratic, and then draw that.
                // The code below has the effect of
                //   function draw_cubic(cubic) {
                //     if (|midpoint(cubic)-midpoint(quadratic)| < error)
                //       draw_quadratic(qudratic);
                //     else
                //       map(draw_cubic, subdivide(cubic));
                //   }
                // where the recursion has been replaced by an explicit
                // work item queue.

                // To avoid recursion and undue temporary structure, the following
                // loop has a funny control flow.  Each iteration either pops
                // the next work item from queue, or creates two new work items
                // and pushes one to the queue while setting +points+ to the other one.
                // The loop effectively exits from the *middle*, when the next
                // work item is null.  (This continues to the loop test,
                // which then exits.)

                // each item is a list of control points, with a sentinel of null
                var work_items:Array = [null];
                // the current work item
                var points:Array = [{x: x0, y: y0}, {x: cp1x, y: cp1y}, {x: cp2x, y: cp2y}, {x: x, y: y}];
                while (points) {
                    // Posit a quadratic.  For C1 continuity, control point has to
                    // be at the intersection of the tangents.
                    var q1:* = this.intersection.apply(null, points);
                    var q0:Object = points[0];
                    var q2:Object = points[3];

                    if (q1 == null || q1 == -1) {
                        var flush:Boolean = true;
                        var start_first:Boolean = points[0].x == points[1].x && points[0].y == points[1].y;
                        var second_end:Boolean = points[2].x == points[3].x && points[2].y == points[3].y;
                        if (start_first) {
                            if (second_end) {
                                this.lineTo(q2.x, q2.y);
                            } else {
                                var q1:Object = points[2];
                                this.quadraticCurveTo(q1.x, q1.y, q2.x, q2.y);
                            }
                        } else if (second_end) {
                            var q1:Object = points[1];
                            this.quadraticCurveTo(q1.x, q1.y, q2.x, q2.y);
                        } else {
                            //both straight lines are collinear
                            //now we have to test whether they're identical or non-identical
                            if (q1 == null) {
                                q1 = {x:0,y:0};//default-value...
                                flush = false;
                            } else {
                                this.lineTo(q2.x, q2.y);
                            }
                        }
                        if (flush) {
                            points = work_items.pop();
                            continue;
                        }
                    }

                    // Compute the triangle, since the fringe is the subdivision
                    // if we need that and the peak is the midpoint which we need
                    // in any case
                    var m:Array = [points, [], [], []];
                    for (var i:int = 1; i < 4; i++) {
                        for (var j:int = 0; j < 4 - i; j++) {
                            var c0:Object = m[i-1][j];
                            var c1:Object = m[i-1][j+1];
                            m[i][j] = {x: (c0.x + c1.x)/2,
                                    y: (c0.y + c1.y)/2};
                        }
                    }

                    var qa:Object = this.midpoint(q0, q1);
                    var qb:Object = this.midpoint(q1, q2);
                    var qm:Object = this.midpoint(qa, qb);
                    // Is the midpoint of the quadratic close to the midpoint of
                    // the cubic?  If so, use it as the approximation.
                    if (this.distance(qm, m[3][0]) < error) {
                        this.quadraticCurveTo(q1.x, q1.y, q2.x, q2.y);
                        points = work_items.pop();
                        continue;
                    }
                    // Otherwise subdivide the cubic.  The first division is the
                    // next work item, and the second goes on the work queue.
                    var left:Array = new Array(4), right:Array = new Array(4);
                    for (var i:int = 0; i < 4; i++) {
                        left[i]  = m[i][0];
                        right[i] = m[3-i][i];
                    }
                    points = left;
                    work_items.push(right);
                }
            }

            function __getColor(val:*) :Object {
                var ccache:Object = lz.drawview.__colorcache;
                var cachedColor:Object = ccache[val];
                if (cachedColor == null) {
                    var rgba:Number = LzColorUtils.hextoint(val);
                    var color:uint = (rgba | 0);
                    var alpha:Number = rgba - color;
                    // FIXME [anba 20090216] explicit alpha of 0 is ignored
                    cachedColor = ccache[val] = {c: color, a: (alpha != 0 ? alpha * 100 : null)};
                }
                return cachedColor;
            }

            function fill() {
                if (this.fillStyle instanceof LzCanvasGradient) {
                    this.fillStyle.__applyFillTo(this.context);
                } else {
                    var color:Object = this.__getColor(this.fillStyle);
                    var alpha:Number = color.a != null ? color.a : this.globalAlpha;
                    if ($as2) { alpha *= 100; }
                    this.context.beginFill(color.c, alpha);
                }
                this.closePath();
                this.__playPath(this.context);
                this.context.endFill();
                this.__updateSize();
            }

            function __playPath(m:*) :void {
                if ($as2) { this.context._visible = false; }
                var p:Array = this.__path;
                //Debug.write(p, m);
                for (var i:int = 0; i < p.length; i++) {
                    var op:Array = p[i];
                    var optype:int = op[0];
                    if (optype == this.__MOVETO_OP) {
                        //Debug.write(m, 'moveTo', op[1], op[2]);
                        m.moveTo(op[1], op[2]);
                    } else if (optype == this.__LINETO_OP) {
                        //Debug.write(m, 'lineTo', op[1], op[2]);
                        m.lineTo(op[1], op[2]);
                    } else if (optype == this.__QCURVE_OP) {
                        //Debug.write(m, 'quadraticCurveTo', op[1], op[2], op[3], op[4]);
                        m.curveTo(op[1], op[2], op[3], op[4]);
                    }
                }
                if ($as2) { this.context._visible = true; }
            }

            function stroke() {
                if (this.strokeStyle instanceof LzCanvasGradient) {
                    this.strokeStyle.__applyStrokeTo(this.context);
                } else {
                    var color:Object = this.__getColor(this.strokeStyle);
                    var alpha:Number = color.a != null ? color.a : this.globalAlpha;
                    if ($as2) { alpha *= 100; }
                    this.context.lineStyle(this.lineWidth, color.c, alpha, false, 'normal',
                        this.lineCap, this.lineJoin, this.miterLimit);
                }
                this.__playPath(this.context);
                this.context.lineStyle(undefined);
                this.__updateSize();
            }

            function clear() {
                this.context.clear();
                if (this['__bitmapdata']) {
                    var rect:Rectangle = new flash.geom.Rectangle(0, 0, this.width, this.height);
                    this.__bitmapdata.fillRect(rect, 0x000000ff);
                }
            }

            function createLinearGradient(x0, y0, x1, y1) {
                var dx:Number = x1-x0;
                var dy:Number = y1-y0;
                var r:Number = Math.atan2(dy, dx);
                var h:Number = Math.sqrt(dx*dx + dy*dy);
                var w:Number = h;
                var y:Number = Math.min(y0, y1);
                var x:Number = Math.min(x0, x1);

                var g:LzCanvasGradient = new LzCanvasGradient(this, {matrixType:"box", x:x, y:y, w:w, h:h, r:r}, false);
                //Debug.write('createLinearGradient', {matrixType:"box", x:x0, y:y0, w:w, h:h, r:r});
                return g;
            }

            function createRadialGradient(x0, y0, r0, x1, y1, r1) {
                var w:Number = x1-x0;
                var h:Number = y1-y0;
                // Rotation doesn't seem to work
                var r:Number = r0 != null ? r0 : Math.atan2(h, w);
                var g:LzCanvasGradient = new LzCanvasGradient(this, {matrixType:"box", x:x0, y:y0, w:w, h:h, r:r}, true);
                //Debug.write('createRadialGradient', {matrixType:"box", x:x0, y:y0, w:w, h:h, r:r});
                return g;
            }

            // accumulate rotation
            var __tr :Number = 0;
            function rotate(r) {
                this.__tr += r;
            }

            // accumulate translation
            var __tx :Number = 0;
            var __ty :Number = 0;
            function translate(x, y) {
                this.__tx += x;
                this.__ty += y;
            }

            // shared by clip/button masking routines
            private function __drawPath(context) {
                this.closePath();
                context.clear();
                context.beginFill(0xff00ff, 100);
                this.__playPath(context);
                context.endFill();
            }

            override function $lzc$set_width(w) {
                this.__measurewidth = (w == null);
                super.$lzc$set_width(w);
                this.rebuildBitmap();
            }

            override function $lzc$set_height(h) {
                this.__measureheight = (h == null);
                super.$lzc$set_height(h);
                this.rebuildBitmap();
            }

            private function __updateSize() :void {
                var measureSize:Boolean = (this.__measurewidth || this.__measureheight);
                if (measureSize) {
                    // __bitmapcontainer needs to be removed while measuring the context's size
                    this.clearBitmap();

                    // don't rebuild bitmap in width/height setter
                    this.__norebuild = true;
                }

                var width, height;
                if ($as2) {
                    var mc = this.sprite.getContext();
                    width = mc._width;
                    height = mc._height;
                } else {
                    var mc = this.sprite;
                    width = mc.width;
                    height = mc.height;
                }

                if (this.__measurewidth && this.width !== width) {
                    this.updateWidth(width);
                }
                if (this.__measureheight && this.height !== height) {
                    this.updateHeight(height);
                }

                if (measureSize) {
                    // now rebuild bitmap again
                    this.__norebuild = false;
                    this.rebuildBitmap();
                }
            }

            if ($as3) {
                function clearMask() {
                    if (this.clipcontext) {
                        this.clipcontext.clear();
                        this.clipcontext = null;
                    }
                    if (this.clickcontext) {
                        this.clickcontext.clear();
                        this.clickcontext = null;
                    }
                }

                function clipPath() {
                    var masksprite = this.sprite.masksprite;
                    if (! masksprite) {
                        this.sprite.applyMask();
                        masksprite = this.sprite.masksprite;
                    }
                    if (! this.clipcontext) {
                        this.clipcontext = masksprite.graphics;
                    }
                    this.__drawPath(this.clipcontext);
                    // reset scale of mask
                    masksprite.scaleX = 1;
                    masksprite.scaleY = 1;
                }

                function clipButton() {
                    if (! this.clickable) this.sprite.setClickable(true);
                    var clickregion = this.sprite.clickregion
                    if (! this.clickcontext) {
                        this.sprite.hitArea = clickregion;
                        this.sprite.clickbutton.hitTestState = clickregion;
                        this.clickcontext = clickregion.graphics;
                    }
                    this.__drawPath(this.clickcontext);
                    // reset scale of clickregion 
                    clickregion.scaleX = 1;
                    clickregion.scaleY = 1;
                }


                // Rebuild bitmap drawing layer
                private function rebuildBitmap () :void {
                    if (this.__norebuild) return;
                    if (this.width < 1 || this.height < 1) return;
                    if ($swf9) {
                        var limit = 2880;
                    } else { 
                        var limit = 4095
                    }
                    // TODO: construct multiple bitmaps to deal with this limitaion
                    if ((this.width * this.height) > (limit * limit)) {
                        if ($debug) {
                            Debug.warn('Drawview is too large for bitmap operations: drawImage(), save(), restore() and fillRect() may not work properly.  For best results, ensure this drawview is no larger than a total of %w x %w pixels - see http://jira.openlaszlo.org/jira/browse/LPP-8697 for more details. %w', limit, limit, this);
                        }
                        return;
                    }
                    if (this.__bitmapdata && this.width == this.__bitmapdata.width && this.height == this.__bitmapdata.height) return;

                    var bitmapdata = new flash.display.BitmapData(this.width, this.height, true, 0x000000ff);
                    if (bitmapdata) {
                        // clear any old data first
                        this.clearBitmap();
                        if (this._setrescwidth) {
                            // stretches is on...
                            var dc:Sprite = this.__drawcontainer;
                            if (! dc) return;
                            dc.scaleX = 1;
                            this.updateWidth(dc.width);
                            dc.scaleX = (this.width / this.unstretchedwidth)
                            //Debug.warn('set_width', this.unstretchedwidth, dc.width, dc.scaleX);
                        }

                        if (this._setrescheight) {
                            // stretches is on...
                            var dc:Sprite = this.__drawcontainer;
                            if (! dc) return;
                            dc.scaleY = 1;
                            this.updateHeight(dc.height);
                            dc.scaleY = (this.height / this.unstretchedheight)
                            //Debug.warn('set_height', this.unstretchedheight, dc.height, dc.scaleY);
                        }

                        this.__bitmapdata = bitmapdata;
                        this.__bitmapcontainer = new flash.display.Bitmap(bitmapdata);
                        this.sprite.addChild(this.__bitmapcontainer);
                    }
                }

                // destroy old bitmap data
                private function clearBitmap() :void {
                    if (this.__bitmapdata) {
                        this.__bitmapdata.dispose();
                        this.__bitmapdata = null;
                    }
                    if (this.__bitmapcontainer) {
                        this.sprite.removeChild(this.__bitmapcontainer);
                        this.__bitmapcontainer = null;
                    }
                }

                function getImage(name):BitmapData {
                    var cache = lz.drawview.images;
                    if (! cache[name]) {
                        var resinfo:Object = LzResourceLibrary[name];
                        var assetclass:Class;
                        // single frame resources get an entry in LzResourceLibrary which has
                        // 'assetclass' pointing to the resource Class object.
                        if (resinfo.assetclass is Class) {
                            assetclass = resinfo.assetclass;
                        } else {
                            // Multiframe resources have an array of Class objects in frames[]
                            assetclass = resinfo.frames[0];
                        }

                        if (this.resourceCache == null) {
                            this.resourceCache = [];
                        }
                        var asset = this.resourceCache[name];
                        if (asset == null) {
                            //Debug.write('CACHE MISS, new ',assetclass);
                            asset = new assetclass();
                            asset.scaleX = 1.0;
                            asset.scaleY = 1.0;
                            this.resourceCache[name] = asset;
                        }

                        var bounds:Rectangle = asset.getBounds(asset);

                        var assetsprite = this.sprite.addChild(asset);
                        cache[name] = copyBitmap(assetsprite, bounds.width, bounds.height);
                        this.sprite.removeChild(asset);
                    }

                    return cache[name];
                }

                // create a new container, only used at init time
                private function createContainer() {
                    var drawcontainer:Sprite = new Sprite();
                    drawcontainer.mouseEnabled = false;
                    this.getDisplayObject().addChildAt(drawcontainer, 0);
                    this.__drawcontainer = drawcontainer;

                    return drawcontainer.graphics;
                }

                function save() {
                    if ($debug) {
                        Debug.warn('lz.drawview.save() is not currently supported in ' + canvas.runtime);
                    }
                }

                function restore() {
                    if ($debug) {
                        Debug.warn('lz.drawview.restore() is not currently supported in ' + canvas.runtime);
                    }
                }
                // end as3
            } else {
                // as2
                function clearMask() {
                    var maskclip = this.sprite.__LZmaskClip;
                    if (maskclip) {
                        maskclip.clear();
                    }
                }

                function clip() {
                    if ($debug) Debug.warn('lz.drawview.clip() is deprecated.  Use clipPath() instead.');
                    this.clipPath();
                }

                function clipPath() {
                    this.sprite.applyMask(true);
                    var maskclip = this.sprite.__LZmaskClip;
                    this.__drawPath(maskclip);
                    this.updateResourceSize();
                    // reset scale of mask
                    maskclip._xscale = 100;
                    maskclip._yscale = 100;
                }

                function clipButton() {
                    var mc:MovieClip = this.getDisplayObject();
                    //Debug.write('clip', this, mc, this.sprite.__LZbuttonRef);
                    if (! this['__clipmc']) {
                        this.__clipmc = this.sprite.__LZmovieClipRef.createEmptyMovieClip("$lzclipmc", 6);
                        this.sprite.__LZbuttonRef.setMask(this.__clipmc);
                    }
                    this.__drawPath(this.__clipmc);
                    this.updateResourceSize();
                }

                // Rebuild bitmap drawing layer
                private function rebuildBitmap () :void {
                    if (this.__norebuild) return;

                    var bitmapdata = new flash.display.BitmapData(this.width, this.height, true, 0x000000ff);
                    if (bitmapdata) {
                        // clear any old data first
                        this.clearBitmap();

                        this.__bitmapdata = bitmapdata;
                        var context:MovieClip = this.sprite.getContext();
                        this.__bitmapcontainer = context.createEmptyMovieClip("__bitmapcontainer", 1000);
                        this.__bitmapcontainer.attachBitmap(bitmapdata, 2, "auto", true);
                    }
                    // Install right-click context menu if there is one
                    var cmenu:LzContextMenu = this.sprite['__contextmenu'];
                    if (cmenu) this.__bitmapcontainer.menu = cmenu.kernel.__LZcontextMenu();
                }

                // destroy old bitmap data
                private function clearBitmap() :void {
                    if (this.__bitmapdata) {
                        this.__bitmapdata.dispose();
                        this.__bitmapdata = null;
                    }
                    if (this.__bitmapcontainer) {
                        this.__bitmapcontainer.removeMovieClip();
                        this.__bitmapcontainer = null;
                    }
                }

                override function $lzc$set_contextmenu (cmenu:LzContextMenu) :void {
                    if (this['__bitmapcontainer']) {
                        if (cmenu) {
                            this.__bitmapcontainer.menu = cmenu.kernel.__LZcontextMenu();
                        } else {
                            delete this.__bitmapcontainer.menu;
                        }
                    }
                    if (this.context) {
                        if (cmenu) {
                            this.context.menu = cmenu.kernel.__LZcontextMenu();
                        } else {
                            delete this.context.menu;
                        }
                    }
                    super.$lzc$set_contextmenu(cmenu);
                }

                function getImage(name):BitmapData {
                    var cache = lz.drawview.images;
                    if (! cache[name]) {
                        var container:MovieClip = createEmptyMovieClip("loader", getNextHighestDepth());
                        if (name.indexOf('http:') == 0 || name.indexOf('https:') == 0) {
                            var loader:MovieClip = container.createEmptyMovieClip("loader", container.getNextHighestDepth());
                            loader.loadMovie(name);
                            container.onEnterFrame = function() {
                                if (loader._width > 0) {
                                    cache[name] = this.copyBitmap(loader, loader._width, loader._height);
                                    delete this.onEnterFrame;
                                    container.removeMovieClip();
                                }
                            }
                        } else {
                            // measure size
                            container.attachMovie(name, 'resc', container.getNextHighestDepth());
                            cache[name] = this.copyBitmap(container, container._width, container._height);
                            container.removeMovieClip();
                        }
                    }
                    return cache[name];
                }

                // create a new container, only used at init time
                private function createContainer() {
                    var drawcontainer:MovieClip = this.getDisplayObject().createEmptyMovieClip("drawcontainer", 1);
                    this.__drawcontainer = drawcontainer.createEmptyMovieClip("drawing", drawcontainer.getNextHighestDepth());

                    // Install right-click context menu if there is one
                    var cmenu:LzContextMenu = this.sprite['__contextmenu'];
                    if (cmenu) context.menu = cmenu.kernel.__LZcontextMenu();

                    return drawcontainer;
                }

                function save() {
                    // Store this.context:MovieClip
                    this.__contexts.push(this.context);

                    // Create new context to draw in
                    var depth:Number = this.__drawcontainer.getNextHighestDepth();
                    this.context = this.__drawcontainer.createEmptyMovieClip('draw' + depth, depth);
                    // Offset to the center to ensure we can grab the whole thing
                    this.context._x = this.width * .5;
                    this.context._y = this.height * .5;
                }

                function restore() {
                    var m:Matrix = this.getIdentityMatrix()
                    // Move back
                    m.translate(- this.context._x, - this.context._y);

                    // apply accumulated translations
                    m.rotate(this.__tr);
                    m.translate(this.__tx, this.__ty);
                    this.__tr = this.__tx = this.__ty = 0;

                    //Debug.write(this.context._width, this.context._height);
                    this.copyBitmap(this.__drawcontainer, this.width * 2, this.height * 2, this.__bitmapdata, m)

                    this.context.removeMovieClip();
                    this.context = this.__contexts.pop();
                }
            } // End of as2/as3 conditionals

            function fillRect(x, y, w, h) {
                var color:Object = this.__getColor(this.fillStyle);
                var alpha:Number = color.a != null ? color.a : this.globalAlpha;
                alpha = (alpha * 255) << 24;
                var colorval:uint = color.c | alpha;

                var rect:Rectangle = new flash.geom.Rectangle(x, y, w, h);
                this.__bitmapdata.fillRect(rect, colorval);
            }

            private function getIdentityMatrix():Matrix {
                return new flash.geom.Matrix();
            }

            function drawImage(image, x, y, w, h, r) {
                // TODO: deal with runtime-loaded images
                if (typeof image == 'string') {
                    image = this.getImage(image);
                }
                if (! image) return;

                var matrix:Matrix = this.getIdentityMatrix();

                var tw:Number = w ? w / image.width : 1;
                var th:Number = h ? h / image.height : 1;
                matrix.scale(tw, th);

                if (r != null) matrix.rotate(r);

                var tx:Number = x ? x : 0;
                var ty:Number = y ? y : 0;
                matrix.translate(tx, ty);

                this.copyBitmap(image, this.width, this.height, this.__bitmapdata, matrix);
            }
            
            private function copyBitmap(from:*, w:Number, h:Number, to:BitmapData = null, m:Matrix = null) {
                var tmp:BitmapData = new flash.display.BitmapData(w, h, true, 0x000000ff);

                tmp.draw(from);

                // If to wasn't supplied, return the bitmap as-is.
                if (! to) {
                    return tmp;
                }
                to.draw(tmp, m, null, null, null, true);
                tmp.dispose();
            }
        } // End of drawview

        lz[$lzc$class_drawview.tagname] = $lzc$class_drawview;

        /**
          * <p>
          * The <tagname>LzCanvasGradient</tagname> is used by drawviews to describe a gradient fill.
          * </p>
          *
          * @shortdesc An object for describing gradient fills
          * @devnote LzCanvasGradient is an opaque object, which is used for assigning to
          * other attributes, e.g. fillStyle.  It is also used to add color stops.
          * An LzCanvasGradient is returned by drawview.createLinearGradient or
          * drawview.createRadialGradient.
          */
        class LzCanvasGradient {
            if ($as3) {
                #passthrough (toplevel:true) {
                import flash.geom.Matrix;
                }#
            }
            /** @access private */
            var __context :* = null;
            /** @access private */
            var __matrix :Matrix = null;
            /** @access private */
            var __type :String = null;
            /** @access private */
            var __colors :Array = null;
            /** @access private */
            var __alphas :Array = null;
            /** @access private */
            var __offsets :Array = null;

            function LzCanvasGradient(c:*, m:Object, isradial:Boolean) {
                this.__context = c;
                var matrix:Matrix = new flash.geom.Matrix();
                matrix.createGradientBox(m.w, m.h, m.r, m.x, m.y);
                this.__matrix = matrix;
                this.__type = isradial ? 'radial' : 'linear';
                this.__colors = [];
                this.__alphas = [];
                this.__offsets = [];
            }

            /**
            * Adds a new stop to a gradient. gradients are rendered such that at the starting point the colour at offset 0 is used, that at the ending point the color at offset 1 is used.  globalAlpha is stored for each gradient step added.
            * @param Number o: The offset this stop used for placement in the gradient.  Gradients are rendered such that for the starting point the colour at offset 0 is used, that at the ending point the color at offset 1 is used and all colors between those offsets are blended.  Must be less than 0 or greater than 1.
            * @param Number c: The color to be used at this color.  A hexadecimal value, e.g. 0xffffff
            */
            function addColorStop(o:Number, c:*) :void {
                this.__offsets.push(o * 255);
                var color:Object = this.__context.__getColor(c);
                this.__colors.push(color.c);
                var alpha:Number = color.a != null ? color.a : this.__context.globalAlpha;
                if ($as2) { alpha *= 100; }
                this.__alphas.push(alpha);
            }

            /**
            * @access private
            */
            function __applyFillTo(m:*) :void {
                // @devnote swf8: m instanceof MovieClip
                // @devnote swf9: m instanceof flash.display.Graphics
                m.beginGradientFill(this.__type, this.__colors, this.__alphas, this.__offsets, this.__matrix);
            }

            /**
            * @access private
            */
            function __applyStrokeTo(m:*) :void {
                // @devnote swf8: m instanceof MovieClip
                // @devnote swf9: m instanceof flash.display.Graphics
                m.lineGradientStyle(this.__type, this.__colors, this.__alphas, this.__offsets, this.__matrix);
            }
        }
      ]]></script>
    </otherwise>
  </switch>
</library>
