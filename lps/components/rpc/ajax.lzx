<library>

    <class name="XMLHttpRequest" extends="node">

        <!---  Object status integer: 0 Uninitialised The initial value. 1 Open The open() method has been successfully called. 
              2 Sent The send() method has been successfully called, but no data has yet been received. 3 Receiving Data is being received, 
              but the data transfer is not yet complete. 4 Loaded The data transfer has been completed. -->
        <attribute name="readyState" value="0" type="number"/>

        <!-- Event handler for an event that fires at every state change
             onreadystatechange -->
        <attribute name="onreadystatechange" value="null" />

        <!--- String version of data returned from server process -->
        <attribute name="responseText" value="" type="string"/>

        <!--- DOM-compatible document object of data returned from server process -->
        <attribute name="responseXML" />

        <!--- Numeric code returned by server, such as 404 for "Not Found" or 200 for "OK" -->
        <attribute name="status" value="0" type="number" />

        <!--- String message accompanying the status code -->
        <attribute name="statusText" type="string" />

        <!--- @keywords private -->
        <attribute name="method" type="string" />
        
        <!--- @keywords private -->
        <attribute name="url" type="string" />
        
        <!--- @keywords private -->
        <attribute name="async" value="true" type="boolean" />

        <!--- @keywords private -->
        <attribute name="ondataDelegate" value="null" />

        <!--- @keywords private -->
        <attribute name="onerrorDelegate" value="null" />

        <!--- @keywords private -->
        <attribute name="dataset" value="null" />

        <!--- @keywords private -->
        <method name="init">
            super.init();
            
            if (this.dataset == null) {
                 this.dataset = new lz.dataset(this);
            }

            this.dataset.getresponseheaders = true;

            // register a delegate for when the dataset has loaded
            this.ondataDelegate = new LzDelegate( this , "ondataHandler" , 
                                                  this.dataset, "ondata" );
            this.onerrorDelegate = new LzDelegate( this , "onerrorHandler" , 
                                                  this.dataset, "onerror" );
        </method>
        
        <!--- @keywords private -->
        <method name="destroy" >
            if (this.ondataDelegate) {
                this.ondataDelegate.unregisterAll();
                this.ondataDelegate = null;
            }
            
            if (this.onerrorDelegate) {
                this.onerrorDelegate.unregisterAll();
                this.onerrorDelegate = null;
            }
            
            super.destroy();
        </method>


        <!--=================================================================-->
        <!-- public methods                                                  -->
        <!--=================================================================-->

        <!--- Stops the current request -->
        <method name="abort">
            this.dataset.abort();
        </method>

        <!--- Returns complete set of headers (labels and values) as an LzParam -->
        <method name="getAllResponseHeaders">
            return this.dataset.getAllResponseHeaders();
        </method>

        <!--- Returns the string value of a single header label -->
        <method name="getAllResponseHeader" args="hname:String">
            // TODO: [20080825 anba] Possibly deprecate and remove, see TODO below in 'getResponseHeader()'
            return this.dataset.getResponseHeader(hname);
        </method>
        
        <!--- Returns the string value of a single header label -->
        <method name="getResponseHeader" args="hname:String">
            // TODO: [20080825 anba] added 'getResponseHeader()' because
            // this is the actual name for the browser XMLHttpRequest. 
            // I don't know why the original developer used 'getAllResponseHeader()'. 
            return this.dataset.getResponseHeader(hname);
        </method>

        <!--- Assigns destination URL, method, and other optional attributes of a pending request -->
        <method name="open" args="method:String!, url:String!, async:Boolean = true, uname:String = null, password:String = null">
            <![CDATA[
            this.responseText = "";
            this.responseXML = null;
            this.url = url;
            this.method = method;
            this.async = async;
            if ($debug) {
                if (!async) {
                    Debug.write("warning: XMLHttpRequest.open('"+method+"','"+url+"','"+async+"') does not support synchronous mode");
                }
            }
            this.uname = uname;
            this.password = password;
            if ($debug) {
                if (uname != null || password != null) {
                    Debug.write("warning: XMLHttpRequest.open() does not support HTTP authentication");
                }
            }
            if (method.toLowerCase() == "get") {
                this.dataset.setQueryType("GET");
            } else if (method.toLowerCase() == "post") {
                this.dataset.setQueryType("POST");
            } else if ($debug) {
                Debug.write("XMLHttpRequest.open: method '"+method+"' not supported, use GET or POST");
            }
            this.setAttribute('readyState', 1); // open
            if (this.onreadystatechange != null) {
                this.onreadystatechange(this);
            }
            ]]>
        </method>

        <method name="ondataHandler" args="d">
            // Currently raw text response is only available for serverless requests
            this.responseText = this.dataset.dataRequest['rawdata'];
            this.responseXML = this.dataset;
            this.status = 200; // maybe we need something a little more Laszlo-specific?
            this.statusText = "OK";
            this.setAttribute('readyState', 4); // 'receiving' (well, received...)
            if (this.onreadystatechange != null) {
                this.onreadystatechange(this);
            }
        </method>

        <method name="onerrorHandler" args="d">
            <![CDATA[
            // Currently raw text response is only available for serverless requests
            this.responseText = "";
            this.responseXML = null;
            // If the load was proxied, we can actually dig in the headers and get the
            // real response.
            if (this.dataset.isProxied() && this.dataset.errorstring != null) {
                //data source error for http://localhost:8080/lps-dev/test/ajax/echo.jsps: HTTP Status code: 404:Not Found
                var err = this.dataset.errorstring;
                var marker = 'HTTP Status code: ';
                var ind = err.indexOf(marker);
                if (ind >= 0) {
                    var code = err.substring(ind+(marker.length), ind+(marker.length)+3);
                    this.status = Number(code);
                    this.statusText = err.substring(ind+4+(marker.length));
                }
            } else {
                // serverless mode gives us basically no info on what happened, so fake it
                this.status = 500; // 
                this.statusText =  "Error";
            }

            this.setAttribute('readyState', 4); // 'receiving' (well, received...)
            if (this.onreadystatechange != null) {
                this.onreadystatechange(this);
            }
            ]]>
        </method>

        <!--- Transmits the request, optionally with postable string or DOM object data

         <p>In serverless mode, there's no Flash API to post a raw data string in the POST body.</p>

         <p>Doesn't support "content" arg yet for serverless operation</p>

         -->
        <method name="send" args="content:*">
            <![CDATA[
            if (this.method.toLowerCase() == "get" || this.method.toLowerCase() == "post") {
                this.setAttribute('readyState', 2); // sent
                if (this.onreadystatechange != null) {
                    this.onreadystatechange(this);
                }
                this.dataset.setSrc(this.url);

                // Try to handle content arg, as best we can
                // given the extremely lame Flash 6/7 HTTP APIs.
                if (content != null && this.dataset.isProxied()) {
                    // Raw POST mechanism is only supported in proxied mode
                    if (typeof(content) == 'string') {
                        this.dataset.setQueryParam('lzpostbody', content);
                    } else {
                        // if it's not a string, and not null, assume it's XML
                        this.dataset.setQueryParam('lzpostbody', content.serialize());
                    }
                }
                this.dataset.doRequest();
            } else if ($debug) {
                Debug.write("XMLHttpRequest.send: method '"+method+"' not supported, use GET or POST");
            }
            ]]>
        </method>

        <!--- Assigns a label/value pair to the header to be sent with a request -->
        <method name="setRequestHeader" args="key:String, val:String">
            this.dataset.setHeader(key, val);
        </method>

        <doc>
            <tag name="shortdesc"><text>An implementation of XMLHttpRequest (also called "AJAX") for compatibility in SWF runtimes</text></tag>
            <text>
                <p>This class implements the XMLHTTPRequest as <a href="http://developer.apple.com/internet/webcontent/xmlhttpreq.html" shape="rect">
                    specified</a> by the <a href="http://www.whatwg.org/specs/web-apps/current-work/#scripted-http" shape="rect">WHATWG</a> consortium.</p> 
                <p>In SOLO deployed applications, this class departs from the specification in these ways:</p>
                <ul>
                    
                    <li>Cannot set HTTP headers</li>
                    
                    <li>Cannot access response headers</li>
                    
                    <li>Cannot send raw POST data</li>
                    
                    <li>Cannot send repeated query args in a POST using LoadVars</li>
                    
                    <li>Username/password Auth args to send() not supported</li>
                    
                </ul>

                This implementation is simply a convenience wrapper
                for the LzDataset API, which is the preferred way to
                write runtime-portable code which loads XML data over
                the network.

                <programlisting>
    &lt;script&gt;
        function loadXMLDoc(url) {
            var req = new lz.XMLHttpRequest();
            req.onreadystatechange = processReqChange;
            req.open("GET", url, true);
            req.setRequestHeader('X-Test', 'one');
            req.setRequestHeader('X-Test', 'two');
            req.send(null);
        }
        
        function processReqChange(request) {
            Debug.write("processReqChange: req.readyState", request.readyState);
            // only if request shows "loaded"
            if (request.readyState == 4) {
            // only if "OK"
        if (request.status == 200) {
            Debug.write("arg =", request);
            Debug.write("request.status", request.status);
            Debug.write("request.responseText:", request.responseText);
            Debug.write("request.responseXML:", request.responseXML);
            Debug.write("request.getAllResponseaders:",
            request.getAllResponseHeaders());
        } else {
            Debug.write("There was a problem retrieving the XML data:\n" +
            request.statusText);
               }
           }
        }
    &lt;/script&gt;
                </programlisting>
            </text>
        </doc>
  
    </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2006, 2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
