<library>
    <include href="lz/list.lzx" /> 
    
    <resource name="shadowTR">
        <frame src="../lz/resources/floatinglist/pop_shadow_flush_top_rt.swf" />
        <frame src="../lz/resources/floatinglist/pop_shadow_corner_top_rt.swf" />
        <frame src="../lz/resources/floatinglist/pop_shadow_oval_top_rt.swf" />
    </resource>
    
    <resource name="shadowMR" src="lz/resources/floatinglist/pop_shadow_mid_rt.swf" />
    
    <resource name="shadowBL" src="lz/resources/floatinglist/pop_shadow_bot_lft.swf" />
    <resource name="shadowBM" src="lz/resources/floatinglist/pop_shadow_bot_mid.swf" />
    <resource name="shadowBR" src="lz/resources/floatinglist/pop_shadow_bot_rt.swf" />
        
    <resource name="menucap_lft">
        <frame src="../lz/resources/floatinglist/topmenu_lft.swf" />
        <frame src="../lz/resources/floatinglist/botmenu_lft.swf" />
    </resource>

    <resource name="menucap_mid">
        <frame src="../lz/resources/floatinglist/topmenu_mid.swf" />
        <frame src="../lz/resources/floatinglist/botmenu_mid.swf" />
    </resource>

    <resource name="menucap_rt">
        <frame src="../lz/resources/floatinglist/topmenu_rt.swf" />
        <frame src="../lz/resources/floatinglist/botmenu_rt.swf" />
    </resource>     
        

    <!--- The shadows width and height are set to the width and height of the view
          it is trying to apply a shadow to.
          @keywords private -->
    <class name="_floatshadow" 
        oninit="this.setCornerResourceNumber(cornerresourcenumber)" >
        <!-- number of pixels pulled in from right and bottom sides -->
        <attribute name="inset" value="10" />
        <attribute name="offsety" value="10" />
        <attribute name="shadowsize" value="5" />
        
        <attribute name="bottomvisible" value="true" setter="this.setBottomVisible( bottomvisible )" />
        <attribute name="onbottomvisible" value="null" />
                        
        <attribute name="cornerresourcenumber" 
                   value="0" setter="this.setCornerResourceNumber(cornerresourcenumber)" />
        <attribute name="oncornerresourcenumber" value="null" />
            
        <view name="right" y="${classroot.offsety}" 
              x="${parent.width - classroot.inset}" 
              height="${parent.height - classroot.offsety}" >
            <view name="top" resource="shadowTR" />
            <view resource="shadowMR" stretches="height"/>
            <view height="0" />
            <stableborderlayout axis="y" />
        </view>
            
        <view name="bottom" visible="${parent.bottomvisible}" y="${parent.height}" width="${parent.width + parent.right.width - classroot.inset }" >
            <view resource="shadowBL"/>
            <view resource="shadowBM" stretches="width"/>
            <view resource="shadowBR"/>
            <stableborderlayout axis="x" />
        </view>
            
        <method name="setBottomVisible" args="bv" >
            this.bottomvisible = bv;
            if ( onbottomvisible ) this.onbottomvisible.sendEvent( bv );
            this.setCornerResourceNumber(this.cornerresourcenumber);
        </method>
            
        <method name="setCornerResourceNumber" args="crn" >
            if ( !this.bottomvisible ) {
                this.cornerresourcenumber = 3;
            } else {
                // this.cornerresourcenumber = crn;
                this.cornerresourcenumber = 2;
            }
            if ( !isinited ) return;                        
            this.right.top.setResourceNumber( this.cornerresourcenumber );
            if ( oncornerresourcenumber ) this.oncornerresourcenumber.sendEvent();
        </method>   
    </class>
    
    <!--- A list which floats above other components on the canvas.  The
          floatinglist may be attached to a view, in which case the
          attachlocation attribute may be used to specify where the attachment
          occurs. -->
    <class name="floatinglist" extends="list"
           options="ignorelayout" >
        <!--- @keywords private -->
        <attribute name="owner" />

        <!--- Where this floatinglist should attach to its owner. Possible
              values: bottom, top, left, right.  In the event of a canvas
              out-of-bounds, the floating list will attach in a visible
              location. -->
        <attribute name="attach" value="bottom" type="string"/>    
        <!--- @keywords private -->
        <attribute name="_currentattachy" value="bottom" type="string"/>
        <!--- @keywords private -->
        <attribute name="_currentattachx" value="bottom" type="string"/>

        <!--- The size of the bottom border which defaults to bordersize. -->
        <attribute name="border_bottom"  value="${this._currentattachy == 'bottom' ? 0:this.bordersize}" />
        <attribute name="border_top"  value="${this._currentattachy == 'top' ? 0:this.bordersize}" />
        
        <!--- @keywords private -->
        <attribute name="shadowcrn"     value="0" />
        <!--- The view to which this floatinglist will attach. By default, this
              will be the lexical parent.  The style of the attachtarget will be
              inherited. -->
        <attribute name="attachtarget"  value="null" 
                           setter="this.setAttachTarget(attachtarget)" />
        <!--- The distance from the attachtarget. -->
        <attribute name="attachoffset"  value="0" />
        <!--- The shadow offset in the y coordinate space. -->
        <attribute name="shadowoffsety" value="${this._currentattachy == 'bottom' ? 3:-9}" />
        
        <!--- @keywords private -->
        <attribute name="_fx" value="null"/>
        <!--- @keywords private -->
        <attribute name="_fy" value="null"/>
        
        <!--- Number of items originally requested to display.
              @keywords private -->
        <attribute name="_origshownitems" value="-2" type="number" />

        <!-- initially this view will cover the contents of the list.
             this is rectified oninit by sending this.sendToBack()
             -->
        <view name="bkgnd" ignoreplacement="true"
              width="100%" height="100%"  >
            <_floatshadow name="shdw" 
                    bottomvisible="${classroot._currentattachy != 'top'}"
                    offsety="${classroot.shadowoffsety}" 
                    cornerresourcenumber="${classroot.shadowcrn}"
                    width="100%" height="100%" opacity=".6" />
            <view name="borderview" 
                  width="100%" 
                  height="100%" 
                  bgcolor="0x808080" />
        </view>

        <view name="menucap" y="${parent._currentattachy == 'top'? -height:parent.height }"
              width="${classroot.width}" 
              placement="ignore" 
              oninit="this.setResourceNumber(1)">
            <view resource="menucap_lft"/>
            <view resource="menucap_mid" stretches="width"/>
            <view resource="menucap_rt"/>
            <stableborderlayout axis="x" />
            <method name="setResourceNumber" args="r"> <![CDATA[
                var L = this.subviews.length;
                for ( var i = 0; i < L; i++ ) {
                    this.subviews[i].setResourceNumber(r);
                } 
             ]]> </method>
            <method name="setY" args="y"> <![CDATA[
                super.setY(y);
                if ( y < 0 ) {
                    this.setResourceNumber(1);
                } else {
                    this.setResourceNumber(2);
                }
             ]]> </method>
        </view>

        <!--- @keywords private -->
        <method name="_applystyle" args="s">
            if (this.style != null) {
                setTint(this.menucap, s.basecolor);
            }
        </method>

        <!--- our style is contrained to the style of our attachtarget
              @keywords private -->
        <attribute name="style" value="${attachtarget['style']}"/>
        
        <!--- Set the target to which the floating list will attach.  Set the
              "attach" attribute for attachment location relative to this attach
              target. Our style will be inherited from this attachtarget.
              @param LzView target: the target to attach the floatinglist. -->
        <method name="setAttachTarget" args="target" >
            this.attachtarget = target;
            if (visible) updateAttachLocation();
        </method>

        <!--- @keywords private -->
        <method name="construct" args="parent,args" >
            // keep a reference to its lexical parent
            this.owner = parent;

            if ( typeof( args.name ) != 'undefined'  )  {
                var nme = args.name; // save value of name arg
                args.name = null;    // zero name field. doing 'delete args.name'
                                     // doesn't work in this case.
                this.wouldbename = nme;
                this.owner[nme] = this; // have parent point to me via owner attribute
            }

            // construct this view on the canvas width a default name
            super.construct(canvas,args);
 
            // reset _parentcomponent
            var p = this.owner;
            while (p != canvas) {
                if (p instanceof basecomponent) {
                    this._parentcomponent = p;
                    break;
                }
                p = p.immediateparent;
            }

            // Since we are constructed on the canvas, we need to
            // listen for out parent being destroyed and clean up after
            // ourselves.
            new LzDelegate(this, 'destroy', parent, 'ondestroy');
        </method>

        <!--- @keywords private -->
        <method name="destroy" args="recursiveCall">
          // Have to remove ourselves from the canvas
          var svs = canvas.subviews;
          for (var i = svs.length -1; i >= 0; i--) {
            if (svs[i] === this) {
              svs.splice(i, 1);
              break;
            }
          }
          // Have to remove ourselves from the canvas
          var sns = canvas.subnodes;
          for (var i = sns.length -1; i >= 0; i--) {
            if (sns[i] === this) {
              sns.splice(i, 1);
              break;
            }
          }
          super.destroy(recursiveCall);
        </method>

        <!--- @keywords private -->
        <method name="init">
            super.init();
            if (this.attachtarget==null) {
                this.setAttachTarget( owner );
            }
            this.bkgnd.sendToBack();
            this.bringToFront();
        </method>
        
        <!--- @keywords private -->
        <attribute name="_constraintsApplied" value="false"/>
        
        <!--- @keywords private -->
        <method name="_setScroll"  > <![CDATA[
            var svHeight = this.interior.content.subviews[0].height;
            var own_y = attachtarget.getAttributeRelative('y',canvas);

            // check which position allows for more items to be displayed
            var maxHeightFromTop    = own_y;
            var maxHeightFromBottom = canvas.height - 
                (own_y + attachtarget.height + attachoffset + menucap.height);

            var startY = 0;
            var myAttach = "top";
            var maxHeight = maxHeightFromTop;
            if (maxHeightFromBottom > maxHeightFromTop) {
                myAttach = "bottom";
                startY = own_y + attachtarget.height + attachoffset;
                maxHeight = maxHeightFromBottom;
            }

            // calculate number of items and height of list to display
            var items = Math.floor((maxHeight + spacing - menucap.height) / (svHeight + spacing));
            var myHeight = items * (svHeight + spacing ) - spacing + menucap.height;

            // recalculate height if default attachment is left or right
            if (attach == "left" || attach == "right") {
                myHeight += svHeight + spacing;
                items++;
                if (myAttach == "bottom") {
                    startY -= attachtarget.height + attachoffset;
                } else {
                    startY += attachtarget.height;
                }
            }

            // calculate exact position to place list if we are to attach on top
            if (myAttach == "top") {
                startY += maxHeightFromTop - myHeight + menucap.height;
            }

            this.setAttribute('y', startY);
            this.setAttribute('_currentattachy', myAttach);
            this._setShownItems(items, true);
            this.setAttribute('scrollable', true);
        ]]></method>

        <!--- Save original shown items unless overridden by user call or is initial call.
              @keywords private -->
        <method name="_setShownItems" args="n,keeporig">
        <![CDATA[
            super._setShownItems(n);
            if (this._origshownitems == -2 || ! keeporig ) {
                this._origshownitems = n;
            }
        ]]>
        </method>

        <!--- Adjusts the location of the floatinglist relative to its
              attachtarget, taking into account the attach location and the
              canvas bounds. -->
        <method name="updateAttachLocation" > <![CDATA[
            // Adjust x and y relative to the attachtarget as appropriate to adhere to the requested attach location.
            // In the event that the floatinglist intersects the canvas bounds, the attach location
            // will be temporarily changed in order to be fully visible.
            if ( !isinited ) return;
            if (!attachtarget) return;

            // Adjust X
            var doneonce = false;
            var validattach = attach;
            var own_x = attachtarget.getAttributeRelative('x',canvas);
            while (true) {
                if (validattach=="bottom" || validattach=="top") {
                        this.setAttribute( 'x' , own_x );
                        break;
                } else
                if (validattach=="left") {
                    var tmp_x = own_x - this.width;
                    if (tmp_x > 0) {
                        this.setAttribute( 'x' , tmp_x );
                        this.setAttribute( '_currentattachx', 'left' );
                        break;
                    } else {
                        validattach = "right";
                    }
                }
                if (validattach=="right") {
                    var tmp_x = own_x + attachtarget.width; // why -1?
                    if (tmp_x + this.width < canvas.width ) {
                        this.setAttribute( 'x' , tmp_x );
                        this.setAttribute( '_currentattachx', 'right' );
                        break;
                    } else {
                        // avoid infinite loop
                        if (! doneonce) {
                            validattach = "left";
                            doneonce = true;
                        } else {
                            // default right
                            break;
                        }
                    }
                }
            }
                        
            // Adjust Y

            this._setShownItems(this._origshownitems, true);
            this.setAttribute('scrollable', false);

            var doneonce = false;
            var validattach = attach;

            //NOTE: we are using calcMyHeight() here because height is returning the wrong value
            var myHeight = this.calcMyHeight() + menucap.height;
            var own_y = attachtarget.getAttributeRelative('y',canvas);
            while (true) {
                if ( validattach=="left" || validattach=="right" ) {
                    if ( own_y + myHeight < canvas.height ) {
                        this.setAttribute( 'y' , own_y );
                        this.setAttribute( '_currentattachy', 'bottom' );
                        break;
                    } else {
                        validattach = "top";
                    }
                } else
                if ( validattach=="bottom" ) {
                    var tmp_y = own_y + attachtarget.height + attachoffset;
                    if ( tmp_y + myHeight < canvas.height ) {
                       this.setAttribute( 'y' , tmp_y );
                       this.setAttribute( '_currentattachy', 'bottom' );
                       break;
                    } else {
                       validattach = "top";
                    }
                }
                if ( validattach=="top" ) {
                    var tmp_y = own_y - myHeight;
                    // if the orignal attempt was to attach it to left or right
                    // add back the height of the attachtarget so that the bottom
                    // of the floatinglist is flush with the bottom of the attachtarget
                    if ( attach == 'right' || attach == 'left' )tmp_y += attachtarget.height;
                    if ( tmp_y > 0 ) {
                        this.setAttribute( 'y' , tmp_y + menucap.height);
                        this.setAttribute( '_currentattachy', 'top' );
                        break;
                    } else {
                        // avoid infinite loop
                        if (! doneonce) {
                            validattach = "bottom";
                            doneonce = true;
                        } else {
                            this._setScroll();
                            break;
                        }
                    }
                }
            }
        ]]>
        </method>
        
        <!--- @keywords private -->
        <method name="setBGColor" args="c" >
            if ( !isinited ) return;
            this.bkgnd.borderview.setBGColor(c);
        </method>

        <!-- onmousedown event is sent by listitem
             @keywords private -->
        <method event="onmousedown">
            this.owner.onmousedown.sendEvent();
            this.bringToFront();
        </method>
        
        <!--- @keywords private -->
        <method name="setVisible" args="v">
            if (v) {
                updateAttachLocation();
            }
            super.setVisible(v);
        </method>
        
        <!--- @keywords private -->
        <method name="toString">
            return "floatinglist: wouldbename,owner = " + wouldbename + "," + this.owner;
        </method> 
        
        <!--- For focus control - next focus from here is relative to our owner.
              @keywords private -->
        <method name="getNextSelection">
            var next = owner.getNextSelection();
            return next;
        </method>
        
        <!--- For focus control. Defer to owner's context.
              @keywords private -->
        <method name="getPrevSelection">
            // A floating list should not know the structure of its owner
            // and because it is not part of the owner's view hiearchy
            // the owner should determine what 'shift tab' does here
            return owner.resolveSelection();
        </method>
        
        <!--- @keywords private -->
        <method event="onblur" >
        <![CDATA[
            if ( this.owner != "undefined" && this.owner['onblur']) {
                this.owner.onblur.sendEvent();
            }
        ]]>
        </method>
        
    </class>
      
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
