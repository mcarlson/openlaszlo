<library>
    <include href="../base/basetabslider.lzx" />

    <!-- Tabslider is a container for tabelements. Tabslider determines the
         boundary of the tabs and has an additional border that can be assigned
         a color and size. -->
    <class name="tabslider" extends="basetabslider"
        styleable="true" clip="true" >
        <!--- Default placement of children is content. 
              @keywords private -->
        <attribute name="defaultplacement" value="content" type="string"/>

        <!--- Item class elements to use as children. Default is tabelement. -->
        <attribute name="itemclassname" value="tabelement"/>

        <!--- The border color. Default is constrained to the 
              <tagname>style</tagname>'s <attribute>bordercolor</attribute> 
              value. -->
        <attribute name="bordercolor"  value="${this.style != null ? this.style.bordercolor : null}"
                   setter="this.setBorderColor( bordercolor )" type="color" />

        <!--- Background color. -->
        <attribute name="bgcolor" setter="this._setBGColor( bgcolor );" />

        <!--- @keywords private  -->
        <attribute name="_bgcolor"  value="null" />

        <!--- The size of the border. Default is 1 pixel. -->
        <attribute name="bordersize"  value="1" setter="this.setBordersize(bordersize)" />

        <view name="content"
            x="${parent.bordersize}"
            y="${parent.bordersize}"
            width="${parent.width - 2*parent.bordersize}"
            height="${parent.height - 2*parent.bordersize}"  >

            <method event="onaddsubview" args="v" >
               classroot.doAddSubview(v);
            </method>
        </view>

        <!--- Setter for border size.
              @param Number size: the size of the border. -->
        <method name="setBordersize" args="size" ><![CDATA[
            var sz = size;
            if (sz < 0) sz = 0; //dont allow negative values
            this.bordersize = sz;
            if (typeof(this.onbordersize) != "undefined" ) this.onbordersize.sendEvent(sz);
        ]]></method>

        <!--- Setter for border color.
              @param Number color: the color number. -->
        <method name="setBorderColor" args="color" >
            this.bordercolor = color;
            this.setBGColor( color );
        </method>

        <!--- Setter for bgcolor.
              @keywords private -->
        <method name="_setBGColor" args="color" >
            this._bgcolor = color;
            if (_initcomplete) {
                this.content.setBGColor( color );
            }
        </method>

        <!--- @keywords private -->
        <method name="_applystyle" args="s">
            if (this.style != null) {
                super._applystyle(s);
                this.interiorcolor = s.bgcolor;
                this.fgcolor = s.textcolor;
                this.bordercolor = s.bordercolor;
                if (this._bgcolor == null) {
                    this._setBGColor(s.bgcolor);
                } else {
                    this._setBGColor(this._bgcolor);
                }
            }
        </method>

    </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
