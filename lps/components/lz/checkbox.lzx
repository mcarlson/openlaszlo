<library>
    <include href="base/baseformitem.lzx"/>
    <include href="base/multistatebutton.lzx"/>
    <resource name="lzcheckbox_rsrc">
        <frame src="resources/checkbox/checkbox_off.swf" />
        <frame src="resources/checkbox/checkbox_off_mo.swf" />
        <frame src="resources/checkbox/checkbox_on.swf" />
        <frame src="resources/checkbox/checkbox_disable_off.swf" />
        <frame src="resources/checkbox/checkbox_on.swf" />
        <frame src="resources/checkbox/checkbox_on_mo.swf" />
        <frame src="resources/checkbox/checkbox_off.swf" />
        <frame src="resources/checkbox/checkbox_disable_on.swf" />
    </resource>

    <!--- A checkbox component representing a boolean -->
    <class name="checkbox" extends="baseformitem" pixellock="true">

        <!--- the y position of the text label. default: centered -->
        <attribute name="text_y"
            value="${this.cb.height/2 - this._title.height/2+1}" type="number"/>

        <!--- @keywords private -->
        <attribute name="value" setter="setValue(value)" value="false"/>
        <!--- @keywords private -->
        <attribute name="onvalue" value="null"/>

        <!-- views -->
        <multistatebutton name="cb" resource="lzcheckbox_rsrc" text=""
            statenum="${parent.value ? 1 : 0}"
            statelength="4" maxstate="1"
            reference="parent">
        </multistatebutton>
        <text name="_title" x="16" y="$once{classroot.text_y}" text="${parent.text}" resize="true"/>

        <!--- toggles the value when the space bar is pressed while focused -->
        <method name="doSpaceUp">
            <![CDATA[
            if ( this._enabled ) {
               this.setAttribute('value', !this.value);
            }
            ]]>
        </method>

        <method event="onclick">
            if (this._enabled)
                this.setAttribute('value', !this.value);
        </method>

        <!--- @keywords private -->
        <method name="_applystyle" args="s">
            if (this.style != null) {
                if (_enabled) {
                    _title.setAttribute('fgcolor',s.textcolor);
                } else {
                    _title.setAttribute('fgcolor',s.textdisabledcolor);
                }
                setTint(this.cb, s.basecolor);
            }
        </method>

        <!--- @keywords private -->
        <method name="_showEnabled">
            _applystyle(this.style);
        </method>
        
        <!--- setter for 'value' attribute.  The checkbox value is
            always true or false.
            @param val : can be any Javascript type and is evaluated as its
            boolean equivalent, strings "true" and "false"
            are treated specially to represent true and false respectively-->
        <method name="setValue" args="val">
            if (val == "false") val = false;
            else if (val == "true") val = true;
            else val = !!val;
            this.value = val;
            if (this.onvalue) this.onvalue.sendEvent(val);
        </method>
                
    </class>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
