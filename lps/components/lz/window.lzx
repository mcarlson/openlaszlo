<!--
    Class: window
    implements an area of the screen that can be dragged, resized or closed
    by the user.  Standard placement is defined for menubar, toolbar and icon.
-->
<library>
    <include href="lz/button.lzx" />
    <include href="lz/windowpanel.lzx" />
    <include href="utils/layouts/simplelayout.lzx"/>
    <include href="utils/layouts/resizelayout.lzx"/>

    <class name="window" extends="windowpanel">
        <attribute name="defaultplacement" value="wcontent" type="string"/>
        <!--- If true, a resize control will appear in the lower-right corner,
            allowing the user to resize the window.  Default: false. -->
        <attribute name="resizable" value="false"/>

        <!--- may be called by subclasses to control resizing of the window
            based on mouse movement, typically called onmousedown from a
            resizer control -->
        <method name="_startResize">
            super._startResize();
            setAttribute('_usecontentwidth', false);
            setAttribute('_usecontentheight', false);
        </method>

        <state name="resizeable" apply="${this.classroot.resizable}">
            <view name="_resizeControl" placement="null"
                x="${classroot.width - this.width - classroot.inset_right}"
                y="${classroot.height - this.height - classroot.inset_right}"
                resource="window_resizebtn_rsc"
                onmouseover="if (this.frame == 1) setAttribute('frame', 2);"
                onmouseout="if (this.frame == 2) setAttribute('frame', 1);"
                onmousedown="classroot._startResize();setAttribute('frame', 3);"
                onmouseup="classroot._stopResize(); setAttribute('frame', 1);"
                oninit="classroot.setTint(this, classroot.style.basecolor)"
                />
        </state>
        <view name="menubar" width="${parent.wframe.width}" clip="true"
            oninit="classroot.menubar = this">
            <!-- placement for menubar -->
        </view>
        <view name="toolbar" width="${parent.wframe.width}" clip="true"
            oninit="classroot.toolbar = this">
            <!-- placement for menubar -->
        </view>
        <view name="wframe"
            width="${wcontent.width+2}" height="${wcontent.height+2}"
            options="releasetolayout" bgcolor="0x6A6A6A">
            <view name="wcontent" x="1" y="1"
                clip="true" bgcolor="${classroot.content.bgcolor}">
                <state apply="${!classroot._usecontentwidth}">
                    <attribute name="width" value="${parent.immediateparent.width - 2}"/>
                </state>
                <state apply="${!classroot._usecontentheight}">
                    <attribute name="height"
                        value="${parent.immediateparent.height -
                                parent.immediateparent.menubar.height -
                                parent.immediateparent.toolbar.height - 2}"/>
                </state>
                <!-- this is the "defaultplacement" view -->
            </view>
        </view>
        <resizelayout axis="y"/>

        <!--- @keywords private -->
        <attribute name="_resizeControl" value="null"/>
        <!--- @keywords private -->
        <method name="_applystyle" args="s">
            super._applystyle(s);
            if (this._resizeControl) {
                 this.setTint(this._resizeControl, s.basecolor);
            }
       </method>

    </class>

    <!--- A modal dialog window. -->
    <class name="modaldialog" extends="windowpanel"
        x="${(immediateparent.width - this.width)/2}"
        y="${(immediateparent.height - this.height)/3}"
        focustrap="true"
        visible="false">

        <!--- The left inset for the dialog contents from the edge of the
              window inner frame. -->
        <attribute name="content_inset_left" value="14"/>
        <!--- The top inset for the dialog contents from the edge of the window
              inner frame. -->
        <attribute name="content_inset_top" value="10"/>
        <!--- The right inset for the dialog contents from the edge of the
              window inner frame -->
        <attribute name="content_inset_right" value="14"/>
        <!--- The bottom inset for the dialog contents from the edge of the
              window inner frame. -->
        <attribute name="content_inset_bottom" value="10"/>

        <!--- @keywords private -->
        <attribute name="defaultplacement" value="mdcontent" type="string"/>
        <view name="mdpadding"
            width="${mdcontent.width + parent.content_inset_left + parent.content_inset_right}"
            height="${mdcontent.height + parent.content_inset_top + parent.content_inset_bottom}">
            <view x="${classroot.content_inset_left}" y="${classroot.content_inset_top}"
                name="mdcontent">
            <state apply="${!classroot._usecontentwidth}">
                <attribute name="width" value="${parent.immediateparent.width
                     - classroot.content_inset_left- classroot.content_inset_right }"/>
            </state>
            <state apply="${!classroot._usecontentheight}">
                <attribute name="height"
                    value="${parent.immediateparent.height
                            - classroot.content_inset_top- classroot.content_inset_bottom}"/>
            </state>
            <!-- this is the "defaultplacement" view -->
            </view>
        </view>

        <!--- Opens the dialog (use this method, not setVisible). While the
              dialog is open, the user will not be able to interact with other
              windows or UI elements in the application. -->
        <method name="open">
            //need to show this before taking the mode, so that any default
            //buttons contained by the this window will get hasdefault=true
            this.setVisible( true );
            LzModeManager.makeModal( this );
            this.bringToFront();
        </method>

        <!--- Closes the dialog. -->
        <method name="close">
            this.setVisible( false );
            LzFocus.clearFocus();
            LzModeManager.release( this );
        </method>

        <!--- @keywords private -->
        <method name="passModeEvent" args="event_name, view">
            return false;
        </method>
   </class>

   
    <class name="alert" extends="modaldialog">

        <!--- Alert shows only this button, if button2 isn't set. Default: "OK".
              You may specify a different string to change the text of the
              button. -->
        <attribute name="button1" value="OK" type="string"/>

        <!--- If a string is set for this attribute, a second button will be
              shown to the left of the first with this text. -->
        <attribute name="button2" value="" type="string"/>

        <!--- After the alert is closed, this is set to true if button1 ("OK")
              is pressed or false if button2 is pressed. You can check for the
              result value using the onresult event. -->
        <attribute name="result" value="null"/>

        <!--- The x position of the button text. Default: 0 (left). -->
        <attribute name="text_x" value="0" type="number"/>
        <!--- The y position of the button text. Default: 0 (top). -->
        <attribute name="text_y" value="0" type="number"/>

        <!--- Minimum width for the alert. Default: 100 for a 1 button alert,
              170 for a 2 button alert.
              @keywords final -->
        <attribute name="minwidth" value="$once{button2 == '' ? 100 : 170}"/>

        <!--- This event is sent when a button is pressed. Use this to check the
              result value. -->
        <attribute name="onresult" value="null"/>

        <!--- The max length of a line of text before it wraps. Default: 1/3 of
              the parent's width - width of window dressing and margin. -->
        <attribute name="maxtextwidth"
            value="${Math.round(parent.width/3) - inset_left - inset_right
                    - content_inset_left - content_inset_right}"/>

        <text name="alerttext" x="${parent.text_x}" y="${parent.text_y}"
            resize="true" text="${parent.text}" multiline="true">
            <method name="setText" args="t">
                super.setText(t);
                if (!parent._usecontentwidth) {
                    this.setWidth(parent.width
                        - parent.inset_left - parent.inset_right
                        - parent.content_inset_left - parent.content_inset_right );
                } else {
                    var twidth = this.getTextWidth();
                    if (twidth > parent.maxtextwidth) {
                        // multiline text looks funny unless its a bit wider
                        // since there is always extra space on the right
                        twidth = parent.maxtextwidth;
                    }
                    this.setWidth(twidth);
                }
            </method>
        </text>

        <!--- Opens the alert window. -->
        <method name="open">
            this.result = null;
            if ( this.onresult ){
                this.onresult.sendEvent( res );
            }
            super.open();
        </method>

        <!--- Closes the alert window. This method is used by the alert
              button(s). If button1 is clicked, close is passed a true value. If
              button2 is clicked, close is passed a false value.
              @param Boolean res: a boolean result value. -->
        <method name="close" args="res">
            this.result = res;
            if ( this.onresult ){
                this.onresult.sendEvent( res );
            }
            super.close();
        </method>

        <view x="${immediateparent.width > this.width?
                   immediateparent.width - this.width : 0}"
            y="${immediateparent.alerttext.height + parent.content_inset_top}">
            <simplelayout axis="x" spacing="5"/>
            <button onclick="classroot.close( false )"
                    text="${classroot.button2}"
                    visible="${classroot.button2 != '' }">
            </button>
            <button isdefault="true" onclick="classroot.close( true )"
                    text="${classroot.button1}"
                    visible="${classroot.button1 != '' }"
                    name="b1">
            </button>
        </view>
    </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
