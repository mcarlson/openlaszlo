<!--
    form.lzx

    Copyright 2004 Laszlo Systems, Inc.  All Rights Reserved.
    Unauthorized use, duplication or distribution is strictly prohibited.
    This software is the proprietary information of Laszlo Systems, Inc.
    Use is subject to license terms.
-->
<library>

<include href="incubator/newbaseform.lzx" />

<!-- This class is exactly the same as lz/form.lzx except it inherits from
     newbaseform. -pk -->

<!--- Extends the component grouping features of newbaseform to also provide
      standard layout for from controls. Buttons will be placed in a view at the
      bottom right of the form (placement 'buttonplace'). A form is typicaly a
      collection of UI elements where each represents data from the user that
      will be submitted to the server as a request. -->
<class name="form" extends="newbaseform"
    layout="class: simplelayout; spacing: 10; axis: y" >

    <!--- @keywords private -->
    <method name="construct" args="p,args"> <![CDATA[
        super.construct(p, args);
        // need to set these attributes before subviews are created
        // otherwise they will calculate width/height incorrectly
        setAttribute('_useformwidth', this.hassetwidth);
        setAttribute('_useformheight', this.hassetheight);
    ]]> </method>

    <!--- The default placement view for subviews that go in this form.
          @keywords private final -->
    <attribute name="defaultplacement" type="string" value="content"/>

    <!--- If true, use content's width to determine size of form. If false,
          use form's width to determine width of content area.
          @keywords private -->
    <attribute name="_useformwidth" value="true"/>

    <!--- If true, use content's height to determine size of form. If
          false, use form's width to determine width of content area.
          @keywords private -->
    <attribute name="_useformheight" value="true"/>

    <!--- @keywords private -->
    <state name="_noformwidth" apply="${!classroot._useformwidth}">
        <attribute name="width" 
           value="${this.inset_left + this.content.width + 
                    this.inset_right}"/>
    </state>
    <state name="_noformheight" apply="${!classroot._useformheight}">
        <attribute name="height" 
          value="${this.inset_top + this.content.height + 
             (buttonplace.height != 0 ?  buttonplace.height + spacing : 0) +
                  this.inset_bottom}"/>
    </state>

    <!--- Vertical space between content and button area. If forms height is
          specified, the button area will be flush against the form's bottom
          right corner (adjusted by any layout that the form has). -->
    <attribute name="spacing" value="10"/>

    <!--- The top inset for content appearing within form. -->
    <attribute name="inset_top" value="10"/>
    <!--- The left inset for content appearing within form. -->
    <attribute name="inset_left" value="10"/>
    <!--- The bottom inset for content appearing within form. -->
    <attribute name="inset_bottom" value="10"/>
    <!--- The right inset for content appearing within form. -->
    <attribute name="inset_right" value="10"/>

    <!--- @keywords private -->
    <method name="determinePlacement" args="newsubview, placement, args">
    <![CDATA[
        var place = null;
        if (args['placement'] != null) {
            // explicit placement desired by subview
            place = this.searchSubnodes( "name" , placement );
        }

        if (place == null) {
            if (newsubview instanceof button) {
                place = this.buttonplace;
            } else {
                place = this.content;
            }
        }
        return place;
    ]]>
    </method>

    <!-- content area of form -->
    <view name="content" 
          x="${classroot.inset_left}" 
          y="${classroot.inset_top}" >

        <state name="_useformwidth" apply="${classroot._useformwidth}">
            <attribute name="width" 
                value="${classroot.width - classroot.inset_left 
                                         - classroot.inset_right}" />
        </state>
        <state name="_useformheight" apply="${classroot._useformheight}">
            <attribute name="height" 
                value="${classroot.height - classroot.inset_top 
                            - classroot.inset_bottom
                             - classroot.buttonplace.height != 0 ?
                               classroot.buttonplace.height 
                              + classroot.spacing 
                             : 0}" />
        </state>
    </view>

    <view name="buttonplace" 
          layout="class: simplelayout; axis: x; spacing: 10">

          <state name="_noformwidth" apply="${!classroot._useformwidth}">
              <attribute name="x" 
                   value="${classroot.content.x + 
                            classroot.content.width + 
                            - this.width}" />
          </state>
          <state name="_formwidth" 
                 apply="${classroot._useformwidth}">
              <attribute name="x" 
                   value="${classroot.width - classroot.inset_right 
                                            - this.width}" />
          </state>

          <state name="_noformheight" apply="${!classroot._useformheight}">
              <attribute name="y" 
                   value="${classroot.content.y + 
                            classroot.content.height +
                            classroot.spacing}" />
          </state>

          <state name="_formheight" 
                 apply="${classroot._useformheight}">
              <attribute name="y" 
                   value="${classroot.height - classroot.inset_bottom
                                             - this.height}" />
          </state>

     </view>

</class>

</library>
