<?xml version="1.0" encoding="UTF-8" ?>
<!--
********************************************************
* [[validators/numbervalidator]]
* 2005/11/06 ver.1.0.
* togawa manabu
* web:http://laszlo.jp
* mail:webmaster@laszlo.jp 
********************************************************
-->
<library>
    <include href="basevalidator.lzx" />
    
    <class name="numbervalidator" extends="basevalidator">
        <attribute name="minvalue" type="number" value="null"/>
        <attribute name="maxvalue" type="number" value="null"/>
        <attribute name="domain" type="string" value="real"/> <!-- real/int -->
        
        <attribute name="notnumberErrorstring" type="string" value="this field contains invalid characters." />
        <attribute name="notintErrorstring" type="string" value="Enter integer value." />
        <attribute name="toobigErrorstring" type="string" value="this number entered is too big." />
        <attribute name="toosmallErrorstring" type="string" value="this number entered is too small." />
        
        <method name="doValidation">
        <![CDATA[
            var edittexts = getedittexts();
            for(i = 0; i < edittexts.length; i++ ){
            var valtext = edittexts[i].getText();
                if(required && valtext.length < 1){
                    this.setErrorstring(this.requiredErrorstring);
                    return false;
                }
                
                if(valtext != ""){
                    if(!isValiedNumber(valtext)){
                        this.setErrorstring(this.notnumberErrorstring);
                        return false;
                    }
                    if(domain == "int" && !isInt(valtext)){
                        this.setErrorstring(this.notintErrorstring);
                        return false;
                    }
                    var valNum = parseFloat(valtext);
                    if(valNum < this.minvalue){
                        this.setErrorstring(this.toosmallErrorstring);
                        return false;
                    }
                    if(this.maxvalue < valNum){
                        this.setErrorstring(this.toobigErrorstring);
                        return false;
                    } 
                }
            }        
            
            this.setErrorstring("");
            return true;
        ]]>
        </method>
        
        <method name="isValiedNumber" args="value">
            return ! isNaN(value)
        </method>
        
        <method name="isInt" args="value">
        <![CDATA[
            if (value.toString().indexOf(".") < 0)
                return true;
            else
                return false;
        ]]>
        </method>
    </class>
</library>
