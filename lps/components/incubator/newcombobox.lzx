<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005 Laszlo Systems, Inc. All Rights Reserved.                    *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
<library>

    <include href="newbaseform.lzx" />
    <include href="floatinglist.lzx" />
    <include href="lz/textlistitem.lzx" />

    <!--- Class used to create an item in a newcombobox's list.
          @keywords private -->
    <class name="newcombobox_item" extends="textlistitem" width="${null}">
        <!--- @keywords private -->
        <method event="onmousedown">
            parent.select(this);
        </method>
        
        <!--- Also called by the combobox when it opens if the data
             might have changed.
            @keywords private -->
        <method event="ondata" args="d" name="handleData"> <![CDATA[
            var target = parent.attachtarget;
            var t = this.datapath.xpathQuery(target.textdatapath);
            var v = this.datapath.xpathQuery(target.valuedatapath);
            //Debug.write("cbitem", this, "setting text to", t);
            //Debug.write("cbitem", this, "setting value to", v);
            this.setAttribute('text', ( t == undefined ? '' : t ));
            this.setAttribute('value', ( v == undefined ? null : v ));
            
            // special case for separator string
            // TODO [2005-4-01, dchung] could this be rendered as a line?
            this.setAttribute('enabled', (t != '-----'));

            this.setWidth(target.listwidth ? target.listwidth : target.width);
            ]]>
        </method>
    </class>

    <!--- An abstract class to create dropdown lists of selectable items. Define
          the look in a subclass. Also, a newcombobox_text must be declared in
          the subclass. 

          
          @START_CODE
          <class name="simplecombobox" extends="newcombobox" width="100">
              <view width="100%" height="20" focusable="false" bgcolor="#CCCCCC">
                  <method event="onclick">
                      LzFocus.setFocus(this,false); 
                      classroot.toggle()
                  </method>
                  <method event="onmouseout">
                      this.setBGColor(0xCCCCCC);
                  </method>
                  <method event="onmouseup">
                      this.setBGColor(0xCCCCCC);
                  </method>
                  <method event="onmouseover">
                      this.setBGColor(0xEEEEEE);
                  </method>
                  <method event="onmousedown">
                      this.setBGColor(0xAAAAAA);
                  </method>
              </view>
              <newcombobox_text width="${ parent.width - 19 }" x="7" />
          </class>
          @END_CODE

           ** Caveat: Combobox items will not update if the attributes
            that are mapped to textdatapath or valuedatapath change.
            To force the changes to update, call 
            @BEGIN_CODE node.parentNode.replaceChild(node.cloneNode(true), node) @END_CODE
            where node is the dataelement of the list item. Don't forget 
            to reset the seleciton on the list, as well.
             -->
    <class name="newcombobox" extends="newbaseformitem">

        <!--- Datapath to items in list. -->
        <attribute name="itemdatapath" value="null" type="string"/>

        <!--- Datapath to text to display for items in list. 
              See caveat.-->
        <attribute name="textdatapath" value="text()" type="string"/>

        <!--- Datapath to value for items in list. See caveat.-->
        <attribute name="valuedatapath" value="@value" type="string"/>

        <!--- The name of the class for items in the floating list. -->
        <attribute name="itemclassname" value="" type="string"/>
        
        <!--- When true, the 1st item is selected oninit. -->
        <attribute name="selectfirst" value="true"/>

        <!--- If set, this will always be displayed instead of selected item
              text. Behaves like a menu button. Also see defaulttext. -->
        <attribute name="statictext" value="$once{null}" type="string"/>

        <!--- Default text to display before a selection is made. No default
              item is selected if defaulttext is set. Defaulttext is replaced
              with selected item's text. -->
        <attribute name="defaulttext"  value="$once{null}" type="string" />

        <!--- The value of the selected item. -->
        <attribute name="value" value="null" setter="this.setValue(value)" />

        <!--- Datapointer to selected item. 
              @keywords readonly -->
        <attribute name="selected" value="null"/>

        <!--- Sets the height to the number of items to show in combobox
              popup list. Default is 4, must be greater than 0. -->
        <attribute name="shownitems" value="4" />

        <!--- Indicates whether or not the popup list is showing.  -->
        <attribute name="isopen" value="false" setter="this.setOpen(isopen)" />

        <!--- Width of popup list, defaults to width of combobox view. During
              setup, the width of the floating list view might not yet be set,
              so this returns the expected width. If not set, -->
        <attribute name="listwidth" value="null" />

        <!--- If true, the combobox will behave like a menu. "value" is
              ignored, and items will not remain selected. Selecting an
              item generates an onselect event -->
        <attribute name="ismenu" value="false"/>

        <!--- Where the floatinglist should attach to its owner. Possible
              values: bottom, top, left, right.  In the event of a canvas
              out-of-bounds, the floating list will attach in a visible
              location.
              default: bottom -->
        <attribute name="listattach" value="bottom" type="string"/>    

        <!--- Event sent when an item is selected. Sends selected item. -->
        <attribute name="onselected" value="null"/>

        <!--- Event sent when an item is selected. Sends selected item. -->
        <attribute name="onselect" value="null"/>

     
        <!--- This value must be set by subclasses of newcombobox.
              @keywords private -->
        <attribute name="_cbtext" value="null" />

        <!--- The floating list. There should be only one instance shared by all
              comboboxes.
              @keywords private -->
        <attribute name="_cblist" value="null"/>

        <!--- If set, it represents the index of what should be selected in the
              floating list.
              @keywords private -->
        <attribute name="_selectedIndex" value="-1"/>

        <!--- Select delegate.
              @keywords private -->
        <attribute name="_selectdel" value="null"/>

        <!--- @keywords private -->
        <method name="init"> <![CDATA[
            super.init();
            if ( this.value == null && this.defaulttext != null ) {
                this._cbtext.setText(this.defaulttext);
            } else if (this.value == null && selectfirst) {
                // set first to be the initvalue
                _updateSelectionByIndex(0,false,true);
            } else {
                _updateSelectionByIndex(this._selectedIndex, true);
            }

            if ( this.statictext != null ) {
                this._cbtext.setText( this.statictext );
            }
            ]]>
        </method>

        <!--- @keywords private -->
        <method event="ondata"> <![CDATA[
            if (this.value == null && selectfirst) {
                // set first to be the initvalue
                _updateSelectionByIndex(0,false,true);
            }
            ]]>
        </method>

        <!--- Setter to set baseformitem to changed. Should be called by
              subclasses whenever a value is set. The first time this is called,
              the changed value is not set since it assumes subclasses are
              setting their initial value. 
              This also updates the selected value in the combobox to reflect
              the new value (in case it was changed).
              @param Boolean changed: true if changed, else false. -->
        <method name="setChanged" args="isChanged">
            super.setChanged( isChanged );
            // Be sure to update the selection, because value might have been
            // changed programmatically
            this._updateSelectionByIndex( this.getItemIndex( this['value'] ), true, false );
        </method>

        <!--- Updates the combobox text and 'selected' attribute. Called when an
              item is selected.
              @param Number index: index of data item.
              @param Boolean dontSetValue: used by setValue() not to set
              value. Avoids circular logic.
              @param Boolean isinitvalue: used by init() to set value as an init
              value.
              @keywords private -->
        <method name="_updateSelectionByIndex" 
                args="index,dontSetValue,isinitvalue"> <![CDATA[
            var dp = new LzDatapointer();

            var nodes = dp.xpathQuery(this.itemdatapath);
            if (! (nodes instanceof Array)) nodes = [nodes];
            dp.setPointer(nodes[index]);

            var t = dp.xpathQuery(this.textdatapath);
            // if t is null, use default text (if it exists)
            if( ( t == null || t.length == 0 ) && this.defaulttext['length'] > 0 )
               t = this.defaulttext;

            if ( this['_cbtext'] && this.statictext == null ) {
                this._cbtext.setText(t);
            }

            if ( dp['p'] == this.selected['p'] ) return;

            if (! (dontSetValue || this.ismenu)) {
                var v = dp.xpathQuery(this.valuedatapath);
                this.setValue(v,true, true);
            }
            this.setAttribute('text', t);

            if (this.ismenu) {
                // Clear the selection
                this._selectedIndex = -1;
                if (this._cblist['_selector']) {
                    this._cblist._selector.clearSelection();
                }
            }
            else {
                this.selected = dp;
            }

            if ( this['onselected'] ) this.onselected.sendEvent(dp);
            if ( this['onselect'] )   this.onselect.sendEvent(dp);
            ]]>
        </method>

        <!--- @keywords private -->
        <method name="_setupcblist" args="force"> <![CDATA[

            if ( ! global['__cblist'] ) global.__cblist = {};

            if (this.itemclassname == "") {
                this.itemclassname = "newcombobox_item";
            }

            var gcbl = global.__cblist;
            var icn = this.itemclassname;
            if ( ! gcbl[icn] ) {

                gcbl[icn] = new floatinglist(canvas,
                    { visible:false, attach: this.listattach, attachoffset: -2, 
                      multiselect: false});
                
                // add in a white view to reduce the visual affect of the
                // list items appearing as they are created
                var tmp = new global[icn](gcbl[icn], { name:'item' });
                new LzDatapath(tmp, { pooling: true });
            }

    
            if (this._cblist['attachtarget'] != this) {

                // Only attach _cblist target if it's different
                this._cblist = gcbl[icn];

                // Make sure we deselect if we're acting like a menu
                if (this.ismenu) {
                    this._cblist._selector.clearSelection();
                }

                var oldtarget = this._cblist.attachtarget;
                var w = ( this.listwidth != null ? this.listwidth : this.width );
                this._cblist.setWidth(w);
                this._cblist.setAttachTarget(this)
                this._cblist.setAttribute('shownitems', this.shownitems);
                this._cblist.item.setDatapath(this.itemdatapath);
                
                // if datapath is the same, need to set correct item widths
                // because datapath isn't rerun.
                if (oldtarget['itemdatapath'] == this.itemdatapath) {
                
                    // need to rerun data if the value or text datapaths
                    // are different, or we're forcing refresh
                    var dataChanged = (force) ? force : 
                        (oldtarget['valuedatapath'] != this.valuedatapath ) ||
                        (oldtarget['textdatapath'] != this.textdatapath);
                    if (this._cblist.item['clones']) {
                        var nodes = this._cblist.item.clones;
                        if ( ! (nodes instanceof Array) ) nodes = [ nodes ];
                        for (var i=0; i < nodes.length; i++) {
                            if (dataChanged) nodes[i].handleData(); 
                            else nodes[i].setWidth(w-1);
                        }
                    } else {

                        if (dataChanged) this._cblist.item.handleData();
                        else this._cblist.item.setWidth(w-1);
                    }

                }
            }

            this._cblist.setAttribute('attach', this.listattach);
            if (this._selectdel == null) {
                this._selectdel = new LzDelegate( this, "_flistselect" );
            }
            this._selectdel.register(this._cblist, 'onselect');

            if (! this.ismenu) {

                // Set the item for _cblist
                var item = _getItemAt(this._selectedIndex);
                this._cblist.select(item);
            }

            ]]>
        </method>

        <!--- Toggles the open/close state of the popup list. -->
        <method name="toggle">
            this.setOpen(!this.isopen)
        </method>

        <!--- Sets the open/close state of the popup list.
              @param Boolean open: true to open the list, else false to close.
              -->
        <method name="setOpen" args="open" ><![CDATA[
            if (!this._initcomplete) {
                this.isopen = open;
                return;
            }
            if (open) { // open combox
                if (this.isopen) return; // tends to get called more than once

                LzModeManager.makeModal( this );

                this._setupcblist();

                this._cblist.bringToFront();
                this._cblist.setVisible(true);

                LzFocus.setFocus( this._cblist, false );

                this.isopen = true;
                if (this['onisopen']) this.onisopen.sendEvent(true);
            } else { // close combox
                if (!this.isopen) return;
                this._selectdel.unregisterAll();
                LzModeManager.release( this );
                if (!this['isopen']) return;
                this._cblist.setVisible(false);
                this.isopen = false;
                if (this['onisopen']) this.onisopen.sendEvent(false);
                if ( LzFocus.getFocus() == this._cblist ) {
                    if ( this.focusable ) {
                        LzFocus.setFocus( this, false );
                    } 
                }
            }
            ]]>
        </method>

        <!--- @keywords private -->
        <method name="passModeEvent" args="eventStr,view" > <![CDATA[
            // Once a view has been made modal, this method
            // gets called ONLY when a user clicks on a view 'outside'
            // the contents of this view, or clicks on a inputtext view anywhere
            // on the screen even for a subview within this view.
            if ( eventStr == "onmousedown"  ){
                // first, we only care about the mousedown event.
                // if the user has pressed the mouse down on a textfield
                // within the component, then we will not know this unless
                // we test it to see if it is a subview of this component.

                if ( view != null ) { // view is a clickable view
                    // view is not LITERALLY part of the class hierarchy but
                    // it maybe part of the floatingview of this component, and if so
                    // then treat it as if it were a child of the class.

                   if ( !view.childOf(this._cblist) ) {
                        // view is outside of combobox so close the combbobox
                        this.setOpen(false);

                   } else {
                        // view is a child of _cblist, so don't do anything.
                   }

                } else {
                    this.setOpen(false);
                }
            }
            // if we're inside a modal dialog, need to propagate event manually
            // since floating list is a child of the canvas
            if (view && view.childOf(this._cblist)) {
                if (view[ eventStr ]) {
                    view[ eventStr ].sendEvent( view );
                }
                return false;
            }
            // since a combox is not strictly modal, always return
            // true to pass the event to the object (oustide combobox)
            // that was clicked on
            return true;
            ]]> 
        </method>

        <!--- This method listens for the onselect event from the floating list
              and then resends the onselect event to itself so that developers
              can easily reference that without knowing the internals of
              combobox.
              @keywords private -->
        <method name="_flistselect" args="item" > <![CDATA[

            // Clear selection and return if there is no item selected.
            if (item == null ) {
                this._cblist._selector.clearSelection();
                return;
            }

            if ( item.isinited ) {
                this.setValue(item.value);
                if ( item && this.statictext == null ) this._cbtext.setText(item.text);
            }

            this.setOpen(false);
            ]]>
        </method>

        <!--- Find a particular item by its index. This routine only works when the
              _cblist is attached and data mapped.
              @param Number index: the index for the item to get.
              @return Object: the item found, or null, if not.
              @keywords private -->
        <method name="_getItemAt" args="index"> <![CDATA[
            var item = null;
            if (this._cblist._selector instanceof datalistselector) {
                this._cblist._selector._ensureItemInViewByIndex( index );
            }
            var svs = this._cblist._selector.immediateparent.subviews;
            if (svs) {
                var sv = svs[0];
                if (sv) {
                    var cl = sv.cloneManager;
                    if (cl['clones']) {
                        var pos = cl.clones[0].datapath.xpathQuery( 'position()' ) - 1;
                        item = cl.clones[ index - pos ];
                    } else {
                        item = sv;
                    }
                }
            }
            return item;
            ]]>
        </method>

        <!--- Select an item by value.
              @param Object value: the value of the item to select. -->
        <method name="selectItem" args="value"> <![CDATA[
            var i = this.getItemIndex(value);
            if (i != -1) _updateSelectionByIndex(i);
            ]]>
        </method>

        <!--- Get item's index by value. Note: If you have a stray character in
              dataset, this will break.  CDATA is included in nodes.length.
              @param Object value: the value of the item to select. -->
        <method name="getItemIndex" args="value"> <![CDATA[
            var dp = new LzDatapointer();
            var nodes = dp.xpathQuery(this.itemdatapath);
            if (! (nodes instanceof Array)) nodes = [nodes];
            dp.setPointer(nodes[0]);
            for (var i=0; i < nodes.length; i++) {
                var test_value = dp.xpathQuery(this.valuedatapath);
                if (test_value == value) return i;
                dp.selectNext();
            }
            return -1;
            ]]>
        </method>

        <!--- Select an item by index.
              @param Number index: the index of the item to select. -->
        <method name="selectItemAt" args="index" >
            _updateSelectionByIndex(index);
            this._setupcblist();
        </method>

        <!--- Set value of combobox.
              @param String|Number value: value to set.
              @param Boolean isinitvalue: true if value is an init value. -->
        <method name="setValue" args="value,isinitvalue, ignoreselection"><![CDATA[

            if (this['value'] == value) return;
            var i = this.getItemIndex(value);
            this._selectedIndex = i;

            if (! this.ismenu) { // Ignore value if we're a menu
                super.setValue(value,isinitvalue);
            }

            if ( i != -1 && !ignoreselection) {
                this._updateSelectionByIndex(i,true);
            } 
            ]]>
        </method>

        <!--- Override getValue because we don't want to return this.text
              if this.value is null (this.text may be the defaulttext) -->
        <method name="getValue">
            return ( this.value == null ? '' : this.value );
        </method>        

        <!--- Arrow down and up, and spacebar all popup floatinglist.
              @keywords private -->
        <method event="onkeydown" args="key" name="_dokeydown"><![CDATA[
            // 38: up-arrow, 40: down-arrow, 32: space, 13: return, 27: escape
            if ( (key==38) || (key==40) || (key==32) ) {
                if ( ! this.isopen ) this.setOpen(true);
            }
            ]]>
        </method>


        <!-- ============================================================ -->
        <!-- focus kludge for combobox                                    -->
        <!-- ============================================================ -->

        <!--- The equivalent for onfocus for combobox. -->
        <attribute name="oncombofocus" value="null" />
        <!--- The equivalent for onblur for combobox. -->
        <attribute name="oncomboblur"  value="null" />
        <!--- @keywords private -->
        <method event="onfocus">
            if (this.oncombofocus) {
                // LzFocus.lastfocus is the blurred view
                if ( LzFocus.lastfocus != this._cblist || 
                     this._cblist.attachtarget != this ) {
                    this.oncombofocus.sendEvent(LzFocus.lastfocus);
                }
            }
        </method>
        <!--- @keywords private -->
        <method event="onblur" args="focusview">
            if (this.oncomboblur) {
                if (focusview != this._cblist) {
                    this.oncomboblur.sendEvent(focusview);
                }
            }
        </method>

    </class>

</library>
