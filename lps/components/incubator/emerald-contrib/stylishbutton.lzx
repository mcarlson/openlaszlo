<library>

<include href="base/basebutton.lzx" />
    
    <resource name="stylishbutton_left_rsc">
        <frame src="resources/button/small/sm_btn_up_lft.png" />
        <frame src="resources/button/small/sm_btn_mo_lft.png" />
        <frame src="resources/button/small/sm_btn_dn_lft.png" />
        <frame src="resources/button/small/sm_btn_dsbl_lft.swf" />
    </resource>

    <resource name="stylishbutton_right_rsc" >
        <frame src="resources/button/small/sm_btn_up_rt.png" />
        <frame src="resources/button/small/sm_btn_mo_rt.png" />
        <frame src="resources/button/small/sm_btn_dn_rt.png" />
        <frame src="resources/button/small/sm_btn_dsbl_rt.swf" />
    </resource>
    
    <resource name="stylishbutton_middle_rsc">
        <frame src="resources/button/small/sm_btn_up_mid.swf" />
        <frame src="resources/button/small/sm_btn_mo_mid.swf" />
        <frame src="resources/button/small/sm_btn_dn_mid.swf" />
        <frame src="resources/button/small/sm_btn_dsbl_mid.swf" />
    </resource>
    
<class name="stylishbutton" extends="basebutton"
    focusable="true"
    doesenter="true" 
    resourceviewcount="3"    
    pixellock="true"       
    >
        <!--- Control the look of the button. These attributes can and should
        be controlled with css. 
        --> 
        <attribute name="tint" value="0xD9DCF5" />
        <attribute name="font" value="futura" />
        <attribute name="fontsize" value="11" /> 
        <attribute name="fontcolor" value="0x373B56" />         

        <!--- text to display in the button (can leave empty) -->
        <attribute name="text"      value=""  />
        <!--- y position of text, for fine tuning -->
        <attribute name="texty"       value="0"  />

        <!--- icon resource name prefix -->
        <attribute name="iconname"       value=""  type="string" />
        <!--- y position of icon, for fine tuning.
            if not specified, center the icon vertically. -->
        <attribute name="icony"       value="0"  />

        <!-- whether to show left resource view, to make a visual edge -->
        <attribute name="showleftedge"  value="true" />
        
        <!-- whether to show right resource view, to make a visual edge -->
        <attribute name="showrightedge"  value="true"  />
        
        <!--- whether to show highlight on left side of button --> 
        <attribute name="showrightborder" value="false" type="boolean" />

        <!-- the resource name for the middle view --> 
        <attribute name="middleresource" value="stylishbutton_middle_rsc" type="string" />
        
        <!--- whether to show shadow on right side of button -->         
        <attribute name="showleftborder" value="false" type="boolean" />
        
        <view name="middle" stretches="width" />
        
        <method name="updatePositions">
        
            if (this["txt"]) txt.setText(this.text); 
        
            var lw = (this["left"] ? left.width : 0) + (showleftborder ? 1 : 0); 
            var rw = (this["right"] ? right.width : 0) + (showrightborder ? 1 : 0);
            var iw = (this["icon"] ? icon.width : 0);
            var tw = (this["txt"] ? txt.width : 0); 
            
            var curX = 0;
            var spacing = 0; 
            var needsWidth = lw + rw + iw + tw; 
            var extraWidth = Math.max(0, Math.round( (width - needsWidth) / 2)); 
            
            if (showleftborder) {
                leftborder.setX(curX); 
                curX += 1; 
            }
            
            // show the left resource
            if (this["left"]) {
                left.setX(curX);
                curX += left.width;
            } 
                        
            // position the middle view.
            // it goes behind the icon and text
            middle.setX(curX);
            
            curX += extraWidth; 

            // position the icon
            if (this["icon"]) {
                icon.setX(curX); 
                curX += icon.width;
                // Center icon vertically unless icony has been set explicitly
                icon.setY( (icony != 0) ? icony : Math.round(height-icon.height )/2);
            }
            
            if (this["txt"]) {
                // position the text
                txt.setX(curX);
                txt.setText(this.text); 
                // Center text vertically unless texty was set explicitly
                txt.setY( (texty != 0) ? texty : Math.round(height-txt.height )/2);
                curX += txt.width;
                curX += spacing;
            }
            
            curX += extraWidth; 
            middle.setWidth(curX - middle.x);           
            
            // position the right thingy
            if (this["right"]) {
                right.setX(curX);
            } 
                        
            if (showrightborder) {
                rightborder.setX(curX - 1);
            }
        </method>
        
        <method name="init"><![CDATA[
            super.init();
            
            if (showleftedge) {
                new LzView(this, {name: "left", resource: "stylishbutton_left_rsc", pixellock: true}); 
                this.setTint(this.left, this.tint);
                this.left.sendToBack();
            } 
            
            if (showrightedge) {
                new LzView(this, {name: "right", resource: "stylishbutton_right_rsc", pixellock: true}); 
                this.setTint(this.right, this.tint);
                this.right.sendToBack(); 
            } 
            
            if (iconname) { 
                new LzView(this, {name: "icon", resource: iconname + "_icon_rsc", pixellock: true});
            }                        

            // We always have a middle. 
            middle.setResource(middleresource);
                        
            if (showleftborder) {
                new LzView(this,    {name: "leftborder", bgcolor: white, 
                                     width: 1, y : 0, height: this.height, 
                                    pixellock: true});                 
            }

            if (showrightborder) {
                new LzView(this,    {name: "rightborder", bgcolor: black, 
                                    width: 1, y : 0, height: this.height,
                                    pixellock: true})
            }


            if (text != "") {
                new LzText(this, {name: "txt", text: text, resize: true});                 
                txt.setText(text); 
                txt.setAttribute("font", font); 
                txt.setAttribute("fontsize", fontsize); 
                txt.setAttribute('fgcolor', fontcolor); // TODO: enabled/disabled text color
            }

            this.setTint(this.middle, this.tint); 
            
            this.updatePositions(); 
        ]]> 
        </method>
        
        <method event="onwidth">
            if (isinited) 
                updatePositions(); 
        </method>

</class>
</library>