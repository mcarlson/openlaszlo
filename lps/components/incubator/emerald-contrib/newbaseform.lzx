<library>
    <include href="base/baseformitem.lzx" />
    <include href="base/baseform.lzx" />

    <!--- New baseformitem that supports listening for a changed value. A value
          is changed if the current value was modified at any point. --> 
    <class name="newbaseformitem" extends="baseformitem">

        <!--- Boolean to determine whether the baseformitem was changed. Default
              is false. -->
        <attribute name="changed" value="false" 
                   setter="this.setChanged(changed)" />

        <!--- The value of the newbaseformitem. Default is null. -->
        <attribute name="value" value="null" />

        <!--- Event sent when baseformitem is changed. Only sent once when true
              or once when false. -->
        <attribute name="onchanged" value="null" />

        <!--- Event sent whenever checkbox value changes. -->
        <attribute name="onvalue" value="null"/>

        <!-- Rollback value for the baseformitem. -->
        <attribute name="rollbackvalue" value="null" />

        <!-- If true, the component will not inform its parent form
             that it has changed. Useful in conjunction with submit=false -->
        <attribute name="ignoreform" value="false" />

        <!--- Setter to set baseformitem to changed. Should be called by
              subclasses whenever a value is set. The first time this is called,
              the changed value is not set since it assumes subclasses are
              setting their initial value. 
              @param Boolean changed: true if changed, else false. -->
        <method name="setChanged" args="changed,skipform"><![CDATA[


            // Rollbackvalue will be value if init is not completed.
            if (! this._initcomplete) {
                this.changed = false;
                return;
            }


            var oldchanged = this.changed;
            this.changed = changed;

            // Only send changed event if it wasn't changed before.
            if (this.changed != oldchanged) {
                if (this.onchanged) this.onchanged.sendEvent(this.changed);
            }

            // Only set parent's changed property if parent hasn't changed
            if (! skipform && this.changed && ! ignoreform) { 
                // It's possible that baseformitem is not in a form.
                if (this['_parentform'] && 
                    this._parentform['changed'] != undefined && 
                    ! this._parentform.changed) {
                    this._parentform.setChanged(changed);
                }
            }
            ]]>
        </method>

        <!--- Rollback value and set changed to false. -->
        <method name="rollback">
            if (this.rollbackvalue != this['value']) {
                this.setAttribute('value', this.rollbackvalue);
            }
            this.setAttribute('changed', false);
        </method>

        <!--- Commit value and set changed to false. -->
        <method name="commit">
            this.rollbackvalue = this.value;
            this.setAttribute('changed', false);
        </method>

        <!--- Set the value for the newbaseformitem.
              @param Any value: the value of the newbaseformitem. 
              @param Boolean isinitvalue: if true, the rollbackvalue is set. -->
        <method name="setValue" args="value,isinitvalue">
            this.value = value;
            if (isinitvalue || ! this._initcomplete) {
                this.rollbackvalue = value
            }
            this.setChanged(!isinitvalue);
            if (this['onvalue']) this.onvalue.sendEvent(value);
        </method>

        <!--- This implementation sets the applied data as an initalizater
              value. This is run by a datapath to get the data from a data node.
              @param Any d: the data value to set in this object. -->
        <method name="applyData" args="d">
            this.setValue(d,true);
        </method>

        <!--- This implementation returns the value. This is run by a datapath
              to set the value to a data node. -->
        <method name="updateData">
            return this.value;
        </method>

        <!--- This returns the value of the component in XML format:
                @BEGIN_CODE submit_name="value" @END_CODE
                @param Boolean convertBool: if true, boolean values
                will be converted to 1 and 0 -->
        <method name="toXML" args="convert">
            var attrName = (this.submitname == "") ? 
                                this.submitname : this.name;

            var val = this.value;
            if (convert) {
                // Force javascript to convert booleans to numbers
                if (typeof(val) == 'boolean') val = val - 0;
            }
            return (attrName + "=\"" + LzBrowser.xmlEscape(val) + '"'); 
        </method>
    </class>


    <!--- New baseform that supports listening for a changed value. A value is
          changed if the value of any of its baseformitems were modified at any
          point. -->
    <class name="newbaseform" extends="baseform">

        <!--- Boolean to determine whether the baseformitem was changed. Default
              is false. -->
        <attribute name="changed" value="false" 
                   setter="this.setChanged(changed)" />

        <!--- Event sent when baseformitem is changed. Only sent once when true
              or once when false. -->
        <attribute name="onchanged" value="null" />

        <!--- Setter to to set baseform's status to changed. Baseformitems
              should set baseform's changed to true when its values change and
              set baseform's changed to false when its values are rollback or
              committed.
              @param Boolean changed: true if changed, else false.
              @param Boolean skipformdata: if true, set formdata changed
              values, else don't. -->

        <method name="setChanged" args="changed,skipformdata"><![CDATA[
            // This is being set with default value, which should be false.
            if (! isinited) {
                this.changed = false;
                return;
            }

            var oldchanged = this.changed;
            this.changed = changed;

            // set formdata all to unchanged if changed is set to false.
            if (! changed && ! skipformdata && this['formdata'] ) {
                var fd = this.formdata;
                for (var k in fd) {
                    // Make sure the formdata is a newbaseformitem and not a
                    // baseformitem
                    if (fd[k]['rollbackvalue']) fd[k].setChanged(false, true);
                }
            }

            // Only send changed event if it wasn't changed before.
            if (this.changed != oldchanged) {
                if (this.onchanged) this.onchanged.sendEvent(this.changed);
            }
            ]]>
        </method>


        <!--- Rollback baseform's baseformitem values and sets baseform and
              baseformitems to changed=false. -->
        <method name="rollback">
            if (! this.changed) return;
            if (this['formdata']) {
                var fd = this.formdata;
                for (var k in fd) {
                    // Make sure the formdata is a newbaseformitem and not a
                    // baseformitem
                    if (fd[k]['rollback']) fd[k].rollback();
                }
            }
            this.setChanged(false, true);
        </method>


        <!--- Commits baseform's baseformitem values and sets baseform and
              baseformitems to changed=false. -->
        <method name="commit">
            if (! this.changed) return;
            if (this['formdata']) {
                var fd = this.formdata;
                for (var k in fd) {
                    // Make sure the formdata is a newbaseformitem and not a
                    // baseformitem
                    if (fd[k]['commit']) fd[k].commit();
                }
            }
            this.setChanged(false, true);
        </method>
    </class>

</library>
