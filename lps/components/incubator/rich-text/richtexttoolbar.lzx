<library>    
    
    <include href="../emerald-contrib/textstyle.lzx"/>
    
    <resource name="bold_icon_rsc" src="resources/bold.png"/>
    <resource name="italic_icon_rsc" src="resources/italic.png"/>
    <resource name="underline_icon_rsc" src="resources/underline.png"/>
    
    <resource name="bullet_icon_rsc" src="resources/bullet_list.png"/>
    <resource name="indent_icon_rsc" src="resources/indent.png"/>
    <resource name="outdent_icon_rsc" src="resources/outdent.png"/>
    
    <resource name="lft_align_icon_rsc" src="resources/lft_align.png"/>
    <resource name="center_icon_rsc" src="resources/center.png"/>
    <resource name="rt_align_icon_rsc" src="resources/rt_align.png"/>
    
    <resource name="link_icon_rsc" src="resources/link.png" />
    <resource name="resetfmt_icon_rsc" src="resources/reset.png" />

    <resource name="rte_btn">
        <frame src="resources/rte_btn_up.swf"/>
        <frame src="resources/rte_btn_mo.swf"/>
        <frame src="resources/rte_btn_dn.swf"/>
    </resource>
    
    <!-- used by lzcombobox -->
    <resource name="downarrow_icon_rsc">
        <frame src="../emerald-contrib/resources/combobox/combobox_arrow_up+dn.swf" />
        <frame src="../emerald-contrib/resources/combobox/combobox_arrow_mo.swf" />
        <frame src="../emerald-contrib/resources/combobox/combobox_arrow_up+dn.swf" />
        <frame src="../emerald-contrib/resources/combobox/combobox_arrow_dsbl.swf" />
    </resource>
    
    <!--- Format button style for rich text editing (see richtexttoolbar.lzx) -->
    <textstyle name="formatbtn_style"
        basecolor="0xD6D9F6"
        textcolor="0x27335C" texthilitecolor="0x27335C" 
        textselectedcolor="0x27335C" textdisabledcolor="0x797B87"
        font="Arial" fontsize="10">
        <attribute name="flag0" value="0xD6D9F6"/>
        <attribute name="flag1" value="0xEAE4B7"/>
    </textstyle>
    
    <textstyle name="sidebarbutton_style" initstage="early"
        basecolor="0xD6D9F6"
        textcolor="0x27335C" texthilitecolor="0x27335C" 
        textselectedcolor="0x27335C" textdisabledcolor="0x797B87"
        font="Arial" fontsize="10" />
    
    <!--- TODO [2005-09-30 pkang]: custombutton_style and sidebarbutton_style
        should be merged into textstyle. We don't want two initstage early
        nodes. -->
    <textstyle name="custombutton_style" initstage="early"
        basecolor="0xD6D9F6"
        textcolor="0x27335C" texthilitecolor="0x27335C" 
        textselectedcolor="0x27335C" textdisabledcolor="0x808080"
        font="Arial" fontsize="10" />
    
    <!-- The style for items in a combobox. Customer css should override. --> 
    <textstyle name="comboboxitem_style"  
        font="Verdana" fontsize="10" textcolor="0x1a1a1a" 
        hilitecolor="0xE4DFB7" 
        selectedcolor="0xE9D990" />
    
    <!--- 
        richtexttoolbar
        A class that acts as the parent controller for the individual format tools
        [gregor 11.15.05]
    -->
    <class name="richtexttoolbar" width="${parent.width}" onmouseover="this.onmouseover" y="4">

        <!--- The reference to the richtexteditor associated with this toolbar. -->
        <attribute name="editor" value="null" required="true" />
        
        <!--- Fonts can have different names so we provide different options to
              provide that mapping here.
              @keywords private -->
        <attribute name="_fontmap" value="$once{
            { 'Times New Roman' : 'Times', 
              'Courier New'     : 'Courier' } }"/>

        <!--- Whether value changes in components should be passed through to the editor
            @keywords private--> 
        <attribute name="_passthruchanges" value="true" />
        
        <!--- @keywords private
            array of toolbar's registered tools - each tool will register so 
            that meta methods can be called on them -->
        <attribute name="_atools" value="$once{new Array()}" />
        
        <!--- Whether to print a lot of debug information 
            @keywords private-->
        <attribute name="_debugformat" value="true" /> 
        
        <simplelayout axis="x" spacing="5" />

        <view name="padding" width="2" />
        
        <!--- @keywords private -->
        <method name="init">  
            super.init();
            // Make the gui components match the editor's currentformat
            // TODO: set up keyboard commands
        </method>
        
        <!--- @keywords private -->
        <method name="construct" args="parent, args">
            super.construct(parent,args);
        </method>
        
        <!--- Handles the updating if the tool's state based on the format passed in.
            _passthruchanges flag avoids an infinite loop
            @param LzTextFormat fmt: TextFormat object
            -->
        <method event="oncurrentformat" reference="this.editor" args="fmt">
            this._passthruchanges = false; 
            this.matchformat(fmt); 
            this._passthruchanges = true;             
        </method>

        <!--- Update the GUI to match the format passed in 
            @param LzTextFormat spec: TextFormat object-->
        <method name="matchformat" args="spec">
            
            var cfmt = spec; 
            var font; 
            if (cfmt.font != null) {
                font = this._fontmap[cfmt.font];
                if (font == null) font = cfmt.font;
            }
            
            // assign the mapped value back to the object so the loop below has the correct data
            if (font) {
                cfmt.font =  font ; 
            } else {
                cfmt.font = "- -"; 
            }
            
            // 'broadcast' out the setState call with the format value to the registered tools
            for(i=0;i <![CDATA[<]]> _atools.length;i++){
                _atools[i].ref.setState(cfmt[_atools[i].fmt]);
            }
            
        </method>
        
        <!--- Update the GUI to match the format specified in the editor's currentformat -->
        <method name="matcheditorformat">
            this._passthruchanges = false; 
            var cfmt = this.editor.currentformat;
            this.matchformat(cfmt); 
            this._passthruchanges = true; 
        </method> 

        <!--- Reset the state of the richtexttoolbar's tools. -->
        <method name="reset">
            // 'broadcast' out the reset method call to all registered tools
            for(obj in _atools){
                obj.reset();
            }
        </method>
        
        <!--- add tool into the richtexttoolbar's tools array . -->
        <method name="registerTool" args="myref,myfmt">
            _atools.push({ref:myref,fmt:myfmt});
        </method>
    </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                          -->
