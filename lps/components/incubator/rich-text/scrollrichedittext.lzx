<library>
    <include href="baserichedittext.lzx" />

    <!--- 
        scrollrichedittext
        A class which wraps up baserichedittext and ui for scrolling the textarea. 
        [gregor 10.26.05]
    -->
    <class name="scrollrichedittext" extends="baserichedittext" 
           multiline="true">

        <!--- The default width of the text area border. -->
        <attribute name="border" value="0" />

        <!--- Name of class to instantiate for vertical scroll bar.
              @keywords public -->
        <attribute name="vscrollbarclassname" type="string" value="vscrollbar"/>
        
        <!--- Width to give for scrollbar
              @keywords private -->
        <attribute name="vscrollwidth" value="${(_vs &amp;&amp; _vs.visible) ? _vs.width : 0}"/>
        
        <!--- Our vertical scrollbar
              @keywords private -->
        <attribute name="_vs" value="null"/>
        
        <!--- @keywords private -->
        <method name="ensurevscrollbar">
            if (this._vs == null) {
                var classname = this.vscrollbarclassname;
                if (classname == "") {
                    classname = "vscrollbar";
                }
                if ($debug) {
                    if (typeof(global[classname]) == "undefined") {
                        Debug.write("scrollbarclassname undefined", this);
                    }
                }
                var vsinit = function () {
                    var p = this.parent;
                    
                    // _vs.x="${parent.width - this.width}" 
                    this.applyConstraint("x", 
                        function() { this.setAttribute("x", this.parent.width - this.width); },
                        [p, "width", this, "width"]);
                    
                    // _vs.stepsize="${parent.inp.lineheight}" 
                    this.applyConstraint("stepsize", 
                        function() { this.setAttribute("stepsize", parent.inp.lineheight); }, 
                        [p.inp, "lineheight"]);
                    
                    // _vs.scrollmax="${parent.inp.maxheight}" />
                    this.applyConstraint("scrollmax", 
                        function() { this.setAttribute("scrollmax", parent.inp.maxheight); }, 
                        [p.inp, "maxheight"]);

                    #pragma "methodName=init"
                    super.init();
                }
                
                this._vs = new global[classname](this, 
                                                 { axis: "y",
                                                   scrollattr: "pos",
                                                   scrolltarget: this.inp,
                                                   init: vsinit });
            }
        </method>
        
        <method name="init">
            super.init();
            this.ensurevscrollbar();
        </method>

        <_richinternalinputtext name="inp" x="${parent.border}" 
            y="${parent.border}" 
            height="${parent.height-parent.border*2}"
            width="${parent.width - parent.vscrollwidth - parent.border*2 }">
            <attribute name="lineheight"
                       value="${this.getTextHeight()/this.maxscroll}"/>
            <attribute name="maxheight" 
                       value="${this.height + this.lineheight * (this.maxscroll - 1)}"/>
            <attribute name="onpos" value="null"/>
            <attribute name="pos" value="0" setter="this.setPos(pos)"/>

            <!--- Set the scroll position and update the scrollbar to match 
                @param Number p: position-->
            <method name="setPos" args="p">
                
                if (this.isinited) {
                    this.setScroll(1 - (p / this.lineheight));
                    this.pos = p;
                    if (this.onpos) this.onpos.sendEvent(p);
                }
            </method>
            
            <method event="onscroll">
                this.setPos(-this.lineheight * (this.scroll - 1), true);
            </method>
        </_richinternalinputtext>
        
        <!--- Overrides a parent method which calculates y position for text
            in a way that doesn't make sense for this class. We just trap the 
            call and do nothing. This field is positioned in y by the constraint
            y=${parent.border}
            Note: although this method is a no-op, it still has to be declared,
            so the parent class's method does not get called on instances of 
            this class. 
        -->
        <method name="_placeTextY">
            // Do nothing. 
        </method>

   </class>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005-2006 Laszlo Systems, Inc. All Rights Reserved.               *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
