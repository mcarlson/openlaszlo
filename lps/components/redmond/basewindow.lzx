<library>

<include href="utils/states/dragstate.lzx"/>
<include href="utils/states/resizestatemin.lzx"/>

<!--- basewindow class
     defines methods, attributes that are  used by window sub-classes
-->
<class name="basewindow" onmousedown="this.setAttribute('hasfocus', true)">
        <!--- A string that is displayed in the title bar of the window. -->
        <attribute name="title" value="" type="string"/>
        <!--- If true, the title bar includes a close box. -->
        <attribute name="closeable" value="false"/>
        <attribute name="resizable" value="false"/>
        <attribute name="appearance" value="redmond" type="string" />
        <attribute name="minwidth" value="150"/>
        <attribute name="minheight" value="100"/>
        <attribute name="haswindowfocus" value="false"/>

        <dragstate name="windowDrag"/>
        <resizestatemin name="windowResize" onapply="parent.setAttribute('haswindowfocus', true)"/>
        <method event="oninit">
            if (this.visible) {
                 this.setAttribute('haswindowfocus', true);
            }
        </method>
        <method name="startDrag">
            this.setAttribute('haswindowfocus', true);
            this.windowDrag.apply();
            this.isDragging = true;
        </method>
        <method name="stopDrag">
            this.windowDrag.remove();
            this.isDragging = false;
        </method>

        <method name="setVisible" args="isVisible">
            super.setVisible(isVisible);
            if (isVisible) {
                this.setAttribute('haswindowfocus', true);
            } else {
                if (this.haswindowfocus) {
                     this.setAttribute('haswindowfocus', false);
                }
            }
        </method>
        <method event="onhaswindowfocus" >
        <![CDATA[
            if (this.haswindowfocus) {
                this.bringToFront();

                // loop through siblings and disable active window
                var len = immediateparent.subviews.length;
                for (var i=0; i < len; i++) {
                    s = parent.subviews[i];
                    if (typeof(s['haswindowfocus']) != "undefined" && s!=this) {
                       if (s.haswindowfocus) s.setAttribute('haswindowfocus', false);
                    }
                }
            } else {
                // make sure there is a frontmost window
                var siblingfocus = false;
                var len = immediateparent.subviews.length;
                for (var i=0; i < len; i++) {
                    s = parent.subviews[i];
                    if (s.visible && typeof(s['haswindowfocus']) != "undefined"
                            && s.haswindowfocus) {
                       siblingfocus=true;
                    }
                }
                if (!siblingfocus) {
                    for (var i=0; i < len; i++) {
                        s = parent.subviews[i];
                        if (s.visible
                            && typeof(s['haswindowfocus']) != "undefined"
                            && s!=this) {
                           s.setAttribute('haswindowfocus', true);
                        }
                    }
                }
            }
        ]]>
        </method>

        <method name="closeWindow">
            this.setVisible(false);
        </method>

        <method name="openWindow">
            this.setVisible( true );
        </method>

        <method name="toString">
            var idstring = "";
            var namestring = "";
            if ( this.id != null) idstring = "  id="+this.id;
            if ( this.name != null) namestring = " named \""+this.name+"\"";
            return "window" + namestring + idstring;
        </method>

        <method name="setTitle" args="t">
            setAttribute('title', t);
        </method>

        <method name="setHeight" args="h">
           var nh = Math.round(h);
           super.setHeight(nh);
        </method>

        <method name="setWidth" args="w">
           var nw = Math.round(w);
           super.setWidth(nw);
        </method>

    </class>


</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
