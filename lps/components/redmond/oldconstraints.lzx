<library>
    <!--
    A helper library used by some of the redmond components, which are
    written in script rather than LZX tags.
    This is not recommneded as sample code.
    -->

<script>
<![CDATA[
// NOTE: pragma is not a supported feature
    #pragma 'warnUndefinedReferences=false' 
//-----------------------------------------------------------------------------
// constrainToParent is a shortcut to constrain a view's property to the same
// property of its parent.
//
// @param prop: the named property to constrain to the parent
//-----------------------------------------------------------------------------
LzView.prototype.constrainToParent = function ( prop ){
    new  global.LzViewPropConstraint( this , { refview : this.immediateparent, 
                                              prop : prop } )
}

//----------------------------------------------------------------------------
// releaseConstraint removes the constraints on a view property
//
// @param prop: a string specifying the property whose constraints to release 
//              public properties are: x, y, width, height, rotation, alpha
//-----------------------------------------------------------------------------
LzView.prototype.releaseConstraints = function(prop) {
    var c;
    while ( c = this.constraints[prop].pop() ){
        c.release();
    }
    //the last pop kills the array, so it must be recreated
    this.constraints[prop] = new Array; 
}
/******************************************************************************
 * LaszloControllers.as 
 * 
 * Copyright (c) 2001, 2002 Laszlo Systems, Inc. 
 * All Rights Reserved. 
 * 
 * This software is the proprietary information of Laszlo Systems, Inc. 
 * Use is subject to license terms. 
 *****************************************************************************/

//=============================================================================
// DEFINE OBJECT: LzPropController
// A prop controller controls a property for a view.
// 
// @keywords private
// @param view: A view above this one in the hierarchy.
// @param args: A hash of initialization arguments.
//=============================================================================
function LzPropController ( view , args ){

    //@param args.placement: A string specifying where to place the controller
    //for views with complex internal structure.
    var thisplacement = args.placement == null ? view.defaultplacement :
                                                 args.placement;

    if ( thisplacement != null && !args.ignoreplacement){
        this.view = view.determinePlacement( this , thisplacement , args);
    }else{
        //@field view: The view that this controller is attached to.
        this.view = view;
    }

    //@param args.prop: The property that this controller controls.
    //@field prop: The property that this controller controls.
    this.prop = args.prop;
}

//-----------------------------------------------------------------------------
// Creates a delegate which calls "update" for the controller on the given
// event
//
// @keywords protected
// @param eSender: The event sender.
// @param eName: The name of the event
// @return: This.updateEvent
//-----------------------------------------------------------------------------
LzPropController.prototype.setUpdateEvent = function ( eSender , eName ){
    if ( this.delegates == null ){
        //@field delegates: The array of delegates used by this constraint.
        this.delegates = new Array;
    }
    //@field updateEvent: The delegate used to call update for this constraint.
    this.updateEvent =  new global.LzDelegate(this, "update", eSender , eName) ;
    return this.updateEvent;
}

//-----------------------------------------------------------------------------
// Release control of the property back to the view.
// @keywords protected
//-----------------------------------------------------------------------------
LzPropController.prototype.release = function ( ){
    this.updateEvent.unregisterAll();
    //rely on garbage collector for deletion
    this.updateEvent = null;
}

LzPropController.prototype.toString = function ( ){
    return "LzController abstract class";
}


//=============================================================================
// DEFINE OBJECT: LzConstraint
// A constraint can use an arbitrary function to compute values for a view
// property. A newly made constraint checks to see whether the view it is 
// being attached to has a field named <i>controllers</i>. If it doesn't, it
// creates one. It then makes sure that there is an array attached to that
// object that has the same name as the property that the constraint controls.
// If it doesn't it creates that too, and pushes itself onto that list.
//
// @keywords private
// @param view: A view above this one in the hierarchy.
// @param args: A hash of initialization arguments.
//=============================================================================
function LzConstraint ( view , args , children){
    this.callInherited("constructor" , arguments.callee ,  view , args);
    //@param args.offset: A numeric value to add to the constraint before
    //applying it.
    //@field offset: The numeric value to add to the value applied to the
    //constrained property before application. Default is 0.
    this.offset = args.offset == null ? 0 : args.offset;

    //@param modifiers: An array of modifiers to be used to modify the value
    //generated by the constraint.
    if ( args.modifiers != null ){
        //@field modifiers: The array of modifiers used by this constraint.
        this.modifiers = args.modifiers;
        this.numModifiers = this.modifiers.length;
    }

    if ( args.viewpropoffset != null ){
        var vpmult = args.viewpropmultiplier == null ? -1 : 
                                                args.viewpropmultiplier ;

        this.addModifier( new global.LzPropertyModifier( this ,
                                { prop : args.viewpropoffset , 
                                  scale : vpmult } ) );
    }

    
    if (view.constraints == null){
        view.constraints = new Object;
    }
    if ( view.constraints[ args.prop ] == null ){
        view.constraints[ args.prop ] = new Array;
    }
    
    view.constraints[args.prop].push( this );
    this.update( null ); //usually called with event data
    this.createChildren( children );
}

Object.class.extends( LzPropController, LzConstraint );

//-----------------------------------------------------------------------------
// Adds the given modifer to the list of modifiers for the constraint. 
// Modifiers are called in the order that they are added.
//-----------------------------------------------------------------------------
LzConstraint.prototype.addModifier = function ( m ){
    if ( this.modifiers == null ){
        this.modifiers = new Array;
    }

    this.modifiers.push(m);
    //@field numModifiers: The number of modifiers used by this constraint.
    this.numModifiers = this.modifiers.length;
}

//-----------------------------------------------------------------------------
// Update the view property with the constraints value.
// @keywords protected
//-----------------------------------------------------------------------------
LzConstraint.prototype.update = function ( e ){
    //It's lame that this function can't really use the event data it gets
    //called with, but it seems like you want this function to be able to be 
    //called not from an event -- i.e. to force a constraint to update.
    
    //trace("UPDATE: LzConstraint");

    if (this.numModifiers > 0 ){
        //trace("UPDATE: this.numModifiers = " + this.numModifiers);
        var v = this.getValue() + this.offset;
        for (var i = 0; i < this.numModifiers ; i++ ){
            v = this.modifiers[i].modifyValue( v );
        }

        this.view.setAttribute( this.prop , v );

    }else{
        this.view.setAttribute( this.prop , this.getValue( ) + this.offset);
    }
}

//-----------------------------------------------------------------------------
// Release the constraint from the view.
// @keywords protected
//-----------------------------------------------------------------------------
LzConstraint.prototype.release = function ( ){
    this.callInherited( "release" , arguments.callee );
    for ( var i = this.view.constraints[ this.prop ].length -1 ; i >= 0 ; i-- ){
       if ( this.view.constraints[ this.prop ][ i ] == this ){
           this.view.constraints[ this.prop ].splice( i , 1 );
           break;
       }
    }
}

//-----------------------------------------------------------------------------
// Instantiate any hierarchical viewsystem elements that are children of this
// constraint. Currently, the only allowed children of a constraint are 
// modifiers.
// @keywords protected
//-----------------------------------------------------------------------------
LzConstraint.prototype.createChildren = function ( carr ){
    for (var i=0; i< carr.length ; i++ ){
        if ( carr[ i ].name == "constantmodifier" ){
            //TODO: Add a way to put in an expression that will be evaluated
            this.offset += carr[ i ].attrs.value;
        } else {
            this.addModifier( new global[ carr[ i ].name ]( this , carr[ i ].attrs ) );
        }
    }
    this.update();
}
         
//=============================================================================
// DEFINE OBJECT: LzMouseConstraint
// This is a constraint which can be used to constrain a view property to the
// the mouse.
// @keywords private
// @param view: A view above this one in the hierarchy.
// @param args: A hash of initialization arguments.
//=============================================================================
function LzMouseConstraint ( view , args , children ){
    // @param mouseProperty: Optional string specifying which mouse property
    // ("_xmouse" or "_ymouse") to use for values. If none is given, this is
    // set as a function of which view property is bound to the constraint
    // ("x" or "y")
    
    //@field mouseProp: The property of the mouse to retrieve (e.g. "x" or "y"
    //@param mouseprop: String specifying the property of the mouse ("x" or "y"
    //to use. Default is the property controlled by the constraint

    this.mouseProp = "_" + (args.mouseprop == null ? args.prop : 
                            args.mouseprop) + "mouse";
    //@field mouseContext: The context in which to execut the getMouse call;
    //set to the parent of the controlled view.
    this.mouseContext = view.immediateparent.__LZmovieClipRef;

    this.setUpdateEvent( global.LzIdle , "onidle" );
    this.callInherited("constructor" , arguments.callee ,  view , args, children);

}

Object.class.extends ( LzConstraint, LzMouseConstraint );

//-----------------------------------------------------------------------------
// Returns the value of the constraint.
// @keywords protected
//-----------------------------------------------------------------------------
LzMouseConstraint.prototype.getValue = function ( ){
    return this.mouseContext[this.mouseProp];
}


//=============================================================================
// DEFINE OBJECT: LzViewPropConstraint
// Thiis is the most common kind of constraint. It is used to constrain a
// property of one view to that of another.
// 
// @keywords private
// @param view: A view above this one in the hierarchy.
// @param args: A hash of initialization arguments.
//=============================================================================
function LzViewPropConstraint ( view , args , children ){
    //@field ref: The view from which to grab the value for the <i>refprop</i>
    //@param args.refview: The view to use as the ref view. See field 
    //<i>ref</i>
    this.ref = args.refview; 
    //@param args.reference: A string to be evaluated in the context of the
    //constructor which evaluates to a view to be used as the <i>ref</i> for
    //this view.
    if ( args.reference != null ){
        with (global){
            this.ref = eval( args.reference );
        }
    }
    //@field refprop: The property to get from the <i>ref</i> view to use
    //for the constraint
    //@param args.refprop: The property to get from the reference view. The
    //default is the same as the property for the constraint.
    this.refprop = args.refprop == null ? args.prop : args.refprop;
    //@field mult: The multiplier (scale) to apply to the value retrieved
    //from the reference view

    //@param args.scale: The scale for the constraint. The default value
    //is 1.

    //TODO: This supports both the old "multiplier" argument and the new
    //"scale" argument. The former should be removed at beta, when the
    //new componnent class definitions have been written.
    this.mult = args.scale == null ? (args.multiplier == null ? 1 :
                                      args.multiplier)
                                   : args.scale ;

    this.setUpdateEvent( this.ref ,  "on" + this.refprop );
    this.callInherited("constructor" , arguments.callee ,  view , args, children);
}

Object.class.extends ( LzConstraint, LzViewPropConstraint );

//-----------------------------------------------------------------------------
// Gets the current value of the constraint.
// @keywords private
//-----------------------------------------------------------------------------
LzViewPropConstraint.prototype.getValue = function ( ){
    return this.ref.getProp( this.refprop )*this.mult ;
}  
/******************************************************************************
 * LzCenterConstraint.as 
 * 
 * Copyright (c) 2001, 2002 Laszlo Systems, Inc. 
 * All Rights Reserved. 
 * 
 * This software is the proprietary information of Laszlo Systems, Inc. 
 * Use is subject to license terms. 
 *****************************************************************************/

//=============================================================================
// DEFINE OBJECT: LzCenterConstraint
// Constrains a view's center to the center of another view. If no reference
// view is specified, the view centers to its parent.
// 
// @keywords private
// @param view: A view above this one in the hierarchy.
// @param args: A hash of initialization arguments.
//=============================================================================
function LzCenterConstraint ( view , args ){
    //@field ref: The view on which to center.

    //@param args.refview: The view on which to center. See field 
    //<i>ref</i>

    this.ref = args.refview; 

    //@param args.reference: A string to be evaluated in the context of the
    //constructor which evaluates to a view to be centered to.
    if ( args.reference != null ){
        with (global){
            this.ref = eval( args.reference );
        }
    }


    if ( this.ref == null ){
        this.ref = view.parent;
    }

    //@field axis: The axis (x or y) on which to center the view

    //@param args.prop: The axis on which to center the view. Default is
    //"x"
    args.prop = args.prop == "y" ? "y" : "x";

    this.axis = args.prop;
    this.sizeAxis = this.axis == "y" ? "height" : "width";

    this.setUpdateEvent( this.ref ,  "on" + this.sizeAxis );
    this.updateEvent.register( view ,  "on" + this.sizeAxis );
    
    this.callInherited("constructor" , arguments.callee ,  view , args);


}

Object.class.extends ( LzConstraint, LzCenterConstraint);

//-----------------------------------------------------------------------------
// Gets the current value of the constraint.
// @keywords private
//-----------------------------------------------------------------------------
LzCenterConstraint.prototype.getValue = function ( ){
    return this.ref.getProp( this.sizeAxis ) * .5 - 
           ( this.view.getProp( this.sizeAxis )  * .5 );

}  

//=============================================================================
// DEFINE OBJECT: LzModifier
// This is an abstract class. LzModifiers must implement a modifyValue function
// which transforms an input and returns an output. Modifiers are requiredp
// because javascript doesn't support truly first class functions.
// @keywords private
//
//=============================================================================
/*
function LzModifier(){
}
*/

//=============================================================================
// DEFINE OBJECT: LzLowLimitModifier
// This is a simple modifier which limits the lower bound of a value. 
// @keywords private
//
// @param lowlim: The low limit for this modifier
//=============================================================================
function LzLowLimitModifier(lowlim){
    //trace("NEW LzLowLimitModifier");
    //@field low: The low limit for this modifier.
    this.low = lowlim;
}


//-----------------------------------------------------------------------------
// Returns minimum of the modifier's <i>low</i> field and the input value.
// @param x: The value to modify.
// @return: The min of the input value and the modifier's <i>low</i> value.
//-----------------------------------------------------------------------------
LzLowLimitModifier.prototype.modifyValue = function (x){
    //trace("LzLowLimitModifier.prototype.modifyValue x = " + x);
    return x < this.low ? this.low : x;
}


//=============================================================================
// DEFINE OBJECT: LzFloorModifier
// Rounds numbers down to the nearest integer.
// @keywords private
//
//==============================================================================
function LzFloorModifier(){

}

//-----------------------------------------------------------------------------
// Returns the input value rounded down to the nearest integer.
// @param x: The input value.
// @return: The input value rounded down to the nearest integer.
//-----------------------------------------------------------------------------
LzFloorModifier.prototype.modifyValue = function (x){
    return Math.floor(x);
}


//=============================================================================
// DEFINE OBJECT: LzLowAndHighModifier
// Requiers low and high values. Use of this modifier has been deprecated. Use
// LzLimitModifier instead.
// @keywords private
//
// @param low: Required. The minimum value returned by this modifier.
// @param high: Required The maximum value returned by this modifier.
//=============================================================================
function LzLowAndHighModifier( low , high){
    //@field low: The minimum
    this.low = low;
    //@field high: The maximum
    this.high = high;
}

//-----------------------------------------------------------------------------
// Returns the input value clipped at the max or min if necessary.
//-----------------------------------------------------------------------------
LzLowAndHighModifier.prototype.modifyValue = function (x){
    return x < this.low ? this.low : ( x > this.high ? this.high : x );
}

//=============================================================================
// DEFINE OBJECT: LzPropertyModifier
// Adds the value of a view's property to the input value. Additionally adds
// the corresponding view property update event to its owner's updateEvent
// delegate
// @keywords private
//
// @param owner: The owner of this modifier. Currently, the only owner of a
// modifier is an <b><i>LzConstraint</b></i>
// @param args: A hash of initialization arguments given to the modifier.
//=============================================================================
function LzPropertyModifier ( owner , args ){
    var view = owner.view;
    //@param args.reference: A string indicating the view in which to
    //evaluate the named property. The default is the modifier's owner's view.
    //@field view: The view to use as a reference.
    this.view = args.reference == null ? owner.view : eval( args.reference );
    //@param args.prop: The property name (string) to evaluate in the reference
    //view.
    //@field prop: The <i>prop</i> to obtain from the <i>view</i>
    this.prop = args.prop == null ? owner.prop : args.prop;
    //@param args.scale: A multiplier for the value of the property in the
    //reference view.
    //@field scale: A multiplier for the <i>view.prop</i>
    this.scale = args.scale == null ? -1 : args.scale;
    owner.updateEvent.register( this.view  , "on" + this.prop);
}

//-----------------------------------------------------------------------------
// Returns the input value plus the value of the view property * the scale.
// @param x: The input value
// @return: The modified value
//-----------------------------------------------------------------------------
LzPropertyModifier.prototype.modifyValue = function (x){
    return x + this.scale * this.view.getProp( this.prop ) ;
}

//=============================================================================
// DEFINE OBJECT: LzLimitModifier
// Optionally takes low, high, or both and checks input value for exceeding
// either its max or its min. This modifier uses function replacment so as
// not to hinder its speed, depending on whether it has values for low, high,
// or both
// @keywords private
//
// @param owner: The owner of this modifier. Currently, the only owner of a
// modifier is an <b><i>LzConstraint</b></i>
// @param args: A hash of initialization arguments given to the modifier.
//=============================================================================
function LzLimitModifier( owner , args ){
    //trace("NEW LzLimitModifier");
    //@param args.low: (Optional) The minimum value returned by this modifier.
    //@param args.high: (Optional) The maximum value returned by this modifier
    if ( args.low != null ){
        //@field low: The low limit for this modifier.
        this.low = args.low;
        this.modifyValue = LzLimitModifier.modifyLow;
    }

    if ( args.high != null ){
        //@field high: The high limit for this modifier
        this.high = args.high;
        this.modifyValue = LzLimitModifier.modifyHigh;
    }

    if ( args.low != null && args.high != null){
        //@field modifyValue: The function to be used as the <b>modifyValue
        //</b> function for this modifier.
        this.modifyValue = LzLimitModifier.modifyBoth;
    }
}
/*
LzLimitModifier.prototype.modifyValue = function (x){
    return ...
}
*/

LzLimitModifier.modifyLow = function ( x ){
    //trace("X BEFORE = " + x);
    return x < this.low ? this.low : x;
    //trace("X BEFORE = " + x);
}

LzLimitModifier.modifyHigh = function ( x ){
    return x > this.high ? this.high : x;
}

LzLimitModifier.modifyBoth = function ( x ){
    if ( x < this.low ){
        return this.low;
    }
    return x > this.high ? this.high : x;
}
]]>
</script>

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
