<library>
    <include href="redmondfonts.lzx" />
    <resource src="./resources/arrow.swf" name="arrow" />
    <resource src="./resources/separator.swf" name="separator" />
    <script>
    // NOTE: pragma is not a supported feature
    #pragma 'warnUndefinedReferences=false' 
    <![CDATA[

/***************************************************************************** 
 * LzMenu.as 
 * 
 * Copyright (c) 2001, 2002 Laszlo Systems, Inc. 
 * All Rights Reserved. 
 * 
 * This software is the proprietary information of Laszlo Systems, Inc. 
 * Use is subject to license terms. 
 *****************************************************************************/

//------------------------------------------------------------------------------
// DEFINE OBJECT: LzPanel
// A beveled box that uses the LzWinFrame resources. 
//
// @keywords private
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//------------------------------------------------------------------------------
var LzPanel = Class ( "LzPanel" , LzView );
LzPanel.prototype.construct = function ( ancestor, args ) {

    super.construct(  ancestor, args );

    // set top part
    var top = new LzView(this, {name:"top"}); // 
    top.constrainToParent("width");
    var tl = new LzView(top, {resource:"LzWinFrameTL_rsc", name:"TL"});
    var tm = new LzView(top, {resource:"LzWinFrameTM_rsc", name:"TM"});
    var tr = new LzView(top, {resource:"LzWinFrameTR_rsc", name:"TR"});
    tm.stretchResource("x");
    
    new LzStableBorderLayout( top , { axis : "x" } );
    
    // set middle part
    var middle = new LzView(this, { name:"middle"});
    middle.constrainToParent("width");
    var ml = new LzView(middle, {resource:"LzWinFrameML_rsc",  name:"ml" });
    var mm = new LzSwatchView(middle, {fgcolor:0xBBBBBB});
    var mr = new LzView(middle, {resource:"LzWinFrameMR_rsc", name:"mr"});
    mm.stretchResource("x");
    
    new LzStableBorderLayout( middle , { axis : "x" } );
    middle.stretchResource( "y" );
    
    // set bottom part
    var bottom = new LzView(this, {name:"bottom"});
    bottom.constrainToParent("width");
    
    var bl = new LzView(bottom, {resource:"LzWinFrameBL_rsc",   name:"bl"});
    var bm = new LzView(bottom, {resource:"LzWinFrameBM_rsc", name:"bm"});
    var br = new LzView(bottom, {resource:"LzWinFrameBR_rsc",  name:"br"});
    bm.stretchResource("x");
    
    new LzStableBorderLayout ( bottom , { axis: "x" } );
    new LzStableBorderLayout( this , {axis:"y" } );
    
    this.resourceViews = this.top.subviews.concat( this.middle.subviews,
                                                   this.bottom.subviews);

}


//------------------------------------------------------------------------------
// change the state of the panel to display art that's beveled up or down
//
// @param state: up or down ( change to a boolean value later )
//------------------------------------------------------------------------------
LzPanel.prototype.updateState = function ( state ){
    if (state == "down") {
        for (var i = this.resourceViews.length -1 ; i >= 0; i -- ){
            this.resourceViews[ i ].setResourceNumber ( 2 );
        }
        
    }else{ 
        for (var i = this.resourceViews.length -1 ; i >= 0; i -- ){
            this.resourceViews[ i ].setResourceNumber ( 1 );
        }
    }
}

//------------------------------------------------------------------------------
// DEFINE OBJECT: LzClusterView
// A view that manages the hilite state of its subviews by enforcing a single 
// hilite. This will be replaced with LzCluster in future verions.
//
// @keywords private
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//------------------------------------------------------------------------------
var LzClusterView = Class( "LzClusterView" , LzView );
LzClusterView.prototype.construct = function  ( ancestor, args ) {
    super.construct(  ancestor, args ); 
    this.selectedIndex = -1; //nothing selected    
    this.prevIndex = -1;
    this.prevAction = null;
    this.selectedObj = null; //nothing selected
    this.timerStarted = false;
}

//------------------------------------------------------------------------------
// perform the the selectFunc on the item located at the specified index
//
// @param index: the index of the array item on which to act
// @param selectfunc: the function that defines the action
//------------------------------------------------------------------------------
LzClusterView.prototype.action = function ( index, selectfunc ) {
    if (( this.selectedIndex != index ) || (this.prevAction != selectfunc)) {
        this.startTime = getTimer();
        this.timerStarted = true;
        if (this.selectedIndex != index ) {
            var seld = this.subviews[this.selectedIndex];
            if (seld) {
                seld[selectfunc](false);
            }
            this.firstSelect = (this.selectedIndex == -1);
            this.subviews[index][selectfunc](true);
        } else this.subviews[index][selectfunc](true);
        this.prevIndex = this.selectedIndex;
        this.prevAction = selectfunc;
        this.selectedIndex = index;
    }
}

//------------------------------------------------------------------------------
// return the currently selected item.
//
// @keywords private
//------------------------------------------------------------------------------
LzClusterView.prototype.getSelected = function ( ) {
    return this.subviews[this.selectedIndex];
}


//------------------------------------------------------------------------------
// clear the current selection
//
// @keywords private
//
// @param forceclear: 
//------------------------------------------------------------------------------
LzClusterView.prototype.clear = function ( forceclear ) {
    if ( forceclear == true ) var clearparam = true
    else clearparam = false;
    if ( this.subviews[this.selectedIndex].clear(clearparam)) {
        this.selectedIndex = -1;
    }
}

//------------------------------------------------------------------------------
// perform doCommand for the selected item of the subviews and return that view.
//
// @keywords private
//------------------------------------------------------------------------------
LzClusterView.prototype.doCommand = function ( ) {
    //var cmdNumber = this.subviews[this.selectedIndex].getCommand();
    //LzCanvas.oncommand.sendEvent(cmdNumber)
    var item = this.subviews[this.selectedIndex];
    item.doCommand();
    return item;
}

LzClusterView.prototype.toString = function ( ) {
    return "LzClusterView";
}

//------------------------------------------------------------------------------
// DEFINE OBJECT: LzMenuSeparator
// A view that draws a "separator" line between menu items
//
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//------------------------------------------------------------------------------
var LzMenuSeparator = Class( "LzMenuSeparator" , LzView );
LzMenuSeparator.prototype.construct = function  ( ancestor, args ) {
    args.height = 8;
    super.construct(  ancestor, args ); 
    this.setAttribute("width" , this.immediateparent.immediateparent.width - 8 );
    this.disabled = true;
    var container = new LzView(this, {resource:"separator", x:2, y:1, width:this.width, height:4} );
    //container.constrainToParent("width"); why doesn't this work
    container.stretchResource("x");
}

//-----------------------------------------------------------------------------
// DEFINE OBJECT: LzMenuItem
// A menu item of a standard windows menu that supports cascading submenus.
// icons and checkbox/radio button behavior will be added in future releases
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//-----------------------------------------------------------------------------
var LzMenuItem = Class ( "LzMenuItem" , LzView );
LzMenuItem.prototype.construct = function ( ancestor, args ) {
    
    super.construct(  ancestor, args ); 
    this.setAttribute("width" , this.immediateparent.immediateparent.width - 3);
    this.setAttribute( "height" , this.DEFAULT_HEIGHT);

    this.disabled = args.disabled;
    this.name = args.label;
    
    // create colored background
    this.bg = new LzSwatchView(this);
    this.bg.constrainToParent("width");
    this.bg.constrainToParent("height");
    this.bg.setColor(0xBBBBBB); // grey

    // if there is a command use this info
    if (args.command != null) {
        var cmd = global[args.command];
        
        if (args.label == null) this.label = new LzText( this, {x:12, text:cmd.label, width:this.width  } );
        if (args.key == null )  this.key   = new LzText( this, {x:this.width - 90, text:cmd.keysToString()});
        
        new LzDelegate( cmd, "execute" , this , "oncommand" );

        //This does not fix bug 115 completely because it cannot chnge dynamically
    }
    
    // icon- not implemented yet
    //this.icon = new LzSwatchView(elements, {x:2, y:2, height:args.height - 4, width:args.height -4,  text:"test"});
    //this.icon.setColor(0x333333);
    
    // Label - overrides the label found in the command
    // note...positions will change later if an icon is added
    if (args.label != null) this.label = new LzText( this, {x:12, text:args.label, width:this.width} );
       
    // Command Keys - overrides the key display found in the command
    if (args.key != null) this.key = new LzText(this, {x:this.width - this.DEFAULT_INSET, text:"Ctrl+" + args.key});

    // Now set the colors to the text and hide and show necessary elements
    this.render( false ); // false means it is not hilited, i.e. mormal mode 

    //this is unfortunate, but for now, there's the parent view doesn't know that it's child
    //has changed size.
    //this.immediateparent.updateProp("height");

    //this is vestigial -- hit determination should be done by a different view

    //this.hasLabelShadow = false;

}

LzMenuItem.prototype.setters.label = -1;
//@field DEFAULT_HEIGHT: the default height of a menuItem
LzMenuItem.prototype.DEFAULT_HEIGHT = 16;
//@field DEFAULT_INSET: the default inset of the control keys on a menuItem
LzMenuItem.prototype.DEFAULT_INSET  = 90;

//------------------------------------------------------------------------------
// overrides the default determinePlacement method to "place" cascading menus 
// correctly.
// @keywords private
//
// @param asub: subview
// @param placement: string indicating placement criteria
//------------------------------------------------------------------------------
LzMenuItem.prototype.determinePlacement = function ( asub, placement ) {
    if ( placement == "cascade" ) {
        this.submenu = asub;
        this.displaysubmenuDL = new LzDelegate(this, "showSubmenu");
        
        this.submenu.owner = this.immediateparent.immediateparent.owner;
        this.arrow = new LzView(this, {x:this.width - 10,
                                             y:this.height/2 - 5,
                                             resource:"arrow"});
        
        this.arrowColor = new Color( this.arrow.__LZmovieClipRef );
        return this;
    } else {
        return super.determinePlacement( asub, placement );
    }
}

//------------------------------------------------------------------------------
// renders the menitem hilited (or not) based on the boolean paramter amHilited.
// Also renders correctly if the menuItem has been disabled.
//------------------------------------------------------------------------------
LzMenuItem.prototype.render = function (amHilited) {

    if ( this.disabled ) {
        var txcolor = amHilited ? 0x999999 : 0x777777;
        if ( ! this.hasLabelShadow ){
            this.addShadow();
        }
        this.labelShdw.setVisible(!amHilited);   
        this.keyShdw.setVisible(!amHilited);   
    } else {
        
        var txcolor = amHilited ? 0xFFFFFF:0x000000;
        this.labelShdw.setVisible(false);
        this.keyShdw.setVisible(false);   
    }
    var ac = amHilited ? 0xFFFFFF:0x000000
    this.arrowColor.setRGB(ac);

    this.label.setColor(txcolor); 
    this.key.setColor(txcolor);

}


//------------------------------------------------------------------------------
// add the elements to make a white shadow for the text in deactiavted mode
//
// @keywords private
//------------------------------------------------------------------------------

LzMenuItem.prototype.addShadow = function ( ) {
    this.hasLabelShadow = true;
    this.labelShdw = new LzText(this, {x:13, y:1, text:this.label.getText()});
    this.labelShdw.setColor(0xFFFFFF); // white because of indentation look&feel
    this.label.bringToFront();
    if ( this.key ) {
        var xv = this.key.x+1;
        var yv = this.key.y+1;
        this.keyShdw = new LzText(this, {x:xv, y:yv, text:this.key.getText()});
        this.keyShdw.setColor(0xFFFFFF); // white because of indentation look&feel
        this.keyShdw.setVisible(true);  
        this.key.bringToFront(); //bring in front of shadow
    }

}

//------------------------------------------------------------------------------
// clear the hilite of this menuitem unless its being held.
//
// @keywords private
//
// @param forceclear: a boolean to force the menuitem to clear its hilite even
//                    if its holdselect == true.
//------------------------------------------------------------------------------
LzMenuItem.prototype.clear = function ( forceclear ) {
    var result = false;
    if (!this.holdSelect || forceclear) {
        this.select(false)
        result = true;
    }
    return result;
}

//------------------------------------------------------------------------------
// select hilites (or unhilites) this menuitem determined by amselected
//
// @keywords protected
//
// @param amselected: a boolean to indicate whether to hilite or unhilite this 
//                    menuitem
//------------------------------------------------------------------------------
LzMenuItem.prototype.select = function ( amselected ) {
    this.holdSelect = false;
    this.render( amselected );
    if ( amselected ) this.bg.setColor(0x222255)
    else this.bg.setColor(0xBBBBBB);
    if ( this.submenu ) {
        this.dm_state = amselected;
        LzTimer.addTimer(this.displaysubmenuDL,250)
    }
}

//------------------------------------------------------------------------------
// open the submenu immediately if "doit" is true
//
// @param doit: a boolean to show ( or not ) the submenu immediately
//------------------------------------------------------------------------------
LzMenuItem.prototype.showSubmenu = function ( ) {
    var doit = this.dm_state;
    this.holdSelect = doit;
    if (doit) {
        this.bringToFront();
        //don't resize this menu item to the size of the submenu
        this.hassetheight = true;
        var x = this.getAttributeRelative("x",
                                        this.immediateparent.immediateparent);
        this.submenu.setAttribute("x",this.getProp("width") - 4);
        this.submenu.setAttribute("y", -1);
        this.submenu.open();
    } else {
        this.submenu.trackMouseDL.unregisterAll();
        this.submenu.setVisible(false);
    }
}

//------------------------------------------------------------------------------
// Execute the command object ( if there is one) associated with this menuitem.
//
//------------------------------------------------------------------------------
LzMenuItem.prototype.doCommand = function ( ) {
    // send an event that this menuitem was selected!
    this.oncommand.sendEvent(this);
}

LzMenuItem.prototype.toString = function ( ) {
    return "menuItem " + this.name
}

//==============================================================================
// DEFINE OBJECT: LzMenu
// Implements the standard windows menu.
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//==============================================================================

var LzMenu = Class( "LzMenu" , LzView );
LzMenu.prototype.initstage="late";
LzMenu.prototype.construct = function  ( ancestor, args ) {
    super.construct(  ancestor, args );
    //LzViewTransformers.makeMasked.apply(this);
    this.setVisible(false);
    
    // set menu title - to be used later when attach to a menuBar or popup
    this.title = args.label;
    
    // Add button if parent is aMenuBar
    if ( args.hasbutton ) {
        this.immediateparent.addButtonFor( this , args.textwidth);
    }
    
    // make it interactive
    this.setClickable( );
    this.mouseInside = false;

    // container for menu items. offset so as not to overlay the beveled art
    new LzClusterView(this, {name:"menuItems", x:1, y:1}); 
    new LzDelegate(this, "updateHeight",
                         this.menuItems , "onheight");
    
    // The background is a beveled panel
    new LzPanel(this, {name:"background"} );
    this.background.constrainToParent("width");
    new LzViewPropConstraint( this.background , { refview:this.menuItems,
                                                        prop : "height" ,
                                                        offset : 4 } );
    //this.background.setVisible( false );
    this.menuItems.bringToFront();
        
    // set vertical layout
    this.axis = "y";
    new LzSimpleLayout(this.menuItems, { axis : this.axis , spacing : 1 });
    
    
    // event handlers
    new LzDelegate(this, "over", this, "onmouseover");
    new LzDelegate(this, "out",  this, "onmouseout");
    //new LzDelegate(this, "mui",  this.onclick);
    //new LzDelegate(this, "muo",  this.onmouseupoutside);
    new LzDelegate(this, "mu",   this, "onmouseup"); 
    new LzDelegate(this, "md",   this, "onmousedown");
    new LzDelegate(this, "mdi",  this, "onmousedragin");
    new LzDelegate(this, "mdo",  this, "onmousedragout");
    
    // create delegate for mouse tracking.
    // this tracker will be activated by the object that shows this menu (i.e. like a menu button)
    this.trackMouseDL = new LzDelegate( this, "track"); //, LzIdle.onidle);
    
    //add new items to this container called "menuItems"
    this.defaultplacement = "menuItems";
    //LzEvent.unlockEvents( eKey ); //(?) what is eKey?

}

//------------------------------------------------------------------------------
// Clear the selected menuitem if it is not being held.
//
// @param forceclear: if TRUE ignore everything and clear the menuitem
//------------------------------------------------------------------------------
LzMenu.prototype.clear = function ( forceclear ){
    this.menuItems.clear( forceclear);
}

//------------------------------------------------------------------------------
// call updateHeight everytime a menuitem is added so that the menu can stretch
// its height to accomidate it.
//------------------------------------------------------------------------------
LzMenu.prototype.updateHeight = function (  ) { 
    this.setAttribute("height",this.menuItems.height + 2);
}

//------------------------------------------------------------------------------
// called on mouseover to set a boolean value
// @keywords private
//------------------------------------------------------------------------------
LzMenu.prototype.over = function ( m ) {
    this.mouseInside = true;
    //this.trackMouseDL.register(LzIdle.onidle);
}

//------------------------------------------------------------------------------
// called when mouse moves off the menu
// @keywords private
//------------------------------------------------------------------------------
LzMenu.prototype.out = function ( m ) { 
    //this.menuItems.clear(); 
    //this.trackMouseDL.unregisterAll();
}

//------------------------------------------------------------------------------
// called on mouseup
// @keywords private
//------------------------------------------------------------------------------
LzMenu.prototype.mu = function ( m ) {
    if (targetview != this) {
        targetview.onmouseup.sendEvent( m );
    } else {
        var mi = this.menuItems.getSelected();
        if (!mi.disabled){
            if ( this.mouseInside ) {
                if ( mi.submenu == null) {
                    mi.doCommand();
                    this.owner.closeMenu( this ); // owner is button on menubar
                }
            } else {
                this.trackMouseDL.unregisterAll();
            }
        }
    }
    //this.mouseInside = false;
}


//------------------------------------------------------------------------------
// called on mousedown
// @keywords private
//------------------------------------------------------------------------------
LzMenu.prototype.md = function ( m ) {
    global.targetview = this;
    this.mouseInside = true;
    //this.trackMouseDL.register(LzIdle , "onidle" );
}

//------------------------------------------------------------------------------
// called on mousedown
// @keywords private
//------------------------------------------------------------------------------
LzMenu.prototype.mdi = function ( m ) {
    this.mouseInside = true;
}

//------------------------------------------------------------------------------
// called on mousedown
// @keywords private
//------------------------------------------------------------------------------
LzMenu.prototype.mdo = function ( m ) {
    this.mouseInside = false;
    this.menuItems.clear(); 
}

//------------------------------------------------------------------------------
// opens the menu with a transition ( if appropriate ) and registers the mouse
// tracking delegate.
//------------------------------------------------------------------------------
LzMenu.prototype.open = function ( firstOpened ) {
    this.completeInstantiation();
    if (firstOpened) {
        this.setAttribute("alpha",0);
        this.animate("alpha",100,333,false);
    }
    this.trackMouseDL.register(LzIdle , "onidle" ); //start tracking menu
    this.setVisible(true);
}

//------------------------------------------------------------------------------
// closes the menu and any of its submenus
//------------------------------------------------------------------------------
LzMenu.prototype.close = function ( ) {
    this.trackMouseDL.unregisterAll();  // stop tracking menu
    this.clear(true);                   // clear any hilites
    this.setVisible(false);             // hide menu
    var svs = this.menuItems.subviews;  // close submenus
    for( var i in svs) svs[i].submenu.close();
}

//------------------------------------------------------------------------------
// when the mouse is over a menu the track method is called periodically to 
// the hilite the appropriate menuItem.
//
// @keywords protected
//------------------------------------------------------------------------------
LzMenu.prototype.track = function ( ) {
    var mx = this.getMouse("x");
    var my = this.getMouse("y");
    var foundIndex = -1;
    if ( this.containsPt(mx,my)) {
        global.targetview = this;
        this.mouseInside = true;
        var SVArray = this.menuItems.subviews;
        var l = SVArray.length;
        if (this.axis == "y") {
            for ( var i=0; i < l; i++) {
                if ( my > SVArray[i].y )  { foundIndex = i };
            }
            if ( my > SVArray[l-1].y + SVArray[l-1].height ) foundIndex = -1;
        } else {
            for ( var i=0; i < l; i++) {
                if ( my > SVArray[i].x )  { foundIndex = i };
            }
            if ( my > SVArray[l-1].x + SVArray[l-1].width ) foundIndex = -1;
        }
        this.menuItems.action(foundIndex, "select");
    } else {
        this.mouseInside = false;
        this.menuItems.clear();
    }
}

//toString
LzMenu.prototype.toString = function ( ) {
    return "LzMenu " + this.title;
}

//==============================================================================
// DEFINE OBJECT: LzMenuButton
// implements a standard button for a menubar, which only shows its beveled
// state on rollover.
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//=============================================================================

var LzMenuButton = Class ( "LzMenuButton" , LzView );

                          
LzMenuButton.prototype.construct = function  ( ancestor, args ) {
    this.state = "up";
    super.construct(  ancestor, args );
    
    new LzPanel(this, {name:"background" });
    this.background.constrainToParent("width");
    this.background.constrainToParent("height");
    this.background.setVisible(false);

    this.name = args.label;

    var l = new LzText( this , { name:"label" , 
                    textwidth : args.textwidth , 
                    text: (args.label == null ? "button" : args.label) } );
    var mh =  this.label.getProp("height") + 2*this.MIN_TEXT_BORDER;

    this.setAttribute("height" , mh); 
    this.setAttribute( "width" , this.label.getTextWidth() + 
                  2*this.MIN_TEXT_BORDER);


    new LzViewPropConstraint( this.label , { prop : "x" , 
                    refview : this,
                    refprop : "width" , 
                    offset : -.5 * this.label.getTextWidth() - 
                                            this.MIN_TEXT_BORDER/2,
                    modifiers : [ new LzFloorModifier() ],
                    multiplier : .5 } );
    
    new LzViewPropConstraint( this.label , { prop : "y" , 
                    refview : this,
                    refprop : "height" , 
                    offset : -.5 * this.label.getProp( "height" ) ,
                    modifiers : [ new LzFloorModifier() ],
                    multiplier : .5 } );

}

LzMenuButton.prototype.MIN_TEXT_BORDER = 6; 

//------------------------------------------------------------------------------
// hilite the button ... true or flase
//------------------------------------------------------------------------------
LzMenuButton.prototype.hilite = function ( doSelect ){
    this.background.setVisible(doSelect);
    this.background.updateState("up");
    if (this.state != "up") {
        this.label.setX(this.x-1);
        this.label.setY(this.y-1); 
        this.state = "up";
     }    
    // this.menu.setVisible(false);
}


//LzMenuButton.prototype.firstSelect = function ( doSelect ){
//    this.background.setVisible(doSelect);
//}


//------------------------------------------------------------------------------
// Select the button ...true or false
//------------------------------------------------------------------------------
LzMenuButton.prototype.select = function ( doSelect ){
    this.background.setVisible(doSelect);
    if ( doSelect ) {
       this.background.updateState("down");
       if (this.state != "down") {
            this.label.setX( this.x + 1); //relative math not good. Could get out of sync
            this.label.setY( this.y + 1); 
            this.state = "down";
        }
        // open menu and position it at the bottom of this button
        this.menu.setAttribute("x", this.x + 1);
        this.menu.setAttribute("y", this.y + this.height + 4 );
        this.menu.open(this.immediateparent.firstSelect);
    } else {
        this.background.updateState("up");
        if (this.state != "up") {
            this.label.setX( this.x -1);
            this.label.setY( this.y -1); 
            this.state = "up";
        }
        this.menu.close();
    }
}

//------------------------------------------------------------------------------
// assign the menu to this menu button
//------------------------------------------------------------------------------
LzMenuButton.prototype.assignMenu = function ( menu ){
    menu.owner = this;
    this.menu = menu;
}

//------------------------------------------------------------------------------
// close the menu associated with this button
//------------------------------------------------------------------------------
LzMenuButton.prototype.closeMenu = function ( menu ){
    this.select(false);
    this.immediateparent.immediateparent.immediateparent.press = 0;
    menu.close();
}

//------------------------------------------------------------------------------
// returns the class name
//------------------------------------------------------------------------------
LzMenuButton.prototype.toString = function ( ) {
    return "menuButton name = " + this.name;
}

//------------------------------------------------------------------------------
// DEFINE OBJECT: LzMenuBar
// Implements the standard windows menubar. It contains a background <b><i>LzPanel</b></i> and
// holds a collection of <b><i>LzMenuButtons</b></i> each with an assigned <b><i>LzMenu</b></i> object.
//
// @param ancestor: a view above this one in the hierarchy
// @param args: hash of initialization arguments
//------------------------------------------------------------------------------
var LzMenuBar = Class( "LzMenuBar" , LzView );
LzMenuBar.prototype.construct = function ( ancestor, args ) {
    super.construct(  ancestor, args );

    this.axis = "x";
    this.mdown = false;
    this.press = 0; // 0 = no press; 1 = firstpress ; 2 = secondpress

    // make it interactive
    this.setClickable( );

    // Used by LzModalWatcher to reset the menubar (and menus) if user clicks elsewhere
    this.clickedOtherDL = new LzDelegate(this,"changeFocus");

    // The background is a beveled panel
    new LzPanel(this, {name:"background"});
    this.background.constrainToParent("width");
    this.background.constrainToParent("height");

    //creata a maske container for the panel and menuButtons
    var mcont = new LzView ( this, { name: "menubarmask"});

    this.menubarmask.constrainToParent("width");
    this.menubarmask.constrainToParent("height");

    // container for menu buttons. inset (2,2) so as not to overlay the beveled art
    new LzClusterView(mcont, {name:"menuButtons", x:2, y:2}); 
    this.menuButtons = this.menubarmask.menuButtons; //for easy reference later
    new LzSimpleLayout(this.menuButtons , { axis : this.axis, 
                                                      spacing : 1 });
    
    // event handlers for the mouse events 
    new LzDelegate(this, "m_over",   this, "onmouseover");
    new LzDelegate(this, "m_out",    this, "onmouseout");
    new LzDelegate(this, "m_up_in",  this, "onclick");
    new LzDelegate(this, "m_up",     this, "onmouseup");
    new LzDelegate(this, "m_up_out", this, "onmouseupoutside");
    new LzDelegate(this, "m_down",   this, "onmousedown");
    //new LzDelegate(this, "mdo",      this, "onmousedragout");
    
    // create delegate for mouseTracking during dragging and rollover
    // assign it to the "onidle" event later.
    this.trackMouseDL = new LzDelegate(this, "track"); //, LzIdle.onidle);

}

//------------------------------------------------------------------------------
//creates a button for a specified menu and places it in the menubar
//------------------------------------------------------------------------------
LzMenuBar.prototype.addButtonFor = function ( menu , textwidth ){
    menu.setVisible(false);
    var btn = new LzMenuButton(this.menuButtons,
                { height:20, label:menu.title , textwidth:textwidth });
    btn.assignMenu( menu );
}

//------------------------------------------------------------------------------
// calls resetbar when the menuBar loses foucs
//------------------------------------------------------------------------------
LzMenuBar.prototype.changeFocus = function ( view ) {
   if ( view != this ) this.resetbar();
}

//------------------------------------------------------------------------------
//resets the menubar. unhilites all menuButtons and stops tracking the mouse
//------------------------------------------------------------------------------
LzMenuBar.prototype.resetbar = function ( ) { 
    this.press = 0;
    this.menuButtons.action(-1,"select");
    //this.trackMouseDL.unregisterAll();
}

//------------------------------------------------------------------------------
// called on mouse rollOver
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.m_over = function ( m ) {
    this.trackMouseDL.register( LzIdle , "onidle" );
}

//------------------------------------------------------------------------------
// called on mouse rollOut
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.m_out = function ( m ) {
    if ((!this.mdown) && (this.press != 1)) {
        this.menuButtons.action(-1,"hilite"); //unhilite last button
    }
    this.trackMouseDL.unregisterAll();
}

//------------------------------------------------------------------------------
// called on mousedown
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.m_down = function ( m ) {
    global.targetview = this; // used later  ... why again?
    this.mdown = true;
    var mx = this.getMouse("x");
    var my = this.getMouse("y");

    if ( this.menuButtons.containsPt(mx,my) ) { // then mouse inside view so...
        if ( ++ this.press == 3 ) this.press = 0;
    } else {

        this.mdown = false;
        this.press = 2; //will be set to 0 on prototype.m_up_in
        this.menuButtons.action(-1,"select");
    }

    if ( ! LzModeManager.hasMode( this ) ){
        LzModeManager.makeModal( this );
    }
}

LzMenuBar.prototype.passModeEvent = function ( e ) {
    if ( e == "onmousedown" || e=="onmouseup" ){
        this.resetbar();
        LzModeManager.release( this );
    }
    return true;
}

//------------------------------------------------------------------------------
// called on mouseup
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.m_up = function ( m ) { 
   if (global.targetview != this) {
        global.targetview.onmouseup.sendEvent( m );
   }
   // most likely the mouseUp occurred in a menu
   // but because of the way flash is structure
   // the mouseevent get posted to this view
}

//------------------------------------------------------------------------------
// called on mouseup inside
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.m_up_in = function ( m ) {  
    this.mdown = false;
    if ( this.press ==2 ) {
        this.menuButtons.action(-1,"select"); // clear 
        this.press = 0;
    }
   // this.press = (this.press == 2) ? 0:1;
}

//------------------------------------------------------------------------------
// called on mouseup outside
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.m_up_out = function ( m ) {  
    this.mdown = false;
    this.press == 0;
}


//------------------------------------------------------------------------------
// when the mouse is over a menubar the track method is called periodically to 
// the hilite the appropriate menubutton.
//
// @keywords private
//------------------------------------------------------------------------------
LzMenuBar.prototype.track = function ( ) {
    var mx = this.getMouse("x");
    var my = this.getMouse("y");
    var foundIndex = -1;
    if ( this.containsPt(mx,my) ) { // then mouse inside view so...
        var SVArray = this.menuButtons.subviews;
        var l = SVArray.length;
        for ( var i=0; i < l; i++) if ( mx > SVArray[i].x ) { foundIndex = i };
        if ( mx > SVArray[l-1].x + SVArray[l-1].getProp("width") ) foundIndex = -1;
        if ((this.mdown) || ( this.press == 1)) {
            if (foundIndex > - 1) this.menuButtons.action(foundIndex,"select")
        }else {
            this.menuButtons.action(foundIndex,"hilite");
        }
    }
}

LzMenuBar.prototype.toString = function ( m ) {  
    return "MenuBar"
}

    ]]>
    </script>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
