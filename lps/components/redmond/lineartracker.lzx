<library>
    <!-- CLASS: lineartracker --> <!-- call simpletracker -->
    <class name="lineartracker" clickable="true">

        <!-- this tracker only tracks a vertical or horizontal list-->
        <!-- determined by the value of the axis                   -->
        <attribute name="axis" value="x" type="string" setter="this.setAxis(axis)"/>

        <!-- the tracker keeps track of what view was last hilited or selected --> 
        <attribute name="targetview" value="null" />

        <!-- keeps track of the last mousedownstate so that  -->
        <!-- we can check to see if we need to actually      -->
        <!-- change the view state.                          -->
        <attribute name="lastmsstate" value="false" />

        <!-- can I eliminate one of these next two -->
        <attribute name="mouseisdown" value="false" />
        <attribute name="trackasmousedown" value="false" />

        <!-- when some tracking views, like in menubar, the first -->
        <!-- mouseup still tracks like a mousedown. mumaxcount is set -->
        <!-- to one for this type of behavior -->
        <attribute name="mumaxcount" value="1" /> <!-- NOTE: zero default -->

        <!-- private internal variable -->
        <attribute name="mucounter" value="0" />

        <!-- the spacing of the internal layout will be constrained to this value -->
        <attribute name="spacing" value="0" />

        <!-- not sure this is needed  -->
        <attribute name="trackertype" value="menu" type="string"/>

        <!-- not sure this belongs in base class -->
        <attribute name="keepvisible" value="false" />

        <!-- keep hilite on when the mouse goes outside tracker -->
        <!-- as with buttons in the menubar, but not items in a menu -->
        <attribute name="keephilite" value="false" />

        <!-- methods: setters -->

        <method name="setAxis" args="a" >
            // this tracker can track both horizontally and vertically
            this.axis = a;
            this.sizeAxis = a == "x" ? "width" : "height";
        </method>

        <!-- methods: events -->

        <method event="onconstruct">
            this.createDelegates();
        </method>

        <method event="onaddsubview" args="s" >
            if (this.parent['onaddsubview'])
                this.parent.onaddsubview.sendEvent(s);
        </method>

        <method event="onmousedown">
            this.mouseisdown = true;
            this.trackasmousedown = true;
            if (!registered) this.registerDelegates(true);
        </method>
    
        <method name="domousedown" args="vw">
           if (vw['trackertype'] != 'menu') {
             this.reset();
             this.registerDelegates(false);
           }
        </method>

        <method event="onmouseover">
            //this.md = false;
            this.mouseisinside = true;
            this.registerDelegates(true);
        </method>
        
        <method event="onmouseout">
            <![CDATA[
            this.mouseisinside = false;
            if (this['targetview']) {
                if( !(this.trackasmousedown || (this.mucounter==1))) { // might need to fix the '1' value
                    if (!this.targetview['hassubmenu']) {
                        if (this.targetview['setHilited'])
                            this.targetview.setHilited(false);
                        this.targetview = null;
                    }
                }
            }
            ]]>
        </method>

        <method name="domouseup" args="v" > <!-- v: view where mousedown happened-->
          <![CDATA[
            this.mouseisdown = false;
            if ( this.mouseInside()) {
                this.mucounter++;
                if (this.mucounter > this.mumaxcount) {
                    if (this.targetview['execute'])
                        this.targetview.execute();
                    this.mucounter = 0;
                    this.trackasmousedown = false;
                }
            } else {
              if (v.mouseInside()){
                 if (this.keepvisible) {
                     this.reset();
                     this.registerDelegates(false);
                 } else {
                    if (this['parent'] && this.parent['close']) {
                        this.parent.close();
                    }
                 }
              } else this.reset();
            }
            ]]>
        </method>

        <!-- OTHER METHODS -->
        <method name="createDelegates">
            this.trackdel =     new LzDelegate(this,"track");
            this.mouseupdel =   new LzDelegate(this,"domouseup");
            this.mousedowndel = new LzDelegate(this,"domousedown");
        </method>

        <method name="registerDelegates" args="torf" >
            if (torf) {
                // set a flag to identify this has registered it delegates
                this.registered = true;

                // register for idle so the tracker can track
                this.trackdel.register(LzIdle,"onidle");

                // register for mouseup so that ANY tacker can
                // listen for the mouseUp command. VERY USEFUL
                this.mouseupdel.register(LzGlobalMouse,"onmouseup");
                this.mousedowndel.register(LzGlobalMouse,"onmousedown");
            } else {
                this.registered = false;

                // unregister all delegates
                this.trackdel.unregisterAll();
                this.mouseupdel.unregisterAll();
                this.mousedowndel.unregisterAll();
            }
        </method>

        <method name="partialreset">
            //this is usually by a delegate when a user clicked outside the menubar
            if (this['targetview']) {
               if ( typeof(this.targetview['setHilited']) != 'undefined' )   
                    this.targetview.setHilited(false);
               if ( typeof(this.targetview['setSelected']) != 'undefined' )   
                    this.targetview.setSelected(false);
            }
            this.targetview = null;
        </method>

        <method name="reset">
            this.partialreset();
            this.lastmsstate = false;
            this.mouseisdown = false;
            this.trackasmousedown = false;
            this.mucounter = 0;
        </method>

        <method name="ismenuobject" args="vw">
           return true;
        </method>

        <method name="mouseInside" > 
          <![CDATA[
            // OPTIMIZE this later - don't do multiplication
            // this is not used in a loop so not as important
            var x = this.getMouse('x'); var y = this.getMouse('y');
            return this.containsPt(x,y);
        ]]>
        </method>
        
        <!-- METHOD -->
        <!-- This method returns the index of the view that the mouse is over. -->
        <!-- it assumes that the views are layed out vertically or horzontally -->
        <!-- this could be sped up with a binary search of the subviews -->
        <method name="getIndexFromMouseLocation" > 
          <![CDATA[
            if (!subviews) return -1;
            var c = this.getMouse(this.axis); // save a fix value of the mouse position
            var L = this.subviews.length;
            var i=1;  // the second subview's position is the end of the first
            var found = false;
            while ( !found ) {
                if ( i >= L ) { i++; break;}
                found = (this.subviews[i].getAttribute(this.axis) - c  > 0);
                i ++;
            }
            var tl = this.subviews[L-1].getAttribute(this.axis)
                    + this.subviews[L-1].getAttribute(this.sizeAxis);
            if (c > tl) i = -1; // mouse position is beyond last view
            else i -= 2;
            return i;
            ]]>
        </method>
        
        <!-- METHOD track -->
        <method name="track"> 
          <![CDATA[
           if (!this.registered) return;
           if (!this.mouseInside()) return;

            // get new targeted view
            var i = this.getIndexFromMouseLocation();
            var s =  i == -1 ? undefined : this.subviews[i];

            if ( s == undefined) return;
            // There are two reasons to update the UI...
            // the target view has changed and/or the mouse state has change

            var mstatechange = ( this.mouseisdown != this['lastmsstate'] )
            this.lastmsstate = this.mouseisdown;


            if (s != this['targetview']) {
                // target view has changed, so don't care about mstate
                this.action(s);
                this.targetview = s;
            } else {
                if (mstatechange) { // targetview has not change but mousestate has, so ...
                   this.action(s);
                }
            } 
        ]]> 
        </method>

        <method name="action" args="v" >
            var tv = this['targetview'];
            if (this.trackasmousedown) {
                if (tv) tv['setSelected'](false);
                v['setSelected'](true);
            } else {
                if (tv) tv['setHilited'](false);
                v['setHilited'](true);
            }            
        </method>

        <!-- check for use -->
        <!--
        <method name="getHilitedY">
            return this.targetview.y;
        </method>
        -->
        
    </class> <!-- END tracker -->

</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2004 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
