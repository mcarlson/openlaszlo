<library>
<script when="immediate">
<![CDATA[

public class LzDebugEvalLoader {
    #passthrough (toplevel:true) {  
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.text.*;
    import flash.system.*;
    import flash.net.*;
    import flash.ui.*;
    import flash.text.Font;
    }#

    var loader:Loader;

    public function LzDebugEvalLoader (view) {
        this.loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.INIT, debugEvalListener);
    }

    public function doEval(expr:String, seq:int=0) {
        var url = "hello.lzx?lzr=swf9&lz_load=false&lzt=eval&lz_script=" 
         + encodeURIComponent(expr) 
        + "&lzbc=" + encodeURIComponent(String((new Date()).getTime())) 
        + "&lzrdbseq="+seq;
        this.loader.load(new URLRequest(url),
                         new LoaderContext(false,
                                           new ApplicationDomain(ApplicationDomain.currentDomain)));
    }

    public function debugEvalListener (e:Event):void {
        e.target.loader.unload();
    }

    private function configureProbeListeners(dispatcher:IEventDispatcher):void {
        dispatcher.addEventListener(Event.COMPLETE, checkServerResponseHandler);
        dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, checkServerResponseHandler);
        dispatcher.addEventListener(IOErrorEvent.IO_ERROR, checkServerResponseHandler);
    }

    public function checkServerResponse () {
        var probe = new URLLoader();
        configureProbeListeners(probe);
        var reqstr = "__dbgprobe__.lzx?lzt=stat";
        probe.load(new URLRequest(reqstr));
    }

    public function checkServerResponseHandler (event:Event) {
        var data = ((URLLoader)(event.target)).data;
      // NB: This is a callback handler, and 'this' will be bound to some LoadVars object, not to Debug
      if (data == null) {
          Debug.warn('Debugger cannot contact LPS server, switching to SOLO mode.');
          if (Debug.console is LzDebuggerWindowConsoleBridge) {
              Debug.console.window.setAttribute('solo_mode', true);
          }
      }
    }
    

    public function addTextLinkCallback(lztext:LzText) {
        var textfield:TextField = (lztext.sprite cast LzTextSprite).textfield;
        textfield.addEventListener(TextEvent.LINK, textLinkCallback);
    }

    public function textLinkCallback (e:TextEvent) {
        var obj = e.text;
        if (obj.indexOf("objid=") == 0) {
            var objid = obj.substr(6);
            trace('textLinkCallback object id = ', objid);
            Debug.displayObj(Number(objid));
        }
    }


}

]]>
</script>
</library>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2008 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
