<library>
    <!--- datamarker for the chart -->
    <class name="datamarker" extends="drawview">
        <!--- @keywords private -->
        <attribute name="locationx"/>
        <!--- @keywords private -->
        <attribute name="locationy"/>
        <!--- @keywords private -->
        <attribute name="style" type="string"/>
        <!--- @keywords private -->
        <attribute name="tooltip" type="string"/>         
        <!--- view to handle the image 
            @keyword private-->
        <view name="pointrepresentation" stretches="both" x="0" y="0" />    
            
        <!--- Render value point -->
        <method name="renderValuePoint">
        <![CDATA[ 
            //resize this view
            this.pointrepresentation.setWidth(this.style.point.width);
            this.pointrepresentation.setHeight(this.style.point.height);
            
                   //Check if it is a figure or an image
            if( this.style.point.image != null ) {
                //Must be a resource
                this.pointrepresentation.setSource(this.style.point.image);
                this.pointrepresentation.stretchResource();
                this.pointrepresentation.setOpacity(this.style.point.opacity);
            } else if (this.style.point.shape=='circle' || 
                       this.style.point.shape=='triangle' ) {
                        
                        this.fillStyle = this.style.point.color;
                        this.globalAlpha = this.style.point.opacity;
                        this.beginPath();
                        
                        if (this.style.point.shape=='circle') {
                                            
                            this.lineTo(0, this.pointrepresentation.height/2);
                            this.quadraticCurveTo(0, 0, this.pointrepresentation.width/2, 0);
                            this.quadraticCurveTo(this.pointrepresentation.width, 0, this.pointrepresentation.width, this.pointrepresentation.height/2);
                            this.quadraticCurveTo(this.pointrepresentation.width, this.pointrepresentation.height, this.pointrepresentation.width/2, this.pointrepresentation.height);
                            this.quadraticCurveTo(0, this.pointrepresentation.height, 0, this.pointrepresentation.height/2);

                            
                         } else if(this.style.point.shape=='triangle') {
                        
                            this.lineTo(0, this.pointrepresentation.height);                         
                            this.lineTo(this.pointrepresentation.width/2, 0);
                            this.lineTo(this.pointrepresentation.width,this.pointrepresentation.height);
                        } 

                        this.closePath();
                        
                        //check if fill is gradient
                        if( this.style.point.gradient == 'radial' || this.style.point.gradient == 'linear' ) {
                            this.gradientFill();
                        } else {
                            this.fill();   
                        }
           
                        this.pointrepresentation.setAttribute('visible',false);
                            
                    } else {                            
                            this.pointrepresentation.setOpacity(this.style.point.opacity);
                            this.pointrepresentation.setBGColor(this.style.point.color);
                            this.pointrepresentation.setAttribute('visible',true);
                    }
        ]]>
        </method>
        <!--- Add gradient fill to the current shape being drawn-->
        <method name="gradientFill">
        <![CDATA[ 
             this.globalAlpha = 0;
             var mygradient = null;
             
             if (this.style.point.gradient == 'radial') {             
                mygradient = this.createRadialGradient(this.pointrepresentation.width/2, this.pointrepresentation.height/2, 0, this.pointrepresentation.width, this.pointrepresentation.height, 0);
            } else {
                mygradient = this.createLinearGradient(0,0,this.pointrepresentation.width,this.pointrepresentation.height);
            }

            mygradient.addColorStop(0, 0xffffff);
            this.globalAlpha = 1;
            mygradient.addColorStop(1, this.style.point.color);                
            this.fillStyle = mygradient;
            this.fill();   
        ]]>
        </method>

    </class>
    

</library>

<!-- * X_LZ_COPYRIGHT_BEGIN 
***************************************************
* Copyright 2001-2006 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END 
****************************************************** -->
<!-- @LZX_VERSION@  -->