<library>
    <include href="chart.lzx"/>
    <include href="horizontalaxis.lzx"/>
    <include href="verticalaxis.lzx"/>
    <!--- class that provides all common features for the rectangular charts like line, bar and column -->
    <class name="rectangularchart" extends="chart" clip="true">
        
        <!--- The minimum virtual value to be rendered in the 'x' axis -->
        <attribute name="minx" type="number" value="0"/>
        <!--- The maximum virtual value to be rendered in the 'x' axis -->
        <attribute name="maxx" type="number" value="0"/>
        <!--- The minimum virtual value to be rendered in the 'y' axis -->
        <attribute name="miny" type="number" value="0"/>
        <!--- The maximum virtual value to be rendered in the 'y' axis -->
        <attribute name="maxy" type="number" value="0"/>

        <!-- The default min's ans max's values that belongs to all the data series -->
        <attribute name="defaultminx" type="number" value="0"/>
        <attribute name="defaultmaxx" type="number" value="0"/>
        <attribute name="defaultminy" type="number" value="0"/>
        <attribute name="defaultmaxy" type="number" value="0"/>

        <!--- @keyword private -->
        <attribute name="dataSeriesLeaf" type="expression" value="${null}"/>

        <!--- Determines if the vertical grid lines are going to be used -->
        <attribute name="verticalGridLines" type="boolean" value="false"/>
        
        <!--- Determines if the horizontal grid lines are going to be used -->
        <attribute name="horizontalGridLines" type="boolean" value="false"/>

        <!--- @keyword private -->
        <attribute name="gridlinecolor" />

        <!--- @keyword private -->
        <method name="setHAxisMin">
            this.haxis.minimumRender = this.minx;
        </method>

        <!--- @keyword private -->
        <method name="setHAxisMax">
            this.haxis.maximumRender = this.maxx;
        </method>

        <!--- @keyword private -->
        <method name="setVAxisMin">
            this.vaxis.minimumRender = this.miny;
        </method>
        <!--- @keyword private -->
        <method name="setVAxisMax">
            this.vaxis.maximumRender = this.maxy;
        </method>
        
       <!--- Draw the grid lines 
       @keyword private -->
        <method name="renderGridLines">
        <![CDATA[
            if ( this.verticalGridLines ){
                this.renderVerticalGridlines();
            }
            
            if ( this.horizontalGridLines ) {
                this.renderHorizontalGridlines();
            }
        ]]>
        </method>
        
        <!-- Render vertical grid lines 
        @keyword private -->
        <method name="renderVerticalGridlines">
        <![CDATA[
            if ( haxis.getTickMarkPositions()!=null && haxis.getTickMarkPositions().length > 0 ) {
                
                haxis.strokeStyle = this.style.vaxisstyle.gridline.color;
                haxis.lineWidth = this.style.vaxisstyle.gridline.size;
                haxis.globalAlpha = this.style.vaxisstyle.gridline.opacity;
                haxis.fill();
                
                for ( var i=0; i < haxis.getTickMarkPositions().length ; i++ ) {
                    haxis.beginPath();
                    haxis.moveTo(haxis.getTickMarkPositions()[i], 0  );
                    haxis.lineTo(haxis.getTickMarkPositions()[i], -(vaxis.height) );                
                    haxis.stroke();
                }
            }
        ]]>
        </method>        

        <!-- Render horizontal grid lines 
        @keyword private -->
        <method name="renderHorizontalGridlines">
        <![CDATA[
            if ( vaxis.getTickMarkPositions()!=null && vaxis.getTickMarkPositions().length > 0 ) {
            
                vaxis.strokeStyle = this.style.haxisstyle.gridline.color;
                vaxis.lineWidth = this.style.haxisstyle.gridline.size;
                vaxis.globalAlpha = this.style.haxisstyle.gridline.opacity;
                vaxis.fill();
                
                for ( var i=0; i < vaxis.getTickMarkPositions().length ; i++ ) {
                    vaxis.beginPath();
                    vaxis.moveTo(0, vaxis.getTickMarkPositions()[i] );
                    vaxis.lineTo(haxis.width, vaxis.getTickMarkPositions()[i] );                
                    vaxis.stroke();
                }
            }
        ]]>
        </method>        

        <!--- render the chart -->
        <method name="render">
        <![CDATA[
            var startTime = (new Date()).getTime();
            this.renderAxis();
            this.adjustAxesToLayout();
            this.renderPlotArea();
            this.renderGridLines();
            
            if (this.valuelinesenabled) {
                this.renderValueLine();    
            }
            
            if (this.valuepointsenabled) {
                this.renderValuePoint();
            }

            if (this.valueregionsenabled) {
                this.renderValueRegion();
            }

            this.applyBGStyle( this.style.chartbgstyle );
            haxis.sendBehind(plotarea);
            vaxis.sendBehind(plotarea);           
            Debug.write("render time: " + (((new Date()).getTime() - startTime) / 1000) + " seconds");            
        ]]>
        </method>
        
        <!--- render the axis 
        @keyword private -->
        <method name="renderAxis">
        <![CDATA[        
            vaxis.clear();
            vaxis.setDataSeries(this.dataSeriesLeaf);

            if ( this.style.vaxisstyle!=null ) {
                vaxis.style = this.style.vaxisstyle;
            } else {
                vaxis.style = new axisstyle();
            }
            
            vaxis.setX( (this.plotarea[x] != null ? this.plotarea.x : this.x) );
            vaxis.setY( (this.plotarea[y] != null ? this.plotarea.y : this.y) );
            vaxis.setHeight( (this.plotarea[height] != null ? this.plotarea.height : this.height) );

            vaxis.render();
            
            haxis.clear();
            haxis.setDataSeries(this.dataSeriesLeaf);

            if ( this.style.haxisstyle!=null ) {
                haxis.style = this.style.haxisstyle;
            } else {
                haxis.style = new axisstyle();
            }
            
            haxis.setX( (this.plotarea[x] != null ? this.plotarea.x : this.x) );
            haxis.setY( (this.plotarea[y] != null && this.plotarea[height] != null ? 
                           this.plotarea.y + this.plotarea.height : this.y + this.height) );
            haxis.setWidth( (this.plotarea[width] != null ? this.plotarea.width : this.width) );

            haxis.render();         
        ]]>    
        </method>
   
   <!--- @keyword private -->
   <method name="renderValueLine">
        <![CDATA[
            var valueLines = this.getNodesOfClass("valueline");
            for(var i = 0; i < valueLines.length; i++){
                valueLines[i].render();
            }
        ]]>
        </method>

   <method name="renderValuePoint">
        <![CDATA[
            var valuePoints = this.getNodesOfClass("valuepoints");
            for(var i = 0; i < valuePoints.length; i++){
                valuePoints[i].render();
            }
        ]]>
        </method>

        <!--- Render the value regions defined in the chart 
        @keyword private -->
        <method name="renderValueRegion">
        <![CDATA[
            var valueRegions = this.getNodesOfClass("valueregion");
            for(var i = 0; i < valueRegions.length; i++){
                valueRegions[i].sendBehind();
                valueRegions[i].style = this.style.valueregionstyle;
                valueRegions[i].render();
            }
        ]]>
        </method>

        <!--- Adjust the plot area to the dimensions of the chart and the 
              axes. This method overrides chart.adjustPlotAreaToLayout() 
              @keyword private -->
        <method name="adjustPlotAreaToLayout">
        <![CDATA[
            if( this.plotarea != null ) {
                this.plotarea.setAttribute( "width", haxis.width );
                this.plotarea.setAttribute( "height", vaxis.height );

                this.plotarea.setAttribute( "x", (vaxis.x + vaxis.width) );
                this.plotarea.setAttribute( "y", vaxis.y );
            }
        ]]>
        </method>
        <!--- @keyword private -->
        <method name="adjustAxesToLayout">
        <![CDATA[
            var overHeight = 0;
            var overWidth = 0;

            vaxis.clear();
            overHeight = getAxisOverDimension("horizontal");
            if( (vaxis.height + overHeight + this.topMargin + this.bottomMargin) > this.height ) {
                vaxis.setAttribute( "height", (this.height - 
                                               (overHeight + this.topMargin + this.bottomMargin) ) );
            }

            haxis.clear();
            haxis.setRightMargin();
            overWidth = getAxisOverDimension("vertical");
            if( (haxis.width + overWidth + this.leftMargin + this.rightMargin) > this.width ) {
                haxis.setAttribute( "width", (this.width - 
                                              (overWidth + this.leftMargin + this.rightMargin) ) );
            }

            vaxis.setX( overWidth + this.leftMargin );
            vaxis.setY( this.topMargin );
            vaxis.render();

            haxis.setX( overWidth + this.leftMargin );
            haxis.setY( (vaxis.y + vaxis.height) );
            haxis.render();
        ]]>

        </method>
        
        <!--- @keyword private -->
        <method name="getAxisOverDimension" args="axis">
        <![CDATA[
            if( axis == "horizontal" ) {
                // Tests horizontal axis with axis title below the axis line.
                if( haxis != null ) {

                    if( haxis.columnName == 'x' && haxis.titleLocation == "low" ) 
                        return (haxis.height + haxis.tickMarksView.height + 
                                        2*this.verticalGap + haxis.titleView.height);
                    else 
                        return (haxis.height + haxis.tickMarksView.height + this.verticalGap);
                }
            }
            else if( axis == "vertical" ) {
                // Tests vertical axis with axis title at the left of the axis line.
                if( vaxis != null ) {

                    if( vaxis.columnName == 'y' && vaxis.titleLocation == "low" ) 
                        return (vaxis.width + vaxis.tickMarksView.width + 
                                        2*this.horizontalGap + vaxis.titleView.width);
                    else 
                        return (vaxis.width + vaxis.tickMarksView.width + this.horizontalGap);
                }
            }

            return 0;
        ]]>
        </method>

        <!--- @keywords private
         rerender a chart when new data come in -->
        <method name="dataload">
            this["haxis"] = this.getNodeOfClass("horizontalaxis");
            this["vaxis"] = this.getNodeOfClass("verticalaxis");

            this.dataSeriesLeaf = this.getDataSeries().getDataSeriesLeafs();

            this.calcDefaultMinMax();
            this.minx = this.defaultminx;
            this.maxx = this.defaultmaxx;
            this.miny = this.defaultminy;
            this.maxy = this.defaultmaxy;

            this.adjustOptimizeMinMax();
            super.dataload();            
        </method>
        <!--- @keyword private -->
        <method name="adjustOptimizeMinMax">
            if( haxis.type.toUpperCase() == 'LINEAR' ) {
                haxis.setAutomaticMinMaxRender( this.minx, this.maxx );
                this.setAttribute("minx", haxis.minimumRender);
                this.setAttribute("maxx", haxis.maximumRender);
            }

            if( vaxis.type.toUpperCase() == 'LINEAR' ) {
                vaxis.setAutomaticMinMaxRender( this.miny, this.maxy );                        
                this.setAttribute("miny", vaxis.minimumRender);
                this.setAttribute("maxy", vaxis.maximumRender);
            }
        </method>

        <!--- Set the min and max to show all data 
        @keyword private -->
        <method name="calcDefaultMinMax">
        <![CDATA[
           // Set the minx and maxx values based on the data series.
           if( haxis.type.toUpperCase() == 'LINEAR' ) {
                this.buildLinearMinMax( haxis, 'x' );
            } else if( haxis.type.toUpperCase() == 'CATEGORICAL' ) {
                this.buildCategoricalMinMax( haxis, 'x' );
            }

           // Set the miny and maxy values based on the data series.
            if( vaxis.type.toUpperCase() == 'LINEAR' ) {
                this.buildLinearMinMax( vaxis, 'y' );
            } else if( vaxis.type.toUpperCase() == 'CATEGORICAL' ) {
                this.buildCategoricalMinMax( vaxis, 'y' );
            }
        ]]>
        </method>
        <!--- @keyword private -->
        <method name="buildLinearMinMax" args="pAxis, pOrientation"> 
        <![CDATA[
            var i = 0;
            var column = null;
            var singledataseriesmin = [];
            var singledataseriesmax = [];

            for (i = 0; i < this.dataSeriesLeaf.length; i++) {
                //Get the a single data series from the array
                column = this.dataSeriesLeaf[i].getDataColumn(pAxis.columnName);

                //Get the mininum value of the single data series
                singledataseriesmin.push(column.getMin());

                //Get the maximum value of the single data series
                singledataseriesmax.push(column.getMax());
            }

            //Set the minimum and maximum values for this axis.
            if( pOrientation.toLowerCase() == 'x' ) {
                this.defaultminx =  findMin(singledataseriesmin);
                this.defaultmaxx =  findMax(singledataseriesmax);
            } if( pOrientation.toLowerCase() == 'y' ) {
                this.defaultminy =  findMin(singledataseriesmin);
                this.defaultmaxy =  findMax(singledataseriesmax);
            }
        ]]>
        </method>
        <!--- @keyword private -->
        <method name="buildCategoricalMinMax" args="pAxis, pOrientation"> 
        //Categorical Axis - When the axis type is categorical, the axis class only expects one data serie
        //The Axis minimun value is 0 and maximum value is the # of Categories -1 for the data serie.
            pAxis.categoricalArray = this.dataSeriesLeaf[0].getDataColumn(pAxis.columnName).values;

            //Set the minimum and maximum values for this axis.
            if( pOrientation.toLowerCase() == 'x' ) {
                this.defaultminx = 0;
                this.defaultmaxx = pAxis.categoricalArray.length - 1;
            } if( pOrientation.toLowerCase() == 'y' ) {
                this.defaultminy = 0;
                this.defaultmaxy = pAxis.categoricalArray.length - 1;
            }
        </method>

        <!--- Allows to customize the minimum and maxium data value.
              @param Number pMinX: the new minimum value in 'x' of the chart.
              @param Number pMaxX: the new maximum value in 'x' of the chart.
              @param Number pMinY: the new minimum value in 'y' of the chart.
              @param Number pMaxY: the new maximum value in 'y' of the chart.
          -->
        <method name="customizeMinMax" args="pMinX, pMaxX, pMinY, pMaxY">
            this.minx = pMinX;
            this.maxx = pMaxX;
            this.miny = pMinY;
            this.maxy = pMaxY;
        </method>

        <!--- @keyword private -->
        <method name="findMin" args="arr">
        <![CDATA[
            var min;
            if(arr.length > 0) {
                min = arr[0];
            }
            for(var i = 1; i < arr.length; i++) {
                if(arr[i] < min) {
                    min = arr[i];
                }                                
            }
            return min;         
        ]]>
        </method>
        
        <!--- @keyword private -->
        <method name="findMax" args="arr">
        <![CDATA[
            var max;
            if(arr.length > 0) {
                max = arr[0];
            }
            for(var i = 1; i < arr.length; i++) {
                if(max < arr[i]) {
                    max = arr[i];
                }                                
            }
            return max;
        ]]> 
        </method>
        
        <!--- @keyword private -->                        
        <chartactionhelper name="actionhelper" chart="${parent}"/>
        <!--- change the virtual boundary of the rectangular chart 
            @param Number newminx: the new min x of the boundary
            @param Number newminy: the new min y of the boundary
            @param Number newmaxx: the new max x of the boundary
            @param Number newmaxy: the new max y of the boundary
            @param Number animated: the animation duration in milliseconds. 0 for no animation
            @param Number undoable: deterimine if the action can be undo
        -->
        <method name="changeBound" args="newminx, newminy, newmaxx, newmaxy,  animated, undoable">
            actionhelper.changeBound(newminx, newminy, newmaxx, newmaxy,  animated, undoable);
        </method>
        <!--- undo the last chart zoom interaction to the one previous -->
        <method name="undo" args="duration">
            actionhelper.undo(duration);
        </method>
        <method event="onRenderStart">
        </method>
        <method event="onRenderStop">
        </method>

    </class>
    
    <!--- @keyword private 
        class that help with the zoom animation and undo ability
    -->
    <class name="chartactionhelper">
        <attribute name="chart" type="expression"/>
        <attribute name="actionlist" value="[]"/>    
        <attribute name="animateProgress" value="0" type="number"/>
        
        <animator name="animatezoom" attribute="animateProgress" from="0" to="1" start="false" duration="500">
            <method event="onstart">
                parent.setAttribute("isdrawing", true);
            </method>
            <method event="onstop">
                parent.setAttribute("isdrawing", false);
            </method>
        </animator>
        
        <method name="changeBound" args="newminx, newminy, newmaxx, newmaxy,  duration, undoable">
        <![CDATA[
        
            //Debug.write("changeBound(" + newminx + ", " + newminy + ", " +  newmaxx + ", " + newmaxy + ")");
            if(duration == null)
            {
                duration = 0;
            }
            
            if(undoable == null)
            {
                undoable = false;
            }
            
            chart.onRenderStart.sendEvent();  
            if(undoable)
            {
               
                this.actionlist.push(
                    {
                        minx : chart.minx,
                        miny : chart.miny,
                        maxx : chart.maxx,
                        maxy : chart.maxy
                    }
                );
            } 
                               
            if(duration > 0)
            {
                this["origminx"] = new Number(chart.minx);
                this["origminy"] = new Number(chart.miny);
                this["origmaxx"] = new Number(chart.maxx);
                this["origmaxy"] = new Number(chart.maxy);
                
                this["newminx"] = new Number(newminx);
                this["newminy"] = new Number(newminy);
                this["newmaxx"] = new Number(newmaxx);
                this["newmaxy"] = new Number(newmaxy);
                this.animateProgress = 0;
                this.animate("animateProgress", 1, duration, false);                                          
            }
            else
            {                  
                /*       
                chart.minx = newminx;                
                chart.miny = newminy;
                chart.maxx = newmaxx;
                chart.maxx = newmaxy;
                */
                this.chart.setAttribute("minx", newminx);
                this.chart.setAttribute("miny", newminy);
                this.chart.setAttribute("maxx", newmaxx);
                this.chart.setAttribute("maxy", newmaxy);                
                
                this.chart.render();                
                chart.onRenderStop.sendEvent();
            }
        ]]>
        </method>
                        
        <method name="undo" args="duration">
            var action = actionlist.pop();
            if(action)
            {
               this.changeBound(action.minx, action.miny, action.maxx, action.maxy, duration, false);
            }
        </method>
        
        <method event="onanimateProgress">
        <![CDATA[        
            //Debug.write("AnimateStep: " + chart.minx + " " + chart.miny + " " + chart.maxx + " "  + chart.maxy);

            chart.setAttribute("minx", this.origminx + (this.newminx - this.origminx) * this.animateProgress);
            chart.setAttribute("miny", this.origminy + (this.newminy - this.origminy) * this.animateProgress);
            chart.setAttribute("maxx", this.origmaxx + (this.newmaxx - this.origmaxx) * this.animateProgress);
            chart.setAttribute("maxy", this.origmaxy + (this.newmaxy - this.origmaxy) * this.animateProgress);

            
            if(this.animateProgress < 1)
            {
                chart.render();
            }
            else
            {
                //chart.adjustOptimizeMinMax();
                chart.render();
                chart.onRenderStop.sendEvent();             
            }
        ]]>
        </method>                 
    </class>
</library>

<!-- * X_LZ_COPYRIGHT_BEGIN 
***************************************************
* Copyright 2001-2005 Laszlo Systems, Inc.  All Rights Reserved.              
* Use is subject to license terms.                                            
* X_LZ_COPYRIGHT_END 
****************************************************** -->
<!-- @LZX_VERSION@                                                       
   -->
