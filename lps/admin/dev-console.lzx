<!--=======================================================================-->
<!--                                                                       -->
<!-- dev-console.lzx                                                       -->
<!--                                                                       -->
<!-- dev console SOLO app                                                  -->
<!--                                                                       -->
<!--=======================================================================-->


<canvas width="100%"  height="370" proxied="false" bgcolor="#858599">
 <!-- Make sure there is a copyright in the Javascript 'binary' -->
 <attribute name="copyright" type="string"
            value="Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.  Use is subject to license terms." />
 <switch>
    <when runtime="dhtml">
    </when>
    <otherwise>
        <debug options="ignorelayout"
            fontsize="12" 
            x="800"
            y="0"
            width="600"
            height="80"/>
    </otherwise>
  </switch>
  <!-- flashvar named 'appinfo' will be supplied, it is XML data -->
  <script> 
    function escapeXML (str) {
    return ((new XML()).createTextNode(str)).toString();
    }
  </script>




  <!-- info we get is of the form 
  <appdata>
    <request opt-exists="false" 
             windows="true" 
             pocketpc="false" 
             query_args="&amp;debug=true&amp;lzr=swf7" 
             unopt-url="animation.lzx" 
             opt-url="animation.lzo" 
             fullpath="/lps-dev/examples/animation/animation.lzx" 
             url="animation.lzx" 
             opt-exists="true"
             appuid="2222222"
             console-remote-debug="true"
             lps="/lps-dev">
    <param value="true" name="debug"/>
    <param value="swf7" name="lzr"/>
   </request>
   <info runtime="swf7" 
         nondebug-up-to-date="false" 
         nondebug-exists="true" 
         debug-up-to-date="true" 
         debug-exists="true" 
         encoding="" 
         debug="true" gz-size="0" size="256968"/>
</appdata>

  -->


    <dataset name="appdata"/>
    <script>
      <![CDATA[
       appdata.setAttribute('initialdata', global.appinfo);

       var app_runtime = appdata.getPointer().xpathQuery("/info/@runtime");
       if (app_runtime == null) {
         app_runtime = appdata.getPointer().xpathQuery("/request/param[@name = 'lzr']/@value");
       }
       var app_debug = appdata.getPointer().xpathQuery("/request/param[@name = 'debug']/@value");
       var app_backtrace = appdata.getPointer().xpathQuery("/request/param[@name = 'lzbacktrace']/@value");
       if (app_debug == 'y') app_debug = 'true';
       var app_console_debug = 
              appdata.getPointer().xpathQuery("/request/@console-remote-debug") == 'true';
       var app_floating_window = 
              appdata.getPointer().xpathQuery("/request/@console-floating-window") == 'true';
       var app_fullpath = appdata.getPointer().xpathQuery("/request/@fullpath");
       var app_query = appdata.getPointer().xpathQuery("/request/@query_args");
       var app_opt_url = appdata.getPointer().xpathQuery("/request/@opt-url");
       var app_unopt_url = appdata.getPointer().xpathQuery("/request/@unopt-url");
       var app_url = appdata.getPointer().xpathQuery("/request/@url");
       var app_opt_exists = appdata.getPointer().xpathQuery("/request/@opt-exists")
       var app_lps_root = appdata.getPointer().xpathQuery("/request/@lps")
       var app_lzt = null;
       var app_uid = (typeof(global.lzappuid) != 'undefined') ? global.lzappuid : '';
       app_uid = "XXX";

       ]]>
    </script>

  <method name="deploySOLO">
    <![CDATA[
     var path = escape(app_fullpath.substring(app_lps_root.length));
     if (app_runtime == 'dhtml') {
        var url = app_lps_root + "/lps/admin/solo-dhtml-deploy.jsp?appurl="+path;
     } else {
        var url = app_lps_root + "/lps/admin/solo-deploy.jsp?appurl="+path+"&runtime="+app_runtime;
     }

     this.loadURL(url, '_blank');
     ]]>
  </method>


   <method name="debugApp">
     cb_debug.setValue(true); 
     canvas.reloadApp();
   </method>

   <method name="viewSource">
     app_lzt = 'source';
     canvas.reloadApp();
   </method>

   <method name="viewWrapper">
     app_lzt = 'deployment';
     canvas.reloadApp();
   </method>

   <method name="viewDocs">
     var url = app_lps_root + "/index.html";
     this.loadURL(url);
   </method>
   
   <method name="viewDev">
     var url = "http://www.openlaszlo.org/community";
     this.loadURL(url);
   </method>
   
   <method name="viewForums">
     var url = "http://forum.openlaszlo.org/";
     this.loadURL(url);
   </method>

   <method name="loadURL" args="url, target='_top'">
     lz.Browser.loadURL(url, target);
   </method>
   
  <resource name="footer_logo" src="../assets/logo_laszlo_footer.gif"/>

  <view name="main" width="${parent.width}">
      <view name="logo" resource="footer_logo" bgcolor="0x4c4c4c" height="${app_console_debug ? 370 : 71}"/>
      <view name="controls" x="70">
        <view name="firstrow" y="4">
            <text fontsize="11" x="8" y="7"><b>Compile Options:</b></text>
            <view x="125" width="${parent.compilecontrols.width + 5}" height="32" bgcolor="black">
                <view x="1" y="1" width="${parent.width - 2}" height="30" bgcolor="#7a7a8c"/>
            </view>
            <view x="125" name="compilecontrols">
              <radiogroup id="rg_runtime" layout="class: simplelayout; axis: x; spacing:12" x="10" y="9">
                    <radiobutton id="rb8" value="'swf8'"
                                 selected="${app_runtime == 'swf8'}">swf8</radiobutton >
                    <radiobutton id="rbdhtml" value="'dhtml'"
                                 selected="${app_runtime == 'dhtml'}">DHTML</radiobutton >

                    <radiobutton id="rb9" value="'swf9'" 
                                 selected="${app_runtime == 'swf9'}">swf9</radiobutton >

                    <radiobutton id="rb10" value="'swf10'" 
                                 enabled="true"
                                 selected="${app_runtime == 'swf10'}">swf10</radiobutton >


                </radiogroup>
                <view x="$once{rg_runtime.x + rg_runtime.width + 14}">
                    <view height="14" width="1" bgcolor="black" y="9" />
                    <checkbox id="cb_debug" value="${app_debug == 'true'}"
                            x="16" y="8">Debug</checkbox>
                    <checkbox id="cb_backtrace" 
                            value="${app_backtrace == 'true'}" x="82" y="8">Backtrace</checkbox>
                    <button onclick="canvas.gotoApp()" x="168" y="3">Compile</button>
                    <handler name="onvalue" reference="cb_backtrace">
                    if (cb_backtrace.value) {
                        cb_debug.setAttribute('value', true);
                    }
                    </handler>
                    <handler name="onvalue" reference="cb_debug">
                    if (cb_debug.value == false) {
                        cb_backtrace.setAttribute('value', false);
                    }
                    </handler>
                </view>
            </view>
            <view x="${parent.compilecontrols.width + parent.compilecontrols.x + 32}">
                <button onclick="canvas.viewSource()" y="3">View Source</button>
            </view>
        </view>

        <view bgcolor="black" width="${canvas.width - 70}" height="1" y="39"/>
          
        <view width="${parent.firstrow.width}" y="43">
          <text fontsize="11" x="8" y="4"><b>Deploy:</b></text>
          <button x="65" onclick="canvas.viewWrapper()">Server</button>
          <button x="134" onclick="canvas.deploySOLO()">SOLO</button>

          <view fgcolor="0x15159b" y="3" options="ignorelayout" align="right" layout="axis: x; spacing: 3">
            <text onclick="canvas.viewDocs()"><u>Documentation</u></text>
            <text onclick="canvas.viewDev()"><u>Developer Community</u></text>
            <text onclick="canvas.viewForums()"><u>Developer Forums</u></text>
          </view>
          
        </view>

          <!--
            <view datapath="appdata:/" >
            <simplelayout/>
            <text resize='true'  datapath="request/@url"/>
            <text resize='true'  datapath="request/@fullpath"/>
            <text resize='true'  datapath="info/@runtime"/>
            </view>

          <view name="blank2" width="200"/>

          -->

          <checkbox y="10" x="800" id="cb_remotedebug" visible="${app_runtime != 'dhtml'}" value="${app_console_debug}">Console Remote Debug</checkbox>


          <!-- <checkbox id="cb_popup" value="${app_floating_window}">in separate window</checkbox> -->




 <switch>
    <when runtime="dhtml">
    </when>
    <otherwise>
        <state name="consoledebugstate" applied="${app_console_debug}">
            <view y="90" layout="axis:x;spacing:4">

            <!-- enter expression to be sent to app under debug -->

            <text resize="true" text="${'Evaluate in '+app_url}"/>
            <edittext  doesenter="true" id="expr2" width="300">
                <method name="doEnterDown">
                canvas.remoteEval(expr2.getText());
                </method>
            </edittext>
            <button enabled="false" bgcolor="white" id="app_eval_btn"
                    onclick="canvas.remoteEval(expr2.getText())">Eval</button>
            <button onclick="app_eval_btn.setAttribute('enabled', true);
                            canvas.sendConsoleAlive()">Connect To App</button>
            </view>

            <window title="console" id="console"
                    width="1000"  y="120" height="200" resizable="true">
            <method name="write" args="objects">
                <![CDATA[
                var n = arguments.length
                // Pass each value to __write individually so they can be
                // 'presented' as objects if applicable
                for (var i = 0; i < n; i++) {
                var v = arguments[i];
                var s = ((i == (n-1)) ? '\n' : ' ');
                this.content.addText(escapeXML(v)+s);
                sbar.page(sbar.scrollmax);
                }
                ]]>
            </method>

            <method name="writeRaw" args="str">
                <![CDATA[
                // Funky thing that Henry discovered you have to do to make newlines
                // why wouldn't <br/> work?
                this.content.addText(str.split('\n').join('&#32;\n'));
                sbar.page(sbar.scrollmax);
                ]]>
            </method>
            <text name="content" multiline='true' resize="true" selectable="true"
                    width="${parent.width}" />
            <scrollbar name="sbar" id="sb"/>
            </window>
        </state>
    </otherwise>
  </switch>

      </view>
  </view>


  <method name="gotoApp">              
    // reload the page with the .lzx path
    var p = app_fullpath.substring(0,app_fullpath.length -4)+".lzx";
    app_fullpath = p;
    this.reloadApp();
  </method>
  
  <method name="reloadApp" args="source">
    <![CDATA[
    var qruntime = rg_runtime.value;
    var qdebug = cb_debug.value;
    var qbacktrace = cb_backtrace.value;
    var consoledebug = cb_remotedebug.value;
    
    // parse original app query string, override with user settings
    // for debug, runtime, etc
    var params = new LzParam(this);
    
    var qitems = LzParam.parseQueryString(app_query);
    // override debug,runtime args
    qitems['debug'] = qdebug;
    qitems['lzbacktrace'] = qbacktrace;
    qitems['lzr'] = qruntime;

    /*
    // code to instruct server to pop up debug console in own window (doesn't work in Firefox)
    if (cb_popup.value) {
       qitems['lzconsolewindow'] = true;
    }
    */

    // and lzconsoledebug = true
    if (consoledebug) {
        qitems['lzconsoledebug'] = true;
        qitems['debug'] = true;
    } else {
        delete qitems.lzconsoledebug;
        delete qitems.remotedebug;
    }

    // can be {swf,source,deployment}
    if (app_lzt != null) {
        qitems['lzt'] = app_lzt;
    }

    if (qitems.debug + '' == 'false') {
        delete qitems['debug'];
    } else {
        qitems.debug = 'true';
    }

    if (qitems.lzbacktrace + '' == 'false') {
        delete qitems['lzbacktrace'];
    } else {
        qitems.lzbacktrace = 'true';
    }

    //Debug.write( 'qitems', qitems);
    // Copy values to LzParam object
    var seen = {};
    for ( var key in qitems) {
        // work aorund bugs in Safari
        if (key == '') continue;
        if (key.indexOf('#38;') != -1) {
            var i = key.indexOf('#38;');
            key = key.substring(i + 4, key.length);
        }
        if (seen[key]) continue;
        //alert('params ' + key + ' ' + qitems[key]);
        params.setValue(key, qitems[key]);
        seen[key] = true;
    }

    //alert('params ' + params.toString());

    var url = app_fullpath+"?"+params.serialize();

    //Debug.write('this.loadURL("'+url+'")');
    this.loadURL(url);

    ]]>
  </method>

  <method name="displayObjectByID" args="uid">
    <![CDATA[
    // Not very abstract, but it works for now
    receivingLC.send("lc_appdebug"+app_uid, "displayObj", uid);
    ]]>
  </method>


  <method name="showLogMessage" args="msg">
      <![CDATA[
      console.writeRaw(escapeXML(msg)+"<br>");
      ]]>
  </method>


  <method name="showWarning" args="filename,lineNumber,msg">
      <![CDATA[
       console.writeRaw(msg);
       ]]>
  </method>

  <method name="sendConsoleAlive">
    <![CDATA[                
      receivingLC.send("lc_appdebug"+app_uid, "consoleAlive", true);
    ]]>
  </method>

  <method name="remoteEval" args="expr">
    <![CDATA[
    receivingLC.send("lc_appdebug"+app_uid, "evalExpr", expr);
    ]]>
  </method>


  <script>
    <![CDATA[
    if ($dhtml) {
        canvas.width = document.body.clientWidth;
    } else {
    var receivingLC = new LocalConnection();
    // receives remote app debug message
    receivingLC.debugResult = function(msg, oid) 
    { 
        if (oid != null) {
            console.writeRaw('<a href="asfunction:_root.canvas.displayObjectByID,' + oid + '"><font color="#0000FF">' + msg +"</font></a>");
        } else {
            console.writeRaw(msg);
        }
    }

    // display warnings
    receivingLC.debugWarning = canvas.showWarning;
    
    console.write("listening on lc_consoledebug "+app_uid);
    receivingLC.connect("lc_consoledebug"+app_uid);

    var sendingLC = new LocalConnection();

    // sequence numbers for eval requests
    canvas.evalseqnum = 0;
    }
    
    ]]>
  </script>


</canvas>
<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2001-2009 Laszlo Systems, Inc.  All Rights Reserved.              *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
